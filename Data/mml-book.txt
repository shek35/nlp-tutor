Foreword
Machine learning is the latest in a long line of attempts to distill human
knowledge and reasoning into a form that is suitable for constructing ma-
chines and engineering automated systems. As machine learning becomes
more ubiquitous and its software packages become easier to use, it is nat-
ural and desirable that the low-level technical details are abstracted away
and hidden from the practitioner. However, this brings with it the danger
that a practitioner becomes unaware of the design decisions and, hence,
the limits of machine learning algorithms.
The enthusiastic practitioner who is interested to learn more about the
magic behind successful machine learning algorithms currently faces a
daunting set of pre-requisite knowledge:
Programming languages and data analysis tools
Large-scale computation and the associated frameworks
Mathematics and statistics and how machine learning builds on it
At universities, introductory courses on machine learning tend to spend
early parts of the course covering some of these pre-requisites. For histori-
cal reasons, courses in machine learning tend to be taught in the computer
science department, where students are often trained in the first two areas
of knowledge, but not so much in mathematics and statistics.
Current machine learning textbooks primarily focus on machine learn-
ing algorithms and methodologies and assume that the reader is com-
petent in mathematics and statistics. Therefore, these books only spend
one or two chapters on background mathematics, either at the beginning
of the book or as appendices. We have found many people who want to
delve into the foundations of basic machine learning methods who strug-
gle with the mathematical knowledge required to read a machine learning
textbook. Having taught undergraduate and graduate courses at universi-
ties, we find that the gap between high school mathematics and the math-
ematics level required to read a standard machine learning textbook is too
big for many people.
This book brings the mathematical foundations of basic machine learn-
ing concepts to the fore and collects the information in a single place so
that this skills gap is narrowed or even closed.
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

Foreword
Why Another Book on Machine Learning?
Machine learning builds upon the language of mathematics to express
concepts that seem intuitively obvious but that are surprisingly difficult
to formalize. Once formalized properly, we can gain insights into the task
we want to solve. One common complaint of students of mathematics
around the globe is that the topics covered seem to have little relevance
to practical problems. We believe that machine learning is an obvious and
direct motivation for people to learn mathematics.
This book is intended to be a guidebook to the vast mathematical lit-
erature that forms the foundations of modern machine learning. We mo-
“Math is linked in
the popular mind
with phobia and
anxiety. You’d think
we’re discussing
spiders.” (Strogatz,
, page )
tivate the need for mathematical concepts by directly pointing out their
usefulness in the context of fundamental machine learning problems. In
the interest of keeping the book short, many details and more advanced
concepts have been left out. Equipped with the basic concepts presented
here, and how they fit into the larger context of machine learning, the
reader can find numerous resources for further study, which we provide at
the end of the respective chapters. For readers with a mathematical back-
ground, this book provides a brief but precisely stated glimpse of machine
learning. In contrast to other books that focus on methods and models
of machine learning (MacKay, ; Bishop, ; Alpaydin, ; Bar-
ber, ; Murphy, ; Shalev-Shwartz and Ben-David, ; Rogers
and Girolami, ) or programmatic aspects of machine learning (M¨uller
and Guido, ; Raschka and Mirjalili, ; Chollet and Allaire, ),
we provide only four representative examples of machine learning algo-
rithms. Instead, we focus on the mathematical concepts behind the models
themselves. We hope that readers will be able to gain a deeper understand-
ing of the basic questions in machine learning and connect practical ques-
tions arising from the use of machine learning with fundamental choices
in the mathematical model.
We do not aim to write a classical machine learning book. Instead, our
intention is to provide the mathematical background, applied to four cen-
tral machine learning problems, to make it easier to read other machine
learning textbooks.
Who Is the Target Audience?
As applications of machine learning become widespread in society, we
believe that everybody should have some understanding of its underlying
principles. This book is written in an academic mathematical style, which
enables us to be precise about the concepts behind machine learning. We
encourage readers unfamiliar with this seemingly terse style to persevere
and to keep the goals of each topic in mind. We sprinkle comments and
remarks throughout the text, in the hope that it provides useful guidance
with respect to the big picture.
The book assumes the reader to have mathematical knowledge commonly
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Foreword
covered in high school mathematics and physics. For example, the reader
should have seen derivatives and integrals before, and geometric vectors
in two or three dimensions. Starting from there, we generalize these con-
cepts. Therefore, the target audience of the book includes undergraduate
university students, evening learners and learners participating in online
machine learning courses.
In analogy to music, there are three types of interaction that people
have with machine learning:
Astute Listener
The democratization of machine learning by the pro-
vision of open-source software, online tutorials and cloud-based tools al-
lows users to not worry about the specifics of pipelines. Users can focus on
extracting insights from data using off-the-shelf tools. This enables non-
tech-savvy domain experts to benefit from machine learning. This is sim-
ilar to listening to music; the user is able to choose and discern between
different types of machine learning, and benefits from it. More experi-
enced users are like music critics, asking important questions about the
application of machine learning in society such as ethics, fairness, and pri-
vacy of the individual. We hope that this book provides a foundation for
thinking about the certification and risk management of machine learning
systems, and allows them to use their domain expertise to build better
machine learning systems.
Experienced Artist
Skilled practitioners of machine learning can plug
and play different tools and libraries into an analysis pipeline. The stereo-
typical practitioner would be a data scientist or engineer who understands
machine learning interfaces and their use cases, and is able to perform
wonderful feats of prediction from data. This is similar to a virtuoso play-
ing music, where highly skilled practitioners can bring existing instru-
ments to life and bring enjoyment to their audience. Using the mathe-
matics presented here as a primer, practitioners would be able to under-
stand the benefits and limits of their favorite method, and to extend and
generalize existing machine learning algorithms. We hope that this book
provides the impetus for more rigorous and principled development of
machine learning methods.
Fledgling Composer
As machine learning is applied to new domains,
developers of machine learning need to develop new methods and extend
existing algorithms. They are often researchers who need to understand
the mathematical basis of machine learning and uncover relationships be-
tween different tasks. This is similar to composers of music who, within
the rules and structure of musical theory, create new and amazing pieces.
We hope this book provides a high-level overview of other technical books
for people who want to become composers of machine learning. There is
a great need in society for new researchers who are able to propose and
explore novel approaches for attacking the many challenges of learning
from data.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Foreword
Acknowledgments
We are grateful to many people who looked at early drafts of the book
and suffered through painful expositions of concepts. We tried to imple-
ment their ideas that we did not vehemently disagree with. We would
like to especially acknowledge Christfried Webers for his careful reading
of many parts of the book, and his detailed suggestions on structure and
presentation. Many friends and colleagues have also been kind enough
to provide their time and energy on different versions of each chapter.
We have been lucky to benefit from the generosity of the online commu-
nity, who have suggested improvements via https://github.com, which
greatly improved the book.
The following people have found bugs, proposed clarifications and sug-
gested relevant literature, either via https://github.com or personal
communication. Their names are sorted alphabetically.
Abdul-Ganiy Usman
Adam Gaier
Adele Jackson
Aditya Menon
Alasdair Tran
Aleksandar Krnjaic
Alexander Makrigiorgos
Alfredo Canziani
Ali Shafti
Amr Khalifa
Andrew Tanggara
Angus Gruen
Antal A. Buss
Antoine Toisoul Le Cann
Areg Sarvazyan
Artem Artemev
Artyom Stepanov
Bill Kromydas
Bob Williamson
Boon Ping Lim
Chao Qu
Cheng Li
Chris Sherlock
Christopher Gray
Daniel McNamara
Daniel Wood
Darren Siegel
David Johnston
Dawei Chen
Ellen Broad
Fengkuangtian Zhu
Fiona Condon
Georgios Theodorou
He Xin
Irene Raissa Kameni
Jakub Nabaglo
James Hensman
Jamie Liu
Jean Kaddour
Jean-Paul Ebejer
Jerry Qiang
Jitesh Sindhare
John Lloyd
Jonas Ngnawe
Jon Martin
Justin Hsi
Kai Arulkumaran
Kamil Dreczkowski
Lily Wang
Lionel Tondji Ngoupeyou
Lydia Kn¨ufing
Mahmoud Aslan
Mark Hartenstein
Mark van der Wilk
Markus Hegland
Martin Hewing
Matthew Alger
Matthew Lee
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Foreword
Maximus McCann
Mengyan Zhang
Michael Bennett
Michael Pedersen
Minjeong Shin
Mohammad Malekzadeh
Naveen Kumar
Nico Montali
Oscar Armas
Patrick Henriksen
Patrick Wieschollek
Pattarawat Chormai
Paul Kelly
Petros Christodoulou
Piotr Januszewski
Pranav Subramani
Quyu Kong
Ragib Zaman
Rui Zhang
Ryan-Rhys Griffiths
Salomon Kabongo
Samuel Ogunmola
Sandeep Mavadia
Sarvesh Nikumbh
Sebastian Raschka
Senanayak Sesh Kumar Karri
Seung-Heon Baek
Shahbaz Chaudhary
Shakir Mohamed
Shawn Berry
Sheikh Abdul Raheem Ali
Sheng Xue
Sridhar Thiagarajan
Syed Nouman Hasany
Szymon Brych
Thomas B¨uhler
Timur Sharapov
Tom Melamed
Vincent Adam
Vincent Dutordoir
Vu Minh
Wasim Aftab
Wen Zhi
Wojciech Stokowiec
Xiaonan Chong
Xiaowei Zhang
Yazhou Hao
Yicheng Luo
Young Lee
Yu Lu
Yun Cheng
Yuxiao Huang
Zac Cranko
Zijian Cao
Zoe Nolan
Contributors through GitHub, whose real names were not listed on their
GitHub profile, are:
insad
HorizonP
cs-maillist
kudo
empet
victorBigand
SKYE
jessjing
SamDataMad
bumptiousmonkey
idoamihai
deepakiim
We are also very grateful to Parameswaran Raman and the many anony-
mous reviewers, organized by Cambridge University Press, who read one
or more chapters of earlier versions of the manuscript, and provided con-
structive criticism that led to considerable improvements. A special men-
tion goes to Dinesh Singh Negi, our LATEX support, for detailed and prompt
advice about LATEX-related issues. Last but not least, we are very grateful
to our editor Lauren Cowles, who has been patiently guiding us through
the gestation process of this book.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Foreword
Table of Symbols
Symbol
Typical meaning
a, b, c, α, β, γ
Scalars are lowercase
x, y, z
Vectors are bold lowercase
A, B, C
Matrices are bold uppercase
x⊤, A⊤
Transpose of a vector or matrix
A−
Inverse of a matrix
⟨x, y⟩
Inner product of x and y
x⊤y
Dot product of x and y
B = (b, b, b)
(Ordered) tuple
B = [b, b, b]
Matrix of column vectors stacked horizontally
B = {b, b, b}
Set of vectors (unordered)
Z, N
Integers and natural numbers, respectively
R, C
Real and complex numbers, respectively
Rn
n-dimensional vector space of real numbers
∀x
Universal quantifier: for all x
∃x
Existential quantifier: there exists x
a := b
a is defined as b
a =: b
b is defined as a
a ∝ b
a is proportional to b, i.e., a = constant  b
g ◦ f
Function composition: “g after f”
If and only if
Implies
A, C
Sets
a ∈ A
a is an element of set A
Empty set
A\B
A without B: the set of elements in A but not in B
Number of dimensions; indexed by d = , . . . , D
Number of data points; indexed by n = , . . . , N
Im
Identity matrix of size m × m
m,n
Matrix of zeros of size m × n
m,n
Matrix of ones of size m × n
ei
Standard/canonical vector (where i is the component that is )
dim
Dimensionality of vector space
rk(A)
Rank of matrix A
Im(Φ)
Image of linear mapping Φ
ker(Φ)
Kernel (null space) of a linear mapping Φ
span[b]
Span (generating set) of b
tr(A)
Trace of A
det(A)
Determinant of A
|  |
Absolute value or determinant (depending on context)
Norm; Euclidean, unless specified
Eigenvalue or Lagrange multiplier
Eλ
Eigenspace corresponding to eigenvalue λ
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Foreword
Symbol
Typical meaning
x ⊥ y
Vectors x and y are orthogonal
Vector space
V ⊥
Orthogonal complement of vector space V
PN
n= xn
Sum of the xn: x + . . . + xN
QN
n= xn
Product of the xn: x  . . .  xN
Parameter vector
∂f
∂x
Partial derivative of f with respect to x
df
dx
Total derivative of f with respect to x
Gradient
f∗ = minx f(x)
The smallest function value of f
x∗ ∈ arg minx f(x)
The value x∗ that minimizes f (note: arg min returns a set of values)
Lagrangian
Negative log-likelihood
 n
Binomial coefficient, n choose k
VX[x]
Variance of x with respect to the random variable X
EX[x]
Expectation of x with respect to the random variable X
CovX,Y [x, y]
Covariance between x and y.
X ⊥⊥ Y | Z
X is conditionally independent of Y given Z
X ∼ p
Random variable X is distributed according to p
 µ, Σ
Gaussian distribution with mean µ and covariance Σ
Ber(µ)
Bernoulli distribution with parameter µ
Bin(N, µ)
Binomial distribution with parameters N, µ
Beta(α, β)
Beta distribution with parameters α, β
Table of Abbreviations and Acronyms
Acronym
Meaning
e.g.
Exempli gratia (Latin: for example)
GMM
Gaussian mixture model
i.e.
Id est (Latin: this means)
i.i.d.
Independent, identically distributed
MAP
Maximum a posteriori
MLE
Maximum likelihood estimation/estimator
ONB
Orthonormal basis
PCA
Principal component analysis
PPCA
Probabilistic principal component analysis
REF
Row-echelon form
SPD
Symmetric, positive definite
SVM
Support vector machine
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Part I
Mathematical Foundations
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

Introduction and Motivation
Machine learning is about designing algorithms that automatically extract
valuable information from data. The emphasis here is on “automatic”, i.e.,
machine learning is concerned about general-purpose methodologies that
can be applied to many datasets, while producing something that is mean-
ingful. There are three concepts that are at the core of machine learning:
data, a model, and learning.
Since machine learning is inherently data driven, data is at the core
data
of machine learning. The goal of machine learning is to design general-
purpose methodologies to extract valuable patterns from data, ideally
without much domain-specific expertise. For example, given a large corpus
of documents (e.g., books in many libraries), machine learning methods
can be used to automatically find relevant topics that are shared across
documents (Hoffman et al., ). To achieve this goal, we design mod-
els that are typically related to the process that generates data, similar to
model
the dataset we are given. For example, in a regression setting, the model
would describe a function that maps inputs to real-valued outputs. To
paraphrase Mitchell (): A model is said to learn from data if its per-
formance on a given task improves after the data is taken into account.
The goal is to find good models that generalize well to yet unseen data,
which we may care about in the future. Learning can be understood as a
learning
way to automatically find patterns and structure in data by optimizing the
parameters of the model.
While machine learning has seen many success stories, and software is
readily available to design and train rich and flexible machine learning
systems, we believe that the mathematical foundations of machine learn-
ing are important in order to understand fundamental principles upon
which more complicated machine learning systems are built. Understand-
ing these principles can facilitate creating new machine learning solutions,
understanding and debugging existing approaches, and learning about the
inherent assumptions and limitations of the methodologies we are work-
ing with.
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

Introduction and Motivation
. Finding Words for Intuitions
A challenge we face regularly in machine learning is that concepts and
words are slippery, and a particular component of the machine learning
system can be abstracted to different mathematical concepts. For example,
the word “algorithm” is used in at least two different senses in the con-
text of machine learning. In the first sense, we use the phrase “machine
learning algorithm” to mean a system that makes predictions based on in-
put data. We refer to these algorithms as predictors. In the second sense,
predictor
we use the exact same phrase “machine learning algorithm” to mean a
system that adapts some internal parameters of the predictor so that it
performs well on future unseen input data. Here we refer to this adapta-
tion as training a system.
training
This book will not resolve the issue of ambiguity, but we want to high-
light upfront that, depending on the context, the same expressions can
mean different things. However, we attempt to make the context suffi-
ciently clear to reduce the level of ambiguity.
The first part of this book introduces the mathematical concepts and
foundations needed to talk about the three main components of a machine
learning system: data, models, and learning. We will briefly outline these
components here, and we will revisit them again in Chapter  once we
have discussed the necessary mathematical concepts.
While not all data is numerical, it is often useful to consider data in
a number format. In this book, we assume that data has already been
appropriately converted into a numerical representation suitable for read-
ing into a computer program. Therefore, we think of data as vectors. As
data as vectors
another illustration of how subtle words are, there are (at least) three
different ways to think about vectors: a vector as an array of numbers (a
computer science view), a vector as an arrow with a direction and magni-
tude (a physics view), and a vector as an object that obeys addition and
scaling (a mathematical view).
A model is typically used to describe a process for generating data, sim-
model
ilar to the dataset at hand. Therefore, good models can also be thought
of as simplified versions of the real (unknown) data-generating process,
capturing aspects that are relevant for modeling the data and extracting
hidden patterns from it. A good model can then be used to predict what
would happen in the real world without performing real-world experi-
ments.
We now come to the crux of the matter, the learning component of
learning
machine learning. Assume we are given a dataset and a suitable model.
Training the model means to use the data available to optimize some pa-
rameters of the model with respect to a utility function that evaluates how
well the model predicts the training data. Most training methods can be
thought of as an approach analogous to climbing a hill to reach its peak.
In this analogy, the peak of the hill corresponds to a maximum of some
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Two Ways to Read This Book
desired performance measure. However, in practice, we are interested in
the model to perform well on unseen data. Performing well on data that
we have already seen (training data) may only mean that we found a
good way to memorize the data. However, this may not generalize well to
unseen data, and, in practical applications, we often need to expose our
machine learning system to situations that it has not encountered before.
Let us summarize the main concepts of machine learning that we cover
in this book:
We represent data as vectors.
We choose an appropriate model, either using the probabilistic or opti-
mization view.
We learn from available data by using numerical optimization methods
with the aim that the model performs well on data not used for training.
. Two Ways to Read This Book
We can consider two strategies for understanding the mathematics for
machine learning:
Bottom-up: Building up the concepts from foundational to more ad-
vanced. This is often the preferred approach in more technical fields,
such as mathematics. This strategy has the advantage that the reader
at all times is able to rely on their previously learned concepts. Unfor-
tunately, for a practitioner many of the foundational concepts are not
particularly interesting by themselves, and the lack of motivation means
that most foundational definitions are quickly forgotten.
Top-down: Drilling down from practical needs to more basic require-
ments. This goal-driven approach has the advantage that the readers
know at all times why they need to work on a particular concept, and
there is a clear path of required knowledge. The downside of this strat-
egy is that the knowledge is built on potentially shaky foundations, and
the readers have to remember a set of words that they do not have any
way of understanding.
We decided to write this book in a modular way to separate foundational
(mathematical) concepts from applications so that this book can be read
in both ways. The book is split into two parts, where Part I lays the math-
ematical foundations and Part II applies the concepts from Part I to a set
of fundamental machine learning problems, which form four pillars of
machine learning as illustrated in Figure .: regression, dimensionality
reduction, density estimation, and classification. Chapters in Part I mostly
build upon the previous ones, but it is possible to skip a chapter and work
backward if necessary. Chapters in Part II are only loosely coupled and
can be read in any order. There are many pointers forward and backward
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Introduction and Motivation
Machine Learning
Figure . The
foundations and
four pillars of
machine learning.
Reduction
Density
Estimation
Classiﬁcation
Dimensionality
Regression
Vector Calculus
Probability & Distributions
Optimization
Analytic Geometry
Matrix Decomposition
Linear Algebra
between the two parts of the book to link mathematical concepts with
machine learning algorithms.
Of course there are more than two ways to read this book. Most readers
learn using a combination of top-down and bottom-up approaches, some-
times building up basic mathematical skills before attempting more com-
plex concepts, but also choosing topics based on applications of machine
learning.
Part I Is about Mathematics
The four pillars of machine learning we cover in this book (see Figure .)
require a solid mathematical foundation, which is laid out in Part I.
We represent numerical data as vectors and represent a table of such
data as a matrix. The study of vectors and matrices is called linear algebra,
which we introduce in Chapter . The collection of vectors as a matrix is
linear algebra
also described there.
Given two vectors representing two objects in the real world, we want
to make statements about their similarity. The idea is that vectors that
are similar should be predicted to have similar outputs by our machine
learning algorithm (our predictor). To formalize the idea of similarity be-
tween vectors, we need to introduce operations that take two vectors as
input and return a numerical value representing their similarity. The con-
struction of similarity and distances is central to analytic geometry and is
analytic geometry
discussed in Chapter .
In Chapter , we introduce some fundamental concepts about matri-
ces and matrix decomposition. Some operations on matrices are extremely
matrix
decomposition
useful in machine learning, and they allow for an intuitive interpretation
of the data and more efficient learning.
We often consider data to be noisy observations of some true underly-
ing signal. We hope that by applying machine learning we can identify the
signal from the noise. This requires us to have a language for quantify-
ing what “noise” means. We often would also like to have predictors that
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Two Ways to Read This Book
allow us to express some sort of uncertainty, e.g., to quantify the confi-
dence we have about the value of the prediction at a particular test data
point. Quantification of uncertainty is the realm of probability theory and
probability theory
is covered in Chapter .
To train machine learning models, we typically find parameters that
maximize some performance measure. Many optimization techniques re-
quire the concept of a gradient, which tells us the direction in which to
search for a solution. Chapter  is about vector calculus and details the
vector calculus
concept of gradients, which we subsequently use in Chapter , where we
talk about optimization to find maxima/minima of functions.
optimization
Part II Is about Machine Learning
The second part of the book introduces four pillars of machine learning
as shown in Figure .. We illustrate how the mathematical concepts in-
troduced in the first part of the book are the foundation for each pillar.
Broadly speaking, chapters are ordered by difficulty (in ascending order).
In Chapter , we restate the three components of machine learning
(data, models, and parameter estimation) in a mathematical fashion. In
addition, we provide some guidelines for building experimental set-ups
that guard against overly optimistic evaluations of machine learning sys-
tems. Recall that the goal is to build a predictor that performs well on
unseen data.
In Chapter , we will have a close look at linear regression, where our
linear regression
objective is to find functions that map inputs x ∈ RD to corresponding ob-
served function values y ∈ R, which we can interpret as the labels of their
respective inputs. We will discuss classical model fitting (parameter esti-
mation) via maximum likelihood and maximum a posteriori estimation,
as well as Bayesian linear regression, where we integrate the parameters
out instead of optimizing them.
Chapter  focuses on dimensionality reduction, the second pillar in Fig-
dimensionality
reduction
ure ., using principal component analysis. The key objective of dimen-
sionality reduction is to find a compact, lower-dimensional representation
of high-dimensional data x ∈ RD, which is often easier to analyze than
the original data. Unlike regression, dimensionality reduction is only con-
cerned about modeling the data – there are no labels associated with a
data point x.
In Chapter , we will move to our third pillar: density estimation. The
density estimation
objective of density estimation is to find a probability distribution that de-
scribes a given dataset. We will focus on Gaussian mixture models for this
purpose, and we will discuss an iterative scheme to find the parameters of
this model. As in dimensionality reduction, there are no labels associated
with the data points x ∈ RD. However, we do not seek a low-dimensional
representation of the data. Instead, we are interested in a density model
that describes the data.
Chapter  concludes the book with an in-depth discussion of the fourth
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Introduction and Motivation
pillar: classification. We will discuss classification in the context of support
classification
vector machines. Similar to regression (Chapter ), we have inputs x and
corresponding labels y. However, unlike regression, where the labels were
real-valued, the labels in classification are integers, which requires special
care.
. Exercises and Feedback
We provide some exercises in Part I, which can be done mostly by pen and
paper. For Part II, we provide programming tutorials (jupyter notebooks)
to explore some properties of the machine learning algorithms we discuss
in this book.
We appreciate that Cambridge University Press strongly supports our
aim to democratize education and learning by making this book freely
available for download at
https://mml-book.com
where tutorials, errata, and additional materials can be found. Mistakes
can be reported and feedback provided using the preceding URL.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Linear Algebra
When formalizing intuitive concepts, a common approach is to construct a
set of objects (symbols) and a set of rules to manipulate these objects. This
is known as an algebra. Linear algebra is the study of vectors and certain
algebra
rules to manipulate vectors. The vectors many of us know from school are
called “geometric vectors”, which are usually denoted by a small arrow
above the letter, e.g., −→x and −→y . In this book, we discuss more general
concepts of vectors and use a bold letter to represent them, e.g., x and y.
In general, vectors are special objects that can be added together and
multiplied by scalars to produce another object of the same kind. From
an abstract mathematical viewpoint, any object that satisfies these two
properties can be considered a vector. Here are some examples of such
vector objects:
. Geometric vectors. This example of a vector may be familiar from high
school mathematics and physics. Geometric vectors – see Figure .(a)
– are directed segments, which can be drawn (at least in two dimen-
sions). Two geometric vectors
→x,
→y can be added, such that
→x+
→y =
→z
is another geometric vector. Furthermore, multiplication by a scalar
→x, λ ∈ R, is also a geometric vector. In fact, it is the original vector
scaled by λ. Therefore, geometric vectors are instances of the vector
concepts introduced previously. Interpreting vectors as geometric vec-
tors enables us to use our intuitions about direction and magnitude to
reason about mathematical operations.
. Polynomials are also vectors; see Figure .(b): Two polynomials can
→x +
→y
→x
→y
Figure .
Different types of
vectors. Vectors can
be surprising
objects, including
(a) geometric
vectors
and (b) polynomials.
(a) Geometric vectors.
(b) Polynomials.
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

Linear Algebra
be added together, which results in another polynomial; and they can
be multiplied by a scalar λ ∈ R, and the result is a polynomial as
well. Therefore, polynomials are (rather unusual) instances of vectors.
Note that polynomials are very different from geometric vectors. While
geometric vectors are concrete “drawings”, polynomials are abstract
concepts. However, they are both vectors in the sense previously de-
scribed.
. Audio signals are vectors. Audio signals are represented as a series of
numbers. We can add audio signals together, and their sum is a new
audio signal. If we scale an audio signal, we also obtain an audio signal.
Therefore, audio signals are a type of vector, too.
. Elements of Rn (tuples of n real numbers) are vectors. Rn is more
abstract than polynomials, and it is the concept we focus on in this
book. For instance,
a =
 ∈ R
is an example of a triplet of numbers. Adding two vectors a, b ∈ Rn
it loosely corresponds to arrays of real numbers on a computer. Many
programming languages support array operations, which allow for con-
venient implementation of algorithms that involve vector operations.
component-wise results in another vector: a + b = c ∈ Rn. Moreover,
multiplying a ∈ Rn by λ ∈ R results in a scaled vector λa ∈ Rn.
Considering vectors as elements of Rn has an additional benefit that
Be careful to check
whether array
operations actually
perform vector
operations when
implementing on a
computer.
Linear algebra focuses on the similarities between these vector concepts.
We can add them together and multiply them by scalars. We will largely
Pavel Grinfeld’s
series on linear
algebra:
http://tinyurl.
com/nahclwm
Gilbert Strang’s
course on linear
algebra:
http://tinyurl.
com/bdfbus
BlueBrown series
on linear algebra:
https://tinyurl.
com/hgkps
focus on vectors in Rn since most algorithms in linear algebra are for-
mulated in Rn. We will see in Chapter  that we often consider data to
be represented as vectors in Rn. In this book, we will focus on finite-
dimensional vector spaces, in which case there is a : correspondence
between any kind of vector and Rn. When it is convenient, we will use
intuitions about geometric vectors and consider array-based algorithms.
One major idea in mathematics is the idea of “closure”. This is the ques-
tion: What is the set of all things that can result from my proposed oper-
ations? In the case of vectors: What is the set of vectors that can result by
starting with a small set of vectors, and adding them to each other and
scaling them? This results in a vector space (Section .). The concept of
a vector space and its properties underlie much of machine learning. The
concepts introduced in this chapter are summarized in Figure ..
This chapter is mostly based on the lecture notes and books by Drumm
and Weil (), Strang (), Hogben (), Liesen and Mehrmann
(), as well as Pavel Grinfeld’s Linear Algebra series. Other excellent
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Systems of Linear Equations
Vector
composes
property of
closure
Matrix
Chapter
Vector calculus
Abelian
with +
Vector space
Group
Figure . A mind
map of the concepts
introduced in this
chapter, along with
where they are used
in other parts of the
book.
Linear
independence
represents
represents
System of
linear equations
maximal set
Linear/affine
mapping
Basis
solves
solved by
Matrix
inverse
Gaussian
elimination
Chapter
Chapter
Analytic geometry
Chapter
Classification
Dimensionality
reduction
resources are Gilbert Strang’s Linear Algebra course at MIT and the Linear
Algebra Series by BlueBrown.
Linear algebra plays an important role in machine learning and gen-
eral mathematics. The concepts introduced in this chapter are further ex-
panded to include the idea of geometry in Chapter . In Chapter , we
will discuss vector calculus, where a principled knowledge of matrix op-
erations is essential. In Chapter , we will use projections (to be intro-
duced in Section .) for dimensionality reduction with principal compo-
nent analysis (PCA). In Chapter , we will discuss linear regression, where
linear algebra plays a central role for solving least-squares problems.
. Systems of Linear Equations
Systems of linear equations play a central part of linear algebra. Many
problems can be formulated as systems of linear equations, and linear
algebra gives us the tools for solving them.
Example .
company
produces
products
N, . . . , Nn
for
which
resources
R, . . . , Rm are required. To produce a unit of product Nj, aij units of
resource Ri are needed, where i = , . . . , m and j = , . . . , n.
The objective is to find an optimal production plan, i.e., a plan of how
many units xj of product Nj should be produced if a total of bi units of
resource Ri are available and (ideally) no resources are left over.
If we produce x, . . . , xn units of the corresponding products, we need
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
a total of
aix +    + ainxn
many units of resource Ri. An optimal production plan (x, . . . , xn) ∈ Rn,
therefore, has to satisfy the following system of equations:
ax +    + anxn = b
amx +    + amnxn = bm
where aij ∈ R and bi ∈ R.
Equation (.) is the general form of a system of linear equations, and
system of linear
equations
x, . . . , xn are the unknowns of this system. Every n-tuple (x, . . . , xn) ∈
Rn that satisfies (.) is a solution of the linear equation system.
solution
Example .
The system of linear equations
has no solution: Adding the first two equations yields x+x = , which
contradicts the third equation ().
Let us have a look at the system of linear equations
From the first and third equation, it follows that x = . From ()+(),
we get x + x = , i.e., x = . From (), we then get that x = .
Therefore, (, , ) is the only possible and unique solution (verify that
(, , ) is a solution by plugging in).
As a third example, we consider
a,
Since ()+()=(), we can omit the third equation (redundancy). From
() and (), we get x = −x and x = +x. We define x = a ∈ R
as a free variable, such that any triplet
a, a

a ∈ R
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Systems of Linear Equations
x + x =
x − x =
Figure . The
solution space of a
system of two linear
equations with two
variables can be
geometrically
interpreted as the
intersection of two
lines. Every linear
equation represents
a line.
is a solution of the system of linear equations, i.e., we obtain a solution
set that contains infinitely many solutions.
In general, for a real-valued system of linear equations we obtain either
no, exactly one, or infinitely many solutions. Linear regression (Chapter )
solves a version of Example . when we cannot solve the system of linear
equations.
Remark (Geometric Interpretation of Systems of Linear Equations). In a
system of linear equations with two variables x, x, each linear equation
defines a line on the xx-plane. Since a solution to a system of linear
equations must satisfy all equations simultaneously, the solution set is the
intersection of these lines. This intersection set can be a line (if the linear
equations describe the same line), a point, or empty (when the lines are
parallel). An illustration is given in Figure . for the system
x + x =
x − x =
where the solution space is the point (x, x) = (,
). Similarly, for three
variables, each linear equation determines a plane in three-dimensional
space. When we intersect these planes, i.e., satisfy all linear equations at
the same time, we can obtain a solution set that is a plane, a line, a point
or empty (when the planes have no common intersection).
For a systematic approach to solving systems of linear equations, we
will introduce a useful compact notation. We collect the coefficients aij
into vectors and collect the vectors into matrices. In other words, we write
the system from (.) in the following form:
am
am
an
amn
bm
 x +
 x +    +
 xn =
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
bm
xn
an
am
amn
 .
 =
In the following, we will have a close look at these matrices and de-
fine computation rules. We will return to solving linear equations in Sec-
tion ..
. Matrices
Matrices play a central role in linear algebra. They can be used to com-
pactly represent systems of linear equations, but they also represent linear
functions (linear mappings) as we will see later in Section .. Before we
discuss some of these interesting topics, let us first define what a matrix
is and what kind of operations we can do with matrices. We will see more
properties of matrices in Chapter .
Definition . (Matrix). With m, n ∈ N a real-valued (m, n) matrix A is
matrix
an mn-tuple of elements aij, i = , . . . , m, j = , . . . , n, which is ordered
according to a rectangular scheme consisting of m rows and n columns:
A =
an
an
am
am
amn
 ,
aij ∈ R .
Rm×n is the set of all real-valued (m, n)-matrices. A ∈ Rm×n can be
equivalently represented as a ∈ Rmn by stacking all n columns of the
matrix into a long vector; see Figure ..
By convention (, n)-matrices are called rows and (m, )-matrices are called
row
columns. These special matrices are also called row/column vectors.
column
row vector
column vector
Figure . By
stacking its
columns, a matrix A
can be represented
as a long vector a.
.. Matrix Addition and Multiplication
A ∈ R×
a ∈ R
re-shape
The sum of two matrices A ∈ Rm×n, B ∈ Rm×n is defined as the element-
wise sum, i.e.,
A + B :=
a + b
an + bn
am + bm
amn + bmn
 ∈ Rm×n .
For matrices A ∈ Rm×n, B ∈ Rn×k, the elements cij of the product
Note the size of the
matrices.
C = AB ∈ Rm×k are computed as
C =
np.einsum(’il,
lj’, A, B)
cij =
l=
ailblj,
i = , . . . , m,
j = , . . . , k.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Matrices
This means, to compute element cij we multiply the elements of the ith
There are n columns
in A and n rows in
B so that we can
compute ailblj for
l = , . . . , n.
row of A with the jth column of B and sum them up. Later in Section .,
we will call this the dot product of the corresponding row and column. In
cases, where we need to be explicit that we are performing multiplication,
we use the notation A  B to denote multiplication (explicitly showing
Commonly, the dot
product between
two vectors a, b is
denoted by a⊤b or
⟨a, b⟩.
Remark. Matrices can only be multiplied if their “neighboring” dimensions
match. For instance, an n × k-matrix A can be multiplied with a k × m-
matrix B, but only from the left side:
|{z}
n×k
|{z}
k×m
= C
|{z}
n×m
The product BA is not defined if m ̸= n since the neighboring dimensions
do not match.
Remark. Matrix multiplication is not defined as an element-wise operation
on matrix elements, i.e., cij ̸= aijbij (even if the size of A, B was cho-
sen appropriately). This kind of element-wise multiplication often appears
in programming languages when we multiply (multi-dimensional) arrays
with each other, and is called a Hadamard product.
Hadamard product
Example .
For A =
∈ R×, B =
 ∈ R×, we obtain
AB =

∈ R×,
 =
BA =

 ∈ R× .
From this example, we can already see that matrix multiplication is not
commutative, i.e., AB ̸= BA; see also Figure . for an illustration.
Definition . (Identity Matrix). In Rn×n, we define the identity matrix
Figure . Even if
both matrix
multiplications AB
and BA are
defined, the
dimensions of the
results can be
different.
In :=
∈ Rn×n
identity matrix
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
as the n × n-matrix containing  on the diagonal and  everywhere else.
Now that we defined matrix multiplication, matrix addition and the
identity matrix, let us have a look at some properties of matrices:
associativity
Associativity:
∀A ∈ Rm×n, B ∈ Rn×p, C ∈ Rp×q : (AB)C = A(BC)
distributivity
Distributivity:
∀A, B ∈ Rm×n, C, D ∈ Rn×p : (A + B)C = AC + BC
(.a)
A(C + D) = AC + AD
(.b)
Multiplication with the identity matrix:
∀A ∈ Rm×n : ImA = AIn = A
Note that Im ̸= In for m ̸= n.
.. Inverse and Transpose
B ∈ Rn×n have the property that AB = In = BA. B is called the
inverse of A and denoted by A−.
Definition . (Inverse). Consider a square matrix A ∈ Rn×n. Let matrix
A square matrix
possesses the same
number of columns
and rows.
inverse
Unfortunately, not every matrix A possesses an inverse A−. If this
inverse does exist, A is called regular/invertible/nonsingular, otherwise
regular
invertible
nonsingular
singular/noninvertible. When the matrix inverse exists, it is unique. In Sec-
singular
tion ., we will discuss a general way to compute the inverse of a matrix
by solving a system of linear equations.
noninvertible
Remark (Existence of the Inverse of a  × -matrix). Consider a matrix

∈ R× .
A :=
If we multiply A with

A′ :=
−a
−a
we obtain

= (aa − aa)I .
AA′ =
aa − aa
aa − aa
Therefore,
A− =
−a
−a
aa − aa
if and only if aa − aa ̸= . In Section ., we will see that aa −
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Matrices
aa is the determinant of a ×-matrix. Furthermore, we can generally
use the determinant to check whether a matrix is invertible.
Example . (Inverse Matrix)
The matrices
A =
 ,
B =
are inverse to each other since AB = I = BA.
Definition . (Transpose). For A ∈ Rm×n the matrix B ∈ Rn×m with
bij = aji is called the transpose of A. We write B = A⊤.
transpose
In general, A⊤ can be obtained by writing the columns of A as the rows
of A⊤. The following are important properties of inverses and transposes:
AA− = I = A−A
(AB)− = B−A−
The main diagonal
(sometimes called
“principal diagonal”,
“primary diagonal”,
“leading diagonal”,
or “major diagonal”)
of a matrix A is the
collection of entries
Aij where i = j.
(A + B)− ̸= A− + B−
(A⊤)⊤ = A
The scalar case of
(.) is
+ =
(AB)⊤ = B⊤A⊤
(A + B)⊤ = A⊤ + B⊤
Definition . (Symmetric Matrix). A matrix A ∈ Rn×n is symmetric if
symmetric matrix
A = A⊤.
Note that only (n, n)-matrices can be symmetric. Generally, we call
(n, n)-matrices also square matrices because they possess the same num-
square matrix
ber of rows and columns. Moreover, if A is invertible, then so is A⊤, and
(A−)⊤ = (A⊤)− =: A−⊤.
Remark (Sum and Product of Symmetric Matrices). The sum of symmet-
ric matrices A, B ∈ Rn×n is always symmetric. However, although their
product is always defined, it is generally not symmetric:

.. Multiplication by a Scalar
Let us look at what happens to matrices when they are multiplied by a
scalar λ ∈ R. Let A ∈ Rm×n and λ ∈ R. Then λA = K, Kij = λ aij.
Practically, λ scales each element of A. For λ, ψ ∈ R, the following holds:
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
associativity
Associativity:
(λψ)C = λ(ψC),
C ∈ Rm×n
λ(BC) = (λB)C = B(λC) = (BC)λ,
B ∈ Rm×n, C ∈ Rn×k.
Note that this allows us to move scalar values around.
(λC)⊤ = C⊤λ⊤ = C⊤λ = λC⊤ since λ = λ⊤ for all λ ∈ R.
distributivity
Distributivity:
(λ + ψ)C = λC + ψC,
C ∈ Rm×n
λ(B + C) = λB + λC,
B, C ∈ Rm×n
Example . (Distributivity)
If we define
C :=
then for any λ, ψ ∈ R we obtain
(λ + ψ)C =
(λ + ψ)
(λ + ψ)
(λ + ψ)
(λ + ψ)
λ + ψ
λ + ψ
λ + ψ
λ + ψ

(.a)

= λC + ψC .
(.b)
.. Compact Representations of Systems of Linear Equations
If we consider the system of linear equations
x + x + x =
x − x − x =
x + x − x =
and use the rules for matrix multiplication, we can write this equation
system in a more compact form as
 =
 .
Note that x scales the first column, x the second one, and x the third
one.
Generally, a system of linear equations can be compactly represented in
their matrix form as Ax = b; see (.), and the product Ax is a (linear)
combination of the columns of A. We will discuss linear combinations in
more detail in Section ..
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Solving Systems of Linear Equations
. Solving Systems of Linear Equations
In (.), we introduced the general form of an equation system, i.e.,
ax +    + anxn = b
amx +    + amnxn = bm ,
where aij ∈ R and bi ∈ R are known constants and xj are unknowns,
i = , . . . , m, j = , . . . , n. Thus far, we saw that matrices can be used as
a compact way of formulating systems of linear equations so that we can
write Ax = b, see (.). Moreover, we defined basic matrix operations,
such as addition and multiplication of matrices. In the following, we will
focus on solving systems of linear equations and provide an algorithm for
finding the inverse of a matrix.
.. Particular and General Solution
Before discussing how to generally solve systems of linear equations, let
us have a look at an example. Consider the system of equations

 =
The system has two equations and four unknowns. Therefore, in general
we would expect infinitely many solutions. This system of equations is
in a particularly easy form, where the first two columns consist of a
and a . Remember that we want to find scalars x, . . . , x, such that
i= xici = b, where we define ci to be the ith column of the matrix and
b the right-hand-side of (.). A solution to the problem in (.) can
be found immediately by taking  times the first column and  times the
second column so that
b =

Therefore, a solution is [, , , ]⊤. This solution is called a particular
particular solution
solution or special solution. However, this is not the only solution of this
special solution
system of linear equations. To capture all the other solutions, we need
to be creative in generating  in a non-trivial way using the columns of
the matrix: Adding  to our special solution does not change the special
solution. To do so, we express the third column using the first two columns
(which are of this very simple form)
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
so that  = c + c − c + c and (x, x, x, x) = (, , −, ). In
fact, any scaling of this solution by λ ∈ R produces the  vector, i.e.,
λ
 = λ(c + c − c) =  .
Following the same line of reasoning, we express the fourth column of the
matrix in (.) using the first two columns and generate another set of
non-trivial versions of  as
 = λ(−c + c − c) =
λ
for any λ ∈ R. Putting everything together, we obtain all solutions of the
equation system in (.), which is called the general solution, as the set
general solution

 + λ
 + λ
 , λ, λ ∈ R

x ∈ R : x =

Remark. The general approach we followed consisted of the following
three steps:
. Find a particular solution to Ax = b.
. Find all solutions to Ax = .
. Combine the solutions from steps . and . to the general solution.
Neither the general nor the particular solution is unique.
The system of linear equations in the preceding example was easy to
solve because the matrix in (.) has this particularly convenient form,
which allowed us to find the particular and the general solution by in-
spection. However, general equation systems are not of this simple form.
Fortunately, there exists a constructive algorithmic way of transforming
any system of linear equations into this particularly simple form: Gaussian
elimination. Key to Gaussian elimination are elementary transformations
of systems of linear equations, which transform the equation system into
a simple form. Then, we can apply the three steps to the simple form that
we just discussed in the context of the example in (.).
.. Elementary Transformations
Key to solving a system of linear equations are elementary transformations
elementary
transformations
that keep the solution set the same, but that transform the equation system
into a simpler form:
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Solving Systems of Linear Equations
Exchange of two equations (rows in the matrix representing the system
of equations)
Multiplication of an equation (row) with a constant λ ∈ R\{}
Addition of two equations (rows)
Example .
For a ∈ R, we seek all solutions of the following system of equations:
−x
Swap with R
We start by converting this system of equations into the compact matrix
notation Ax = b. We no longer mention the variables x explicitly and
build the augmented matrix (in the form
A | b
augmented matrix
Swap with R
where we used the vertical line to separate the left-hand side from the
right-hand side in (.). We use ⇝ to indicate a transformation of the
augmented matrix using elementary transformations.
The augmented
matrix
A | b
compactly
represents the
system of linear
equations Ax = b.
Swapping Rows  and  leads to
−R
+R
−R
When we now apply the indicated transformations (e.g., subtract Row
four times from Row ), we obtain
−R − R
a+
a+
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
This (augmented) matrix is in a convenient form, the row-echelon form
row-echelon form
(REF). Reverting this compact notation back into the explicit notation with
the variables we seek, we obtain
a +
Only for a = − this system can be solved. A particular solution is
particular solution
x ∈ R : x =
The general solution, which captures the set of all possible solutions, is
general solution

+ λ
+ λ
λ, λ ∈ R

In the following, we will detail a constructive way to obtain a particular
and general solution of a system of linear equations.
Remark (Pivots and Staircase Structure). The leading coefficient of a row
(first nonzero number from the left) is called the pivot and is always
pivot
strictly to the right of the pivot of the row above it. Therefore, any equa-
tion system in row-echelon form always has a “staircase” structure.
Definition . (Row-Echelon Form). A matrix is in row-echelon form if
row-echelon form
All rows that contain only zeros are at the bottom of the matrix; corre-
spondingly, all rows that contain at least one nonzero element are on
top of rows that contain only zeros.
Looking at nonzero rows only, the first nonzero number from the left
(also called the pivot or the leading coefficient) is always strictly to the
pivot
leading coefficient
right of the pivot of the row above it.
In other texts, it is
sometimes required
that the pivot is .
Remark (Basic and Free Variables). The variables corresponding to the
pivots in the row-echelon form are called basic variables and the other
basic variable
variables are free variables. For example, in (.), x, x, x are basic
free variable
variables, whereas x, x are free variables.
Remark (Obtaining a Particular Solution). The row-echelon form makes
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Solving Systems of Linear Equations
our lives easier when we need to determine a particular solution. To do
this, we express the right-hand side of the equation system using the pivot
columns, such that b = PP
i= λipi, where pi, i = , . . . , P, are the pivot
columns. The λi are determined easiest if we start with the rightmost pivot
column and work our way to the left.
In the previous example, we would try to find λ, λ, λ so that
 + λ
 + λ
 =
 .
From here, we find relatively directly that λ = , λ = −, λ = . When
we put everything together, we must not forget the non-pivot columns
for which we set the coefficients implicitly to . Therefore, we get the
particular solution x = [, , −, , ]⊤.
Remark (Reduced Row Echelon Form). An equation system is in reduced
reduced
row-echelon form
row-echelon form (also: row-reduced echelon form or row canonical form) if
It is in row-echelon form.
Every pivot is .
The pivot is the only nonzero entry in its column.
The reduced row-echelon form will play an important role later in Sec-
tion .. because it allows us to determine the general solution of a sys-
tem of linear equations in a straightforward way.
Gaussian
elimination
Remark (Gaussian Elimination). Gaussian elimination is an algorithm that
performs elementary transformations to bring a system of linear equations
into reduced row-echelon form.
Example . (Reduced Row Echelon Form)
Verify that the following matrix is in reduced row-echelon form (the pivots
are in bold):
A =
 .
The key idea for finding the solutions of Ax =  is to look at the non-
pivot columns, which we will need to express as a (linear) combination of
the pivot columns. The reduced row echelon form makes this relatively
straightforward, and we express the non-pivot columns in terms of sums
and multiples of the pivot columns that are on their left: The second col-
umn is  times the first column (we can ignore the pivot columns on the
right of the second column). Therefore, to obtain , we need to subtract
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
x ∈ R : x = λ

the second column from three times the first column. Now, we look at the
fifth column, which is our second non-pivot column. The fifth column can
be expressed as  times the first pivot column,  times the second pivot
column, and − times the third pivot column. We need to keep track of
the indices of the pivot columns and translate this into  times the first col-
umn,  times the second column (which is a non-pivot column),  times
the third column (which is our second pivot column), and − times the
fourth column (which is the third pivot column). Then we need to subtract
the fifth column to obtain . In the end, we are still solving a homogeneous
equation system.
To summarize, all solutions of Ax = , x ∈ R are given by

λ, λ ∈ R
+ λ

.. The Minus- Trick
In the following, we introduce a practical trick for reading out the solu-
tions x of a homogeneous system of linear equations Ax = , where
A ∈ Rk×n, x ∈ Rn.
To start, we assume that A is in reduced row-echelon form without any
rows that just contain zeros, i.e.,
A =

where ∗ can be an arbitrary real number, with the constraints that the first
nonzero entry per row must be  and all other entries in the corresponding
column must be . The columns j, . . . , jk with the pivots (marked in
bold) are the standard unit vectors e, . . . , ek ∈ Rk. We extend this matrix
to an n × n-matrix ˜A by adding n − k rows of the form
so that the diagonal of the augmented matrix ˜A contains either  or −.
Then, the columns of ˜A that contain the − as pivots are solutions of
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Solving Systems of Linear Equations
the homogeneous equation system Ax = . To be more precise, these
columns form a basis (Section ..) of the solution space of Ax = ,
which we will later call the kernel or null space (see Section ..).
kernel
null space
Example . (Minus- Trick)
Let us revisit the matrix in (.), which is already in reduced REF:
A =
 .
We now augment this matrix to a  ×  matrix by adding rows of the
form (.) at the places where the pivots on the diagonal are missing
and obtain
˜A =
x ∈ R : x = λ
From this form, we can immediately read out the solutions of Ax =  by
taking the columns of ˜A, which contain − on the diagonal:

+ λ
λ, λ ∈ R
which is identical to the solution in (.) that we obtained by “insight”.

Calculating the Inverse
To compute the inverse A− of A ∈ Rn×n, we need to find a matrix X
that satisfies AX = In. Then, X = A−. We can write this down as
a set of simultaneous linear equations AX = In, where we solve for
X = [x|    |xn]. We use the augmented matrix notation for a compact
representation of this set of systems of linear equations and obtain
A|In
⇝    ⇝
In|A− .
This means that if we bring the augmented equation system into reduced
row-echelon form, we can read out the inverse on the right-hand side of
the equation system. Hence, determining the inverse of a matrix is equiv-
alent to solving systems of linear equations.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
Example . (Calculating an Inverse Matrix by Gaussian Elimination)
To determine the inverse of
A =
we write down the augmented matrix
and use Gaussian elimination to bring it into reduced row-echelon form
 ,
such that the desired inverse is given as its right-hand side:
A− =
 .
We can verify that (.) is indeed the inverse by performing the multi-
plication AA− and observing that we recover I.
.. Algorithms for Solving a System of Linear Equations
In the following, we briefly discuss approaches to solving a system of lin-
ear equations of the form Ax = b. We make the assumption that a solu-
tion exists. Should there be no solution, we need to resort to approximate
solutions, which we do not cover in this chapter. One way to solve the ap-
proximate problem is using the approach of linear regression, which we
discuss in detail in Chapter .
In special cases, we may be able to determine the inverse A−, such
that the solution of Ax = b is given as x = A−b. However, this is
only possible if A is a square matrix and invertible, which is often not the
case. Otherwise, under mild assumptions (i.e., A needs to have linearly
independent columns) we can use the transformation
Ax = b ⇐⇒ A⊤Ax = A⊤b ⇐⇒ x = (A⊤A)−A⊤b
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Vector Spaces
and use the Moore-Penrose pseudo-inverse (A⊤A)−A⊤ to determine the
Moore-Penrose
pseudo-inverse
solution (.) that solves Ax = b, which also corresponds to the mini-
mum norm least-squares solution. A disadvantage of this approach is that
it requires many computations for the matrix-matrix product and comput-
ing the inverse of A⊤A. Moreover, for reasons of numerical precision it
is generally not recommended to compute the inverse or pseudo-inverse.
In the following, we therefore briefly discuss alternative approaches to
solving systems of linear equations.
Gaussian elimination plays an important role when computing deter-
minants (Section .), checking whether a set of vectors is linearly inde-
pendent (Section .), computing the inverse of a matrix (Section ..),
computing the rank of a matrix (Section ..), and determining a basis
of a vector space (Section ..). Gaussian elimination is an intuitive and
constructive way to solve a system of linear equations with thousands of
variables. However, for systems with millions of variables, it is impracti-
cal as the required number of arithmetic operations scales cubically in the
number of simultaneous equations.
In practice, systems of many linear equations are solved indirectly, by ei-
ther stationary iterative methods, such as the Richardson method, the Ja-
cobi method, the Gauß-Seidel method, and the successive over-relaxation
method, or Krylov subspace methods, such as conjugate gradients, gener-
alized minimal residual, or biconjugate gradients. We refer to the books
by Stoer and Burlirsch (), Strang (), and Liesen and Mehrmann
() for further details.
Let x∗ be a solution of Ax = b. The key idea of these iterative methods
is to set up an iteration of the form
x(k+) = Cx(k) + d
for suitable C and d that reduces the residual error ∥x(k+) −x∗∥ in every
iteration and converges to x∗. We will introduce norms ∥  ∥, which allow
us to compute similarities between vectors, in Section ..
. Vector Spaces
Thus far, we have looked at systems of linear equations and how to solve
them (Section .). We saw that systems of linear equations can be com-
pactly represented using matrix-vector notation (.). In the following,
we will have a closer look at vector spaces, i.e., a structured space in which
vectors live.
In the beginning of this chapter, we informally characterized vectors as
objects that can be added together and multiplied by a scalar, and they
remain objects of the same type. Now, we are ready to formalize this,
and we will start by introducing the concept of a group, which is a set
of elements and an operation defined on these elements that keeps some
structure of the set intact.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
.. Groups
Groups play an important role in computer science. Besides providing a
fundamental framework for operations on sets, they are heavily used in
cryptography, coding theory, and graphics.
Definition . (Group). Consider a set G and an operation ⊗ : G×G → G
defined on G. Then G := (G, ⊗) is called a group if the following hold:
group
closure
. Closure of G under ⊗: ∀x, y ∈ G : x ⊗ y ∈ G
associativity
. Associativity: ∀x, y, z ∈ G : (x ⊗ y) ⊗ z = x ⊗ (y ⊗ z)
neutral element
. Neutral element: ∃e ∈ G ∀x ∈ G : x ⊗ e = x and e ⊗ x = x
inverse element
. Inverse element: ∀x ∈ G ∃y ∈ G : x ⊗ y = e and y ⊗ x = e, where e is
the neutral element. We often write x− to denote the inverse element
of x.
Remark. The inverse element is defined with respect to the operation ⊗
and does not necessarily mean
x.
If additionally ∀x, y ∈ G : x ⊗ y = y ⊗ x, then G = (G, ⊗) is an Abelian
Abelian group
group (commutative).
Example . (Groups)
Let us have a look at some examples of sets with associated operations
and see whether they are groups:
(Z, +) is an Abelian group.
(N, +) is not a group: Although (N, +) possesses a neutral element
N := N ∪ {}
(), the inverse elements are missing.
(Z, ) is not a group: Although (Z, ) contains a neutral element (), the
inverse elements for any z ∈ Z, z ̸= ±, are missing.
(R, ) is not a group since  does not possess an inverse element.
(R\{}, ) is Abelian.
(Rn, +), (Zn, +), n ∈ N are Abelian if + is defined componentwise, i.e.,
(x,    , xn) + (y,    , yn) = (x + y,    , xn + yn).
Then, (x,    , xn)− := (−x,    , −xn) is the inverse element and
e = (,    , ) is the neutral element.
(Rm×n, +), the set of m × n-matrices is Abelian (with componentwise
addition as defined in (.)).
Let us have a closer look at (Rn×n, ), i.e., the set of n×n-matrices with
matrix multiplication as defined in (.).
– Closure and associativity follow directly from the definition of matrix
multiplication.
– Neutral element: The identity matrix In is the neutral element with
respect to matrix multiplication “” in (Rn×n, ).
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Vector Spaces
– Inverse element: If the inverse exists (A is regular), then A− is the
inverse element of A ∈ Rn×n, and in exactly this case (Rn×n, ) is a
group, called the general linear group.
Definition . (General Linear Group). The set of regular (invertible)
matrices A ∈ Rn×n is a group with respect to matrix multiplication as
defined in (.) and is called general linear group GL(n, R). However,
general linear group
since matrix multiplication is not commutative, the group is not Abelian.
.. Vector Spaces
When we discussed groups, we looked at sets G and inner operations on
G, i.e., mappings G × G → G that only operate on elements in G. In the
following, we will consider sets that in addition to an inner operation +
also contain an outer operation , the multiplication of a vector x ∈ G by
a scalar λ ∈ R. We can think of the inner operation as a form of addition,
and the outer operation as a form of scaling. Note that the inner/outer
operations have nothing to do with inner/outer products.
Definition . (Vector Space). A real-valued vector space V = (V, +, ) is
vector space
a set V with two operations
+ : V × V → V
: R × V → V
where
. (V, +) is an Abelian group
. Distributivity:
. ∀λ ∈ R, x, y ∈ V : λ  (x + y) = λ  x + λ  y
. ∀λ, ψ ∈ R, x ∈ V : (λ + ψ)  x = λ  x + ψ  x
. Associativity (outer operation): ∀λ, ψ ∈ R, x ∈ V : λ(ψx) = (λψ)x
. Neutral element with respect to the outer operation: ∀x ∈ V : x = x
The elements x ∈ V are called vectors. The neutral element of (V, +) is
vector
the zero vector  = [, . . . , ]⊤, and the inner operation + is called vector
vector addition
addition. The elements λ ∈ R are called scalars and the outer operation
scalar
is a multiplication by scalars. Note that a scalar product is something
multiplication by
scalars
different, and we will get to this in Section ..
Remark. A “vector multiplication” ab, a, b ∈ Rn, is not defined. Theoret-
ically, we could define an element-wise multiplication, such that c = ab
with cj = ajbj. This “array multiplication” is common to many program-
ming languages but makes mathematically limited sense using the stan-
dard rules for matrix multiplication: By treating vectors as n ×  matrices
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
(which we usually do), we can use the matrix multiplication as defined
in (.). However, then the dimensions of the vectors do not match. Only
the following multiplications for vectors are defined: ab⊤ ∈ Rn×n (outer
outer product
product), a⊤b ∈ R (inner/scalar/dot product).
Example . (Vector Spaces)
Let us have a look at some important examples:
V = Rn, n ∈ N is a vector space with operations defined as follows:
– Addition: x+y = (x, . . . , xn)+(y, . . . , yn) = (x+y, . . . , xn+yn)
for all x, y ∈ Rn
– Multiplication by scalars: λx = λ(x, . . . , xn) = (λx, . . . , λxn) for
all λ ∈ R, x ∈ Rn
V = Rm×n, m, n ∈ N is a vector space with
– Addition: A + B =
a + b
an + bn
am + bm
amn + bmn
 is defined ele-
mentwise for all A, B ∈ V
– Multiplication by scalars: λA =
λa
λan
λam
λamn
Section .. Remember that Rm×n is equivalent to Rmn.
 as defined in
V = C, with the standard definition of addition of complex numbers.
Remark. In the following, we will denote a vector space (V, +, ) by V
when + and  are the standard vector addition and scalar multiplication.
Moreover, we will use the notation x ∈ V for vectors in V to simplify
notation.
Remark. The vector spaces Rn, Rn×, R×n are only different in the way
we write vectors. In the following, we will not make a distinction between
Rn and Rn×, which allows us to write n-tuples as column vectors
column vector
x =
xn
 .
This simplifies the notation regarding vector space operations. However,
we do distinguish between Rn× and R×n (the row vectors) to avoid con-
row vector
fusion with matrix multiplication. By default, we write x to denote a col-
umn vector, and a row vector is denoted by x⊤, the transpose of x.
transpose
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Vector Spaces
.. Vector Subspaces
In the following, we will introduce vector subspaces. Intuitively, they are
sets contained in the original vector space with the property that when
we perform vector space operations on elements within this subspace, we
will never leave it. In this sense, they are “closed”. Vector subspaces are a
key idea in machine learning. For example, Chapter  demonstrates how
to use vector subspaces for dimensionality reduction.
Definition . (Vector Subspace). Let V = (V, +, ) be a vector space
and U ⊆ V, U ̸= ∅. Then U = (U, +, ) is called vector subspace of V (or
vector subspace
linear subspace) if U is a vector space with the vector space operations +
linear subspace
and  restricted to U ×U and R×U. We write U ⊆ V to denote a subspace
U of V .
If U ⊆ V and V is a vector space, then U naturally inherits many prop-
erties directly from V because they hold for all x ∈ V, and in particular for
all x ∈ U ⊆ V. This includes the Abelian group properties, the distribu-
tivity, the associativity and the neutral element. To determine whether
(U, +, ) is a subspace of V we still do need to show
. U ̸= ∅, in particular:  ∈ U
. Closure of U:
a. With respect to the outer operation: ∀λ ∈ R ∀x ∈ U : λx ∈ U.
b. With respect to the inner operation: ∀x, y ∈ U : x + y ∈ U.
Example . (Vector Subspaces)
Let us have a look at some examples:
For every vector space V , the trivial subspaces are V itself and {}.
Only example D in Figure . is a subspace of R (with the usual inner/
outer operations). In A and C, the closure property is violated; B does
not contain .
The solution set of a homogeneous system of linear equations Ax =
with n unknowns x = [x, . . . , xn]⊤ is a subspace of Rn.
The solution of an inhomogeneous system of linear equations Ax =
b, b ̸=  is not a subspace of Rn.
The intersection of arbitrarily many subspaces is a subspace itself.
Figure . Not all
subsets of R are
subspaces. In A and
C, the closure
property is violated;
B does not contain
. Only D is a
subspace.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
Remark. Every subspace U ⊆ (Rn, +, ) is the solution space of a homo-
geneous system of linear equations Ax =  for x ∈ Rn.
. Linear Independence
In the following, we will have a close look at what we can do with vectors
(elements of the vector space). In particular, we can add vectors together
and multiply them with scalars. The closure property guarantees that we
end up with another vector in the same vector space. It is possible to find
a set of vectors with which we can represent every vector in the vector
space by adding them together and scaling them. This set of vectors is
a basis, and we will discuss them in Section ... Before we get there,
we will need to introduce the concepts of linear combinations and linear
independence.
Definition . (Linear Combination). Consider a vector space V and a
finite number of vectors x, . . . , xk ∈ V . Then, every v ∈ V of the form
v = λx +    + λkxk =
i=
λixi ∈ V
with λ, . . . , λk ∈ R is a linear combination of the vectors x, . . . , xk.
linear combination
The -vector can always be written as the linear combination of k vec-
tors x, . . . , xk because  = Pk
i= xi is always true. In the following,
we are interested in non-trivial linear combinations of a set of vectors to
represent , i.e., linear combinations of vectors x, . . . , xk, where not all
coefficients λi in (.) are .
Definition . (Linear (In)dependence). Let us consider a vector space
V with k ∈ N and x, . . . , xk ∈ V . If there is a non-trivial linear com-
bination, such that  = Pk
i= λixi with at least one λi ̸= , the vectors
x, . . . , xk are linearly dependent. If only the trivial solution exists, i.e.,
linearly dependent
λ = . . . = λk =  the vectors x, . . . , xk are linearly independent.
linearly
independent
Linear independence is one of the most important concepts in linear
algebra. Intuitively, a set of linearly independent vectors consists of vectors
that have no redundancy, i.e., if we remove any of those vectors from
the set, we will lose something. Throughout the next sections, we will
formalize this intuition more.
Example . (Linearly Dependent Vectors)
A geographic example may help to clarify the concept of linear indepen-
dence. A person in Nairobi (Kenya) describing where Kigali (Rwanda) is
might say ,“You can get to Kigali by first going  km Northwest to Kam-
pala (Uganda) and then  km Southwest.”. This is sufficient information
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linear Independence
to describe the location of Kigali because the geographic coordinate sys-
tem may be considered a two-dimensional vector space (ignoring altitude
and the Earth’s curved surface). The person may add, “It is about  km
West of here.” Although this last statement is true, it is not necessary to
find Kigali given the previous information (see Figure . for an illus-
tration). In this example, the “ km Northwest” vector (blue) and the
“ km Southwest” vector (purple) are linearly independent. This means
the Southwest vector cannot be described in terms of the Northwest vec-
tor, and vice versa. However, the third “ km West” vector (black) is a
linear combination of the other two vectors, and it makes the set of vec-
tors linearly dependent. Equivalently, given “ km West” and “ km
Southwest” can be linearly combined to obtain “ km Northwest”.
Kampala
km Northwest
Nairobi
km Southwest
km West
Figure .
Geographic example
(with crude
approximations to
cardinal directions)
of linearly
dependent vectors
in a
two-dimensional
space (plane).
Kigali
km Southwest
Remark. The following properties are useful to find out whether vectors
are linearly independent:
k vectors are either linearly dependent or linearly independent. There
is no third option.
If at least one of the vectors x, . . . , xk is  then they are linearly de-
pendent. The same holds if two vectors are identical.
The vectors {x, . . . , xk : xi ̸= , i = , . . . , k}, k ⩾ , are linearly
dependent if and only if (at least) one of them is a linear combination
of the others. In particular, if one vector is a multiple of another vector,
i.e., xi = λxj, λ ∈ R then the set {x, . . . , xk : xi ̸= , i = , . . . , k}
is linearly dependent.
A practical way of checking whether vectors x, . . . , xk ∈ V are linearly
independent is to use Gaussian elimination: Write all vectors as columns
of a matrix A and perform Gaussian elimination until the matrix is in
row echelon form (the reduced row-echelon form is unnecessary here):
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
– The pivot columns indicate the vectors, which are linearly indepen-
dent of the vectors on the left. Note that there is an ordering of vec-
tors when the matrix is built.
– The non-pivot columns can be expressed as linear combinations of
the pivot columns on their left. For instance, the row-echelon form
tells us that the first and third columns are pivot columns. The sec-
ond column is a non-pivot column because it is three times the first
column.
All column vectors are linearly independent if and only if all columns
are pivot columns. If there is at least one non-pivot column, the columns
(and, therefore, the corresponding vectors) are linearly dependent.
Example .
Consider R with
x =
 ,
x =
 ,
x =
 .
To check whether they are linearly dependent, we follow the general ap-
proach and solve
λx + λx + λx = λ
 + λ
 + λ
 =
for λ, . . . , λ. We write the vectors xi, i = , , , as the columns of a
matrix and apply elementary row operations until we identify the pivot
columns:
⇝    ⇝
 .
Here, every column of the matrix is a pivot column. Therefore, there is no
non-trivial solution, and we require λ = , λ = , λ =  to solve the
equation system. Hence, the vectors x, x, x are linearly independent.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linear Independence
Remark. Consider a vector space V with k linearly independent vectors
b, . . . , bk and m linear combinations
x =
i=
λibi ,
xm =
i=
λimbi .
Defining B = [b, . . . , bk] as the matrix whose columns are the linearly
independent vectors b, . . . , bk, we can write
xj = Bλj ,
λj =
λj
λkj
 ,
j = , . . . , m ,
in a more compact form.
We want to test whether x, . . . , xm are linearly independent. For this
purpose, we follow the general approach of testing when Pm
j= ψjxj = .
With (.), we obtain
j=
ψjxj =
j=
ψjBλj = B
j=
ψjλj .
This means that {x, . . . , xm} are linearly independent if and only if the
column vectors {λ, . . . , λm} are linearly independent.
Remark. In a vector space V , m linear combinations of k vectors x, . . . , xk
are linearly dependent if m > k.
Example .
Consider a set of linearly independent vectors b, b, b, b ∈ Rn and
−b
Are the vectors x, . . . , x ∈ Rn linearly independent? To answer this
question, we investigate whether the column vectors

 ,
 ,
 ,

© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
are linearly independent. The reduced row-echelon form of the corre-
sponding linear equation system with coefficient matrix
A =
is given as
 .
We see that the corresponding linear equation system is non-trivially solv-
able: The last column is not a pivot column, and x = −x−x−x.
Therefore, x, . . . , x are linearly dependent as x can be expressed as a
linear combination of x, . . . , x.
. Basis and Rank
In a vector space V , we are particularly interested in sets of vectors A that
possess the property that any vector v ∈ V can be obtained by a linear
combination of vectors in A. These vectors are special vectors, and in the
following, we will characterize them.
.. Generating Set and Basis
Definition . (Generating Set and Span). Consider a vector space V =
(V, +, ) and set of vectors A = {x, . . . , xk} ⊆ V. If every vector v ∈
V can be expressed as a linear combination of x, . . . , xk, A is called a
generating set of V . The set of all linear combinations of vectors in A is
generating set
called the span of A. If A spans the vector space V , we write V = span[A]
span
or V = span[x, . . . , xk].
Generating sets are sets of vectors that span vector (sub)spaces, i.e.,
every vector can be represented as a linear combination of the vectors
in the generating set. Now, we will be more specific and characterize the
smallest generating set that spans a vector (sub)space.
Definition . (Basis). Consider a vector space V = (V, +, ) and A ⊆
V. A generating set A of V is called minimal if there exists no smaller set
minimal
A ⊊ A ⊆ V that spans V . Every linearly independent generating set of V
is minimal and is called a basis of V .
basis
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Basis and Rank
Let V = (V, +, ) be a vector space and B ⊆ V, B ̸= ∅. Then, the
following statements are equivalent:
A basis is a minimal
generating set and a
maximal linearly
independent set of
vectors.
B is a basis of V .
B is a minimal generating set.
B is a maximal linearly independent set of vectors in V , i.e., adding any
other vector to this set will make it linearly dependent.
Every vector x ∈ V is a linear combination of vectors from B, and every
linear combination is unique, i.e., with
x =
i=
λibi =
i=
ψibi
and λi, ψi ∈ R, bi ∈ B it follows that λi = ψi, i = , . . . , k.
Example .
In R, the canonical/standard basis is
canonical basis
B =
 ,
 ,
Different bases in R are
 .
B =
 ,
 ,
 ,
 ,
The set
 . (.)
 , B =
A =

 ,
 ,

is linearly independent, but not a generating set (and no basis) of R:
For instance, the vector [, , , ]⊤ cannot be obtained by a linear com-
bination of elements in A.
Remark. Every vector space V possesses a basis B. The preceding exam-
ples show that there can be many bases of a vector space V , i.e., there is
no unique basis. However, all bases possess the same number of elements,
the basis vectors.
basis vector
We only consider finite-dimensional vector spaces V . In this case, the
dimension of V is the number of basis vectors of V , and we write dim(V ).
dimension
If U ⊆ V is a subspace of V , then dim(U) ⩽ dim(V ) and dim(U) =
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
Remark. The dimension of a vector space is not necessarily the number
dim(V ) if and only if U = V . Intuitively, the dimension of a vector space
can be thought of as the number of independent directions in this vector
space.
The dimension of a
vector space
corresponds to the
number of its basis
vectors.
of elements in a vector. For instance, the vector space V = span[
] is
one-dimensional, although the basis vector possesses two elements.
Remark. A basis of a subspace U = span[x, . . . , xm] ⊆ Rn can be found
by executing the following steps:
. Write the spanning vectors as columns of a matrix A
. Determine the row-echelon form of A.
. The spanning vectors associated with the pivot columns are a basis of
U.
Example . (Determining a Basis)
For a vector subspace U ⊆ R, spanned by the vectors
x =
x =
x =
x =
∈ R,
we are interested in finding out which vectors x, . . . , x are a basis for U.
For this, we need to check whether x, . . . , x are linearly independent.
Therefore, we need to solve
i=
λixi =  ,
which leads to a homogeneous system of equations with matrix
x, x, x, x
 =
With the basic transformation rules for systems of linear equations, we
obtain the row-echelon form
− −
− − −
⇝    ⇝
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Basis and Rank
Since the pivot columns indicate which set of vectors is linearly indepen-
dent, we see from the row-echelon form that x, x, x are linearly inde-
pendent (because the system of linear equations λx + λx + λx =
can only be solved with λ = λ = λ = ). Therefore, {x, x, x} is a
basis of U.
.. Rank
The number of linearly independent columns of a matrix A ∈ Rm×n
equals the number of linearly independent rows and is called the rank
rank
of A and is denoted by rk(A).
Remark. The rank of a matrix has some important properties:
rk(A) = rk(A⊤), i.e., the column rank equals the row rank.
The columns of A ∈ Rm×n span a subspace U ⊆ Rm with dim(U) =
rk(A). Later we will call this subspace the image or range. A basis of
U can be found by applying Gaussian elimination to A to identify the
pivot columns.
The rows of A ∈ Rm×n span a subspace W ⊆ Rn with dim(W) =
rk(A). A basis of W can be found by applying Gaussian elimination to
A⊤.
For all A ∈ Rn×n it holds that A is regular (invertible) if and only if
rk(A) = n.
For all A ∈ Rm×n and all b ∈ Rm it holds that the linear equation
system Ax = b can be solved if and only if rk(A) = rk(A|b), where
A|b denotes the augmented system.
For A ∈ Rm×n the subspace of solutions for Ax =  possesses dimen-
sion n − rk(A). Later, we will call this subspace the kernel or the null
kernel
null space
space.
A matrix A ∈ Rm×n has full rank if its rank equals the largest possible
full rank
rank for a matrix of the same dimensions. This means that the rank of
a full-rank matrix is the lesser of the number of rows and columns, i.e.,
rk(A) = min(m, n). A matrix is said to be rank deficient if it does not
rank deficient
have full rank.
Example . (Rank)
A =
A has two linearly independent rows/columns so that rk(A) = .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
A =
 .
We use Gaussian elimination to determine the rank:
⇝    ⇝
 .
Here, we see that the number of linearly independent rows and columns
is , such that rk(A) = .
. Linear Mappings
In the following, we will study mappings on vector spaces that preserve
their structure, which will allow us to define the concept of a coordinate.
In the beginning of the chapter, we said that vectors are objects that can be
added together and multiplied by a scalar, and the resulting object is still
a vector. We wish to preserve this property when applying the mapping:
Consider two real vector spaces V, W. A mapping Φ : V → W preserves
the structure of the vector space if
Φ(x + y) = Φ(x) + Φ(y)
Φ(λx) = λΦ(x)
for all x, y ∈ V and λ ∈ R. We can summarize this in the following
definition:
Definition . (Linear Mapping). For vector spaces V, W, a mapping
Φ : V → W is called a linear mapping (or vector space homomorphism/
linear mapping
vector space
homomorphism
linear transformation) if
linear
transformation
∀x, y ∈ V ∀λ, ψ ∈ R : Φ(λx + ψy) = λΦ(x) + ψΦ(y) .
It turns out that we can represent linear mappings as matrices (Sec-
tion ..). Recall that we can also collect a set of vectors as columns of a
matrix. When working with matrices, we have to keep in mind what the
matrix represents: a linear mapping or a collection of vectors. We will see
more about linear mappings in Chapter . Before we continue, we will
briefly introduce special mappings.
Definition . (Injective, Surjective, Bijective). Consider a mapping Φ :
V → W, where V, W can be arbitrary sets. Then Φ is called
injective
Injective if ∀x, y ∈ V : Φ(x) = Φ(y) =⇒ x = y.
surjective
Surjective if Φ(V) = W.
bijective
Bijective if it is injective and surjective.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linear Mappings
If Φ is surjective, then every element in W can be “reached” from V
using Φ. A bijective Φ can be “undone”, i.e., there exists a mapping Ψ :
W → V so that Ψ ◦ Φ(x) = x. This mapping Ψ is then called the inverse
of Φ and normally denoted by Φ−.
With these definitions, we introduce the following special cases of linear
mappings between vector spaces V and W:
isomorphism
Isomorphism: Φ : V → W linear and bijective
endomorphism
Endomorphism: Φ : V → V linear
automorphism
Automorphism: Φ : V → V linear and bijective
We define idV : V → V , x → x as the identity mapping or identity
identity mapping
identity
automorphism
automorphism in V .
Example . (Homomorphism)
The mapping Φ : R → C, Φ(x) = x + ix, is a homomorphism:
= (x + y) + i(x + y) = x + ix + y + iy
+ Φ
= Φ

= λx + λix = λ(x + ix) = λΦ

This also justifies why complex numbers can be represented as tuples in
R: There is a bijective linear mapping that converts the elementwise addi-
tion of tuples in R into the set of complex numbers with the correspond-
ing addition. Note that we only showed linearity, but not the bijection.
Theorem . (Theorem . in Axler ()). Finite-dimensional vector
spaces V and W are isomorphic if and only if dim(V ) = dim(W).
Theorem . states that there exists a linear, bijective mapping be-
tween two vector spaces of the same dimension. Intuitively, this means
that vector spaces of the same dimension are kind of the same thing, as
they can be transformed into each other without incurring any loss.
Theorem . also gives us the justification to treat Rm×n (the vector
space of m × n-matrices) and Rmn (the vector space of vectors of length
mn) the same, as their dimensions are mn, and there exists a linear, bi-
jective mapping that transforms one into the other.
Remark. Consider vector spaces V, W, X. Then:
For linear mappings Φ : V → W and Ψ : W → X, the mapping
Ψ ◦ Φ : V → X is also linear.
If Φ : V → W is an isomorphism, then Φ− : W → V is an isomor-
phism, too.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
Figure . Two
different coordinate
systems defined by
two sets of basis
vectors. A vector x
has different
coordinate
representations
depending on which
coordinate system is
chosen.
If Φ : V → W, Ψ : V → W are linear, then Φ + Ψ and λΦ, λ ∈ R, are
linear, too.
.. Matrix Representation of Linear Mappings
Any n-dimensional vector space is isomorphic to Rn (Theorem .). We
consider a basis {b, . . . , bn} of an n-dimensional vector space V . In the
following, the order of the basis vectors will be important. Therefore, we
write
B = (b, . . . , bn)
and call this n-tuple an ordered basis of V .
ordered basis
Remark (Notation). We are at the point where notation gets a bit tricky.
Therefore, we summarize some parts here. B = (b, . . . , bn) is an ordered
basis, B = {b, . . . , bn} is an (unordered) basis, and B = [b, . . . , bn] is a
matrix whose columns are the vectors b, . . . , bn.
Definition . (Coordinates). Consider a vector space V and an ordered
basis B = (b, . . . , bn) of V . For any x ∈ V we obtain a unique represen-
tation (linear combination)
x = αb + . . . + αnbn
of x with respect to B. Then α, . . . , αn are the coordinates of x with
coordinate
respect to B, and the vector
α =
αn
 ∈ Rn
is the coordinate vector/coordinate representation of x with respect to the
coordinate vector
coordinate
representation
ordered basis B.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linear Mappings
A basis effectively defines a coordinate system. We are familiar with the
Cartesian coordinate system in two dimensions, which is spanned by the
canonical basis vectors e, e. In this coordinate system, a vector x ∈ R
has a representation that tells us how to linearly combine e and e to
obtain x. However, any basis of R defines a valid coordinate system,
and the same vector x from before may have a different coordinate rep-
resentation in the (b, b) basis. In Figure ., the coordinates of x with
respect to the standard basis (e, e) is [, ]⊤. However, with respect to
the basis (b, b) the same vector x is represented as [., .]⊤, i.e.,
x = .b + .b. In the following sections, we will discover how to
obtain this representation.
with respect to the standard basis (e, e) of R. This means, we can write
x = e + e. However, we do not have to choose the standard basis to
represent this vector. If we use the basis vectors b = [, −]⊤, b = [, ]⊤
we will obtain the coordinates
Example .
Let us have a look at a geometric vector x ∈ R with coordinates [, ]⊤
Figure .
Different coordinate
representations of a
vector x, depending
on the choice of
basis.
[−, ]⊤ to represent the same vector with
respect to (b, b) (see Figure .).
x = e + e
b +
x = −
Remark. For an n-dimensional vector space V and an ordered basis B
of V , the mapping Φ : Rn → V , Φ(ei) = bi, i = , . . . , n, is linear
(and because of Theorem . an isomorphism), where (e, . . . , en) is
the standard basis of Rn.
Now we are ready to make an explicit connection between matrices and
linear mappings between finite-dimensional vector spaces.
Definition . (Transformation Matrix). Consider vector spaces V, W
with corresponding (ordered) bases B = (b, . . . , bn) and C = (c, . . . , cm).
Moreover, we consider a linear mapping Φ : V → W. For j ∈ {, . . . , n},
Φ(bj) = αjc +    + αmjcm =
i=
αijci
is the unique representation of Φ(bj) with respect to C. Then, we call the
m × n-matrix AΦ, whose elements are given by
AΦ(i, j) = αij ,
the transformation matrix of Φ (with respect to the ordered bases B of V
transformation
matrix
and C of W).
The coordinates of Φ(bj) with respect to the ordered basis C of W
are the j-th column of AΦ. Consider (finite-dimensional) vector spaces
V, W with ordered bases B, C and a linear mapping Φ : V → W with
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
transformation matrix AΦ. If ˆx is the coordinate vector of x ∈ V with
respect to B and ˆy the coordinate vector of y = Φ(x) ∈ W with respect
to C, then
ˆy = AΦˆx .
This means that the transformation matrix can be used to map coordinates
with respect to an ordered basis in V to coordinates with respect to an
ordered basis in W.
Example . (Transformation Matrix)
Consider a homomorphism Φ : V
→ W and ordered bases B =
(b, . . . , b) of V and C = (c, . . . , c) of W. With
Φ(b) = c − c + c − c
Φ(b) = c + c + c + c
Φ(b) = c + c + c
the transformation matrix AΦ with respect to B and C satisfies Φ(bk) =
i= αikci for k = , . . . ,  and is given as
AΦ = [α, α, α] =
 ,
where the αj, j = , , , are the coordinate vectors of Φ(bj) with respect
to C.
Example . (Linear Transformations of Vectors)
(a) Original data.
(b) Rotation by ◦.
(c) Stretch along the
horizontal axis.
(d)
General
linear
mapping.
Figure . Three
examples of linear
transformations of
the vectors shown
as dots in (a);
(b) Rotation by ◦;
(c) Stretching of the
horizontal
coordinates by ;
(d) Combination of
reflection, rotation
and stretching.
We consider three linear transformations of a set of vectors in R with
the transformation matrices
− sin( π
sin( π
cos( π
A =
cos( π

, A =
, A =
. (.)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linear Mappings
Figure . gives three examples of linear transformations of a set of vec-
tors. Figure .(a) shows  vectors in R, each of which is represented
by a dot at the corresponding (x, x)-coordinates. The vectors are ar-
ranged in a square. When we use matrix A in (.) to linearly transform
each of these vectors, we obtain the rotated square in Figure .(b). If we
apply the linear mapping represented by A, we obtain the rectangle in
Figure .(c) where each x-coordinate is stretched by . Figure .(d)
shows the original square from Figure .(a) when linearly transformed
using A, which is a combination of a reflection, a rotation, and a stretch.
.. Basis Change
In the following, we will have a closer look at how transformation matrices
of a linear mapping Φ : V → W change if we change the bases in V and
W. Consider two ordered bases
B = (b, . . . , bn),
˜B = (˜b, . . . , ˜bn)
of V and two ordered bases
C = (c, . . . , cm),
˜C = (˜c, . . . , ˜cm)
of W. Moreover, AΦ ∈ Rm×n is the transformation matrix of the linear
mapping Φ : V → W with respect to the bases B and C, and ˜AΦ ∈ Rm×n
is the corresponding transformation mapping with respect to ˜B and ˜C.
In the following, we will investigate how A and ˜A are related, i.e., how/
whether we can transform AΦ into ˜AΦ if we choose to perform a basis
change from B, C to ˜B, ˜C.
Remark. We effectively get different coordinate representations of the
identity mapping idV . In the context of Figure ., this would mean to
map coordinates with respect to (e, e) onto coordinates with respect to
(b, b) without changing the vector x. By changing the basis and corre-
spondingly the representation of vectors, the transformation matrix with
respect to this new basis can have a particularly simple form that allows
for straightforward computation.
Example . (Basis Change)
Consider a transformation matrix
A =
with respect to the canonical basis in R. If we define a new basis
B = (

© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
we obtain a diagonal transformation matrix
˜A =
with respect to B, which is easier to work with than A.
In the following, we will look at mappings that transform coordinate
vectors with respect to one basis into coordinate vectors with respect to
a different basis. We will state our main result first and then provide an
explanation.
Theorem . (Basis Change). For a linear mapping Φ : V → W, ordered
bases
B = (b, . . . , bn),
˜B = (˜b, . . . , ˜bn)
of V and
C = (c, . . . , cm),
˜C = (˜c, . . . , ˜cm)
of W, and a transformation matrix AΦ of Φ with respect to B and C, the
corresponding transformation matrix ˜AΦ with respect to the bases ˜B and ˜C
is given as
˜AΦ = T −AΦS .
Here, S ∈ Rn×n is the transformation matrix of idV that maps coordinates
with respect to ˜B onto coordinates with respect to B, and T ∈ Rm×m is the
transformation matrix of idW that maps coordinates with respect to ˜C onto
coordinates with respect to C.
Proof
Following Drumm and Weil (), we can write the vectors of
the new basis ˜B of V as a linear combination of the basis vectors of B,
such that
˜bj = sjb +    + snjbn =
i=
sijbi ,
j = , . . . , n .
Similarly, we write the new basis vectors ˜C of W as a linear combination
of the basis vectors of C, which yields
˜ck = tkc +    + tmkcm =
l=
tlkcl ,
k = , . . . , m .
We define S = ((sij)) ∈ Rn×n as the transformation matrix that maps
coordinates with respect to ˜B onto coordinates with respect to B and
T = ((tlk)) ∈ Rm×m as the transformation matrix that maps coordinates
with respect to ˜C onto coordinates with respect to C. In particular, the jth
column of S is the coordinate representation of ˜bj with respect to B and
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linear Mappings
the kth column of T is the coordinate representation of ˜ck with respect to
C. Note that both S and T are regular.
We are going to look at Φ(˜bj) from two perspectives. First, applying the
mapping Φ, we get that for all j = , . . . , n
Φ(˜bj) =
cl , (.)
k=
˜akj
l=
tlkcl =
l=
k=
tlk˜akj
k=
˜akj˜ck
| {z }
∈W
where we first expressed the new basis vectors ˜ck ∈ W as linear com-
binations of the basis vectors cl ∈ W and then swapped the order of
summation.
Alternatively, when we express the ˜bj ∈ V as linear combinations of
bj ∈ V , we arrive at
Φ(˜bj)
i=
sijbi
i=
sijΦ(bi) =
i=
sij
l=
alicl
(.a)
cl ,
j = , . . . , n ,
(.b)
i=
alisij
l=
where we exploited the linearity of Φ. Comparing (.) and (.b),
it follows for all j = , . . . , n and l = , . . . , m that
i=
alisij
k=
tlk˜akj =
and, therefore,
T ˜AΦ = AΦS ∈ Rm×n ,
such that
˜AΦ = T −AΦS ,
which proves Theorem ..
Theorem . tells us that with a basis change in V (B is replaced with
˜B) and W (C is replaced with ˜C), the transformation matrix AΦ of a
linear mapping Φ : V → W is replaced by an equivalent matrix ˜AΦ with
˜AΦ = T −AΦS.
Figure . illustrates this relation: Consider a homomorphism Φ : V →
W and ordered bases B, ˜B of V and C, ˜C of W. The mapping ΦCB is an
instantiation of Φ and maps basis vectors of B onto linear combinations
of basis vectors of C. Assume that we know the transformation matrix AΦ
of ΦCB with respect to the ordered bases B, C. When we perform a basis
change from B to ˜B in V and from C to ˜C in W, we can determine the
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
Vector spaces
ΦCB
ΦCB
AΦ
AΦ
Ordered bases
ΨB ˜
ΞC ˜
ΨB ˜
Ξ ˜
CC = Ξ−
C ˜
T −
˜AΦ
˜AΦ
˜B
˜C
˜B
˜C
Φ ˜
C ˜
Φ ˜
C ˜
Figure . For a
homomorphism
Φ : V → W and
ordered bases B, ˜B
of V and C, ˜C of W
(marked in blue),
we can express the
mapping Φ ˜
C ˜
B with
respect to the bases
˜B, ˜C equivalently as
a composition of the
homomorphisms
Φ ˜
C ˜
B =
Ξ ˜
CC ◦ ΦCB ◦ ΨB ˜
with respect to the
bases in the
subscripts. The
corresponding
transformation
matrices are in red.
corresponding transformation matrix ˜AΦ as follows: First, we find the ma-
trix representation of the linear mapping ΨB ˜
B : V → V that maps coordi-
nates with respect to the new basis ˜B onto the (unique) coordinates with
respect to the “old” basis B (in V ). Then, we use the transformation ma-
trix AΦ of ΦCB : V → W to map these coordinates onto the coordinates
with respect to C in W. Finally, we use a linear mapping Ξ ˜
CC : W → W
to map the coordinates with respect to C onto coordinates with respect to
˜C. Therefore, we can express the linear mapping Φ ˜
C ˜
B as a composition of
linear mappings that involve the “old” basis:
Φ ˜
C ˜
B = Ξ ˜
CC ◦ ΦCB ◦ ΨB ˜
B = Ξ−
C ˜
C ◦ ΦCB ◦ ΨB ˜
B .
Concretely, we use ΨB ˜
B = idV and ΞC ˜
C = idW , i.e., the identity mappings
that map vectors onto themselves, but with respect to a different basis.
Definition . (Equivalence). Two matrices A, ˜A ∈ Rm×n are equivalent
equivalent
if there exist regular matrices S ∈ Rn×n and T ∈ Rm×m, such that
˜A = T −AS.
Definition . (Similarity). Two matrices A, ˜A ∈ Rn×n are similar if
similar
there exists a regular matrix S ∈ Rn×n with ˜A = S−AS
Remark. Similar matrices are always equivalent. However, equivalent ma-
trices are not necessarily similar.
Remark. Consider vector spaces V, W, X. From the remark that follows
Theorem ., we already know that for linear mappings Φ : V → W
and Ψ : W → X the mapping Ψ ◦ Φ : V → X is also linear. With
transformation matrices AΦ and AΨ of the corresponding mappings, the
overall transformation matrix is AΨ◦Φ = AΨAΦ.
In light of this remark, we can look at basis changes from the perspec-
tive of composing linear mappings:
AΦ is the transformation matrix of a linear mapping ΦCB : V → W
with respect to the bases B, C.
˜AΦ is the transformation matrix of the linear mapping Φ ˜
C ˜
B : V → W
with respect to the bases ˜B, ˜C.
S is the transformation matrix of a linear mapping ΨB ˜
B : V → V
(automorphism) that represents ˜B in terms of B. Normally, Ψ = idV is
the identity mapping in V .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linear Mappings
T is the transformation matrix of a linear mapping ΞC ˜
C : W → W
(automorphism) that represents ˜C in terms of C. Normally, Ξ = idW is
the identity mapping in W.
If we (informally) write down the transformations just in terms of bases,
then AΦ : B → C, ˜AΦ : ˜B → ˜C, S : ˜B → B, T : ˜C → C and
T − : C → ˜C, and
˜B → ˜C = ˜B → B→ C → ˜C
˜AΦ = T −AΦS .
Note that the execution order in (.) is from right to left because vec-
tors are multiplied at the right-hand side so that x → Sx → AΦ(Sx) →
T − AΦ(Sx)
 = ˜AΦx.
Example . (Basis Change)
Consider a linear mapping Φ : R → R whose transformation matrix is
AΦ =
with respect to the standard bases
B = (
) ,
C = (
 ,
 ,
 ,
 ,
 ,
We seek the transformation matrix ˜AΦ of Φ with respect to the new bases
˜B = (
) ∈ R,
˜C = (
 ,
 ,
) .
 ,
 ,
 ,
Then,
S =
 ,
T =
 ,
where the ith column of S is the coordinate representation of ˜bi in
terms of the basis vectors of B. Since B is the standard basis, the co-
ordinate representation is straightforward to find. For a general basis B,
we would need to solve a linear equation system to find the λi such that
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
i= λibi = ˜bj, j = , . . . , . Similarly, the jth column of T is the coordi-
nate representation of ˜cj in terms of the basis vectors of C.
Therefore, we obtain
˜AΦ = T −AΦS =
(.a)
 .
(.b)
In Chapter , we will be able to exploit the concept of a basis change
to find a basis with respect to which the transformation matrix of an en-
domorphism has a particularly simple (diagonal) form. In Chapter , we
will look at a data compression problem and find a convenient basis onto
which we can project the data while minimizing the compression loss.
.. Image and Kernel
The image and kernel of a linear mapping are vector subspaces with cer-
tain important properties. In the following, we will characterize them
more carefully.
Definition . (Image and Kernel).
For Φ : V → W, we define the kernel/null space
kernel
null space
ker(Φ) := Φ−(W) = {v ∈ V : Φ(v) = W}
and the image/range
image
range
Im(Φ) := Φ(V ) = {w ∈ W|∃v ∈ V : Φ(v) = w} .
We also call V and W also the domain and codomain of Φ, respectively.
domain
codomain
Intuitively, the kernel is the set of vectors v ∈ V that Φ maps onto the
neutral element W ∈ W. The image is the set of vectors w ∈ W that
can be “reached” by Φ from any vector in V . An illustration is given in
Figure ..
Remark. Consider a linear mapping Φ : V → W, where V, W are vector
spaces.
It always holds that Φ(V ) = W and, therefore, V ∈ ker(Φ). In
particular, the null space is never empty.
Im(Φ) ⊆ W is a subspace of W, and ker(Φ) ⊆ V is a subspace of V .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linear Mappings
Φ : V → W
Figure . Kernel
and image of a
linear mapping
Φ : V → W.
ker(Φ)
Im(Φ)
Φ is injective (one-to-one) if and only if ker(Φ) = {}.
Remark (Null Space and Column Space). Let us consider A ∈ Rm×n and
a linear mapping Φ : Rn → Rm, x → Ax.
For A = [a, . . . , an], where ai are the columns of A, we obtain
(.a)
Im(Φ) = {Ax : x ∈ Rn} =
i=
xiai : x, . . . , xn ∈ R
( n
= span[a, . . . , an] ⊆ Rm ,
(.b)
i.e., the image is the span of the columns of A, also called the column
column space
space. Therefore, the column space (image) is a subspace of Rm, where
m is the “height” of the matrix.
rk(A) = dim(Im(Φ)).
The kernel/null space ker(Φ) is the general solution to the homoge-
neous system of linear equations Ax =  and captures all possible
linear combinations of the elements in Rn that produce  ∈ Rm.
The kernel is a subspace of Rn, where n is the “width” of the matrix.
The kernel focuses on the relationship among the columns, and we can
use it to determine whether/how we can express a column as a linear
combination of other columns.
Example . (Image and Kernel of a Linear Mapping)
The mapping
Φ : R → R,

 →
 =
x + x − x
x + x
(.a)
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
= x
+ x
+ x
+ x
(.b)
is linear. To determine Im(Φ), we can take the span of the columns of the
transformation matrix and obtain
Im(Φ) = span[
] .
To compute the kernel (null space) of Φ, we need to solve Ax = , i.e.,
we need to solve a homogeneous equation system. To do this, we use
Gaussian elimination to transform A into reduced row-echelon form:

⇝    ⇝
times the second column a. Therefore,  = a+
This matrix is in reduced row-echelon form, and we can use the Minus-
Trick to compute a basis of the kernel (see Section ..). Alternatively,
we can express the non-pivot columns (columns  and ) as linear com-
binations of the pivot columns (columns  and ). The third column a is
equivalent to −
a. In
the same way, we see that a = a−
a and, therefore,  = a−
a−a.
Overall, this gives us the kernel (null space) as
ker(Φ) = span[
 ,
] .
rank-nullity
theorem
Theorem . (Rank-Nullity Theorem). For vector spaces V, W and a lin-
ear mapping Φ : V → W it holds that
dim(ker(Φ)) + dim(Im(Φ)) = dim(V ) .
The rank-nullity theorem is also referred to as the fundamental theorem
fundamental
theorem of linear
mappings
of linear mappings (Axler, , theorem .). The following are direct
consequences of Theorem .:
If dim(Im(Φ)) < dim(V ), then ker(Φ) is non-trivial, i.e., the kernel
contains more than V and dim(ker(Φ)) ⩾ .
If AΦ is the transformation matrix of Φ with respect to an ordered basis
and dim(Im(Φ)) < dim(V ), then the system of linear equations AΦx =
has infinitely many solutions.
If dim(V ) = dim(W), then the three-way equivalence
Φ is injective ⇐⇒ Φ is surjective ⇐⇒ Φ is bijective
holds since Im(Φ) ⊆ W.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Affine Spaces
. Affine Spaces
In the following, we will take a closer look at spaces that are offset from
the origin, i.e., spaces that are no longer vector subspaces. Moreover, we
will briefly discuss properties of mappings between these affine spaces,
which resemble linear mappings.
Remark. In the machine learning literature, the distinction between linear
and affine is sometimes not clear so that we can find references to affine
spaces/mappings as linear spaces/mappings.
.. Affine Subspaces
Definition . (Affine Subspace). Let V be a vector space, x ∈ V and
U ⊆ V a subspace. Then the subset
L = x + U := {x + u : u ∈ U}
(.a)
= {v ∈ V |∃u ∈ U : v = x + u} ⊆ V
(.b)
is called affine subspace or linear manifold of V . U is called direction or
affine subspace
linear manifold
direction
direction space, and x is called support point. In Chapter , we refer to
such a subspace as a hyperplane.
direction space
support point
hyperplane
Note that the definition of an affine subspace excludes  if x /∈ U.
Therefore, an affine subspace is not a (linear) subspace (vector subspace)
of V for x /∈ U.
Examples of affine subspaces are points, lines, and planes in R, which
do not (necessarily) go through the origin.
Remark. Consider two affine subspaces L = x + U and ˜L = ˜x + ˜U of a
vector space V . Then, L ⊆ ˜L if and only if U ⊆ ˜U and x − ˜x ∈ ˜U.
Affine subspaces are often described by parameters: Consider a k-dimen-
sional affine space L = x + U of V . If (b, . . . , bk) is an ordered basis of
U, then every element x ∈ L can be uniquely described as
x = x + λb + . . . + λkbk ,
where λ, . . . , λk ∈ R. This representation is called parametric equation
parametric equation
of L with directional vectors b, . . . , bk and parameters λ, . . . , λk.
parameters
Example . (Affine Subspaces)
One-dimensional affine subspaces are called lines and can be written
line
as y = x + λb, where λ ∈ R and U = span[b] ⊆ Rn is a one-
dimensional subspace of Rn. This means that a line is defined by a sup-
port point x and a vector b that defines the direction. See Figure .
for an illustration.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
Two-dimensional affine subspaces of Rn are called planes. The para-
plane
metric equation for planes is y = x + λb + λb, where λ, λ ∈ R
and U = span[b, b] ⊆ Rn. This means that a plane is defined by a
support point x and two linearly independent vectors b, b that span
the direction space.
In Rn, the (n − )-dimensional affine subspaces are called hyperplanes,
hyperplane
and the corresponding parametric equation is y = x + Pn−
i= λibi,
where b, . . . , bn− form a basis of an (n − )-dimensional subspace
U of Rn. This means that a hyperplane is defined by a support point
x and (n − ) linearly independent vectors b, . . . , bn− that span the
direction space. In R, a line is also a hyperplane. In R, a plane is also
a hyperplane.
L = x + λb
Figure . Lines
are affine subspaces.
Vectors y on a line
x + λb lie in an
affine subspace L
with support point
x and direction b.
Remark (Inhomogeneous systems of linear equations and affine subspaces).
For A ∈ Rm×n and x ∈ Rm, the solution of the system of linear equa-
tions Aλ = x is either the empty set or an affine subspace of Rn of
dimension n − rk(A). In particular, the solution of the linear equation
λb + . . . + λnbn = x, where (λ, . . . , λn) ̸= (, . . . , ), is a hyperplane
in Rn.
In Rn, every k-dimensional affine subspace is the solution of an inho-
mogeneous system of linear equations Ax = b, where A ∈ Rm×n, b ∈
Rm and rk(A) = n − k. Recall that for homogeneous equation systems
Ax =  the solution was a vector subspace, which we can also think of
as a special affine space with support point x = .
.. Affine Mappings
Similar to linear mappings between vector spaces, which we discussed
in Section ., we can define affine mappings between two affine spaces.
Linear and affine mappings are closely related. Therefore, many properties
that we already know from linear mappings, e.g., that the composition of
linear mappings is a linear mapping, also hold for affine mappings.
Definition . (Affine Mapping). For two vector spaces V, W, a linear
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Further Reading
mapping Φ : V → W, and a ∈ W, the mapping
ϕ : V → W
x → a + Φ(x)
is an affine mapping from V to W. The vector a is called the translation
affine mapping
translation vector
vector of ϕ.
Every affine mapping ϕ : V → W is also the composition of a linear
mapping Φ : V → W and a translation τ : W → W in W, such that
ϕ = τ ◦ Φ. The mappings Φ and τ are uniquely determined.
The composition ϕ′ ◦ ϕ of affine mappings ϕ : V → W, ϕ′ : W → X is
affine.
If ϕ is bijective, affine mappings keep the geometric structure invariant.
They then also preserve the dimension and parallelism.
. Further Reading
There are many resources for learning linear algebra, including the text-
books by Strang (), Golan (), Axler (), and Liesen and
Mehrmann (). There are also several online resources that we men-
tioned in the introduction to this chapter. We only covered Gaussian elim-
ination here, but there are many other approaches for solving systems of
linear equations, and we refer to numerical linear algebra textbooks by
Stoer and Burlirsch (), Golub and Van Loan (), and Horn and
Johnson () for an in-depth discussion.
In this book, we distinguish between the topics of linear algebra (e.g.,
vectors, matrices, linear independence, basis) and topics related to the
geometry of a vector space. In Chapter , we will introduce the inner
product, which induces a norm. These concepts allow us to define angles,
lengths and distances, which we will use for orthogonal projections. Pro-
jections turn out to be key in many machine learning algorithms, such as
linear regression and principal component analysis, both of which we will
cover in Chapters  and , respectively.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
Exercises
We consider (R\{−}, ⋆), where
a ⋆ b := ab + a + b,
a, b ∈ R\{−}
a. Show that (R\{−}, ⋆) is an Abelian group.
b. Solve
⋆ x ⋆ x =
in the Abelian group (R\{−}, ⋆), where ⋆ is defined in (.).
Let n be in N\{}. Let k, x be in Z. We define the congruence class ¯k of the
integer k as the set
k = {x ∈ Z | x − k =  (modn)}
= {x ∈ Z | ∃a ∈ Z: (x − k = n  a)} .
We now define Z/nZ (sometimes written Zn) as the set of all congruence
classes modulo n. Euclidean division implies that this set is a finite set con-
taining n elements:
Zn = {, , . . . , n − }
For all a, b ∈ Zn, we define
a ⊕ b := a + b
a. Show that (Zn, ⊕) is a group. Is it Abelian?
b. We now define another operation ⊗ for all a and b in Zn as
a ⊗ b = a × b ,
where a × b represents the usual multiplication in Z.
Let n = . Draw the times table of the elements of Z\{} under ⊗, i.e.,
calculate the products a ⊗ b for all a and b in Z\{}.
Hence, show that Z\{} is closed under ⊗ and possesses a neutral
element for ⊗. Display the inverse of all elements in Z\{} under ⊗.
Conclude that (Z\{}, ⊗) is an Abelian group.
c. Show that (Z\{}, ⊗) is not a group.
d. We recall that the B´ezout theorem states that two integers a and b are
relatively prime (i.e., gcd(a, b) = ) if and only if there exist two integers
u and v such that au + bv = . Show that (Zn\{}, ⊗) is a group if and
only if n ∈ N\{} is prime.
Consider the set G of  ×  matrices defined as follows:
G =
 ∈ R×

x, y, z ∈ R
We define  as the standard matrix multiplication.
Is (G, ) a group? If yes, is it Abelian? Justify your answer.
Compute the following matrix products, if possible:
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Exercises
a.
b.
c.
d.

e.

Find the set S of all solutions in x of the following inhomogeneous linear
systems Ax = b, where A and b are defined as follows:
a.
A =
 ,
b =
b.
A =
 ,
b =
Using Gaussian elimination, find all solutions of the inhomogeneous equa-
tion system Ax = b with
A =
 ,
b =
 .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
Find all solutions in x =
where
 ∈ R of the equation system Ax = x,
A =
Determine the inverses of the following matrices if possible:
and P
i= xi = .
a.
A =
b.
A =
Which of the following sets are subspaces of R?
a. A = {(λ, λ + µ, λ − µ) | λ, µ ∈ R}
b. B = {(λ, −λ, ) | λ ∈ R}
c. Let γ be in R.
C = {(ξ, ξ, ξ) ∈ R | ξ − ξ + ξ = γ}
d. D = {(ξ, ξ, ξ) ∈ R | ξ ∈ Z}
. Are the following sets of vectors linearly independent?
a.
x =
 ,
x =
 ,
x =
b.
x =
x =
x =
. Write
y =
as linear combination of
x =
 ,
x =
 ,
x =
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Exercises
. Consider two subspaces of R:
U = span[
 ,
 ,
] ,
U = span[
 ,
 ,
] .
Determine a basis of U ∩ U.
. Consider two subspaces U and U, where U is the solution space of the
homogeneous equation system Ax =  and U is the solution space of the
homogeneous equation system Ax =  with
A =
 ,
A =
 .
a. Determine the dimension of U, U.
b. Determine bases of U and U.
c. Determine a basis of U ∩ U.
. Consider two subspaces U and U, where U is spanned by the columns of
A and U is spanned by the columns of A with
A =
 .
 ,
A =
a. Determine the dimension of U, U
b. Determine bases of U and U
c. Determine a basis of U ∩ U
. Let F = {(x, y, z) ∈ R | x+y−z = } and G = {(a−b, a+b, a−b) | a, b ∈ R}.
a. Show that F and G are subspaces of R.
b. Calculate F ∩ G without resorting to any basis vector.
c. Find one basis for F and one for G, calculate F∩G using the basis vectors
previously found and check your result with the previous question.
. Are the following mappings linear?
a. Let a, b ∈ R.
Φ : L([a, b]) → R
f(x)dx ,
f → Φ(f) =
Z b
where L([a, b]) denotes the set of integrable functions on [a, b].
b.
Φ : C → C
f → Φ(f) = f′ ,
where for k ⩾ , Ck denotes the set of k times continuously differen-
tiable functions, and C denotes the set of continuous functions.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Algebra
c.
Φ : R → R
x → Φ(x) = cos(x)
d.
Φ : R → R
x →

e. Let θ be in [, π[ and
Φ : R → R
x →

cos(θ)
sin(θ)
− sin(θ)
cos(θ)

. Consider the linear mapping
Φ : R → R
x + x + x
x + x + x
x − x
x + x + x
 =
Find the transformation matrix AΦ.
Determine rk(AΦ).
Compute the kernel and image of Φ. What are dim(ker(Φ)) and dim(Im(Φ))?
. Let E be a vector space. Let f and g be two automorphisms on E such that
f ◦ g = idE (i.e., f ◦ g is the identity mapping idE). Show that ker(f) =
ker(g ◦ f), Im(g) = Im(g ◦ f) and that ker(f) ∩ Im(g) = {E}.
. Consider an endomorphism Φ : R → R whose transformation matrix
(with respect to the standard basis in R) is
AΦ =
 .
a. Determine ker(Φ) and Im(Φ).
b. Determine the transformation matrix ˜AΦ with respect to the basis
B = (
 ,
 ,
) ,
i.e., perform a basis change toward the new basis B.
. Let us consider b, b, b′
, b′
,  vectors of R expressed in the standard basis
of R as
b =

b =

b′

b′

and let us define two ordered bases B = (b, b) and B′ = (b′
, b′
) of R.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Exercises
a. Show that B and B′ are two bases of R and draw those basis vectors.
b. Compute the matrix P  that performs a basis change from B′ to B.
c. We consider c, c, c, three vectors of R defined in the standard basis
of R as
c =
 ,
c =
 ,
c =
and we define C = (c, c, c).
(i) Show that C is a basis of R, e.g., by using determinants (see
Section .).
(ii) Let us call C′ = (c′
, c′
, c′
) the standard basis of R. Determine
the matrix P  that performs the basis change from C to C′.
d. We consider a homomorphism Φ : R −→ R, such that
Φ(b + b)
c + c
Φ(b − b)
c − c + c
where B = (b, b) and C = (c, c, c) are ordered bases of R and R,
respectively.
Determine the transformation matrix AΦ of Φ with respect to the or-
dered bases B and C.
e. Determine A′, the transformation matrix of Φ with respect to the bases
B′ and C′.
f. Let us consider the vector x ∈ R whose coordinates in B′ are [, ]⊤.
In other words, x = b′
+ b′
(i) Calculate the coordinates of x in B.
(ii) Based on that, compute the coordinates of Φ(x) expressed in C.
(iii) Then, write Φ(x) in terms of c′
, c′
, c′
(iv) Use the representation of x in B′ and the matrix A′ to find this
result directly.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
In Chapter , we studied vectors, vector spaces, and linear mappings at
a general but abstract level. In this chapter, we will add some geomet-
ric interpretation and intuition to all of these concepts. In particular, we
will look at geometric vectors and compute their lengths and distances
or angles between two vectors. To be able to do this, we equip the vec-
tor space with an inner product that induces the geometry of the vector
space. Inner products and their corresponding norms and metrics capture
the intuitive notions of similarity and distances, which we use to develop
the support vector machine in Chapter . We will then use the concepts
of lengths and angles between vectors to discuss orthogonal projections,
which will play a central role when we discuss principal component anal-
ysis in Chapter  and regression via maximum likelihood estimation in
Chapter . Figure . gives an overview of how concepts in this chapter
are related and how they are connected to other chapters of the book.
Inner product
induces
Figure . A mind
map of the concepts
introduced in this
chapter, along with
when they are used
in other parts of the
book.
Norm
Chapter
Classification
Lengths
Orthogonal
projection
Angles
Rotations
Chapter
Chapter
Chapter
Regression
Matrix
decomposition
Dimensionality
reduction
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

. Norms
∥x∥ =
∥x∥ =
Figure . For
different norms, the
red lines indicate
the set of vectors
with norm . Left:
Manhattan norm;
Right: Euclidean
distance.
. Norms
When we think of geometric vectors, i.e., directed line segments that start
at the origin, then intuitively the length of a vector is the distance of the
“end” of this directed line segment from the origin. In the following, we
will discuss the notion of the length of vectors using the concept of a norm.
Definition . (Norm). A norm on a vector space V is a function
norm
∥  ∥ : V → R ,
x → ∥x∥ ,
which assigns each vector x its length ∥x∥ ∈ R, such that for all λ ∈ R
length
and x, y ∈ V the following hold:
absolutely
homogeneous
Absolutely homogeneous: ∥λx∥ = |λ|∥x∥
triangle inequality
Triangle inequality: ∥x + y∥ ⩽ ∥x∥ + ∥y∥
positive definite
Positive definite: ∥x∥ ⩾  and ∥x∥ =  ⇐⇒ x =
Figure . Triangle
inequality.
c ≤ a + b
In geometric terms, the triangle inequality states that for any triangle,
the sum of the lengths of any two sides must be greater than or equal
to the length of the remaining side; see Figure . for an illustration.
Definition . is in terms of a general vector space V (Section .), but
in this book we will only consider a finite-dimensional vector space Rn.
Recall that for a vector x ∈ Rn we denote the elements of the vector using
a subscript, that is, xi is the ith element of the vector x.
Example . (Manhattan Norm)
The Manhattan norm on Rn is defined for x ∈ Rn as
Manhattan norm
∥x∥ :=
i=
|xi| ,
where |  | is the absolute value. The left panel of Figure . shows all
vectors x ∈ R with ∥x∥ = . The Manhattan norm is also called ℓ
ℓ norm
norm.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
Example . (Euclidean Norm)
The Euclidean norm of x ∈ Rn is defined as
Euclidean norm
x⊤x
∥x∥ :=
i=
i =
and computes the Euclidean distance of x from the origin. The right panel
Euclidean distance
of Figure . shows all vectors x ∈ R with ∥x∥ = . The Euclidean
norm is also called ℓ norm.
ℓ norm
Remark. Throughout this book, we will use the Euclidean norm (.) by
default if not stated otherwise.
. Inner Products
Inner products allow for the introduction of intuitive geometrical con-
cepts, such as the length of a vector and the angle or distance between
two vectors. A major purpose of inner products is to determine whether
vectors are orthogonal to each other.
.. Dot Product
We may already be familiar with a particular type of inner product, the
scalar product/dot product in Rn, which is given by
scalar product
dot product
x⊤y =
i=
xiyi .
We will refer to this particular inner product as the dot product in this
book. However, inner products are more general concepts with specific
properties, which we will now introduce.
.. General Inner Products
Recall the linear mapping from Section ., where we can rearrange the
mapping with respect to addition and multiplication with a scalar. A bi-
bilinear mapping
linear mapping Ω is a mapping with two arguments, and it is linear in
each argument, i.e., when we look at a vector space V then it holds that
for all x, y, z ∈ V, λ, ψ ∈ R that
Ω(λx + ψy, z) = λΩ(x, z) + ψΩ(y, z)
Ω(x, λy + ψz) = λΩ(x, y) + ψΩ(x, z) .
Here, (.) asserts that Ω is linear in the first argument, and (.) asserts
that Ω is linear in the second argument (see also (.)).
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Inner Products
Definition .. Let V be a vector space and Ω : V × V → R be a bilinear
mapping that takes two vectors and maps them onto a real number. Then
Ω is called symmetric if Ω(x, y) = Ω(y, x) for all x, y ∈ V , i.e., the
symmetric
order of the arguments does not matter.
Ω is called positive definite if
positive definite
∀x ∈ V \{} : Ω(x, x) >  ,
Ω(, ) =  .
Definition .. Let V be a vector space and Ω : V × V → R be a bilinear
mapping that takes two vectors and maps them onto a real number. Then
A positive definite, symmetric bilinear mapping Ω : V ×V → R is called
an inner product on V . We typically write ⟨x, y⟩ instead of Ω(x, y).
inner product
The pair (V, ⟨, ⟩) is called an inner product space or (real) vector space
inner product space
vector space with
inner product
with inner product. If we use the dot product defined in (.), we call
(V, ⟨, ⟩) a Euclidean vector space.
Euclidean vector
space
We will refer to these spaces as inner product spaces in this book.
Example . (Inner Product That Is Not the Dot Product)
Consider V = R. If we define
⟨x, y⟩ := xy − (xy + xy) + xy
then ⟨, ⟩ is an inner product but different from the dot product. The proof
will be an exercise.
.. Symmetric, Positive Definite Matrices
Symmetric, positive definite matrices play an important role in machine
learning, and they are defined via the inner product. In Section ., we
will return to symmetric, positive definite matrices in the context of matrix
decompositions. The idea of symmetric positive semidefinite matrices is
key in the definition of kernels (Section .).
Consider an n-dimensional vector space V with an inner product ⟨, ⟩ :
V × V → R (see Definition .) and an ordered basis B = (b, . . . , bn) of
V . Recall from Section .. that any vectors x, y ∈ V can be written as
linear combinations of the basis vectors so that x = Pn
i= ψibi ∈ V and
y = Pn
j= λjbj ∈ V for suitable ψi, λj ∈ R. Due to the bilinearity of the
inner product, it holds for all x, y ∈ V that
⟨x, y⟩ =
i=
ψibi,
j=
λjbj
i=
j=
ψi ⟨bi, bj⟩ λj = ˆx⊤Aˆy , (.)
* n
where Aij := ⟨bi, bj⟩ and ˆx, ˆy are the coordinates of x and y with respect
to the basis B. This implies that the inner product ⟨, ⟩ is uniquely deter-
mined through A. The symmetry of the inner product also means that A
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
is symmetric. Furthermore, the positive definiteness of the inner product
implies that
∀x ∈ V \{} : x⊤Ax >  .
Definition . (Symmetric, Positive Definite Matrix). A symmetric matrix
A ∈ Rn×n that satisfies (.) is called symmetric, positive definite, or
symmetric, positive
definite
just positive definite. If only ⩾ holds in (.), then A is called symmetric,
positive definite
positive semidefinite.
symmetric, positive
semidefinite
Example . (Symmetric, Positive Definite Matrices)
Consider the matrices
A =
A =
A is positive definite because it is symmetric and

(.a)
x⊤Ax =
x
= x
+ xx + x
= (x + x) + x
(.b)
for all x ∈ V \{}. In contrast, A is symmetric but not positive definite
because x⊤Ax = x
+ xx + x
= (x + x) − x
can be less
than , e.g., for x = [, −]⊤.
If A ∈ Rn×n is symmetric, positive definite, then
⟨x, y⟩ = ˆx⊤Aˆy
defines an inner product with respect to an ordered basis B, where ˆx and
ˆy are the coordinate representations of x, y ∈ V with respect to B.
Theorem .. For a real-valued, finite-dimensional vector space V and an
ordered basis B of V , it holds that ⟨, ⟩ : V × V → R is an inner product if
and only if there exists a symmetric, positive definite matrix A ∈ Rn×n with
⟨x, y⟩ = ˆx⊤Aˆy .
The following properties hold if A ∈ Rn×n is symmetric and positive
definite:
The null space (kernel) of A consists only of  because x⊤Ax >  for
all x ̸= . This implies that Ax ̸=  if x ̸= .
The diagonal elements aii of A are positive because aii = e⊤
i Aei > ,
where ei is the ith vector of the standard basis in Rn.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Lengths and Distances
. Lengths and Distances
⟨x, x⟩
In Section ., we already discussed norms that we can use to compute
the length of a vector. Inner products and norms are closely related in the
sense that any inner product induces a norm
Inner products
induce norms.
∥x∥ :=
in a natural way, such that we can compute lengths of vectors using the in-
ner product. However, not every norm is induced by an inner product. The
Manhattan norm (.) is an example of a norm without a corresponding
inner product. In the following, we will focus on norms that are induced
by inner products and introduce geometric concepts, such as lengths, dis-
tances, and angles.
Remark (Cauchy-Schwarz Inequality). For an inner product vector space
(V, ⟨, ⟩) the induced norm ∥  ∥ satisfies the Cauchy-Schwarz inequality
Cauchy-Schwarz
inequality
| ⟨x, y⟩ | ⩽ ∥x∥∥y∥ .
Example . (Lengths of Vectors Using Inner Products)
In geometry, we are often interested in lengths of vectors. We can now use
an inner product to compute them using (.). Let us take x = [, ]⊤ ∈
R. If we use the dot product as the inner product, with (.) we obtain
+  =
x⊤x =
∥x∥ =
as the length of x. Let us now choose a different inner product:
(xy + xy) + xy .
⟨x, y⟩ := x⊤

y = xy −
If we compute the norm of a vector, then this inner product returns smaller
values than the dot product if x and x have the same sign (and xx >
); otherwise, it returns greater values than the dot product. With this
inner product, we obtain
=  , (.)
⟨x, x⟩ = x
− xx + x
=  −  +  =  =⇒ ∥x∥ =
such that x is “shorter” with this inner product than with the dot product.
Definition . (Distance and Metric). Consider an inner product space
(V, ⟨, ⟩). Then
⟨x − y, x − y⟩
d(x, y) := ∥x − y∥ =
is called the distance between x and y for x, y ∈ V . If we use the dot
distance
product as the inner product, then the distance is called Euclidean distance.
Euclidean distance
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
The mapping
d : V × V → R
(x, y) → d(x, y)
is called a metric.
metric
Remark. Similar to the length of a vector, the distance between vectors
does not require an inner product: a norm is sufficient. If we have a norm
induced by an inner product, the distance may vary depending on the
choice of the inner product.
A metric d satisfies the following:
. d is positive definite, i.e., d(x, y) ⩾  for all x, y ∈ V and d(x, y) =
positive definite
⇐⇒ x = y .
. d is symmetric, i.e., d(x, y) = d(y, x) for all x, y ∈ V .
symmetric
triangle inequality
. Triangle inequality: d(x, z) ⩽ d(x, y) + d(y, z) for all x, y, z ∈ V .
Remark. At first glance, the lists of properties of inner products and met-
rics look very similar. However, by comparing Definition . with Defini-
tion . we observe that ⟨x, y⟩ and d(x, y) behave in opposite directions.
Very similar x and y will result in a large value for the inner product and
a small value for the metric.
. Angles and Orthogonality
Figure . When
restricted to [, π]
then f(ω) = cos(ω)
returns a unique
number in the
interval [−, ].
In addition to enabling the definition of lengths of vectors, as well as the
distance between two vectors, inner products also capture the geometry
of a vector space by defining the angle ω between two vectors. We use
the Cauchy-Schwarz inequality (.) to define angles ω in inner prod-
uct spaces between two vectors x, y, and this notion coincides with our
intuition in R and R. Assume that x ̸= , y ̸= . Then
cos(ω)
− ⩽
⟨x, y⟩
∥x∥ ∥y∥ ⩽  .
π/
Therefore, there exists a unique ω ∈ [, π], illustrated in Figure ., with
cos ω =
⟨x, y⟩
∥x∥ ∥y∥ .
The number ω is the angle between the vectors x and y. Intuitively, the
angle
angle between two vectors tells us how similar their orientations are. For
example, using the dot product, the angle between x and y = x, i.e., y
is a scaled version of x, is : Their orientation is the same.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Angles and Orthogonality
see Figure ., where we use the dot product as the inner product. Then
we get
Example . (Angle between Vectors)
Let us compute the angle between x = [, ]⊤ ∈ R and y = [, ]⊤ ∈ R;
Figure . The
angle ω between
two vectors x, y is
computed using the
inner product.
x⊤xy⊤y
cos ω =
⟨x, y⟩
⟨x, x⟩ ⟨y, y⟩ =
x⊤y
and the angle between the two vectors is arccos(
) ≈ . rad, which
corresponds to about ◦.
A key feature of the inner product is that it also allows us to characterize
vectors that are orthogonal.
Definition . (Orthogonality). Two vectors x and y are orthogonal if and
orthogonal
only if ⟨x, y⟩ = , and we write x ⊥ y. If additionally ∥x∥ =  = ∥y∥,
i.e., the vectors are unit vectors, then x and y are orthonormal.
orthonormal
An implication of this definition is that the -vector is orthogonal to
every vector in the vector space.
Remark. Orthogonality is the generalization of the concept of perpendic-
ularity to bilinear forms that do not have to be the dot product. In our
context, geometrically, we can think of orthogonal vectors as having a
right angle with respect to a specific inner product.
Example . (Orthogonal Vectors)
Figure . The
angle ω between
two vectors x, y can
change depending
on the inner
product.
Consider two vectors x = [, ]⊤, y = [−, ]⊤ ∈ R; see Figure ..
We are interested in determining the angle ω between them using two
different inner products. Using the dot product as the inner product yields
an angle ω between x and y of ◦, such that x ⊥ y. However, if we
choose the inner product
⟨x, y⟩ = x⊤
y ,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
we get that the angle ω between x and y is given by
cos ω = ⟨x, y⟩
=⇒ ω ≈ . rad ≈ .◦ ,
∥x∥∥y∥ = −
and x and y are not orthogonal. Therefore, vectors that are orthogonal
with respect to one inner product do not have to be orthogonal with re-
spect to a different inner product.
Definition . (Orthogonal Matrix). A square matrix A ∈ Rn×n is an
orthogonal matrix if and only if its columns are orthonormal so that
orthogonal matrix
AA⊤ = I = A⊤A ,
which implies that
A− = A⊤ ,
Transformations by orthogonal matrices are special because the length
of a vector x is not changed when transforming it using an orthogonal
matrix A. For the dot product, we obtain
i.e., the inverse is obtained by simply transposing the matrix.
It is convention to
call these matrices
“orthogonal” but a
more precise
description would
be “orthonormal”.
∥Ax∥
= (Ax)⊤(Ax) = x⊤A⊤Ax = x⊤Ix = x⊤x = ∥x∥
Transformations
with orthogonal
matrices preserve
distances and
angles.
Moreover, the angle between any two vectors x, y, as measured by their
inner product, is also unchanged when transforming both of them using
an orthogonal matrix A. Assuming the dot product as the inner product,
the angle of the images Ax and Ay is given as
cos ω = (Ax)⊤(Ay)
x⊤A⊤Axy⊤A⊤Ay
x⊤y
∥x∥ ∥y∥ ,
∥Ax∥ ∥Ay∥ =
x⊤A⊤Ay
which gives exactly the angle between x and y. This means that orthog-
onal matrices A with A⊤ = A− preserve both angles and distances. It
turns out that orthogonal matrices define transformations that are rota-
tions (with the possibility of flips). In Section ., we will discuss more
details about rotations.
. Orthonormal Basis
In Section .., we characterized properties of basis vectors and found
that in an n-dimensional vector space, we need n basis vectors, i.e., n
vectors that are linearly independent. In Sections . and ., we used
inner products to compute the length of vectors and the angle between
vectors. In the following, we will discuss the special case where the basis
vectors are orthogonal to each other and where the length of each basis
vector is . We will call this basis then an orthonormal basis.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Orthogonal Complement
Let us introduce this more formally.
Definition . (Orthonormal Basis). Consider an n-dimensional vector
space V and a basis {b, . . . , bn} of V . If
⟨bi, bj⟩ =
for i ̸= j
⟨bi, bi⟩ =
for all i, j = , . . . , n then the basis is called an orthonormal basis (ONB).
orthonormal basis
ONB
If only (.) is satisfied, then the basis is called an orthogonal basis. Note
orthogonal basis
that (.) implies that every basis vector has length/norm .
Recall from Section .. that we can use Gaussian elimination to find a
basis for a vector space spanned by a set of vectors. Assume we are given
a set {˜b, . . . , ˜bn} of non-orthogonal and unnormalized basis vectors. We
concatenate them into a matrix ˜B = [˜b, . . . , ˜bn] and apply Gaussian elim-
ination to the augmented matrix (Section ..) [ ˜B ˜B
⊤| ˜B] to obtain an
orthonormal basis. This constructive way to iteratively build an orthonor-
mal basis {b, . . . , bn} is called the Gram-Schmidt process (Strang, ).
Example . (Orthonormal Basis)
The canonical/standard basis for a Euclidean vector space Rn is an or-
thonormal basis, where the inner product is the dot product of vectors.
In R, the vectors
b =
b =

form an orthonormal basis since b⊤
b =  and ∥b∥ =  = ∥b∥.
We will exploit the concept of an orthonormal basis in Chapter  and
Chapter  when we discuss support vector machines and principal com-
ponent analysis.
. Orthogonal Complement
Having defined orthogonality, we will now look at vector spaces that are
orthogonal to each other. This will play an important role in Chapter ,
when we discuss linear dimensionality reduction from a geometric per-
spective.
Consider a D-dimensional vector space V and an M-dimensional sub-
space U ⊆ V . Then its orthogonal complement U ⊥ is a (D−M)-dimensional
orthogonal
complement
subspace of V and contains all vectors in V that are orthogonal to every
vector in U. Furthermore, U ∩ U ⊥ = {} so that any vector x ∈ V can be
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
Figure . A plane
U in a
three-dimensional
vector space can be
described by its
normal vector,
which spans its
orthogonal
complement U⊥.
uniquely decomposed into
x =
m=
λmbm +
j=
ψjb⊥
j ,
λm, ψj ∈ R ,
D−M
where (b, . . . , bM) is a basis of U and (b⊥
, . . . , b⊥
D−M) is a basis of U ⊥.
Therefore, the orthogonal complement can also be used to describe a
plane U (two-dimensional subspace) in a three-dimensional vector space.
More specifically, the vector w with ∥w∥ = , which is orthogonal to the
plane U, is the basis vector of U ⊥. Figure . illustrates this setting. All
vectors that are orthogonal to w must (by construction) lie in the plane
U. The vector w is called the normal vector of U.
normal vector
Generally, orthogonal complements can be used to describe hyperplanes
in n-dimensional vector and affine spaces.
. Inner Product of Functions
Thus far, we looked at properties of inner products to compute lengths,
angles and distances. We focused on inner products of finite-dimensional
vectors. In the following, we will look at an example of inner products of
a different type of vectors: inner products of functions.
The inner products we discussed so far were defined for vectors with a
finite number of entries. We can think of a vector x ∈ Rn as a function
with n function values. The concept of an inner product can be generalized
to vectors with an infinite number of entries (countably infinite) and also
continuous-valued functions (uncountably infinite). Then the sum over
individual components of vectors (see Equation (.) for example) turns
into an integral.
An inner product of two functions u : R → R and v : R → R can be
defined as the definite integral
u(x)v(x)dx
⟨u, v⟩ :=
Z b
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Orthogonal Projections
for lower and upper limits a, b < ∞, respectively. As with our usual inner
product, we can define norms and orthogonality by looking at the inner
product. If (.) evaluates to , the functions u and v are orthogonal. To
make the preceding inner product mathematically precise, we need to take
care of measures and the definition of integrals, leading to the definition of
a Hilbert space. Furthermore, unlike inner products on finite-dimensional
vectors, inner products on functions may diverge (have infinite value). All
this requires diving into some more intricate details of real and functional
analysis, which we do not cover in this book.
Example . (Inner Product of Functions)
If we choose u = sin(x) and v = cos(x), the integrand f(x) = u(x)v(x)
Figure . f(x) =
sin(x) cos(x).
of (.), is shown in Figure .. We see that this function is odd, i.e.,
f(−x) = −f(x). Therefore, the integral with limits a = −π, b = π of this
product evaluates to . Therefore, sin and cos are orthogonal functions.
sin(x) cos(x)
Remark. It also holds that the collection of functions
{, cos(x), cos(x), cos(x), . . . }
is orthogonal if we integrate from −π to π, i.e., any pair of functions are
orthogonal to each other. The collection of functions in (.) spans a
large subspace of the functions that are even and periodic on [−π, π), and
projecting functions onto this subspace is the fundamental idea behind
Fourier series.
In Section .., we will have a look at a second type of unconventional
inner products: the inner product of random variables.
. Orthogonal Projections
Projections are an important class of linear transformations (besides rota-
tions and reflections) and play an important role in graphics, coding the-
ory, statistics and machine learning. In machine learning, we often deal
with data that is high-dimensional. High-dimensional data is often hard
to analyze or visualize. However, high-dimensional data quite often pos-
sesses the property that only a few dimensions contain most information,
and most other dimensions are not essential to describe key properties
of the data. When we compress or visualize high-dimensional data, we
will lose information. To minimize this compression loss, we ideally find
the most informative dimensions in the data. As discussed in Chapter ,
“Feature” is a
common expression
for data
representation.
data can be represented as vectors, and in this chapter, we will discuss
some of the fundamental tools for data compression. More specifically, we
can project the original high-dimensional data onto a lower-dimensional
feature space and work in this lower-dimensional space to learn more
about the dataset and extract relevant patterns. For example, machine
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
Figure .
Orthogonal
projection (orange
dots) of a
two-dimensional
dataset (blue dots)
onto a
one-dimensional
subspace (straight
line).
learning algorithms, such as principal component analysis (PCA) by Pear-
son () and Hotelling () and deep neural networks (e.g., deep
auto-encoders (Deng et al., )), heavily exploit the idea of dimension-
ality reduction. In the following, we will focus on orthogonal projections,
which we will use in Chapter  for linear dimensionality reduction and
in Chapter  for classification. Even linear regression, which we discuss
in Chapter , can be interpreted using orthogonal projections. For a given
lower-dimensional subspace, orthogonal projections of high-dimensional
data retain as much information as possible and minimize the difference/
error between the original data and the corresponding projection. An il-
lustration of such an orthogonal projection is given in Figure .. Before
we detail how to obtain these projections, let us define what a projection
actually is.
Definition . (Projection). Let V be a vector space and U ⊆ V a
subspace of V . A linear mapping π : V → U is called a projection if
projection
π = π ◦ π = π.
Since linear mappings can be expressed by transformation matrices (see
Section .), the preceding definition applies equally to a special kind
of transformation matrices, the projection matrices P π, which exhibit the
projection matrix
property that P
π = P π.
In the following, we will derive orthogonal projections of vectors in the
inner product space (Rn, ⟨, ⟩) onto subspaces. We will start with one-
dimensional subspaces, which are also called lines. If not mentioned oth-
line
erwise, we assume the dot product ⟨x, y⟩ = x⊤y as the inner product.
.. Projection onto One-Dimensional Subspaces (Lines)
Assume we are given a line (one-dimensional subspace) through the ori-
gin with basis vector b ∈ Rn. The line is a one-dimensional subspace
U ⊆ Rn spanned by b. When we project x ∈ Rn onto U, we seek the
vector πU(x) ∈ U that is closest to x. Using geometric arguments, let
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Orthogonal Projections
Figure .
Examples of
projections onto
one-dimensional
subspaces.
πU(x)
sin ω
cos ω
(a) Projection of x ∈ R onto a subspace U
with basis vector b.
(b) Projection of a two-dimensional vector
x with ∥x∥ =  onto a one-dimensional
subspace spanned by b.
us characterize some properties of the projection πU(x) (Figure .(a)
serves as an illustration):
The projection πU(x) is closest to x, where “closest” implies that the
distance ∥x−πU(x)∥ is minimal. It follows that the segment πU(x)−x
from πU(x) to x is orthogonal to U, and therefore the basis vector b of
U. The orthogonality condition yields ⟨πU(x) − x, b⟩ =  since angles
between vectors are defined via the inner product.
λ is then the
coordinate of πU(x)
with respect to b.
The projection πU(x) of x onto U must be an element of U and, there-
fore, a multiple of the basis vector b that spans U. Hence, πU(x) = λb,
for some λ ∈ R.
In the following three steps, we determine the coordinate λ, the projection
πU(x) ∈ U, and the projection matrix P π that maps any x ∈ Rn onto U:
. Finding the coordinate λ. The orthogonality condition yields
⟨x − πU(x), b⟩ =
πU(x)=λb
⟨x − λb, b⟩ =  .
We can now exploit the bilinearity of the inner product and arrive at
With a general inner
product, we get
λ = ⟨x, b⟩ if
∥b∥ = .
⟨x, b⟩ − λ ⟨b, b⟩ =  ⇐⇒ λ = ⟨x, b⟩
⟨b, b⟩ = ⟨b, x⟩
∥b∥ .
In the last step, we exploited the fact that inner products are symmet-
ric. If we choose ⟨, ⟩ to be the dot product, we obtain
λ = b⊤x
b⊤b = b⊤x
∥b∥ .
If ∥b∥ = , then the coordinate λ of the projection is given by b⊤x.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
. Finding the projection point πU(x) ∈ U. Since πU(x) = λb, we imme-
diately obtain with (.) that
πU(x) = λb = ⟨x, b⟩
∥b∥ b = b⊤x
∥b∥ b ,
where the last equality holds for the dot product only. We can also
compute the length of πU(x) by means of Definition . as
∥πU(x)∥ = ∥λb∥ = |λ| ∥b∥ .
Hence, our projection is of length |λ| times the length of b. This also
adds the intuition that λ is the coordinate of πU(x) with respect to the
basis vector b that spans our one-dimensional subspace U.
If we use the dot product as an inner product, we get
∥πU(x)∥
|b⊤x|
∥b∥ ∥b∥
= | cos ω| ∥x∥ ∥b∥ ∥b∥
∥b∥ = | cos ω| ∥x∥ .
Here, ω is the angle between x and b. This equation should be familiar
from trigonometry: If ∥x∥ = , then x lies on the unit circle. It follows
that the projection onto the horizontal axis spanned by b is exactly
The horizontal axis
is a one-dimensional
subspace.
cos ω, and the length of the corresponding vector πU(x) = |cos ω|. An
illustration is given in Figure .(b).
. Finding the projection matrix P π. We know that a projection is a lin-
ear mapping (see Definition .). Therefore, there exists a projection
matrix P π, such that πU(x) = P πx. With the dot product as inner
product and
πU(x) = λb = bλ = b b⊤x
∥b∥ = bb⊤
∥b∥ x ,
we immediately see that
P π = bb⊤
∥b∥ .
Note that bb⊤ (and, consequently, P π) is a symmetric matrix (of rank
Projection matrices
are always
symmetric.
), and ∥b∥ = ⟨b, b⟩ is a scalar.
The projection matrix P π projects any vector x ∈ Rn onto the line through
the origin with direction b (equivalently, the subspace U spanned by b).
Remark. The projection πU(x) ∈ Rn is still an n-dimensional vector and
not a scalar. However, we no longer require n coordinates to represent the
projection, but only a single one if we want to express it with respect to
the basis vector b that spans the subspace U: λ.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Orthogonal Projections
x − πU(x)
πU(x)
Figure .
Projection onto a
two-dimensional
subspace U with
basis b, b. The
projection πU(x) of
x ∈ R onto U can
be expressed as a
linear combination
of b, b and the
displacement vector
x − πU(x) is
orthogonal to both
b and b.
Example . (Projection onto a Line)
Find the projection matrix P π onto the line through the origin spanned
by b =
⊤. b is a direction and a basis of the one-dimensional
subspace (line through origin).
With (.), we obtain
P π = bb⊤
b⊤b =
 
 =
 .
Let us now choose a particular x and see whether it lies in the subspace
spanned by b. For x =
⊤, the projection is
πU(x) = P πx =
 =
 ∈ span[
] .
Note that the application of P π to πU(x) does not change anything, i.e.,
P ππU(x) = πU(x). This is expected because according to Definition .,
we know that a projection matrix P π satisfies P
πx = P πx for all x.
Remark. With the results from Chapter , we can show that πU(x) is an
eigenvector of P π, and the corresponding eigenvalue is .
In the following, we look at orthogonal projections of vectors x ∈ Rn
.. Projection onto General Subspaces
If U is given by a set
of spanning vectors,
which are not a
basis, make sure
you determine a
basis b, . . . , bm
before proceeding.
onto lower-dimensional subspaces U ⊆ Rn with dim(U) = m ⩾ . An
illustration is given in Figure ..
Assume that (b, . . . , bm) is an ordered basis of U. Any projection πU(x)
onto U is necessarily an element of U. Therefore, they can be represented
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
As in the D case, we follow a three-step procedure to find the projec-
tion πU(x) and the projection matrix P π:
as linear combinations of the basis vectors b, . . . , bm of U, such that
πU(x) = Pm
i= λibi.
The basis vectors
form the columns of
B ∈ Rn×m, where
B = [b, . . . , bm].
. Find the coordinates λ, . . . , λm of the projection (with respect to the
basis of U), such that the linear combination
πU(x) =
i=
λibi = Bλ ,
B = [b, . . . , bm] ∈ Rn×m,
λ = [λ, . . . , λm]⊤ ∈ Rm ,
is closest to x ∈ Rn. As in the D case, “closest” means “minimum
distance”, which implies that the vector connecting πU(x) ∈ U and
x ∈ Rn must be orthogonal to all basis vectors of U. Therefore, we
obtain m simultaneous conditions (assuming the dot product as the
inner product)
⟨b, x − πU(x)⟩ = b⊤
(x − πU(x)) =
⟨bm, x − πU(x)⟩ = b⊤
m(x − πU(x)) =
which, with πU(x) = Bλ, can be written as
b⊤
(x − Bλ) =
b⊤
m(x − Bλ) =
such that we obtain a homogeneous linear equation system
b⊤
b⊤
x − Bλ
 =  ⇐⇒ B⊤(x − Bλ) =
⇐⇒ B⊤Bλ = B⊤x .
The last expression is called normal equation. Since b, . . . , bm are a
normal equation
basis of U and, therefore, linearly independent, B⊤B ∈ Rm×m is reg-
ular and can be inverted. This allows us to solve for the coefficients/
coordinates
λ = (B⊤B)−B⊤x .
The matrix (B⊤B)−B⊤ is also called the pseudo-inverse of B, which
pseudo-inverse
can be computed for non-square matrices B. It only requires that B⊤B
is positive definite, which is the case if B is full rank. In practical ap-
plications (e.g., linear regression), we often add a “jitter term” ϵI to
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Orthogonal Projections
B⊤B to guarantee increased numerical stability and positive definite-
ness. This “ridge” can be rigorously derived using Bayesian inference.
See Chapter  for details.
. Find the projection πU(x) ∈ U. We already established that πU(x) =
Bλ. Therefore, with (.)
πU(x) = B(B⊤B)−B⊤x .
. Find the projection matrix P π. From (.), we can immediately see
that the projection matrix that solves P πx = πU(x) must be
P π = B(B⊤B)−B⊤ .
Remark. The solution for projecting onto general subspaces includes the
D case as a special case: If dim(U) = , then B⊤B ∈ R is a scalar and
we can rewrite the projection matrix in (.) P π = B(B⊤B)−B⊤ as
P π = BB⊤
B⊤B, which is exactly the projection matrix in (.).
Example . (Projection onto a Two-dimensional Subspace)
For a subspace U = span[
 ∈ R find the
] ⊆ R and x =
 ,
coordinates λ of x in terms of the subspace U, the projection point πU(x)
and the projection matrix P π.
First, we see that the generating set of U is a basis (linear indepen-
dence) and write the basis vectors of U into a matrix B =
Second, we compute the matrix B⊤B and the vector B⊤x as

B⊤x =
B⊤B =
 =
 =
Third, we solve the normal equation B⊤Bλ = B⊤x to find λ:

⇐⇒ λ =

Fourth, the projection πU(x) of x onto U, i.e., into the column space of
B, can be directly computed via
πU(x) = Bλ =
 .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
The corresponding projection error is the norm of the difference vector
projection error
between the original vector and its projection onto U, i.e.,
The projection error
is also called the
reconstruction error.
∥x − πU(x)∥ =

⊤


 =
Fifth, the projection matrix (for any x ∈ R) is given by
P π = B(B⊤B)−B⊤ =
 .
To verify the results, we can (a) check whether the displacement vector
πU(x) − x is orthogonal to all basis vectors of U, and (b) verify that
P π = P
π (see Definition .).
Remark. The projections πU(x) are still vectors in Rn although they lie in
an m-dimensional subspace U ⊆ Rn. However, to represent a projected
vector we only need the m coordinates λ, . . . , λm with respect to the
basis vectors b, . . . , bm of U.
Remark. In vector spaces with general inner products, we have to pay
attention when computing angles and distances, which are defined by
means of the inner product.
We can find
approximate
solutions to
unsolvable linear
equation systems
using projections.
Projections allow us to look at situations where we have a linear system
Ax = b without a solution. Recall that this means that b does not lie in
the span of A, i.e., the vector b does not lie in the subspace spanned by
the columns of A. Given that the linear equation cannot be solved exactly,
we can find an approximate solution. The idea is to find the vector in the
subspace spanned by the columns of A that is closest to b, i.e., we compute
the orthogonal projection of b onto the subspace spanned by the columns
of A. This problem arises often in practice, and the solution is called the
least-squares solution (assuming the dot product as the inner product) of
least-squares
solution
an overdetermined system. This is discussed further in Section .. Using
reconstruction errors (.) is one possible approach to derive principal
component analysis (Section .).
Remark. We just looked at projections of vectors x onto a subspace U with
basis vectors {b, . . . , bk}. If this basis is an ONB, i.e., (.) and (.)
are satisfied, the projection equation (.) simplifies greatly to
πU(x) = BB⊤x
since B⊤B = I with coordinates
λ = B⊤x .
This means that we no longer have to compute the inverse from (.),
which saves computation time.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Orthogonal Projections
.. Gram-Schmidt Orthogonalization
Projections are at the core of the Gram-Schmidt method that allows us to
constructively transform any basis (b, . . . , bn) of an n-dimensional vector
space V into an orthogonal/orthonormal basis (u, . . . , un) of V . This
basis always exists (Liesen and Mehrmann, ) and span[b, . . . , bn] =
span[u, . . . , un]. The Gram-Schmidt orthogonalization method iteratively
Gram-Schmidt
orthogonalization
constructs an orthogonal basis (u, . . . , un) from any basis (b, . . . , bn) of
V as follows:
u := b
uk := bk − πspan[u,...,uk−](bk) ,
k = , . . . , n .
In (.), the kth basis vector bk is projected onto the subspace spanned
by the first k −  constructed orthogonal vectors u, . . . , uk−; see Sec-
tion ... This projection is then subtracted from bk and yields a vector
uk that is orthogonal to the (k − )-dimensional subspace spanned by
u, . . . , uk−. Repeating this procedure for all n basis vectors b, . . . , bn
yields an orthogonal basis (u, . . . , un) of V . If we normalize the uk, we
obtain an ONB where ∥uk∥ =  for k = , . . . , n.
Example . (Gram-Schmidt Orthogonalization)
πspan[u](b)
πspan[u](b)
(a)
Original
non-orthogonal
basis vectors b, b.
(c) Orthogonal basis vectors u
and u = b − πspan[u](b).
(b)
First
new
basis
vector
u = b and projection of b
onto the subspace spanned by
u.
Figure .
Gram-Schmidt
orthogonalization.
(a) non-orthogonal
basis (b, b) of R;
(b) first constructed
basis vector u and
orthogonal
projection of b
onto span[u];
(c) orthogonal basis
(u, u) of R.
Consider a basis (b, b) of R, where
b =
b =
see also Figure .(a). Using the Gram-Schmidt method, we construct an
orthogonal basis (u, u) of R as follows (assuming the dot product as
the inner product):
u := b =
u := b − πspan[u](b)
= b − uu⊤

∥u∥
b =
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
x − x
πL(x)
U = L − x
πU(x − x)
(a) Setting.
(c) Add support point back in
to get affine projection πL.
(b) Reduce problem to pro-
jection πU onto vector sub-
space.
Figure .
Projection onto an
affine space.
(a) original setting;
(b) setting shifted
by −x so that
x − x can be
projected onto the
direction space U;
(c) projection is
translated back to
x + πU(x − x),
which gives the final
orthogonal
projection πL(x).
These steps are illustrated in Figures .(b) and (c). We immediately see
that u and u are orthogonal, i.e., u⊤
u = .
.. Projection onto Affine Subspaces
Thus far, we discussed how to project a vector onto a lower-dimensional
subspace U. In the following, we provide a solution to projecting a vector
onto an affine subspace.
Consider the setting in Figure .(a). We are given an affine space L =
x + U, where b, b are basis vectors of U. To determine the orthogonal
projection πL(x) of x onto L, we transform the problem into a problem
that we know how to solve: the projection onto a vector subspace. In
order to get there, we subtract the support point x from x and from L,
so that L − x = U is exactly the vector subspace U. We can now use the
orthogonal projections onto a subspace we discussed in Section .. and
obtain the projection πU(x − x), which is illustrated in Figure .(b).
This projection can now be translated back into L by adding x, such that
we obtain the orthogonal projection onto an affine space L as
πL(x) = x + πU(x − x) ,
where πU() is the orthogonal projection onto the subspace U, i.e., the
direction space of L; see Figure .(c).
From Figure ., it is also evident that the distance of x from the affine
space L is identical to the distance of x − x from U, i.e.,
d(x, L) = ∥x − πL(x)∥ = ∥x − (x + πU(x − x))∥
(.a)
= d(x − x, πU(x − x)) = d(x − x, U) .
(.b)
We will use projections onto an affine subspace to derive the concept of
a separating hyperplane in Section ..
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Rotations
Original
Rotated by .◦
Figure . A
rotation rotates
objects in a plane
about the origin. If
the rotation angle is
positive, we rotate
counterclockwise.
Figure . The
robotic arm needs to
rotate its joints in
order to pick up
objects or to place
them correctly.
Figure taken
from (Deisenroth
et al., ).
. Rotations
Length and angle preservation, as discussed in Section ., are the two
characteristics of linear mappings with orthogonal transformation matri-
ces. In the following, we will have a closer look at specific orthogonal
transformation matrices, which describe rotations.
A rotation is a linear mapping (more specifically, an automorphism of
rotation
a Euclidean vector space) that rotates a plane by an angle θ about the
origin, i.e., the origin is a fixed point. For a positive angle θ > , by com-
mon convention, we rotate in a counterclockwise direction. An example is
shown in Figure ., where the transformation matrix is

R =
Important application areas of rotations include computer graphics and
robotics. For example, in robotics, it is often important to know how to
rotate the joints of a robotic arm in order to pick up or place an object,
see Figure ..
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
Φ(e) = [− sin θ, cos θ]⊤
cos θ
Figure .
Rotation of the
standard basis in R
by an angle θ.
Φ(e) = [cos θ, sin θ]⊤
sin θ
cos θ
− sin θ
.. Rotations in R
Consider the standard basis

e =
, e =
of R, which defines
the standard coordinate system in R. We aim to rotate this coordinate
system by an angle θ as illustrated in Figure .. Note that the rotated
vectors are still linearly independent and, therefore, are a basis of R. This
means that the rotation performs a basis change.
Rotations Φ are linear mappings so that we can express them by a
rotation matrix R(θ). Trigonometry (see Figure .) allows us to de-
rotation matrix
termine the coordinates of the rotated axes (the image of Φ) with respect
to the standard basis in R. We obtain
Φ(e) =
cos θ
sin θ

Φ(e) =
− sin θ
cos θ

Therefore, the rotation matrix that performs the basis change into the
rotated coordinates R(θ) is given as

R(θ) =
Φ(e)
Φ(e)
 =
cos θ
− sin θ
sin θ
cos θ
.. Rotations in R
In contrast to the R case, in R we can rotate any two-dimensional plane
about a one-dimensional axis. The easiest way to specify the general rota-
tion matrix is to specify how the images of the standard basis e, e, e are
supposed to be rotated, and making sure these images Re, Re, Re are
orthonormal to each other. We can then obtain a general rotation matrix
R by combining the images of the standard basis.
To have a meaningful rotation angle, we have to define what “coun-
terclockwise” means when we operate in more than two dimensions. We
use the convention that a “counterclockwise” (planar) rotation about an
axis refers to a rotation about an axis when we look at the axis “head on,
from the end toward the origin”. In R, there are therefore three (planar)
rotations about the three standard basis vectors (see Figure .):
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Rotations
Figure .
Rotation of a vector
(gray) in R by an
angle θ about the
e-axis. The rotated
vector is shown in
blue.
Rotation about the e-axis
R(θ) =
Φ(e)
Φ(e)
Φ(e)
 =
cos θ
− sin θ
sin θ
cos θ
 .
Here, the e coordinate is fixed, and the counterclockwise rotation is
performed in the ee plane.
Rotation about the e-axis
R(θ) =
cos θ
sin θ
− sin θ
cos θ
 .
If we rotate the ee plane about the e axis, we need to look at the e
axis from its “tip” toward the origin.
Rotation about the e-axis
R(θ) =
cos θ
− sin θ
sin θ
cos θ
 .
Figure . illustrates this.
.. Rotations in n Dimensions
The generalization of rotations from D and D to n-dimensional Eu-
clidean vector spaces can be intuitively described as fixing n −  dimen-
sions and restrict the rotation to a two-dimensional plane in the n-dimen-
sional space. As in the three-dimensional case, we can rotate any plane
(two-dimensional subspace of Rn).
Definition . (Givens Rotation). Let V be an n-dimensional Euclidean
vector space and Φ : V → V an automorphism with transformation ma-
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
trix
Rij(θ) :=
Ii−
cos θ
− sin θ
Ij−i−
sin θ
cos θ
In−j
∈ Rn×n ,
for  ⩽ i < j ⩽ n and θ ∈ R. Then Rij(θ) is called a Givens rotation.
Givens rotation
Essentially, Rij(θ) is the identity matrix In with
rii = cos θ ,
rij = − sin θ ,
rji = sin θ ,
rjj = cos θ .
In two dimensions (i.e., n = ), we obtain (.) as a special case.
.. Properties of Rotations
Rotations exhibit a number of useful properties, which can be derived by
considering them as orthogonal matrices (Definition .):
Rotations preserve distances, i.e., ∥x−y∥ = ∥Rθ(x)−Rθ(y)∥. In other
words, rotations leave the distance between any two points unchanged
after the transformation.
Rotations preserve angles, i.e., the angle between Rθx and Rθy equals
the angle between x and y.
Rotations in three (or more) dimensions are generally not commuta-
tive. Therefore, the order in which rotations are applied is important,
even if they rotate about the same point. Only in two dimensions vector
rotations are commutative, such that R(ϕ)R(θ) = R(θ)R(ϕ) for all
ϕ, θ ∈ [, π). They form an Abelian group (with multiplication) only if
they rotate about the same point (e.g., the origin).
. Further Reading
In this chapter, we gave a brief overview of some of the important concepts
of analytic geometry, which we will use in later chapters of the book.
For a broader and more in-depth overview of some of the concepts we
presented, we refer to the following excellent books: Axler () and
Boyd and Vandenberghe ().
Inner products allow us to determine specific bases of vector (sub)spaces,
where each vector is orthogonal to all others (orthogonal bases) using the
Gram-Schmidt method. These bases are important in optimization and
numerical algorithms for solving linear equation systems. For instance,
Krylov subspace methods, such as conjugate gradients or the generalized
minimal residual method (GMRES), minimize residual errors that are or-
thogonal to each other (Stoer and Burlirsch, ).
In machine learning, inner products are important in the context of
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Further Reading
kernel methods (Sch¨olkopf and Smola, ). Kernel methods exploit the
fact that many linear algorithms can be expressed purely by inner prod-
uct computations. Then, the “kernel trick” allows us to compute these
inner products implicitly in a (potentially infinite-dimensional) feature
space, without even knowing this feature space explicitly. This allowed the
“non-linearization” of many algorithms used in machine learning, such as
kernel-PCA (Sch¨olkopf et al., ) for dimensionality reduction. Gaus-
sian processes (Rasmussen and Williams, ) also fall into the category
of kernel methods and are the current state of the art in probabilistic re-
gression (fitting curves to data points). The idea of kernels is explored
further in Chapter .
Projections are often used in computer graphics, e.g., to generate shad-
ows. In optimization, orthogonal projections are often used to (iteratively)
minimize residual errors. This also has applications in machine learning,
e.g., in linear regression where we want to find a (linear) function that
minimizes the residual errors, i.e., the lengths of the orthogonal projec-
tions of the data onto the linear function (Bishop, ). We will investi-
gate this further in Chapter . PCA (Pearson, ; Hotelling, ) also
uses projections to reduce the dimensionality of high-dimensional data.
We will discuss this in more detail in Chapter .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Analytic Geometry
Exercises
Show that ⟨, ⟩ defined for all x = [x, x]⊤ ∈ R and y = [y, y]⊤ ∈ R by
⟨x, y⟩ := xy − (xy + xy) + (xy)
is an inner product.
Consider R with ⟨, ⟩ defined for all x and y in R as
y .
⟨x, y⟩ := x⊤

| {z }
=:A
Is ⟨, ⟩ an inner product?
Compute the distance between
x =
 ,
y =
using
a. ⟨x, y⟩ := x⊤y
b. ⟨x, y⟩ := x⊤Ay ,
A :=
Compute the angle between
x =

y =

using
a. ⟨x, y⟩ := x⊤y
b. ⟨x, y⟩ := x⊤By ,
B :=

Consider the Euclidean vector space R with the dot product. A subspace
U ⊆ R and x ∈ R are given by
U = span[
] ,
x =
a. Determine the orthogonal projection πU(x) of x onto U
b. Determine the distance d(x, U)
Consider R with the inner product
⟨x, y⟩ := x⊤
 y .
Furthermore, we define e, e, e as the standard/canonical basis in R.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Exercises
a. Determine the orthogonal projection πU(e) of e onto
U = span[e, e] .
Hint: Orthogonality is defined through the inner product.
b. Compute the distance d(e, U).
c. Draw the scenario: standard basis vectors and πU(e)
Let V be a vector space and π an endomorphism of V .
a. Prove that π is a projection if and only if idV − π is a projection, where
idV is the identity endomorphism on V .
b. Assume now that π is a projection. Calculate Im(idV −π) and ker(idV −π)
as a function of Im(π) and ker(π).
Using the Gram-Schmidt method, turn the basis B = (b, b) of a two-
dimensional subspace U ⊆ R into an ONB C = (c, c) of U, where
b :=
 ,
b :=
 .
Let n ∈ N and let x, . . . , xn >  be n positive real numbers so that x +
. . . + xn = . Use the Cauchy-Schwarz inequality and show that
a. Pn
i= x
i ⩾
b. Pn
i=
xi ⩾ n
Hint: Think about the dot product on Rn. Then, choose specific vectors
x, y ∈ Rn and apply the Cauchy-Schwarz inequality.
. Rotate the vectors
x :=

x :=

by ◦.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
In Chapters  and , we studied ways to manipulate and measure vectors,
projections of vectors, and linear mappings. Mappings and transforma-
tions of vectors can be conveniently described as operations performed by
matrices. Moreover, data is often represented in matrix form as well, e.g.,
where the rows of the matrix represent different people and the columns
describe different features of the people, such as weight, height, and socio-
economic status. In this chapter, we present three aspects of matrices: how
to summarize matrices, how matrices can be decomposed, and how these
decompositions can be used for matrix approximations.
We first consider methods that allow us to describe matrices with just
a few numbers that characterize the overall properties of matrices. We
will do this in the sections on determinants (Section .) and eigenval-
ues (Section .) for the important special case of square matrices. These
characteristic numbers have important mathematical consequences and
allow us to quickly grasp what useful properties a matrix has. From here
we will proceed to matrix decomposition methods: An analogy for ma-
trix decomposition is the factoring of numbers, such as the factoring of
into prime numbers   . For this reason matrix decomposition is also
often referred to as matrix factorization. Matrix decompositions are used
matrix factorization
to describe a matrix by means of a different representation using factors
of interpretable matrices.
We will first cover a square-root-like operation for symmetric, positive
definite matrices, the Cholesky decomposition (Section .). From here
we will look at two related methods for factorizing matrices into canoni-
cal forms. The first one is known as matrix diagonalization (Section .),
which allows us to represent the linear mapping using a diagonal trans-
formation matrix if we choose an appropriate basis. The second method,
singular value decomposition (Section .), extends this factorization to
non-square matrices, and it is considered one of the fundamental concepts
in linear algebra. These decompositions are helpful, as matrices represent-
ing numerical data are often very large and hard to analyze. We conclude
the chapter with a systematic overview of the types of matrices and the
characteristic properties that distinguish them in the form of a matrix tax-
onomy (Section .).
The methods that we cover in this chapter will become important in
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

. Determinant and Trace
tests
used in
Determinant
Invertibility
Cholesky
used in
Figure . A mind
map of the concepts
introduced in this
chapter, along with
where they are used
in other parts of the
book.
Eigenvalues
Chapter
Probability
& distributions
used in
used in
determines
constructs
used in
Eigenvectors
Orthogonal matrix
Diagonalization
used in
SVD
used in
used in
used in
Chapter
Dimensionality
reduction
both subsequent mathematical chapters, such as Chapter , but also in
applied chapters, such as dimensionality reduction in Chapters  or den-
sity estimation in Chapter . This chapter’s overall structure is depicted
in the mind map of Figure ..
. Determinant and Trace
The determinant
notation |A| must
not be confused
with the absolute
value.
Determinants are important concepts in linear algebra. A determinant is
a mathematical object in the analysis and solution of systems of linear
equations. Determinants are only defined for square matrices A ∈ Rn×n,
i.e., matrices with the same number of rows and columns. In this book,
we write the determinant as det(A) or sometimes as |A| so that
det(A) =
. . .
an
. . .
an
an
an
. . .
ann

The determinant of a square matrix A ∈ Rn×n is a function that maps A
determinant
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
onto a real number. Before providing a definition of the determinant for
general n × n matrices, let us have a look at some motivating examples,
and define determinants for some special matrices.
a. Thus a
Example . (Testing for Matrix Invertibility)
Let us begin with exploring if a square matrix A is invertible (see Sec-
tion ..). For the smallest cases, we already know when a matrix
is invertible. If A is a  ×  matrix, i.e., it is a scalar number, then
A = a =⇒ A− =
a =  holds, if and only if a ̸= .
For  ×  matrices, by the definition of the inverse (Definition .), we
know that AA− = I. Then, with (.), the inverse of A is
A− =
−a
−a
aa − aa
Hence, A is invertible if and only if
aa − aa ̸=  .
This quantity is the determinant of A ∈ R×, i.e.,
det(A) =

= aa − aa .
Example . points already at the relationship between determinants
and the existence of inverse matrices. The next theorem states the same
result for n × n matrices.
Theorem .. For any square matrix A ∈ Rn×n it holds that A is invertible
if and only if det(A) ̸= .
We have explicit (closed-form) expressions for determinants of small
matrices in terms of the elements of the matrix. For n = ,
det(A) = det(a) = a .
For n = ,
det(A) =

= aa − aa ,
which we have observed in the preceding example.
For n =  (known as Sarrus’ rule),

= aaa + aaa + aaa
− aaa − aaa − aaa .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Determinant and Trace
For a memory aid of the product terms in Sarrus’ rule, try tracing the
elements of the triple products in the matrix.
We call a square matrix T an upper-triangular matrix if Tij =  for
upper-triangular
matrix
i > j, i.e., the matrix is zero below its diagonal. Analogously, we define a
lower-triangular matrix as a matrix with zeros above its diagonal. For a tri-
lower-triangular
matrix
angular matrix T ∈ Rn×n, the determinant is the product of the diagonal
elements, i.e.,
det(T ) =
i=
Tii .
The determinant is
the signed volume
of the parallelepiped
formed by the
columns of the
matrix.
Figure . The area
of the parallelogram
(shaded region)
spanned by the
vectors b and g is
|det([b, g])|.
Example . (Determinants as Measures of Volume)
The notion of a determinant is natural when we consider it as a mapping
from a set of n vectors spanning an object in Rn. It turns out that the de-
terminant det(A) is the signed volume of an n-dimensional parallelepiped
formed by columns of the matrix A.
For n = , the columns of the matrix form a parallelogram; see Fig-
ure .. As the angle between vectors gets smaller, the area of a parallel-
ogram shrinks, too. Consider two vectors b, g that form the columns of a
matrix A = [b, g]. Then, the absolute value of the determinant of A is the
area of the parallelogram with vertices , b, g, b + g. In particular, if b, g
are linearly dependent so that b = λg for some λ ∈ R, they no longer
form a two-dimensional parallelogram. Therefore, the corresponding area
is . On the contrary, if b, g are linearly independent and are multiples of

and
the canonical basis vectors e, e then they can be written as b =
g =
Figure . The
volume of the
parallelepiped
(shaded volume)
spanned by vectors
r, b, g is
|det([r, b, g])|.

, and the determinant is

= bg −  = bg.
The sign of the determinant indicates the orientation of the spanning
vectors b, g with respect to the standard basis (e, e). In our figure, flip-
ping the order to g, b swaps the columns of A and reverses the orientation
of the shaded area. This becomes the familiar formula: area = height ×
length. This intuition extends to higher dimensions. In R, we consider
three vectors r, b, g ∈ R spanning the edges of a parallelepiped, i.e., a
solid with faces that are parallel parallelograms (see Figure .). The ab-
The sign of the
determinant
indicates the
orientation of the
spanning vectors.
solute value of the determinant of the  ×  matrix [r, b, g] is the volume
of the solid. Thus, the determinant acts as a function that measures the
signed volume formed by column vectors composed in a matrix.
Consider the three linearly independent vectors r, g, b ∈ R given as
r =
 ,
g =
 ,
b =
 .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
Writing these vectors as the columns of a matrix
A = [r, g, b] =
allows us to compute the desired volume as
V = |det(A)| =  .
Computing the determinant of an n × n matrix requires a general algo-
rithm to solve the cases for n > , which we are going to explore in the fol-
lowing. Theorem . below reduces the problem of computing the deter-
minant of an n×n matrix to computing the determinant of (n−)×(n−)
matrices. By recursively applying the Laplace expansion (Theorem .),
we can therefore compute determinants of n × n matrices by ultimately
computing determinants of  ×  matrices.
Laplace expansion
Theorem . (Laplace Expansion). Consider a matrix A ∈ Rn×n. Then,
for all j = , . . . , n:
. Expansion along column j
det(Ak,j) is called
a minor and
(−)k+j det(Ak,j)
a cofactor.
det(A) =
k=
(−)k+jakj det(Ak,j) .
. Expansion along row j
det(A) =
k=
(−)k+jajk det(Aj,k) .
Here Ak,j ∈ R(n−)×(n−) is the submatrix of A that we obtain when delet-
ing row k and column j.
Example . (Laplace Expansion)
Let us compute the determinant of
A =

= (−)+
using the Laplace expansion along the first row. Applying (.) yields

+ (−)+
+ (−)+
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Determinant and Trace
We use (.) to compute the determinants of all × matrices and obtain
det(A) = ( − ) − ( − ) + ( − ) = − .
For completeness we can compare this result to computing the determi-
nant using Sarrus’ rule (.):
det(A) = ++−−− = − = − . (.)
For A ∈ Rn×n the determinant exhibits the following properties:
The determinant of a matrix product is the product of the corresponding
determinants, det(AB) = det(A)det(B).
Determinants are invariant to transposition, i.e., det(A) = det(A⊤).
If A is regular (invertible), then det(A−) =
det(A).
Similar matrices (Definition .) possess the same determinant. There-
fore, for a linear mapping Φ : V → V all transformation matrices AΦ
of Φ have the same determinant. Thus, the determinant is invariant to
the choice of basis of a linear mapping.
Adding a multiple of a column/row to another one does not change
det(A).
Multiplication of a column/row with λ ∈ R scales det(A) by λ. In
particular, det(λA) = λn det(A).
Swapping two rows/columns changes the sign of det(A).
Because of the last three properties, we can use Gaussian elimination (see
Section .) to compute det(A) by bringing A into row-echelon form.
We can stop Gaussian elimination when we have A in a triangular form
where the elements below the diagonal are all . Recall from (.) that the
determinant of a triangular matrix is the product of the diagonal elements.
Theorem .. A square matrix A ∈ Rn×n has det(A) ̸=  if and only if
rk(A) = n. In other words, A is invertible if and only if it is full rank.
When mathematics was mainly performed by hand, the determinant
calculation was considered an essential way to analyze matrix invertibil-
ity. However, contemporary approaches in machine learning use direct
numerical methods that superseded the explicit calculation of the deter-
minant. For example, in Chapter , we learned that inverse matrices can
be computed by Gaussian elimination. Gaussian elimination can thus be
used to compute the determinant of a matrix.
Determinants will play an important theoretical role for the following
sections, especially when we learn about eigenvalues and eigenvectors
(Section .) through the characteristic polynomial.
Definition .. The trace of a square matrix A ∈ Rn×n is defined as
trace
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
tr(A) :=
i=
aii ,
i.e. , the trace is the sum of the diagonal elements of A.
The trace satisfies the following properties:
tr(A + B) = tr(A) + tr(B) for A, B ∈ Rn×n
tr(αA) = αtr(A) , α ∈ R for A ∈ Rn×n
tr(In) = n
tr(AB) = tr(BA) for A ∈ Rn×k, B ∈ Rk×n
It can be shown that only one function satisfies these four properties to-
gether – the trace (Gohberg et al., ).
The properties of the trace of matrix products are more general. Specif-
ically, the trace is invariant under cyclic permutations, i.e.,
The trace is
invariant under
cyclic permutations.
tr(AKL) = tr(KLA)
for matrices A ∈ Ra×k, K ∈ Rk×l, L ∈ Rl×a. This property generalizes to
products of an arbitrary number of matrices. As a special case of (.), it
follows that for two vectors x, y ∈ Rn
tr(xy⊤) = tr(y⊤x) = y⊤x ∈ R .
Given a linear mapping Φ : V → V , where V is a vector space, we
define the trace of this map by using the trace of matrix representation
of Φ. For a given basis of V , we can describe Φ by means of the transfor-
mation matrix A. Then the trace of Φ is the trace of A. For a different
basis of V , it holds that the corresponding transformation matrix B of Φ
can be obtained by a basis change of the form S−AS for suitable S (see
Section ..). For the corresponding trace of Φ, this means
tr(B) = tr(S−AS)
tr(ASS−) = tr(A) .
Hence, while matrix representations of linear mappings are basis depen-
dent the trace of a linear mapping Φ is independent of the basis.
In this section, we covered determinants and traces as functions char-
acterizing a square matrix. Taking together our understanding of determi-
nants and traces we can now define an important equation describing a
matrix A in terms of a polynomial, which we will use extensively in the
following sections.
Definition . (Characteristic Polynomial). For λ ∈ R and a square ma-
trix A ∈ Rn×n
pA(λ) := det(A − λI)
(.a)
= c + cλ + cλ +    + cn−λn− + (−)nλn ,
(.b)
c, . . . , cn− ∈ R, is the characteristic polynomial of A. In particular,
characteristic
polynomial
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Eigenvalues and Eigenvectors
c = det(A) ,
cn− = (−)n−tr(A) .
The characteristic polynomial (.a) will allow us to compute eigen-
values and eigenvectors, covered in the next section.
. Eigenvalues and Eigenvectors
ear mapping will tell us how a special set of vectors, the eigenvectors, is
transformed by the linear mapping.
We will now get to know a new way to characterize a matrix and its associ-
ated linear mapping. Recall from Section .. that every linear mapping
has a unique transformation matrix given an ordered basis. We can in-
terpret linear mappings and their associated transformation matrices by
performing an “eigen” analysis. As we will see, the eigenvalues of a lin-
Eigen is a German
word meaning
“characteristic”,
“self”, or “own”.
Definition .. Let A ∈ Rn×n be a square matrix. Then λ ∈ R is an
eigenvalue of A and x ∈ Rn\{} is the corresponding eigenvector of A if
eigenvalue
eigenvector
Ax = λx .
We call (.) the eigenvalue equation.
eigenvalue equation
Remark. In the linear algebra literature and software, it is often a conven-
tion that eigenvalues are sorted in descending order, so that the largest
eigenvalue and associated eigenvector are called the first eigenvalue and
its associated eigenvector, and the second largest called the second eigen-
value and its associated eigenvector, and so on. However, textbooks and
publications may have different or no notion of orderings. We do not want
to presume an ordering in this book if not stated explicitly.
The following statements are equivalent:
λ is an eigenvalue of A ∈ Rn×n.
There exists an x ∈ Rn\{} with Ax = λx, or equivalently, (A −
λIn)x =  can be solved non-trivially, i.e., x ̸= .
rk(A − λIn) < n.
det(A − λIn) = .
Definition . (Collinearity and Codirection). Two vectors that point in
the same direction are called codirected. Two vectors are collinear if they
codirected
collinear
point in the same or the opposite direction.
Remark (Non-uniqueness of eigenvectors). If x is an eigenvector of A
associated with eigenvalue λ, then for any c ∈ R\{} it holds that cx is
an eigenvector of A with the same eigenvalue since
A(cx) = cAx = cλx = λ(cx) .
Thus, all vectors that are collinear to x are also eigenvectors of A.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
Theorem .. λ ∈ R is an eigenvalue of A ∈ Rn×n if and only if λ is a
root of the characteristic polynomial pA(λ) of A.
Definition .. Let a square matrix A have an eigenvalue λi. The algebraic
algebraic
multiplicity
multiplicity of λi is the number of times the root appears in the character-
istic polynomial.
Definition . (Eigenspace and Eigenspectrum). For A ∈ Rn×n, the set
of all eigenvectors of A associated with an eigenvalue λ spans a subspace
of Rn, which is called the eigenspace of A with respect to λ and is denoted
eigenspace
by Eλ. The set of all eigenvalues of A is called the eigenspectrum, or just
eigenspectrum
spectrum, of A.
spectrum
If λ is an eigenvalue of A ∈ Rn×n, then the corresponding eigenspace
Eλ is the solution space of the homogeneous system of linear equations
(A−λI)x = . Geometrically, the eigenvector corresponding to a nonzero
eigenvalue points in a direction that is stretched by the linear mapping.
The eigenvalue is the factor by which it is stretched. If the eigenvalue is
negative, the direction of the stretching is flipped.
Example . (The Case of the Identity Matrix)
The identity matrix I ∈ Rn×n has characteristic polynomial pI(λ) =
det(I −λI) = (−λ)n = , which has only one eigenvalue λ =  that oc-
curs n times. Moreover, Ix = λx = x holds for all vectors x ∈ Rn\{}.
Because of this, the sole eigenspace E of the identity matrix spans n di-
mensions, and all n standard basis vectors of Rn are eigenvectors of I.
Useful properties regarding eigenvalues and eigenvectors include the
following:
A matrix A and its transpose A⊤ possess the same eigenvalues, but not
necessarily the same eigenvectors.
The eigenspace Eλ is the null space of A − λI since
Ax = λx ⇐⇒ Ax − λx =
(.a)
⇐⇒ (A − λI)x =  ⇐⇒ x ∈ ker(A − λI).
(.b)
Similar matrices (see Definition .) possess the same eigenvalues.
Therefore, a linear mapping Φ has eigenvalues that are independent of
the choice of basis of its transformation matrix. This makes eigenvalues,
together with the determinant and the trace, key characteristic param-
eters of a linear mapping as they are all invariant under basis change.
Symmetric, positive definite matrices always have positive, real eigen-
values.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Eigenvalues and Eigenvectors
Example
(Computing
Eigenvalues,
Eigenvectors,
and
Eigenspaces)
Let us find the eigenvalues and eigenvectors of the  ×  matrix
A =
Step : Characteristic Polynomial. From our definition of the eigen-
vector x ̸=  and eigenvalue λ of A, there will be a vector such that
Ax = λx, i.e., (A − λI)x = . Since x ̸= , this requires that the kernel
(null space) of A − λI contains more elements than just . This means
that A − λI is not invertible and therefore det(A − λI) = . Hence, we
need to compute the roots of the characteristic polynomial (.a) to find
the eigenvalues.
Step : Eigenvalues. The characteristic polynomial is
pA(λ) = det(A − λI)
(.a)
= det
= ( − λ)( − λ) −    .
(.c)

− λ
− λ

(.b)
We factorize the characteristic polynomial and obtain
p(λ) = ( − λ)( − λ) −    =  − λ + λ = ( − λ)( − λ) (.)

x =  .
giving the roots λ =  and λ = .
Step : Eigenvectors and Eigenspaces. We find the eigenvectors that
correspond to these eigenvalues by looking at vectors x such that
− λ
− λ

=  .
For λ =  we obtain
We solve this homogeneous system and obtain a solution space
E = span[
] .

x =
x =  .
This eigenspace is one-dimensional as it possesses a single basis vector.
Analogously, we find the eigenvector for λ =  by solving the homoge-
neous system of equations
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
This means any vector x =
, is an

, where x = −x, such as

eigenvector with eigenvalue . The corresponding eigenspace is given as

] .
E = span[

The two eigenspaces E and E in Example . are one-dimensional
as they are each spanned by a single vector. However, in other cases
we may have multiple identical eigenvalues (see Definition .) and the
eigenspace may have more than one dimension.
Definition .. Let λi be an eigenvalue of a square matrix A. Then the
geometric multiplicity of λi is the number of linearly independent eigen-
geometric
multiplicity
vectors associated with λi. In other words, it is the dimensionality of the
eigenspace spanned by the eigenvectors associated with λi.
Remark. A specific eigenvalue’s geometric multiplicity must be at least
one because every eigenvalue has at least one associated eigenvector. An
eigenvalue’s geometric multiplicity cannot exceed its algebraic multiplic-
ity, but it may be lower.
Example .
has two repeated eigenvalues λ = λ =  and an
The matrix A =
algebraic multiplicity of . The eigenvalue has, however, only one distinct

and, thus, geometric multiplicity .
unit eigenvector x =
Graphical Intuition in Two Dimensions
A =

. The direction of the two eigenvectors correspond to the
canonical basis vectors in R, i.e., to two cardinal axes. The vertical axis
is extended by a factor of  (eigenvalue λ = ), and the horizontal axis
is compressed by factor
(eigenvalue λ =
). The mapping is area
preserving (det(A) =  =
Let us gain some intuition for determinants, eigenvectors, and eigenval-
ues using different linear mappings. Figure . depicts five transformation
matrices A, . . . , A and their impact on a square grid of points, centered
at the origin:
In geometry, the
area-preserving
properties of this
type of shearing
parallel to an axis is
also known as
Cavalieri’s principle
of equal areas for
parallelograms
(Katz, ).
A =
corresponds to a shearing mapping , i.e., it shears the
points along the horizontal axis to the right if they are on the positive
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Eigenvalues and Eigenvectors
λ = .
λ = .
det(A) = .
Figure .
Determinants and
eigenspaces.
Overview of five
linear mappings and
their associated
transformation
matrices
Ai ∈ R×
λ = .
λ = .
det(A) = .
λ = (.-.j)
λ = (.+.j)
det(A) = .
λ = .
λ = .
det(A) = .
projecting
color-coded points
x ∈ R (left
column) onto target
points Aix (right
column). The
central column
depicts the first
eigenvector,
stretched by its
associated
eigenvalue λ, and
the second
eigenvector
stretched by its
eigenvalue λ. Each
row depicts the
effect of one of five
transformation
matrices Ai with
respect to the
standard basis.
λ = .
λ = .
det(A) = .
half of the vertical axis, and to the left vice versa. This mapping is area
preserving (det(A) = ). The eigenvalue λ =  = λ is repeated
and the eigenvectors are collinear (drawn here for emphasis in two
opposite directions). This indicates that the mapping acts only along
one direction (the horizontal axis).
− sin( π
sin( π
cos( π
A =
cos( π

The matrix A rotates the
points by π
rad = ◦ counter-clockwise and has only complex eigen-
values, reflecting that the mapping is a rotation (hence, no eigenvectors
are drawn). A rotation has to be volume preserving, and so the deter-
minant is . For more details on rotations, we refer to Section ..

represents a mapping in the standard basis that col-
A =

lapses a two-dimensional domain onto one dimension. Since one eigen-
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
value is , the space in direction of the (blue) eigenvector corresponding
to λ =  collapses, while the orthogonal (red) eigenvector stretches
space by a factor λ = . Therefore, the area of the image is .
A =
is a shear-and-stretch mapping that scales space by %
since | det(A)| =
. It stretches space along the (red) eigenvector
of λ by a factor . and compresses it along the orthogonal (blue)
eigenvector by a factor ..
Example . (Eigenspectrum of a Biological Neural Network)
eigenvalue
neuron index
Figure .
Caenorhabditis
elegans neural
network (Kaiser and
Hilgetag,
).(a) Sym-
metrized
connectivity matrix;
(b) Eigenspectrum.
index of sorted eigenvalue
neuron index
(a) Connectivity matrix.
(b) Eigenspectrum.
Methods to analyze and learn from network data are an essential com-
ponent of machine learning methods. The key to understanding networks
is the connectivity between network nodes, especially if two nodes are
connected to each other or not. In data science applications, it is often
useful to study the matrix that captures this connectivity data.
We build a connectivity/adjacency matrix A ∈ R× of the complete
neural network of the worm C.Elegans. Each row/column represents one
of the  neurons of this worm’s brain. The connectivity matrix A has
a value of aij =  if neuron i talks to neuron j through a synapse, and
aij =  otherwise. The connectivity matrix is not symmetric, which im-
plies that eigenvalues may not be real valued. Therefore, we compute a
symmetrized version of the connectivity matrix as Asym := A + A⊤. This
new matrix Asym is shown in Figure .(a) and has a nonzero value aij if
and only if two neurons are connected (white pixels), irrespective of the
direction of the connection. In Figure .(b), we show the correspond-
ing eigenspectrum of Asym. The horizontal axis shows the index of the
eigenvalues, sorted in descending order. The vertical axis shows the corre-
sponding eigenvalue. The S-like shape of this eigenspectrum is typical for
many biological neural networks. The underlying mechanism responsible
for this is an area of active neuroscience research.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Eigenvalues and Eigenvectors
Theorem .. The eigenvectors x, . . . , xn of a matrix A ∈ Rn×n with n
distinct eigenvalues λ, . . . , λn are linearly independent.
This theorem states that eigenvectors of a matrix with n distinct eigen-
values form a basis of Rn.
Definition .. A square matrix A ∈ Rn×n is defective if it possesses
defective
fewer than n linearly independent eigenvectors.
A non-defective matrix A ∈ Rn×n does not necessarily require n dis-
tinct eigenvalues, but it does require that the eigenvectors form a basis of
Rn. Looking at the eigenspaces of a defective matrix, it follows that the
sum of the dimensions of the eigenspaces is less than n. Specifically, a de-
fective matrix has at least one eigenvalue λi with an algebraic multiplicity
m >  and a geometric multiplicity of less than m.
Remark. A defective matrix cannot have n distinct eigenvalues, as distinct
eigenvalues have linearly independent eigenvectors (Theorem .).
Theorem .. Given a matrix A ∈ Rm×n, we can always obtain a sym-
metric, positive semidefinite matrix S ∈ Rn×n by defining
S := A⊤A .
Remark. If rk(A) = n, then S := A⊤A is symmetric, positive definite.
Understanding why Theorem . holds is insightful for how we can
use symmetrized matrices: Symmetry requires S = S⊤, and by insert-
ing (.) we obtain S = A⊤A = A⊤(A⊤)⊤ = (A⊤A)⊤ = S⊤. More-
over, positive semidefiniteness (Section ..) requires that x⊤Sx ⩾
and inserting (.) we obtain x⊤Sx = x⊤A⊤Ax = (x⊤A⊤)(Ax) =
(Ax)⊤(Ax) ⩾ , because the dot product computes a sum of squares
(which are themselves non-negative).
spectral theorem
Theorem . (Spectral Theorem). If A ∈ Rn×n is symmetric, there ex-
ists an orthonormal basis of the corresponding vector space V consisting of
eigenvectors of A, and each eigenvalue is real.
A direct implication of the spectral theorem is that the eigendecompo-
sition of a symmetric matrix A exists (with real eigenvalues), and that
we can find an ONB of eigenvectors so that A = P DP ⊤, where D is
diagonal and the columns of P contain the eigenvectors.
Example .
Consider the matrix
A =
 .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
The characteristic polynomial of A is
pA(λ) = −(λ − )(λ − ) ,
so that we obtain the eigenvalues λ =  and λ = , where λ is a
repeated eigenvalue. Following our standard procedure for computing
eigenvectors, we obtain the eigenspaces
] .
E = span[
E = span[
| {z }
=:x
| {z }
=:x
|{z}
=:x
We see that x is orthogonal to both x and x. However, since x⊤
x =
̸= , they are not orthogonal. The spectral theorem (Theorem .)
states that there exists an orthogonal basis, but the one we have is not
orthogonal. However, we can construct one.
To construct such a basis, we exploit the fact that x, x are eigenvec-
tors associated with the same eigenvalue λ. Therefore, for any α, β ∈ R it
holds that
A(αx + βx) = Axα + Axβ = λ(αx + βx) ,
i.e., any linear combination of x and x is also an eigenvector of A as-
sociated with λ. The Gram-Schmidt algorithm (Section ..) is a method
for iteratively constructing an orthogonal/orthonormal basis from a set of
basis vectors using such linear combinations. Therefore, even if x and x
are not orthogonal, we can apply the Gram-Schmidt algorithm and find
eigenvectors associated with λ =  that are orthogonal to each other
(and to x). In our example, we will obtain
x′
 ,
x′
 ,
which are orthogonal to each other, orthogonal to x, and eigenvectors of
A associated with λ = .
Before we conclude our considerations of eigenvalues and eigenvectors
it is useful to tie these matrix characteristics together with the concepts of
the determinant and the trace.
Theorem .. The determinant of a matrix A ∈ Rn×n is the product of
its eigenvalues, i.e.,
det(A) =
i=
λi ,
where λi ∈ C are (possibly repeated) eigenvalues of A.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Eigenvalues and Eigenvectors
Theorem .. The trace of a matrix A ∈ Rn×n is the sum of its eigenval-
ues, i.e.,
tr(A) =
i=
λi ,
Figure .
Geometric
interpretation of
eigenvalues. The
eigenvectors of A
get stretched by the
corresponding
eigenvalues. The
area of the unit
square changes by
|λλ|, the
perimeter changes
by a factor of
(|λ| + |λ|).
where λi ∈ C are (possibly repeated) eigenvalues of A.
Let us provide a geometric intuition of these two theorems. Consider
a matrix A ∈ R× that possesses two linearly independent eigenvectors
x, x. For this example, we assume (x, x) are an ONB of R so that they
are orthogonal and the area of the square they span is ; see Figure ..
From Section ., we know that the determinant computes the change of
area of unit square under the transformation A. In this example, we can
compute the change of area explicitly: Mapping the eigenvectors using
A gives us vectors v = Ax = λx and v = Ax = λx, i.e., the
new vectors vi are scaled versions of the eigenvectors xi, and the scaling
factors are the corresponding eigenvalues λi. v, v are still orthogonal,
and the area of the rectangle they span is |λλ|.
Given that x, x (in our example) are orthonormal, we can directly
compute the perimeter of the unit square as ( + ). Mapping the eigen-
vectors using A creates a rectangle whose perimeter is (|λ| + |λ|).
Therefore, the sum of the absolute values of the eigenvalues tells us how
the perimeter of the unit square changes under the transformation matrix
A.
Example . (Google’s PageRank – Webpages as Eigenvectors)
Google uses the eigenvector corresponding to the maximal eigenvalue of
a matrix A to determine the rank of a page for search. The idea for the
PageRank algorithm, developed at Stanford University by Larry Page and
Sergey Brin in , was that the importance of any web page can be ap-
proximated by the importance of pages that link to it. For this, they write
down all web sites as a huge directed graph that shows which page links
to which. PageRank computes the weight (importance) xi ⩾  of a web
site ai by counting the number of pages pointing to ai. Moreover, PageR-
ank takes into account the importance of the web sites that link to ai. The
navigation behavior of a user is then modeled by a transition matrix A of
this graph that tells us with what (click) probability somebody will end up
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
on a different web site. The matrix A has the property that for any ini-
tial rank/importance vector x of a web site the sequence x, Ax, Ax, . . .
converges to a vector x∗. This vector is called the PageRank and satisfies
PageRank
Ax∗ = x∗, i.e., it is an eigenvector (with corresponding eigenvalue ) of
A. After normalizing x∗, such that ∥x∗∥ = , we can interpret the entries
as probabilities. More details and different perspectives on PageRank can
be found in the original technical report (Page et al., ).
. Cholesky Decomposition
There are many ways to factorize special types of matrices that we en-
counter often in machine learning. In the positive real numbers, we have
the square-root operation that gives us a decomposition of the number
into identical components, e.g.,  =   . For matrices, we need to be
careful that we compute a square-root-like operation on positive quanti-
ties. For symmetric, positive definite matrices (see Section ..), we can
choose from a number of square-root equivalent operations. The Cholesky
Cholesky
decomposition
decomposition/Cholesky factorization provides a square-root equivalent op-
Cholesky
factorization
eration on symmetric, positive definite matrices that is useful in practice.
Theorem . (Cholesky Decomposition). A symmetric, positive definite
matrix A can be factorized into a product A = LL⊤, where L is a lower-
triangular matrix with positive diagonal elements:
ln
lnn
an
an
ann
ln
lnn
 =
 .
L is called the Cholesky factor of A, and L is unique.
Cholesky factor
Example . (Cholesky Factorization)
Consider a symmetric, positive definite matrix A ∈ R×. We are inter-
ested in finding its Cholesky factorization A = LL⊤, i.e.,
A =
 = LL⊤ =
 . (.)
Multiplying out the right-hand side yields
A =
ll
ll
ll
+ l
ll + ll
ll
ll + ll
+ l
+ l
 .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Eigendecomposition and Diagonalization
Comparing the left-hand side of (.) and the right-hand side of (.)
shows that there is a simple pattern in the diagonal elements lii:
a − (l
+ l
) .
l = √a ,
l =
a − l
l =
Similarly for the elements below the diagonal (lij, where i > j), there is
also a repeating pattern:
l =
a ,
l =
a ,
l =
(a − ll) .
Thus, we constructed the Cholesky decomposition for any symmetric, pos-
itive definite  ×  matrix. The key realization is that we can backward
calculate what the components lij for the L should be, given the values
aij for A and previously computed values of lij.
i l
ii. Thus, many numerical software packages use the
Cholesky decomposition to make computations more efficient.
The Cholesky decomposition is an important tool for the numerical
computations underlying machine learning. Here, symmetric positive def-
inite matrices require frequent manipulation, e.g., the covariance matrix
of a multivariate Gaussian variable (see Section .) is symmetric, positive
definite. The Cholesky factorization of this covariance matrix allows us to
generate samples from a Gaussian distribution. It also allows us to perform
a linear transformation of random variables, which is heavily exploited
when computing gradients in deep stochastic models, such as the varia-
tional auto-encoder (Jimenez Rezende et al., ; Kingma and Welling,
). The Cholesky decomposition also allows us to compute determi-
nants very efficiently. Given the Cholesky decomposition A = LL⊤, we
know that det(A) = det(L) det(L⊤) = det(L). Since L is a triangular
matrix, the determinant is simply the product of its diagonal entries so
that det(A) = Q
. Eigendecomposition and Diagonalization
A diagonal matrix is a matrix that has value zero on all off-diagonal ele-
diagonal matrix
ments, i.e., they are of the form
D =
cn
 .
They allow fast computation of determinants, powers, and inverses. The
determinant is the product of its diagonal entries, a matrix power Dk is
given by each diagonal element raised to the power k, and the inverse
D− is the reciprocal of its diagonal elements if all of them are nonzero.
In this section, we will discuss how to transform matrices into diagonal
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
form. This is an important application of the basis change we discussed in
Section .. and eigenvalues from Section ..
Recall that two matrices A, D are similar (Definition .) if there ex-
ists an invertible matrix P , such that D = P −AP . More specifically, we
will look at matrices A that are similar to diagonal matrices D that con-
tain the eigenvalues of A on the diagonal.
Definition . (Diagonalizable). A matrix A ∈ Rn×n is diagonalizable
diagonalizable
if it is similar to a diagonal matrix, i.e., if there exists an invertible matrix
P ∈ Rn×n such that D = P −AP .
In the following, we will see that diagonalizing a matrix A ∈ Rn×n is
a way of expressing the same linear mapping but in another basis (see
Section ..), which will turn out to be a basis that consists of the eigen-
vectors of A.
Let A ∈ Rn×n, let λ, . . . , λn be a set of scalars, and let p, . . . , pn be a
set of vectors in Rn. We define P := [p, . . . , pn] and let D ∈ Rn×n be a
diagonal matrix with diagonal entries λ, . . . , λn. Then we can show that
AP = P D
if and only if λ, . . . , λn are the eigenvalues of A and p, . . . , pn are cor-
responding eigenvectors of A.
We can see that this statement holds because
AP = A[p, . . . , pn] = [Ap, . . . , Apn] ,
P D = [p, . . . , pn]
λn
 = [λp, . . . , λnpn] .
Thus, (.) implies that
Ap = λp
Apn = λnpn .
Therefore, the columns of P must be eigenvectors of A.
Our definition of diagonalization requires that P ∈ Rn×n is invertible,
i.e., P has full rank (Theorem .). This requires us to have n linearly
independent eigenvectors p, . . . , pn, i.e., the pi form a basis of Rn.
Theorem . (Eigendecomposition). A square matrix A ∈ Rn×n can be
factored into
A = P DP − ,
where P ∈ Rn×n and D is a diagonal matrix whose diagonal entries are
the eigenvalues of A, if and only if the eigenvectors of A form a basis of Rn.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Eigendecomposition and Diagonalization
Ae
Ae
Figure . Intuition
behind the
eigendecomposition
as sequential
transformations.
Top-left to
bottom-left: P −
P −
λp
p e
λp
Theorem . implies that only non-defective matrices can be diagonal-
ized and that the columns of P are the n eigenvectors of A. For symmetric
matrices we can obtain even stronger outcomes for the eigenvalue decom-
position.
Theorem .. A symmetric matrix S ∈ Rn×n can always be diagonalized.
performs a basis
change (here drawn
in R and depicted
as a rotation-like
operation) from the
standard basis into
the eigenbasis.
Bottom-left to
bottom-right: D
performs a scaling
along the remapped
orthogonal
eigenvectors,
depicted here by a
circle being
stretched to an
ellipse. Bottom-right
to top-right: P
undoes the basis
change (depicted as
a reverse rotation)
and restores the
original coordinate
frame.
Theorem . follows directly from the spectral theorem .. More-
over, the spectral theorem states that we can find an ONB of eigenvectors
of Rn. This makes P an orthogonal matrix so that D = P ⊤AP .
Remark. The Jordan normal form of a matrix offers a decomposition that
works for defective matrices (Lang, ) but is beyond the scope of this
book.
Geometric Intuition for the Eigendecomposition
We can interpret the eigendecomposition of a matrix as follows (see also
Figure .): Let A be the transformation matrix of a linear mapping with
respect to the standard basis ei (blue arrows). P − performs a basis
change from the standard basis into the eigenbasis. Then, the diagonal
D scales the vectors along these axes by the eigenvalues λi. Finally, P
transforms these scaled vectors back into the standard/canonical coordi-
nates yielding λipi.
Example . (Eigendecomposition)
Let us compute the eigendecomposition of A =

Step : Compute eigenvalues and eigenvectors. The characteristic
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
polynomial of A is
det(A − λI) = det

(.a)
− λ
− λ
= (
) .
(.b)
= (λ −
)(λ −
− λ) −  = λ − λ +
Therefore, the eigenvalues of A are λ =
and λ =
(the roots of the
characteristic polynomial), and the associated (normalized) eigenvectors
are obtained via
Ap =
p ,
Ap =
p .
This yields
p =
p =

Step : Check for existence. The eigenvectors p, p form a basis of R.
Therefore, A can be diagonalized.
Step : Construct the matrix P to diagonalize A. We collect the eigen-
vectors of A in P so that
P = [p, p] =

We then obtain
= D .
P −AP =

p and p in this example form an ONB)
Equivalently, we get (exploiting that P − = P ⊤ since the eigenvectors
Figure . visualizes
the
eigendecomposition

of A =

as a sequence of
linear
transformations.
{z
{z
| {z }
{z
P −
Diagonal matrices D can efficiently be raised to a power. Therefore,
we can find a matrix power for a matrix A ∈ Rn×n via the eigenvalue
decomposition (if it exists) so that
Ak = (P DP −)k = P DkP − .
Computing Dk is efficient because we apply this operation individually
to any diagonal element.
Assume that the eigendecomposition A = P DP − exists. Then,
det(A) = det(P DP −) = det(P ) det(D) det(P −)
(.a)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Singular Value Decomposition
dii
(.b)
= det(D) =
allows for an efficient computation of the determinant of A.
The eigenvalue decomposition requires square matrices. It would be
useful to perform a decomposition on general matrices. In the next sec-
tion, we introduce a more general matrix decomposition technique, the
singular value decomposition.
. Singular Value Decomposition
The singular value decomposition (SVD) of a matrix is a central matrix
decomposition method in linear algebra. It has been referred to as the
“fundamental theorem of linear algebra” (Strang, ) because it can be
applied to all matrices, not only to square matrices, and it always exists.
Moreover, as we will explore in the following, the SVD of a matrix A,
which represents a linear mapping Φ : V → W, quantifies the change
between the underlying geometry of these two vector spaces. We recom-
mend the work by Kalman () and Roy and Banerjee () for a
deeper overview of the mathematics of the SVD.
SVD theorem
Theorem . (SVD Theorem). Let A ∈ Rm×n be a rectangular matrix of
rank r ∈ [, min(m, n)]. The SVD of A is a decomposition of the form
SVD
singular value
decomposition
V ⊤
with an orthogonal matrix U ∈ Rm×m with column vectors ui, i = , . . . , m,
and an orthogonal matrix V ∈ Rn×n with column vectors vj, j = , . . . , n.
Moreover, Σ is an m × n matrix with Σii = σi ⩾  and Σij = , i ̸= j.
The diagonal entries σi, i = , . . . , r, of Σ are called the singular values,
singular values
ui are called the left-singular vectors, and vj are called the right-singular
left-singular vectors
right-singular
vectors
vectors. By convention, the singular values are ordered, i.e., σ ⩾ σ ⩾
σr ⩾ .
The singular value matrix Σ is unique, but it requires some attention.
singular value
matrix
Observe that the Σ ∈ Rm×n is rectangular. In particular, Σ is of the same
size as A. This means that Σ has a diagonal submatrix that contains the
singular values and needs additional zero padding. Specifically, if m > n,
then the matrix Σ has diagonal structure up to row n and then consists of
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
Figure . Intuition
behind the SVD of a
matrix A ∈ R×
σu
as sequential
transformations.
Top-left to
bottom-left: V ⊤
σu
V ⊤
σe
σe
⊤ row vectors from n +  to m below so that
performs a basis
change in R.
Bottom-left to
bottom-right: Σ
scales and maps
from R to R. The
ellipse in the
bottom-right lives in
R. The third
dimension is
orthogonal to the
surface of the
elliptical disk.
Bottom-right to
top-right: U
performs a basis
change within R.
Σ =
σn
. . .
. . .
If m < n, the matrix Σ has a diagonal structure up to column m and
columns that consist of  from m +  to n:
. . .
Σ =
σm
. . .
 .
Remark. The SVD exists for any matrix A ∈ Rm×n.
.. Geometric Intuitions for the SVD
The SVD offers geometric intuitions to describe a transformation matrix
A. In the following, we will discuss the SVD as sequential linear trans-
formations performed on the bases. In Example ., we will then apply
transformation matrices of the SVD to a set of vectors in R, which allows
us to visualize the effect of each transformation more clearly.
The SVD of a matrix can be interpreted as a decomposition of a corre-
sponding linear mapping (recall Section ..) Φ : Rn → Rm into three
operations; see Figure .. The SVD intuition follows superficially a simi-
lar structure to our eigendecomposition intuition, see Figure .: Broadly
speaking, the SVD performs a basis change via V ⊤ followed by a scal-
ing and augmentation (or reduction) in dimensionality via the singular
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Singular Value Decomposition
Assume we are given a transformation matrix of a linear mapping Φ :
Rn → Rm with respect to the standard bases B and C of Rn and Rm,
respectively. Moreover, assume a second basis ˜B of Rn and ˜C of Rm. Then
value matrix Σ. Finally, it performs a second basis change via U. The SVD
entails a number of important details and caveats, which is why we will
review our intuition in more detail.
It is useful to review
basis changes
(Section ..),
orthogonal matrices
(Definition .) and
orthonormal bases
(Section .).
. The matrix V performs a basis change in the domain Rn from ˜B (rep-
resented by the red and orange vectors v and v in the top-left of Fig-
ure .) to the standard basis B. V ⊤ = V − performs a basis change
from B to ˜B. The red and orange vectors are now aligned with the
canonical basis in the bottom-left of Figure ..
. Having changed the coordinate system to ˜B, Σ scales the new coordi-
nates by the singular values σi (and adds or deletes dimensions), i.e.,
Σ is the transformation matrix of Φ with respect to ˜B and ˜C, rep-
resented by the red and orange vectors being stretched and lying in
the e-e plane, which is now embedded in a third dimension in the
bottom-right of Figure ..
. U performs a basis change in the codomain Rm from ˜C into the canoni-
cal basis of Rm, represented by a rotation of the red and orange vectors
out of the e-e plane. This is shown in the top-right of Figure ..
The SVD expresses a change of basis in both the domain and codomain.
This is in contrast with the eigendecomposition that operates within the
same vector space, where the same basis change is applied and then un-
done. What makes the SVD special is that these two different bases are
simultaneously linked by the singular value matrix Σ.
Example . (Vectors and the SVD)
Consider a mapping of a square grid of vectors X ∈ R that fit in a box of
size  ×  centered at the origin. Using the standard basis, we map these
vectors using
A =
 = UΣV ⊤
(.a)

. (.b)
We start with a set of vectors X (colored dots; see top-left panel of Fig-
ure .) arranged in a grid. We then apply V ⊤ ∈ R×, which rotates X .
The rotated vectors are shown in the bottom-left panel of Figure .. We
now map these vectors using the singular value matrix Σ to the codomain
R (see the bottom-right panel in Figure .). Note that all vectors lie in
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
the x-x plane. The third coordinate is always . The vectors in the x-x
plane have been stretched by the singular values.
The direct mapping of the vectors X by A to the codomain R equals
the transformation of X by UΣV ⊤, where U performs a rotation within
the codomain R so that the mapped vectors are no longer restricted to
the x-x plane; they still are on a plane as shown in the top-right panel
of Figure ..
Figure . SVD and
mapping of vectors
(represented by
discs). The panels
follow the same
anti-clockwise
structure of
Figure ..
-. -. .
.. Construction of the SVD
We will next discuss why the SVD exists and show how to compute it
in detail. The SVD of a general matrix shares some similarities with the
eigendecomposition of a square matrix.
Remark. Compare the eigendecomposition of an SPD matrix
S = S⊤ = P DP ⊤
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Singular Value Decomposition
with the corresponding SVD
S = UΣV ⊤ .
If we set
U = P = V ,
D = Σ ,
we see that the SVD of SPD matrices is their eigendecomposition.
In the following, we will explore why Theorem . holds and how
the SVD is constructed. Computing the SVD of A ∈ Rm×n is equivalent
to finding two sets of orthonormal bases U = (u, . . . , um) and V =
(v, . . . , vn) of the codomain Rm and the domain Rn, respectively. From
these ordered bases, we will construct the matrices U and V .
Our plan is to start with constructing the orthonormal set of right-
singular vectors v, . . . , vn ∈ Rn. We then construct the orthonormal set
of left-singular vectors u, . . . , um ∈ Rm. Thereafter, we will link the two
and require that the orthogonality of the vi is preserved under the trans-
formation of A. This is important because we know that the images Avi
form a set of orthogonal vectors. We will then normalize these images by
scalar factors, which will turn out to be the singular values.
Let us begin with constructing the right-singular vectors. The spectral
theorem (Theorem .) tells us that the eigenvectors of a symmetric
matrix form an ONB, which also means it can be diagonalized. More-
over, from Theorem . we can always construct a symmetric, positive
semidefinite matrix A⊤A ∈ Rn×n from any rectangular matrix A ∈
Rm×n. Thus, we can always diagonalize A⊤A and obtain
A⊤A = P DP ⊤ = P
λn
 P ⊤ ,
where P is an orthogonal matrix, which is composed of the orthonormal
eigenbasis. The λi ⩾  are the eigenvalues of A⊤A. Let us assume the
SVD of A exists and inject (.) into (.). This yields
A⊤A = (UΣV ⊤)⊤(UΣV ⊤) = V Σ⊤U ⊤UΣV ⊤ ,
where U, V are orthogonal matrices. Therefore, with U ⊤U = I we ob-
tain
A⊤A = V Σ⊤ΣV ⊤ = V
 V ⊤ .
Comparing now (.) and (.), we identify
V ⊤ = P ⊤ ,
i = λi .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
Therefore, the eigenvectors of A⊤A that compose P are the right-singular
vectors V of A (see (.)). The eigenvalues of A⊤A are the squared
singular values of Σ (see (.)).
To obtain the left-singular vectors U, we follow a similar procedure.
We start by computing the SVD of the symmetric matrix AA⊤ ∈ Rm×m
(instead of the previous A⊤A ∈ Rn×n). The SVD of A yields
AA⊤ = (UΣV ⊤)(UΣV ⊤)⊤ = UΣV ⊤V Σ⊤U ⊤
(.a)
= U
 U ⊤ .
(.b)
The spectral theorem tells us that AA⊤ = SDS⊤ can be diagonalized
and we can find an ONB of eigenvectors of AA⊤, which are collected in
S. The orthonormal eigenvectors of AA⊤ are the left-singular vectors U
and form an orthonormal basis in the codomain of the SVD.
This leaves the question of the structure of the matrix Σ. Since AA⊤
and A⊤A have the same nonzero eigenvalues (see page ), the nonzero
entries of the Σ matrices in the SVD for both cases have to be the same.
The last step is to link up all the parts we touched upon so far. We have
an orthonormal set of right-singular vectors in V . To finish the construc-
tion of the SVD, we connect them with the orthonormal vectors U. To
reach this goal, we use the fact the images of the vi under A have to be
orthogonal, too. We can show this by using the results from Section ..
We require that the inner product between Avi and Avj must be  for
i ̸= j. For any two orthogonal eigenvectors vi, vj, i ̸= j, it holds that
(Avi)⊤(Avj) = v⊤
i (A⊤A)vj = v⊤
i (λjvj) = λjv⊤
i vj =  .
For the case m ⩾ r, it holds that {Av, . . . , Avr} is a basis of an r-
dimensional subspace of Rm.
To complete the SVD construction, we need left-singular vectors that
are orthonormal: We normalize the images of the right-singular vectors
Avi and obtain
ui :=
Avi
σi
Avi ,
∥Avi∥ =
√λi
Avi =
where the last equality was obtained from (.) and (.b), showing
us that the eigenvalues of AA⊤ are such that σ
i = λi.
Therefore, the eigenvectors of A⊤A, which we know are the right-
singular vectors vi, and their normalized images under A, the left-singular
vectors ui, form two self-consistent ONBs that are connected through the
singular value matrix Σ.
Let us rearrange (.) to obtain the singular value equation
singular value
equation
Avi = σiui ,
i = , . . . , r .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Singular Value Decomposition
This equation closely resembles the eigenvalue equation (.), but the
vectors on the left- and the right-hand sides are not the same.
For n < m, (.) holds only for i ⩽ n, but (.) says nothing about
the ui for i > n. However, we know by construction that they are or-
thonormal. Conversely, for m < n, (.) holds only for i ⩽ m. For i > m,
we have Avi =  and we still know that the vi form an orthonormal set.
This means that the SVD also supplies an orthonormal basis of the kernel
(null space) of A, the set of vectors x with Ax =  (see Section ..).
Concatenating the vi as the columns of V and the ui as the columns of
U yields
AV = UΣ ,
where Σ has the same dimensions as A and a diagonal structure for rows
, . . . , r. Hence, right-multiplying with V ⊤ yields A = UΣV ⊤, which is
the SVD of A.
Example . (Computing the SVD)
Let us find the singular value decomposition of

A =

The SVD requires us to compute the right-singular vectors vj, the singular
values σk, and the left-singular vectors ui.
Step : Right-singular vectors as the eigenbasis of A⊤A.
We start by computing
A⊤A =

 .

We compute the singular values and right-singular vectors vj through
the eigenvalue decomposition of A⊤A, which is given as
A⊤A =
 = P DP ⊤ ,
and we obtain the right-singular vectors as the columns of P so that
V = P =
 .
Step : Singular-value matrix.
As the singular values σi are the square roots of the eigenvalues of
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
A⊤A we obtain them straight from D. Since rk(A) = , there are only
two nonzero singular values: σ =
and σ = . The singular value
matrix must be the same size as A, and we obtain
Σ =
Step : Left-singular vectors as the normalized image of the right-
singular vectors.
We find the left-singular vectors by computing the image of the right-
singular vectors under A and normalizing them by dividing them by their
corresponding singular value. We obtain
u =
Av =

 =
u =
Av =

 =
U = [u, u] =

Note that on a computer the approach illustrated here has poor numerical
behavior, and the SVD of A is normally computed without resorting to the
eigenvalue decomposition of A⊤A.
.. Eigenvalue Decomposition vs. Singular Value Decomposition
Let us consider the eigendecomposition A = P DP − and the SVD A =
UΣV ⊤ and review the core elements of the past sections.
The SVD always exists for any matrix Rm×n. The eigendecomposition is
only defined for square matrices Rn×n and only exists if we can find a
basis of eigenvectors of Rn.
The vectors in the eigendecomposition matrix P are not necessarily
orthogonal, i.e., the change of basis is not a simple rotation and scaling.
On the other hand, the vectors in the matrices U and V in the SVD are
orthonormal, so they do represent rotations.
Both the eigendecomposition and the SVD are compositions of three
linear mappings:
. Change of basis in the domain
. Independent scaling of each new basis vector and mapping from do-
main to codomain
. Change of basis in the codomain
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Singular Value Decomposition
Ali
Beatrix
Chandra
Star Wars
Figure . Movie
ratings of three
people for four
movies and its SVD
decomposition.
Blade Runner
Amelie
Delicatessen
A key difference between the eigendecomposition and the SVD is that
in the SVD, domain and codomain can be vector spaces of different
dimensions.
In the SVD, the left- and right-singular vector matrices U and V are
generally not inverse of each other (they perform basis changes in dif-
ferent vector spaces). In the eigendecomposition, the basis change ma-
trices P and P − are inverses of each other.
In the SVD, the entries in the diagonal matrix Σ are all real and non-
negative, which is not generally true for the diagonal matrix in the
eigendecomposition.
The SVD and the eigendecomposition are closely related through their
projections
– The left-singular vectors of A are eigenvectors of AA⊤
– The right-singular vectors of A are eigenvectors of A⊤A.
– The nonzero singular values of A are the square roots of the nonzero
eigenvalues of both AA⊤ and A⊤A.
For symmetric matrices A ∈ Rn×n, the eigenvalue decomposition and
the SVD are one and the same, which follows from the spectral theo-
rem ..
Example . (Finding Structure in Movie Ratings and Consumers)
Let us add a practical interpretation of the SVD by analyzing data on
people and their preferred movies. Consider three viewers (Ali, Beatrix,
Chandra) rating four different movies (Star Wars, Blade Runner, Amelie,
Delicatessen). Their ratings are values between  (worst) and  (best) and
encoded in a data matrix A ∈ R× as shown in Figure .. Each row
represents a movie and each column a user. Thus, the column vectors of
movie ratings, one for each viewer, are xAli, xBeatrix, xChandra.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
Factoring A using the SVD offers us a way to capture the relationships
of how people rate movies, and especially if there is a structure linking
which people like which movies. Applying the SVD to our data matrix A
makes a number of assumptions:
. All viewers rate movies consistently using the same linear mapping.
. There are no errors or noise in the ratings.
. We interpret the left-singular vectors ui as stereotypical movies and
the right-singular vectors vj as stereotypical viewers.
We then make the assumption that any viewer’s specific movie preferences
can be expressed as a linear combination of the vj. Similarly, any movie’s
like-ability can be expressed as a linear combination of the ui. Therefore,
a vector in the domain of the SVD can be interpreted as a viewer in the
“space” of stereotypical viewers, and a vector in the codomain of the SVD
correspondingly as a movie in the “space” of stereotypical movies. Let us
These two “spaces”
are only
meaningfully
spanned by the
respective viewer
and movie data if
the data itself covers
a sufficient diversity
of viewers and
movies.
inspect the SVD of our movie-user matrix. The first left-singular vector u
has large absolute values for the two science fiction movies and a large
first singular value (red shading in Figure .). Thus, this groups a type
of users with a specific set of movies (science fiction theme). Similarly, the
first right-singular v shows large absolute values for Ali and Beatrix, who
give high ratings to science fiction movies (green shading in Figure .).
This suggests that v reflects the notion of a science fiction lover.
Similarly, u, seems to capture a French art house film theme, and v in-
dicates that Chandra is close to an idealized lover of such movies. An ide-
alized science fiction lover is a purist and only loves science fiction movies,
so a science fiction lover v gives a rating of zero to everything but science
fiction themed—this logic is implied by the diagonal substructure for the
singular value matrix Σ. A specific movie is therefore represented by how
it decomposes (linearly) into its stereotypical movies. Likewise, a person
would be represented by how they decompose (via linear combination)
into movie themes.
It is worth to briefly discuss SVD terminology and conventions, as there
are different versions used in the literature. While these differences can
be confusing, the mathematics remains invariant to them.
For convenience in notation and abstraction, we use an SVD notation
where the SVD is described as having two square left- and right-singular
vector matrices, but a non-square singular value matrix. Our defini-
tion (.) for the SVD is sometimes called the full SVD.
full SVD
Some authors define the SVD a bit differently and focus on square sin-
gular matrices. Then, for A ∈ Rm×n and m ⩾ n,
m×n = U
m×n Σ
n×n V ⊤
n×n .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Matrix Approximation
Sometimes this formulation is called the reduced SVD (e.g., Datta ())
reduced SVD
or the SVD (e.g., Press et al. ()). This alternative format changes
merely how the matrices are constructed but leaves the mathematical
structure of the SVD unchanged. The convenience of this alternative
formulation is that Σ is diagonal, as in the eigenvalue decomposition.
In Section ., we will learn about matrix approximation techniques
using the SVD, which is also called the truncated SVD.
truncated SVD
It is possible to define the SVD of a rank-r matrix A so that U is an
m × r matrix, Σ a diagonal matrix r × r, and V an r × n matrix.
This construction is very similar to our definition, and ensures that the
diagonal matrix Σ has only nonzero entries along the diagonal. The
main convenience of this alternative notation is that Σ is diagonal, as
in the eigenvalue decomposition.
A restriction that the SVD for A only applies to m × n matrices with
m > n is practically unnecessary. When m < n, the SVD decomposition
will yield Σ with more zero columns than rows and, consequently, the
singular values σm+, . . . , σn are .
The SVD is used in a variety of applications in machine learning from
least-squares problems in curve fitting to solving systems of linear equa-
tions. These applications harness various important properties of the SVD,
its relation to the rank of a matrix, and its ability to approximate matrices
of a given rank with lower-rank matrices. Substituting a matrix with its
SVD has often the advantage of making calculation more robust to nu-
merical rounding errors. As we will explore in the next section, the SVD’s
ability to approximate matrices with “simpler” matrices in a principled
manner opens up machine learning applications ranging from dimension-
ality reduction and topic modeling to data compression and clustering.
. Matrix Approximation
We considered the SVD as a way to factorize A = UΣV ⊤ ∈ Rm×n into
the product of three matrices, where U ∈ Rm×m and V ∈ Rn×n are or-
thogonal and Σ contains the singular values on its main diagonal. Instead
of doing the full SVD factorization, we will now investigate how the SVD
allows us to represent a matrix A as a sum of simpler (low-rank) matrices
Ai, which lends itself to a matrix approximation scheme that is cheaper
to compute than the full SVD.
We construct a rank- matrix Ai ∈ Rm×n as
Ai := uiv⊤
i ,
which is formed by the outer product of the ith orthogonal column vector
of U and V . Figure . shows an image of Stonehenge, which can be
represented by a matrix A ∈ R×, and some outer products Ai, as
defined in (.).
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
(a) Original image A.
(b) A, σ ≈ , .
(c) A, σ ≈ , .
(d) A, σ ≈ , .
(e) A, σ ≈ , .
(f) A, σ ≈ , .
Figure . Image
processing with the
SVD. (a) The
original grayscale
image is a
,  × ,
matrix of values
between  (black)
and  (white).
(b)–(f) Rank-
matrices
A, . . . , A and
their corresponding
singular values
σ, . . . , σ. The
grid-like structure of
each rank- matrix
is imposed by the
outer-product of the
left and
right-singular
vectors.
A matrix A ∈ Rm×n of rank r can be written as a sum of rank- matrices
Ai so that
A =
i=
σiuiv⊤
i =
i=
σiAi ,
where the outer-product matrices Ai are weighted by the ith singular
value σi. We can see why (.) holds: The diagonal structure of the
singular value matrix Σ multiplies only matching left- and right-singular
vectors uiv⊤
i and scales them by the corresponding singular value σi. All
terms Σijuiv⊤
j vanish for i ̸= j because Σ is a diagonal matrix. Any terms
i > r vanish because the corresponding singular values are .
In (.), we introduced rank- matrices Ai. We summed up the r in-
dividual rank- matrices to obtain a rank-r matrix A; see (.). If the
sum does not run over all matrices Ai, i = , . . . , r, but only up to an
intermediate value k < r, we obtain a rank-k approximation
rank-k
approximation
i=
σiuiv⊤
i =
i=
σiAi
bA(k) :=
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.
of A with rk( bA(k)) = k. Figure . shows low-rank approximations
bA(k) of an original image A of Stonehenge. The shape of the rocks be-
comes increasingly visible and clearly recognizable in the rank- approx-
imation. While the original image requires ,   ,  = , ,
numbers, the rank- approximation requires us only to store the five sin-
gular values and the five left- and right-singular vectors (,  and , -
dimensional each) for a total of (, +, +) = ,  numbers
– just above .% of the original.
To measure the difference (error) between A and its rank-k approxima-
tion bA(k), we need the notion of a norm. In Section ., we already used

. Matrix Approximation
(a) Original image A.
(b) Rank- approximation bA().(c) Rank- approximation bA().
Figure . Image
reconstruction with
the SVD. (a)
Original image.
(b)–(f) Image
reconstruction using
the low-rank
approximation of
the SVD, where the
rank-k
approximation is
given by bA(k) =
Pk
i= σiAi.
(d) Rank- approximation bA().(e) Rank- approximation bA().(f) Rank- approximation bA().
norms on vectors that measure the length of a vector. By analogy we can
also define norms on matrices.
Definition . (Spectral Norm of a Matrix). For x ∈ Rn\{}, the spectral
spectral norm
norm of a matrix A ∈ Rm×n is defined as
∥A∥ := max
∥Ax∥
∥x∥
We introduce the notation of a subscript in the matrix norm (left-hand
side), similar to the Euclidean norm for vectors (right-hand side), which
has subscript . The spectral norm (.) determines how long any vector
x can at most become when multiplied by A.
Theorem .. The spectral norm of A is its largest singular value σ.
We leave the proof of this theorem as an exercise.
Eckart-Young
theorem
Theorem . (Eckart-Young Theorem (Eckart and Young, )). Con-
sider a matrix A ∈ Rm×n of rank r and let B ∈ Rm×n be a matrix of rank
k. For any k ⩽ r with bA(k) = Pk
i= σiuiv⊤
i it holds that
bA(k) = argminrk(B)=k ∥A − B∥ ,
A − bA(k)

= σk+ .
The Eckart-Young theorem states explicitly how much error we intro-
duce by approximating A using a rank-k approximation. We can inter-
pret the rank-k approximation obtained with the SVD as a projection of
the full-rank matrix A onto a lower-dimensional space of rank-at-most-k
matrices. Of all possible projections, the SVD minimizes the error (with
respect to the spectral norm) between A and any rank-k approximation.
We can retrace some of the steps to understand why (.) should hold.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
We observe that the difference between A − bA(k) is a matrix containing
the sum of the remaining rank- matrices
i=k+
σiuiv⊤
i .
A − bA(k) =
By Theorem ., we immediately obtain σk+ as the spectral norm of the
difference matrix. Let us have a closer look at (.). If we assume that
there is another matrix B with rk(B) ⩽ k, such that
∥A − B∥ <
A − bA(k)

then there exists an at least (n − k)-dimensional null space Z ⊆ Rn, such
that x ∈ Z implies that Bx = . Then it follows that
∥Ax∥ = ∥(A − B)x∥ ,
and by using a version of the Cauchy-Schwartz inequality (.) that en-
compasses norms of matrices, we obtain
∥Ax∥ ⩽ ∥A − B∥ ∥x∥ < σk+ ∥x∥ .
However, there exists a (k + )-dimensional subspace where ∥Ax∥ ⩾
σk+ ∥x∥, which is spanned by the right-singular vectors vj, j ⩽ k +  of
A. Adding up dimensions of these two spaces yields a number greater than
n, as there must be a nonzero vector in both spaces. This is a contradiction
of the rank-nullity theorem (Theorem .) in Section ...
The Eckart-Young theorem implies that we can use SVD to reduce a
rank-r matrix A to a rank-k matrix bA in a principled, optimal (in the
spectral norm sense) manner. We can interpret the approximation of A by
a rank-k matrix as a form of lossy compression. Therefore, the low-rank
approximation of a matrix appears in many machine learning applications,
e.g., image processing, noise filtering, and regularization of ill-posed prob-
lems. Furthermore, it plays a key role in dimensionality reduction and
principal component analysis, as we will see in Chapter .
Example . (Finding Structure in Movie Ratings and Consumers
(continued))
Coming back to our movie-rating example, we can now apply the con-
cept of low-rank approximations to approximate the original data matrix.
Recall that our first singular value captures the notion of science fiction
theme in movies and science fiction lovers. Thus, by using only the first
singular value term in a rank- decomposition of the movie-rating matrix,
we obtain the predicted ratings
A = uv⊤
(.a)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Matrix Phylogeny
 .
(.b)
This first rank- approximation A is insightful: it tells us that Ali and
Beatrix like science fiction movies, such as Star Wars and Bladerunner
(entries have values > .), but fails to capture the ratings of the other
movies by Chandra. This is not surprising, as Chandra’s type of movies is
not captured by the first singular value. The second singular value gives
us a better rank- approximation for those movie-theme lovers:
A = uv⊤
(.a)
 .
(.b)
In this second rank- approximation A, we capture Chandra’s ratings
and movie types well, but not the science fiction movies. This leads us to
consider the rank- approximation bA(), where we combine the first two
rank- approximations
bA() = σA + σA =
 .
bA() is similar to the original movie ratings table
A =
 ,
and this suggests that we can ignore the contribution of A. We can in-
terpret this so that in the data table there is no evidence of a third movie-
theme/movie-lovers category. This also means that the entire space of
movie-themes/movie-lovers in our example is a two-dimensional space
spanned by science fiction and French art house movies and lovers.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
Real matrices
∃ Pseudo-inverse
∃ SVD
Rn×n
Rn×m
Square
Figure . A
functional
phylogeny of
matrices
encountered in
machine learning.
Nonsquare
∃ Determinant
∃ Trace
det =
No basis of
eigenvectors
Singular
Singular
Basis of
Defective
det ̸=
det ̸=
eigenvectors
Non-defective
(diagonalizable)
A⊤A = AA⊤
A⊤A ̸= AA⊤
Normal
Non-normal
Symmetric
∃ Inverse Matrix
A⊤A = AA⊤ = I
Regular
(invertible)
eigenvalues ∈ R
Diagonal
Columns are
orthogonal
eigenvectors
Positive definite
Cholesky
eigenvalues >
Orthogonal
Rotation
Identity
matrix
. Matrix Phylogeny
The word
“phylogenetic”
describes how we
capture the
relationships among
individuals or
groups and derived
from the Greek
words for “tribe”
and “source”.
In Chapters  and , we covered the basics of linear algebra and analytic
geometry. In this chapter, we looked at fundamental characteristics of ma-
trices and linear mappings. Figure . depicts the phylogenetic tree of
relationships between different types of matrices (black arrows indicating
“is a subset of”) and the covered operations we can perform on them (in
blue). We consider all real matrices A ∈ Rn×m. For non-square matrices
(where n ̸= m), the SVD always exists, as we saw in this chapter. Focus-
ing on square matrices A ∈ Rn×n, the determinant informs us whether a
square matrix possesses an inverse matrix, i.e., whether it belongs to the
class of regular, invertible matrices. If the square n × n matrix possesses n
linearly independent eigenvectors, then the matrix is non-defective and an
eigendecomposition exists (Theorem .). We know that repeated eigen-
values may result in defective matrices, which cannot be diagonalized.
Non-singular and non-defective matrices are not the same. For exam-
ple, a rotation matrix will be invertible (determinant is nonzero) but not
diagonalizable in the real numbers (eigenvalues are not guaranteed to be
real numbers).
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Further Reading
We dive further into the branch of non-defective square n × n matrices.
A is normal if the condition A⊤A = AA⊤ holds. Moreover, if the more
restrictive condition holds that A⊤A = AA⊤ = I, then A is called or-
thogonal (see Definition .). The set of orthogonal matrices is a subset of
the regular (invertible) matrices and satisfies A⊤ = A−.
Normal matrices have a frequently encountered subset, the symmetric
matrices S ∈ Rn×n, which satisfy S = S⊤. Symmetric matrices have only
real eigenvalues. A subset of the symmetric matrices consists of the pos-
itive definite matrices P that satisfy the condition of x⊤P x >  for all
x ∈ Rn\{}. In this case, a unique Cholesky decomposition exists (Theo-
rem .). Positive definite matrices have only positive eigenvalues and
are always invertible (i.e., have a nonzero determinant).
Another subset of symmetric matrices consists of the diagonal matrices
D. Diagonal matrices are closed under multiplication and addition, but do
not necessarily form a group (this is only the case if all diagonal entries
are nonzero so that the matrix is invertible). A special diagonal matrix is
the identity matrix I.
. Further Reading
Most of the content in this chapter establishes underlying mathematics
and connects them to methods for studying mappings, many of which are
at the heart of machine learning at the level of underpinning software so-
lutions and building blocks for almost all machine learning theory. Matrix
characterization using determinants, eigenspectra, and eigenspaces pro-
vides fundamental features and conditions for categorizing and analyzing
matrices. This extends to all forms of representations of data and map-
pings involving data, as well as judging the numerical stability of compu-
tational operations on such matrices (Press et al., ).
Determinants are fundamental tools in order to invert matrices and
compute eigenvalues “by hand”. However, for almost all but the smallest
instances, numerical computation by Gaussian elimination outperforms
determinants (Press et al., ). Determinants remain nevertheless a
powerful theoretical concept, e.g., to gain intuition about the orientation
of a basis based on the sign of the determinant. Eigenvectors can be used
to perform basis changes to transform data into the coordinates of mean-
ingful orthogonal, feature vectors. Similarly, matrix decomposition meth-
ods, such as the Cholesky decomposition, reappear often when we com-
pute or simulate random events (Rubinstein and Kroese, ). Therefore,
the Cholesky decomposition enables us to compute the reparametrization
trick where we want to perform continuous differentiation over random
variables, e.g., in variational autoencoders (Jimenez Rezende et al., ;
Kingma and Welling, ).
Eigendecomposition is fundamental in enabling us to extract mean-
ingful and interpretable information that characterizes linear mappings.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
Therefore, the eigendecomposition underlies a general class of machine
learning algorithms called spectral methods that perform eigendecomposi-
tion of a positive-definite kernel. These spectral decomposition methods
encompass classical approaches to statistical data analysis, such as the
following:
principal component
analysis
Principal component analysis (PCA (Pearson, ), see also Chapter ),
in which a low-dimensional subspace, which explains most of the vari-
ability in the data, is sought.
Fisher discriminant
analysis
Fisher discriminant analysis, which aims to determine a separating hy-
perplane for data classification (Mika et al., ).
multidimensional
scaling
Multidimensional scaling (MDS) (Carroll and Chang, ).
The computational efficiency of these methods typically comes from find-
ing the best rank-k approximation to a symmetric, positive semidefinite
matrix. More contemporary examples of spectral methods have different
origins, but each of them requires the computation of the eigenvectors
and eigenvalues of a positive-definite kernel, such as Isomap (Tenenbaum
Isomap
et al., ), Laplacian eigenmaps (Belkin and Niyogi, ), Hessian
Laplacian
eigenmaps
Hessian eigenmaps
eigenmaps (Donoho and Grimes, ), and spectral clustering (Shi and
spectral clustering
Malik, ). The core computations of these are generally underpinned
by low-rank matrix approximation techniques (Belabbas and Wolfe, )
as we encountered here via the SVD.
The SVD allows us to discover some of the same kind of information as
the eigendecomposition. However, the SVD is more generally applicable
to non-square matrices and data tables. These matrix factorization meth-
ods become relevant whenever we want to identify heterogeneity in data
when we want to perform data compression by approximation, e.g., in-
stead of storing n×m values just storing (n+m)k values, or when we want
to perform data pre-processing, e.g., to decorrelate predictor variables of
a design matrix (Ormoneit et al., ). The SVD operates on matrices,
which we can interpret as rectangular arrays with two indices (rows and
columns). The extension of matrix-like structure to higher-dimensional
arrays are called tensors. It turns out that the SVD is the special case of
a more general family of decompositions that operate on such tensors
(Kolda and Bader, ). SVD-like operations and low-rank approxima-
tions on tensors are, for example, the Tucker decomposition (Tucker, )
Tucker
decomposition
or the CP decomposition (Carroll and Chang, ).
CP decomposition
The SVD low-rank approximation is frequently used in machine learn-
ing for computational efficiency reasons. This is because it reduces the
amount of memory and operations with nonzero multiplications we need
to perform on potentially very large matrices of data (Trefethen and Bau III,
). Moreover, low-rank approximations are used to operate on ma-
trices that may contain missing values as well as for purposes of lossy
compression and dimensionality reduction (Moonen and De Moor, ;
Markovsky, ).
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Exercises
Exercises
Compute the determinant using the Laplace expansion (using the first row)
and the Sarrus rule for
A =
 .
Compute the following determinant efficiently:
Compute the eigenspaces of
a.
A :=

b.

B :=

Compute all eigenspaces of
A =
 .

Diagonalizability of a matrix is unrelated to its invertibility. Determine for
the following four matrices whether they are diagonalizable and/or invert-
ible

Compute the eigenspaces of the following transformation matrices. Are they
diagonalizable?
a. For
A =
b. For
A =
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Matrix Decompositions
Are the following matrices diagonalizable? If yes, determine their diagonal
form and a basis with respect to which the transformation matrices are di-
agonal. If no, give reasons why they are not diagonalizable.
a.
A =

b.
A =
c.
A =
d.
A =
Find the SVD of the matrix
A =

Find the singular value decomposition of
A =

. Find the rank- approximation of
A =

. Show that for any A ∈ Rm×n the matrices A⊤A and AA⊤ possess the
same nonzero eigenvalues.
. Show that for x ̸=  Theorem . holds, i.e., show that
max
∥Ax∥
∥x∥
= σ ,
where σ is the largest singular value of A ∈ Rm×n.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Vector Calculus
Many algorithms in machine learning optimize an objective function with
respect to a set of desired model parameters that control how well a model
explains the data: Finding good parameters can be phrased as an opti-
mization problem (see Sections . and .). Examples include: (i) lin-
ear regression (see Chapter ), where we look at curve-fitting problems
and optimize linear weight parameters to maximize the likelihood; (ii)
neural-network auto-encoders for dimensionality reduction and data com-
pression, where the parameters are the weights and biases of each layer,
and where we minimize a reconstruction error by repeated application of
the chain rule; and (iii) Gaussian mixture models (see Chapter ) for
modeling data distributions, where we optimize the location and shape
parameters of each mixture component to maximize the likelihood of the
model. Figure . illustrates some of these problems, which we typically
solve by using optimization algorithms that exploit gradient information
(Section .). Figure . gives an overview of how concepts in this chap-
ter are related and how they are connected to other chapters of the book.
Training data
MLE
Central to this chapter is the concept of a function. A function f is
a quantity that relates two quantities to each other. In this book, these
quantities are typically inputs x ∈ RD and targets (function values) f(x),
which we assume are real-valued if not stated otherwise. Here RD is the
domain of f, and the function values f(x) are the image/codomain of f.
domain
image/codomain
Figure . Vector
calculus plays a
central role in (a)
regression (curve
fitting) and (b)
density estimation,
i.e., modeling data
distributions.
(a)
Regression
problem:
Find
parameters,
such that the curve explains the observations
(crosses) well.
(b) Density estimation with a Gaussian mixture
model: Find means and covariances, such that
the data (dots) can be explained well.
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

Vector Calculus
Difference quotient
Chapter
Regression
used in
Figure . A mind
map of the concepts
introduced in this
chapter, along with
when they are used
in other parts of the
book.
Chapter
used in
used in
Chapter
Partial derivatives
Optimization
Dimensionality
reduction
used in
used in
Chapter
Density estimation
Chapter
Probability
Jacobian
Hessian
used in
defines
collected in
used in
Taylor series
Chapter
Classification
Section .. provides much more detailed discussion in the context of
linear functions. We often write
f : RD → R
(.a)
x → f(x)
(.b)
to specify a function, where (.a) specifies that f is a mapping from
RD to R and (.b) specifies the explicit assignment of an input x to
a function value f(x). A function f assigns every input x exactly one
function value f(x).
Example .
Recall the dot product as a special case of an inner product (Section .).
In the previous notation, the function f(x) = x⊤x, x ∈ R, would be
specified as
f : R → R
(.a)
x → x
+ x
(.b)
In this chapter, we will discuss how to compute gradients of functions,
which is often essential to facilitate learning in machine learning models
since the gradient points in the direction of steepest ascent. Therefore,
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Differentiation of Univariate Functions
f(x)
f(x + δx)
Figure . The
average incline of a
function f between
x and x + δx is
the incline of the
secant (blue)
through f(x) and
f(x + δx) and
given by δy/δx.
δy
f(x)
δx
vector calculus is one of the fundamental mathematical tools we need in
machine learning. Throughout this book, we assume that functions are
differentiable. With some additional technical definitions, which we do
not cover here, many of the approaches presented can be extended to
sub-differentials (functions that are continuous but not differentiable at
certain points). We will look at an extension to the case of functions with
constraints in Chapter .
. Differentiation of Univariate Functions
In the following, we briefly revisit differentiation of a univariate function,
which may be familiar from high school mathematics. We start with the
difference quotient of a univariate function y = f(x), x, y ∈ R, which we
will subsequently use to define derivatives.
Definition . (Difference Quotient). The difference quotient
difference quotient
δy
δx := f(x + δx) − f(x)
δx
computes the slope of the secant line through two points on the graph of
f. In Figure ., these are the points with x-coordinates x and x + δx.
The difference quotient can also be considered the average slope of f
between x and x + δx if we assume f to be a linear function. In the limit
for δx → , we obtain the tangent of f at x, if f is differentiable. The
tangent is then the derivative of f at x.
Definition . (Derivative). More formally, for h >  the derivative of f
derivative
at x is defined as the limit
df
dx := lim
h→
f(x + h) − f(x)
and the secant in Figure . becomes a tangent.
The derivative of f points in the direction of steepest ascent of f.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
Example . (Derivative of a Polynomial)
We want to compute the derivative of f(x) = xn, n ∈ N. We may already
know that the answer will be nxn−, but we want to derive this result
using the definition of the derivative as the limit of the difference quotient.
Using the definition of the derivative in (.), we obtain
f(x + h) − f(x)
(.a)
df
dx = lim
h→
(x + h)n − xn
(.b)
= lim
h→
(.c)
= lim
h→
Pn
i=
 n
xn−ihi − xn
We see that xn =
 n
xn−h. By starting the sum at , the xn-term cancels,
and we obtain
(.a)
df
dx = lim
h→
Pn
i=
 n
xn−ihi
xn−ihi−
(.b)

= lim
h→
i=
(.c)
xn− +
xn−ihi−

= lim
h→
i=
{z
→ as h→
n!
!(n − )!xn− = nxn− .
(.d)
.. Taylor Series
The Taylor series is a representation of a function f as an infinite sum of
terms. These terms are determined using derivatives of f evaluated at x.
Definition . (Taylor Polynomial). The Taylor polynomial of degree n of
Taylor polynomial
f : R → R at x is defined as
We define t :=
for all t ∈ R.
f (k)(x)
Tn(x) :=
k!
(x − x)k ,
k=
where f (k)(x) is the kth derivative of f at x (which we assume exists)
and f (k)(x)
k!
are the coefficients of the polynomial.
Definition . (Taylor Series). For a smooth function f ∈ C∞, f : R → R,
the Taylor series of f at x is defined as
Taylor series
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Differentiation of Univariate Functions
f (k)(x)
T∞(x) =
k!
(x − x)k .
k=
Taylor series. If f(x) = T∞(x), then f is called analytic.
For x = , we obtain the Maclaurin series as a special instance of the
f ∈ C∞ means that
f is continuously
differentiable
infinitely many
times.
Maclaurin series
analytic
Remark. In general, a Taylor polynomial of degree n is an approximation
of a function, which does not need to be a polynomial. The Taylor poly-
nomial is similar to f in a neighborhood around x. However, a Taylor
polynomial of degree n is an exact representation of a polynomial f of
degree k ⩽ n since all derivatives f (i), i > k vanish.
Example . (Taylor Polynomial)
We consider the polynomial
f(x) = x
and seek the Taylor polynomial T, evaluated at x = . We start by com-
puting the coefficients f (k)() for k = , . . . , :
f() =
f ′() =
f ′′() =
f ()() =
f ()() =
f ()() =
f ()() =
Therefore, the desired Taylor polynomial is
f (k)(x)
T(x) =
k!
(x − x)k
(.a)
k=
=  + (x − ) + (x − ) + (x − ) + (x − ) +  . (.b)
Multiplying out and re-arranging yields
T(x) = ( −  +  −  + ) + x( −  +  − )
+ x( −  + ) + x( − ) + x
(.a)
= x = f(x) ,
(.b)
i.e., we obtain an exact representation of the original function.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
Figure . Taylor
polynomials. The
original function
f(x) =
sin(x) + cos(x)
(black, solid) is
approximated by
Taylor polynomials
(dashed) around
x = .
Higher-order Taylor
polynomials
approximate the
function f better
and more globally.
T is already
similar to f in
[−, ].
Example . (Taylor Series)
Consider the function in Figure . given by
f(x) = sin(x) + cos(x) ∈ C∞ .
We seek a Taylor series expansion of f at x = , which is the Maclaurin
series expansion of f. We obtain the following derivatives:
f() = sin() + cos() =
f ′() = cos() − sin() =
f ′′() = − sin() − cos() = −
f ()() = − cos() + sin() = −
f ()() = sin() + cos() = f() =
We can see a pattern here: The coefficients in our Taylor series are only
± (since sin() = ), each of which occurs twice before switching to the
other one. Furthermore, f (k+)() = f (k)().
Therefore, the full Taylor series expansion of f at x =  is given by
f (k)(x)
T∞(x) =
k!
(x − x)k
(.a)
k=
!x +
!x +
=  + x −
!x −
!x −
(.b)
!x +
!x +
=  −
!x ∓    + x −
!x ∓
(.c)
(k)!xk +
(k + )!xk+
(.d)
k=
(−)k
k=
(−)k
= cos(x) + sin(x) ,
(.e)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Differentiation of Univariate Functions
where we used the power series representations
power series
representation
cos(x) =
(k)!xk ,
k=
(−)k
sin(x) =
(k + )!xk+ .
k=
(−)k
Figure . shows the corresponding first Taylor polynomials Tn for n =
, , , .
Remark. A Taylor series is a special case of a power series
f(x) =
k=
ak(x − c)k
where ak are coefficients and c is a constant, which has the special form
in Definition ..
.. Differentiation Rules
In the following, we briefly state basic differentiation rules, where we
denote the derivative of f by f ′.
Product rule:
(f(x)g(x))′ = f ′(x)g(x) + f(x)g′(x)
g(x)
(g(x))
= f ′(x)g(x) − f(x)g′(x)
Quotient rule:
f(x)
Sum rule:
(f(x) + g(x))′ = f ′(x) + g′(x)
Chain rule:
 g(f(x))
′ = (g ◦ f)′(x) = g′(f(x))f ′(x)
Here, g ◦ f denotes function composition x → f(x) → g(f(x)).
Example . (Chain Rule)
Let us compute the derivative of the function h(x) = (x + ) using the
chain rule. With
h(x) = (x + ) = g(f(x)) ,
f(x) = x +  ,
g(f) = f  ,
we obtain the derivatives of f and g as
f ′(x) =  ,
g′(f) = f  ,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
such that the derivative of h is given as
h′(x) = g′(f)f ′(x) = (f )
= (x + )   = (x + ) , (.)
where we used the chain rule (.) and substituted the definition of f
in (.) in g′(f).
. Partial Differentiation and Gradients
Differentiation as discussed in Section . applies to functions f of a
scalar variable x ∈ R. In the following, we consider the general case
where the function f depends on one or more variables x ∈ Rn, e.g.,
f(x) = f(x, x). The generalization of the derivative to functions of sev-
eral variables is the gradient.
We find the gradient of the function f with respect to x by varying one
variable at a time and keeping the others constant. The gradient is then
the collection of these partial derivatives.
Definition . (Partial Derivative). For a function f : Rn → R, x →
f(x), x ∈ Rn of n variables x, . . . , xn we define the partial derivatives as
partial derivative
∂f
∂x
= lim
h→
f(x + h, x, . . . , xn) − f(x)
∂f
∂xn
= lim
h→
f(x, . . . , xn−, xn + h) − f(x)
and collect them in the row vector
∂f(x)
∇xf = gradf = df
∂x
∂x
∂f(x)
∂xn
dx =
∂f(x)

∈ R×n , (.)
where n is the number of variables and  is the dimension of the image/
range/codomain of f. Here, we defined the column vector x = [x, . . . , xn]⊤
∈ Rn. The row vector in (.) is called the gradient of f or the Jacobian
gradient
Jacobian
and is the generalization of the derivative from Section ..
Example . (Partial Derivatives Using the Chain Rule)
For f(x, y) = (x + y), we obtain the partial derivatives
Remark. This definition of the Jacobian is a special case of the general
definition of the Jacobian for vector-valued functions as the collection of
partial derivatives. We will get back to this in Section ..
We can use results
from scalar
differentiation: Each
partial derivative is
a derivative with
respect to a scalar.
∂f(x, y)
∂x
= (x + y) ∂
∂x(x + y) = (x + y) ,
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Partial Differentiation and Gradients
∂f(x, y)
∂y
= (x + y) ∂
∂y(x + y) = (x + y)y .
where we used the chain rule (.) to compute the partial derivatives.
Remark (Gradient as a Row Vector). It is not uncommon in the literature
to define the gradient vector as a column vector, following the conven-
tion that vectors are generally column vectors. The reason why we define
the gradient vector as a row vector is twofold: First, we can consistently
generalize the gradient to vector-valued functions f : Rn → Rm (then
the gradient becomes a matrix). Second, we can immediately apply the
multi-variate chain rule without paying attention to the dimension of the
gradient. We will discuss both points in Section ..
Example . (Gradient)
For f(x, x) = x
x + xx
∈ R, the partial derivatives (i.e., the deriva-
tives of f with respect to x and x) are
∂f(x, x)
∂x
= xx + x
∂f(x, x)
∂x
= x
+ xx
and the gradient is then
∂f(x, x)
∂x
∂x
df
dx =
∂f(x, x)

xx + x
+ xx
 ∈ R× .
.. Basic Rules of Partial Differentiation
Product rule:
(fg)′ = f′g + fg′,
Sum rule:
(f + g)′ = f′ + g′,
Chain rule:
(g(f))′ = g′(f)f′
In the multivariate case, where x ∈ Rn, the basic differentiation rules that
we know from school (e.g., sum rule, product rule, chain rule; see also
Section ..) still apply. However, when we compute derivatives with re-
spect to vectors x ∈ Rn we need to pay attention: Our gradients now
involve vectors and matrices, and matrix multiplication is not commuta-
tive (Section ..), i.e., the order matters.
Here are the general product rule, sum rule, and chain rule:
Product rule:
∂x
∂xg(x) + f(x) ∂g
∂x
 f(x)g(x)
 = ∂f
Sum rule:
∂x
∂x + ∂g
∂x
 f(x) + g(x)
 = ∂f
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
∂x
∂f
∂f
∂x
Chain rule:
∂x(g ◦ f)(x) = ∂
 g(f(x))
 = ∂g
Let us have a closer look at the chain rule. The chain rule (.) resem-
This is only an
intuition, but not
mathematically
correct since the
partial derivative is
not a fraction.
bles to some degree the rules for matrix multiplication where we said that
neighboring dimensions have to match for matrix multiplication to be de-
fined; see Section ... If we go from left to right, the chain rule exhibits
similar properties: ∂f shows up in the “denominator” of the first factor
and in the “numerator” of the second factor. If we multiply the factors to-
gether, multiplication is defined, i.e., the dimensions of ∂f match, and ∂f
“cancels”, such that ∂g/∂x remains.
.. Chain Rule
Consider a function f : R → R of two variables x, x. Furthermore,
x(t) and x(t) are themselves functions of t. To compute the gradient of
f with respect to t, we need to apply the chain rule (.) for multivariate
functions as
= ∂f
∂t
∂x(t)
∂x
∂t + ∂f
∂x
∂t ,
∂x
∂x
∂t
df
dt =
∂f
∂x
∂f
∂x
i "
∂x(t)
where d denotes the gradient and ∂ partial derivatives.
Example .
Consider f(x, x) = x
+ x, where x = sin t and x = cos t, then
df
dt = ∂f
∂x
∂t + ∂f
∂x
∂t
(.a)
∂x
∂x
=  sin t∂ sin t
∂t
+ ∂ cos t
∂t
(.b)
=  sin t cos t −  sin t =  sin t(cos t − )
(.c)
is the corresponding derivative of f with respect to t.
If f(x, x) is a function of x and x, where x(s, t) and x(s, t) are
themselves functions of two variables s and t, the chain rule yields the
partial derivatives
∂f
∂s = ∂f
∂x
∂s + ∂f
∂x
∂s ,
∂x
∂x
∂f
∂t = ∂f
∂x
∂t + ∂f
∂x
∂t ,
∂x
∂x
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Gradients of Vector-Valued Functions
and the gradient is obtained by the matrix multiplication
df
∂x
∂s
∂x
∂t
∂x
∂f
∂x
d(s, t) = ∂f
∂x
∂x
∂(s, t) =
h ∂f
∂x
∂s
∂x
∂t
= ∂f
∂x
{z
∂x
∂(s, t)
{z
This compact way of writing the chain rule as a matrix multiplication only
The chain rule can
be written as a
matrix
multiplication.
makes sense if the gradient is defined as a row vector. Otherwise, we will
need to start transposing gradients for the matrix dimensions to match.
This may still be straightforward as long as the gradient is a vector or a
matrix; however, when the gradient becomes a tensor (we will discuss this
in the following), the transpose is no longer a triviality.
Remark (Verifying the Correctness of a Gradient Implementation). The
definition of the partial derivatives as the limit of the corresponding dif-
ference quotient (see (.)) can be exploited when numerically checking
the correctness of gradients in computer programs: When we compute
Gradient checking
gradients and implement them, we can use finite differences to numer-
ically test our computation and implementation: We choose the value h
to be small (e.g., h = −) and compare the finite-difference approxima-
tion from (.) with our (analytic) implementation of the gradient. If the
error is small, our gradient implementation is probably correct. “Small”
i(dhi−dfi)
could mean that
q P
i(dhi+dfi) < −, where dhi is the finite-difference
approximation and dfi is the analytic gradient of f with respect to the ith
variable xi.
. Gradients of Vector-Valued Functions
Thus far, we discussed partial derivatives and gradients of functions f :
Rn → R mapping to the real numbers. In the following, we will generalize
the concept of the gradient to vector-valued functions (vector fields) f :
Rn → Rm, where n ⩾  and m > .
For a function f : Rn → Rm and a vector x = [x, . . . , xn]⊤ ∈ Rn, the
corresponding vector of function values is given as
f(x) =
f(x)
fm(x)
 ∈ Rm .
Writing the vector-valued function in this way allows us to view a vector-
valued function f : Rn → Rm as a vector of functions [f, . . . , fm]⊤,
fi : Rn → R that map onto R. The differentiation rules for every fi are
exactly the ones we discussed in Section ..
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
Therefore, the partial derivative of a vector-valued function f : Rn →
Rm with respect to xi ∈ R, i = , . . . n, is given as the vector
limh→
f(x,...,xi−,xi+h,xi+,...xn)−f(x)
∂f
∂xi
∂f
∂xi...
∂fm
∂xi
limh→
fm(x,...,xi−,xi+h,xi+,...xn)−fm(x)
 =
 ∈ Rm .
From (.), we know that the gradient of f with respect to a vector is
the row vector of the partial derivatives. In (.), every partial derivative
∂f/∂xi is itself a column vector. Therefore, we obtain the gradient of f :
Rn → Rm with respect to x ∈ Rn by collecting these partial derivatives:
df(x)
(.a)
dx
∂f(x)
∂x
∂f(x)
∂xn

∂f(x)
∂xn
∂x
∂f(x)
∈ Rm×n .
(.b)
∂fm(x)
∂xn
∂x
∂fm(x)
∂x
∂f(x)
∂xn
dx
∂f(x)

Definition . (Jacobian). The collection of all first-order partial deriva-
tives of a vector-valued function f : Rn → Rm is called the Jacobian. The
Jacobian
Jacobian J is an m × n matrix, which we define and arrange as follows:
The gradient of a
function
f : Rn → Rm is a
matrix of size
m × n.
J = ∇xf = df(x)
∂f(x)
∂x
∂f(x)
∂xn
∂fm(x)
∂x
∂fm(x)
∂xn
x =
∂xj
xn
 ,
J(i, j) = ∂fi
As a special case of (.), a function f : Rn → R, which maps a
vector x ∈ Rn onto a scalar (e.g., f(x) = Pn
i= xi), possesses a Jacobian
that is a row vector (matrix of dimension  × n); see (.).
Remark. In this book, we use the numerator layout of the derivative, i.e.,
numerator layout
the derivative df/dx of f ∈ Rm with respect to x ∈ Rn is an m ×
n matrix, where the elements of f define the rows and the elements of
x define the columns of the corresponding Jacobian; see (.). There
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Gradients of Vector-Valued Functions
f()
Figure . The
determinant of the
Jacobian of f can
be used to compute
the magnifier
between the blue
and orange area.
exists also the denominator layout, which is the transpose of the numerator
denominator layout
layout. In this book, we will use the numerator layout.
=  .
We will see how the Jacobian is used in the change-of-variable method
for probability distributions in Section .. The amount of scaling due to
the transformation of a variable is provided by the determinant.
In Section ., we saw that the determinant can be used to compute
the area of a parallelogram. If we are given two vectors b = [, ]⊤,
b = [, ]⊤ as the sides of the unit square (blue; see Figure .), the area
of this square is
det
If we take a parallelogram with the sides c = [−, ]⊤, c = [, ]⊤
(orange in Figure .), its area is given as the absolute value of the deter-
minant (see Section .)
det
= | − | =  ,
i.e., the area of this is exactly three times the area of the unit square.
We can find this scaling factor by finding a mapping that transforms the
unit square into the other square. In linear algebra terms, we effectively
perform a variable transformation from (b, b) to (c, c). In our case,
the mapping is linear and the absolute value of the determinant of this
mapping gives us exactly the scaling factor we are looking for.
We will describe two approaches to identify this mapping. First, we ex-
ploit that the mapping is linear so that we can use the tools from Chapter
to identify this mapping. Second, we will find the mapping using partial
derivatives using the tools we have been discussing in this chapter.
Approach
To get started with the linear algebra approach, we
identify both {b, b} and {c, c} as bases of R (see Section .. for a
recap). What we effectively perform is a change of basis from (b, b) to
(c, c), and we are looking for the transformation matrix that implements
the basis change. Using results from Section .., we identify the desired
basis change matrix as
J =
such that Jb = c and Jb = c. The absolute value of the determi-
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
nant of J, which yields the scaling factor we are looking for, is given as
|det(J)| = , i.e., the area of the square spanned by (c, c) is three times
greater than the area spanned by (b, b).
Approach
The linear algebra approach works for linear trans-
formations; for nonlinear transformations (which become relevant in Sec-
tion .), we follow a more general approach using partial derivatives.
For this approach, we consider a function f : R → R that performs a
variable transformation. In our example, f maps the coordinate represen-
tation of any vector x ∈ R with respect to (b, b) onto the coordinate
representation y ∈ R with respect to (c, c). We want to identify the
mapping so that we can compute how an area (or volume) changes when
it is being transformed by f. For this, we need to find out how f(x)
changes if we modify x a bit. This question is exactly answered by the
Jacobian matrix df
dx ∈ R×. Since we can write
y = −x + x
y = x + x
we obtain the functional relationship between x and y, which allows us
to get the partial derivatives
∂y
∂x
= − ,
∂y
∂x
=  ,
∂y
∂x
=  ,
∂y
∂x
and compose the Jacobian as
∂y
∂x
J =

∂y
∂x
∂y
∂x
∂y
∂x
 =
The Jacobian represents the coordinate transformation we are looking
Geometrically, the
Jacobian
determinant gives
the magnification/
scaling factor when
we transform an
area or volume.
for. It is exact if the coordinate transformation is linear (as in our case),
and (.) recovers exactly the basis change matrix in (.). If the co-
ordinate transformation is nonlinear, the Jacobian approximates this non-
linear transformation locally with a linear one. The absolute value of the
Jacobian determinant |det(J)| is the factor by which areas or volumes are
Jacobian
determinant
scaled when coordinates are transformed. Our case yields |det(J)| = .
The Jacobian determinant and variable transformations will become
relevant in Section . when we transform random variables and prob-
ability distributions. These transformations are extremely relevant in ma-
Figure .
Dimensionality of
(partial) derivatives.
f(x)
∂f
∂x
chine learning in the context of training deep neural networks using the
reparametrization trick, also called infinite perturbation analysis.
In this chapter, we encountered derivatives of functions. Figure . sum-
marizes the dimensions of those derivatives. If f : R → R the gradient is
simply a scalar (top-left entry). For f : RD → R the gradient is a  × D
row vector (top-right entry). For f : R → RE, the gradient is an E ×
column vector, and for f : RD → RE the gradient is an E × D matrix.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Gradients of Vector-Valued Functions
Example . (Gradient of a Vector-Valued Function)
We are given
f(x) = Ax ,
f(x) ∈ RM,
A ∈ RM×N,
x ∈ RN .
To compute the gradient df/dx we first determine the dimension of
df/dx: Since f : RN → RM, it follows that df/dx ∈ RM×N. Second,
to compute the gradient we determine the partial derivatives of f with
respect to every xj:
fi(x) =
∂xj
= Aij
j=
Aijxj =⇒ ∂fi
We collect the partial derivatives in the Jacobian and obtain the gradient
df
dx =
AN
AM
AMN
∂f
∂x
∂f
∂xN
∂fM
∂x
∂fM
∂xN
 =
 = A ∈ RM×N . (.)
Example . (Chain Rule)
Consider the function h : R → R, h(t) = (f ◦ g)(t) with
f : R → R
g : R → R
f(x) = exp(xx
) ,

= g(t) =
t cos t
t sin t

x =
and compute the gradient of h with respect to t. Since f : R → R and
g : R → R we note that
∂f
∂x ∈ R× ,
∂g
∂t ∈ R× .
The desired gradient is computed by applying the chain rule:
dh
dt = ∂f
∂x
∂x
∂t =
∂x
∂f
∂x
∂f

∂x
∂t
∂x
∂t
(.a)
(.b)

exp(xx
)x
exp(xx
)xx
cos t − t sin t
sin t + t cos t
= exp(xx
 x
(cos t − t sin t) + xx(sin t + t cos t)
 ,
(.c)
where x = t cos t and x = t sin t; see (.).
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
y = Φθ ,
where θ ∈ RD is a parameter vector, Φ ∈ RN×D are input features and
y ∈ RN are the corresponding observations. We define the functions
Example . (Gradient of a Least-Squares Loss in a Linear Model)
Let us consider the linear model
We will discuss this
model in much
more detail in
Chapter  in the
context of linear
regression, where
we need derivatives
of the least-squares
loss L with respect
to the parameters θ.
L(e) := ∥e∥ ,
e(θ) := y − Φθ .
We seek ∂L
∂θ , and we will use the chain rule for this purpose. L is called a
least-squares loss function.
least-squares loss
Before we start our calculation, we determine the dimensionality of the
gradient as
∂L
∂θ ∈ R×D .
The chain rule allows us to compute the gradient as
∂L
∂θ = ∂L
∂e
∂e
∂θ ,
where the dth element is given by
dLdtheta =
np.einsum(
’n,nd’,
dLde,dedtheta)
∂L
∂θ [, d] =
∂L
∂e [n]∂e
∂θ[n, d] .
n=
We know that ∥e∥ = e⊤e (see Section .) and determine
∂L
∂e = e⊤ ∈ R×N .
Furthermore, we obtain
∂e
∂θ = −Φ ∈ RN×D ,
such that our desired derivative is
∂L
∂θ = −e⊤Φ
|{z}
N×D
∈ R×D .
= − (y⊤ − θ⊤Φ⊤)
{z
×N
Remark. We would have obtained the same result without using the chain
rule by immediately looking at the function
L(θ) := ∥y − Φθ∥ = (y − Φθ)⊤(y − Φθ) .
This approach is still practical for simple functions like L but becomes
impractical for deep function compositions.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Gradients of Matrices
A ∈ R×
x ∈ R
Partial derivatives:
∂A
∂x
∈ R×
dA
dx ∈ R××
∂A
∂x
∈ R×
collate
∂A
∂x
∈ R×
(a) Approach : We compute the partial derivative
∂A
∂x , ∂A
∂x , ∂A
∂x , each of which is a  ×  matrix, and col-
late them in a  ×  ×  tensor.
Figure .
Visualization of
gradient
computation of a
matrix with respect
to a vector. We are
interested in
computing the
gradient of
A ∈ R× with
respect to a vector
x ∈ R. We know
that gradient
dA
dx ∈ R××. We
follow two
equivalent
approaches to arrive
there: (a) collating
partial derivatives
into a Jacobian
tensor;
(b) flattening of the
matrix into a vector,
computing the
Jacobian matrix,
re-shaping into a
Jacobian tensor.
A ∈ R×
x ∈ R
A ∈ R×
˜A ∈ R
d ˜A
dx ∈ R×
dA
dx ∈ R××
re-shape
re-shape
gradient
(b) Approach : We re-shape (flatten) A ∈ R× into a vec-
tor ˜A ∈ R. Then, we compute the gradient d ˜
dx ∈ R×.
We obtain the gradient tensor by re-shaping this gradient as
illustrated above.
. Gradients of Matrices
We can think of a
tensor as a
multidimensional
array.
We will encounter situations where we need to take gradients of matrices
with respect to vectors (or other matrices), which results in a multidimen-
sional tensor. We can think of this tensor as a multidimensional array that
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
collects partial derivatives. For example, if we compute the gradient of an
m × n matrix A with respect to a p × q matrix B, the resulting Jacobian
would be (m×n)×(p×q), i.e., a four-dimensional tensor J, whose entries
are given as Jijkl = ∂Aij/∂Bkl.
Since matrices represent linear mappings, we can exploit the fact that
there is a vector-space isomorphism (linear, invertible mapping) between
the space Rm×n of m × n matrices and the space Rmn of mn vectors.
Therefore, we can re-shape our matrices into vectors of lengths mn and
pq, respectively. The gradient using these mn vectors results in a Jacobian
of size mn × pq. Figure . visualizes both approaches. In practical ap-
Matrices can be
transformed into
vectors by stacking
the columns of the
matrix
(“flattening”).
plications, it is often desirable to re-shape the matrix into a vector and
continue working with this Jacobian matrix: The chain rule (.) boils
down to simple matrix multiplication, whereas in the case of a Jacobian
tensor, we will need to pay more attention to what dimensions we need
to sum out.
Example . (Gradient of Vectors with Respect to Matrices)
Let us consider the following example, where
f = Ax ,
f ∈ RM,
A ∈ RM×N,
x ∈ RN
and where we seek the gradient df/dA. Let us start again by determining
the dimension of the gradient as
df
dA ∈ RM×(M×N) .
By definition, the gradient is the collection of the partial derivatives:
df
dA =
∂f
∂A...
∂fM
∂A
 ,
∂fi
∂A ∈ R×(M×N) .
To compute the partial derivatives, it will be helpful to explicitly write out
the matrix vector multiplication:
fi =
j=
Aijxj,
i = , . . . , M ,
and the partial derivatives are then given as
∂fi
∂Aiq
= xq .
This allows us to compute the partial derivatives of fi with respect to a
row of A, which is given as
∂fi
∂Ai,:
= x⊤ ∈ R××N ,
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Gradients of Matrices
∂fi
∂Ak̸=i,:
= ⊤ ∈ R××N
where we have to pay attention to the correct dimensionality. Since fi
maps onto R and each row of A is of size  × N, we obtain a  ×  × N-
sized tensor as the partial derivative of fi with respect to a row of A.
We stack the partial derivatives (.) and get the desired gradient
in (.) via
x⊤
∂fi
∂A =
∈ R×(M×N) .
Example . (Gradient of Matrices with Respect to Matrices)
Consider a matrix R ∈ RM×N and f : RM×N → RN×N with
f(R) = R⊤R =: K ∈ RN×N ,
where we seek the gradient dK/dR.
To solve this hard problem, let us first write down what we already
know: The gradient has the dimensions
dK
dR ∈ R(N×N)×(M×N) ,
which is a tensor. Moreover,
dKpq
dR ∈ R×M×N
for p, q = , . . . , N, where Kpq is the (p, q)th entry of K = f(R). De-
noting the ith column of R by ri, every entry of K is given by the dot
product of two columns of R, i.e.,
Kpq = r⊤
p rq =
m=
RmpRmq .
When we now compute the partial derivative ∂Kpq
∂Rij we obtain
∂Kpq
∂Rij
∂Rij
RmpRmq = ∂pqij ,
m=
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
∂pqij =

Riq
if j = p, p ̸= q
Rip
if j = q, p ̸= q
Riq
if j = p, p = q
otherwise

From (.), we know that the desired gradient has the dimension (N ×
N) × (M × N), and every single entry of this tensor is given by ∂pqij
in (.), where p, q, j = , . . . , N and i = , . . . , M.
. Useful Identities for Computing Gradients
In the following, we list some useful gradients that are frequently required
in a machine learning context (Petersen and Pedersen, ). Here, we
use tr() as the trace (see Definition .), det() as the determinant (see
Section .) and f(X)− as the inverse of f(X), assuming it exists.
∂X
∂X f(X)⊤ =
∂f(X)
∂X
∂X tr(f(X)) = tr
∂f(X)

∂X
∂X det(f(X)) = det(f(X))tr

f(X)− ∂f(X)

∂X
f(X)−
∂X f(X)− = −f(X)− ∂f(X)
∂a⊤X−b
∂X
= −(X−)⊤ab⊤(X−)⊤
∂x⊤a
∂x
= a⊤
∂a⊤x
∂x
= a⊤
∂a⊤Xb
∂X
= ab⊤
∂x⊤Bx
∂x
= x⊤(B + B⊤)
∂s(x − As)⊤W (x − As) = −(x − As)⊤W A
for symmetric W
Remark. In this book, we only cover traces and transposes of matrices.
However, we have seen that derivatives can be higher-dimensional ten-
sors, in which case the usual trace and transpose are not defined. In these
cases, the trace of a D×D×E×F tensor would be an E×F-dimensional
matrix. This is a special case of a tensor contraction. Similarly, when we
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Backpropagation and Automatic Differentiation
“transpose” a tensor, we mean swapping the first two dimensions. Specif-
ically, in (.) through (.), we require tensor-related computations
when we work with multivariate functions f() and compute derivatives
with respect to matrices (and choose not to vectorize them as discussed in
Section .).
. Backpropagation and Automatic Differentiation
A good discussion
about
backpropagation
and the chain rule is
available at a blog
by Tim Vieira at
https://tinyurl.
com/ycfmyrw.
In many machine learning applications, we find good model parameters
by performing gradient descent (Section .), which relies on the fact
that we can compute the gradient of a learning objective with respect
to the parameters of the model. For a given objective function, we can
obtain the gradient with respect to the model parameters using calculus
and applying the chain rule; see Section ... We already had a taste in
Section . when we looked at the gradient of a squared loss with respect
to the parameters of a linear regression model.
Consider the function
f(x) =
x + exp(x) + cos
 x + exp(x)
 .
By application of the chain rule, and noting that differentiation is linear,
we compute the gradient
df
dx = x + x exp(x)
x + exp(x) − sin
 x + exp(x)
  x + x exp(x)
= x

x + exp(x) − sin
 x + exp(x)
  + exp(x)
 .
Writing out the gradient in this explicit way is often impractical since it
often results in a very lengthy expression for a derivative. In practice,
it means that, if we are not careful, the implementation of the gradient
could be significantly more expensive than computing the function, which
imposes unnecessary overhead. For training deep neural network mod-
els, the backpropagation algorithm (Kelley, ; Bryson, ; Dreyfus,
backpropagation
; Rumelhart et al., ) is an efficient way to compute the gradient
of an error function with respect to the parameters of the model.
.. Gradients in a Deep Network
An area where the chain rule is used to an extreme is deep learning, where
the function value y is computed as a many-level function composition
y = (fK ◦ fK− ◦    ◦ f)(x) = fK(fK−(   (f(x))    )) ,
where x are the inputs (e.g., images), y are the observations (e.g., class
labels), and every function fi, i = , . . . , K, possesses its own parameters.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
f K
f K−
A, b
Figure . Forward
pass in a multi-layer
neural network to
compute the loss L
as a function of the
inputs x and the
parameters Ai, bi.
A, b
AK−, bK−
AK−, bK−
σ(Ai−xi− + bi−) in the ith layer. Here xi− is the output of layer i −
and σ an activation function, such as the logistic sigmoid
In neural networks with multiple layers, we have functions fi(xi−) =
We discuss the case,
where the activation
functions are
identical in each
layer to unclutter
notation.
+e−x , tanh or a
rectified linear unit (ReLU). In order to train these models, we require the
gradient of a loss function L with respect to all model parameters Aj, bj
for j = , . . . , K. This also requires us to compute the gradient of L with
respect to the inputs of each layer. For example, if we have inputs x and
observations y and a network structure defined by
f  := x
f i := σi(Ai−f i− + bi−) ,
i = , . . . , K ,
see also Figure . for a visualization, we may be interested in finding
Aj, bj for j = , . . . , K − , such that the squared loss
L(θ) = ∥y − f K(θ, x)∥
∂L
∂f K
∂θK−
= ∂L
∂f K
∂θK−
∂L
∂f K
∂θK−
= ∂L
∂f K−
∂θK−
∂f K
∂f K−
is minimized, where θ = {A, b, . . . , AK−, bK−}.
To obtain the gradients with respect to the parameter set θ, we require
the partial derivatives of L with respect to the parameters θj = {Aj, bj}
of each layer j = , . . . , K − . The chain rule allows us to determine the
partial derivatives as
A more in-depth
discussion about
gradients of neural
networks can be
found in Justin
Domke’s lecture
notes
https://tinyurl.
com/yalcxgtv.
∂L
∂f K
∂θK−
= ∂L
∂f K−
∂θK−
∂f K
∂f K−
∂f K−
∂f K−
∂f i+
∂L
∂θi
= ∂L
∂θi
∂f K
∂f i+
∂f K
∂f K−
∂f i+
The orange terms are partial derivatives of the output of a layer with
respect to its inputs, whereas the blue terms are partial derivatives of
the output of a layer with respect to its parameters. Assuming, we have
already computed the partial derivatives ∂L/∂θi+, then most of the com-
putation can be reused to compute ∂L/∂θi. The additional terms that we
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Backpropagation and Automatic Differentiation
f K
f K−
Figure .
Backward pass in a
multi-layer neural
network to compute
the gradients of the
loss function.
A, b
A, b
AK−, bK−
AK−, bK−
Figure . Simple
graph illustrating
the flow of data
from x to y via
some intermediate
variables a, b.
need to compute are indicated by the boxes. Figure . visualizes that the
gradients are passed backward through the network.
.. Automatic Differentiation
It turns out that backpropagation is a special case of a general technique
in numerical analysis called automatic differentiation. We can think of au-
automatic
differentiation
tomatic differentation as a set of techniques to numerically (in contrast to
symbolically) evaluate the exact (up to machine precision) gradient of a
function by working with intermediate variables and applying the chain
rule. Automatic differentiation applies a series of elementary arithmetic
Automatic
differentiation is
different from
symbolic
differentiation and
numerical
approximations of
the gradient, e.g., by
using finite
differences.
operations, e.g., addition and multiplication and elementary functions,
e.g., sin, cos, exp, log. By applying the chain rule to these operations, the
gradient of quite complicated functions can be computed automatically.
Automatic differentiation applies to general computer programs and has
forward and reverse modes. Baydin et al. () give a great overview of
automatic differentiation in machine learning.
Figure . shows a simple graph representing the data flow from in-
puts x to outputs y via some intermediate variables a, b. If we were to
compute the derivative dy/dx, we would apply the chain rule and obtain
dy
dx = dy
db
db
da
da
dx .
cation. Due to the associativity of matrix multiplication, we can choose
between
Intuitively, the forward and reverse mode differ in the order of multipli-
In the general case,
we work with
Jacobians, which
can be vectors,
matrices, or tensors.
db
db
da
dx ,
dy
dx =
dy
da
dy
dx = dy
db
da
da
dx
db

Equation (.) would be the reverse mode because gradients are prop-
reverse mode
agated backward through the graph, i.e., reverse to the data flow. Equa-
tion (.) would be the forward mode, where the gradients flow with
forward mode
the data from left to right through the graph.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
In the following, we will focus on reverse mode automatic differentia-
tion, which is backpropagation. In the context of neural networks, where
the input dimensionality is often much higher than the dimensionality of
the labels, the reverse mode is computationally significantly cheaper than
the forward mode. Let us start with an instructive example.
Example .
Consider the function
f(x) =
x + exp(x) + cos
 x + exp(x)
from (.). If we were to implement a function f on a computer, we
would be able to save some computation by using intermediate variables:
intermediate
variables
a = x ,
b = exp(a) ,
c = a + b ,
d = √c ,
e = cos(c) ,
f = d + e .
exp()
Figure .
Computation graph
with inputs x,
function values f,
and intermediate
variables a, b, c, d, e.
cos()
This is the same kind of thinking process that occurs when applying
the chain rule. Note that the preceding set of equations requires fewer
operations than a direct implementation of the function f(x) as defined
in (.). The corresponding computation graph in Figure . shows
the flow of data and computations required to obtain the function value
f.
The set of equations that include intermediate variables can be thought
of as a computation graph, a representation that is widely used in imple-
mentations of neural network software libraries. We can directly compute
the derivatives of the intermediate variables with respect to their corre-
sponding inputs by recalling the definition of the derivative of elementary
functions. We obtain the following:
∂a
∂x = x
∂b
∂a = exp(a)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Backpropagation and Automatic Differentiation
∂c
∂a =  = ∂c
∂b
∂d
∂c =
√c
∂e
∂c = − sin(c)
∂f
∂d =  = ∂f
∂e .
By looking at the computation graph in Figure ., we can compute
∂f/∂x by working backward from the output and obtain
∂f
∂c = ∂f
∂d
∂d
∂c + ∂f
∂e
∂e
∂c
∂f
∂b = ∂f
∂c
∂c
∂b
∂f
∂a = ∂f
∂b
∂b
∂a + ∂f
∂c
∂c
∂a
∂f
∂x = ∂f
∂a
∂a
∂x .
Note that we implicitly applied the chain rule to obtain ∂f/∂x. By substi-
tuting the results of the derivatives of the elementary functions, we get
∂f
∂c =
√c +   (− sin(c))
∂f
∂b = ∂f
∂c
∂f
∂a = ∂f
∂b exp(a) + ∂f
∂c
∂f
∂x = ∂f
∂a  x .
By thinking of each of the derivatives above as a variable, we observe
that the computation required for calculating the derivative is of similar
complexity as the computation of the function itself. This is quite counter-
intuitive since the mathematical expression for the derivative ∂f
∂x (.)
is significantly more complicated than the mathematical expression of the
function f(x) in (.).
Automatic differentiation is a formalization of Example .. Let x, . . . , xd
be the input variables to the function, xd+, . . . , xD− be the intermediate
variables, and xD the output variable. Then the computation graph can be
expressed as follows:
For i = d + , . . . , D :
xi = gi(xPa(xi)) ,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
where the gi() are elementary functions and xPa(xi) are the parent nodes
of the variable xi in the graph. Given a function defined in this way, we
can use the chain rule to compute the derivative of the function in a step-
by-step fashion. Recall that by definition f = xD and hence
∂f
∂xD
=  .
For other variables xi, we apply the chain rule
∂f
∂xj
∂f
∂xj
∂gj
∂xi
xj:xi∈Pa(xj)
xj:xi∈Pa(xj)
∂f
∂xi
∂xj
∂xi
where Pa(xj) is the set of parent nodes of xj in the computation graph.
Equation (.) is the forward propagation of a function, whereas (.)
Auto-differentiation
in reverse mode
requires a parse
tree.
is the backpropagation of the gradient through the computation graph.
For neural network training, we backpropagate the error of the prediction
with respect to the label.
The automatic differentiation approach above works whenever we have
a function that can be expressed as a computation graph, where the ele-
mentary functions are differentiable. In fact, the function may not even be
a mathematical function but a computer program. However, not all com-
puter programs can be automatically differentiated, e.g., if we cannot find
differential elementary functions. Programming structures, such as for
loops and if statements, require more care as well.
. Higher-Order Derivatives
So far, we have discussed gradients, i.e., first-order derivatives. Some-
times, we are interested in derivatives of higher order, e.g., when we want
to use Newton’s Method for optimization, which requires second-order
derivatives (Nocedal and Wright, ). In Section .., we discussed
the Taylor series to approximate functions using polynomials. In the mul-
tivariate case, we can do exactly the same. In the following, we will do
exactly this. But let us start with some notation.
Consider a function f : R → R of two variables x, y. We use the
following notation for higher-order partial derivatives (and for gradients):
∂f
∂x is the second partial derivative of f with respect to x.
∂nf
∂xn is the nth partial derivative of f with respect to x.
∂x
is the partial derivative obtained by first partial differ-
entiating with respect to x and then with respect to y.
∂f
∂y∂x =
∂y
  ∂f
∂f
∂x∂y is the partial derivative obtained by first partial differentiating by
y and then x.
The Hessian is the collection of all second-order partial derivatives.
Hessian
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linearization and Multivariate Taylor Series
f(x)
f(x)
Figure . Linear
approximation of a
function. The
original function f
is linearized at
x = − using a
first-order Taylor
series expansion.
f(x)
f(x) + f ′(x)(x − x)
If f(x, y) is a twice (continuously) differentiable function, then
∂f
∂x∂y = ∂f
∂y∂x ,
i.e., the order of differentiation does not matter, and the corresponding
Hessian matrix
Hessian matrix
H =
∂f
∂x
∂f
∂x∂y
∂f
∂x∂y
∂f
∂y
is symmetric. The Hessian is denoted as ∇
x,yf(x, y). Generally, for x ∈ Rn
and f : Rn → R, the Hessian is an n × n matrix. The Hessian measures
the curvature of the function locally around (x, y).
Remark (Hessian of a Vector Field). If f : Rn → Rm is a vector field, the
Hessian is an (m × n × n)-tensor.
. Linearization and Multivariate Taylor Series
The gradient ∇f of a function f is often used for a locally linear approxi-
mation of f around x:
f(x) ≈ f(x) + (∇xf)(x)(x − x) .
Here (∇xf)(x) is the gradient of f with respect to x, evaluated at x.
Figure . illustrates the linear approximation of a function f at an input
x. The original function is approximated by a straight line. This approx-
imation is locally accurate, but the farther we move away from x the
worse the approximation gets. Equation (.) is a special case of a mul-
tivariate Taylor series expansion of f at x, where we consider only the
first two terms. We discuss the more general case in the following, which
will allow for better approximations.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
(a) Given a vector δ ∈ R, we obtain the outer product δ := δ ⊗ δ = δδ⊤ ∈
R× as a matrix.
Figure .
Visualizing outer
products. Outer
products of vectors
increase the
dimensionality of
the array by  per
term. (a) The outer
product of two
vectors results in a
matrix; (b) the
outer product of
three vectors yields
a third-order tensor.
(b) An outer product δ := δ ⊗ δ ⊗ δ ∈ R×× results in a third-order tensor (“three-
dimensional matrix”), i.e., an array with three indexes.
Definition . (Multivariate Taylor Series). We consider a function
f : RD → R
x → f(x) ,
x ∈ RD ,
that is smooth at x. When we define the difference vector δ := x − x,
the multivariate Taylor series of f at (x) is defined as
multivariate Taylor
series
Dk
xf(x)
f(x) =
k!
δk ,
k=
where Dk
xf(x) is the k-th (total) derivative of f with respect to x, eval-
uated at x.
Definition . (Taylor Polynomial). The Taylor polynomial of degree n of
Taylor polynomial
f at x contains the first n +  components of the series in (.) and is
defined as
Dk
xf(x)
Tn(x) =
k!
δk .
k=
kth-order tensor δk ∈ R
z k times
D×D×...×D is obtained as a k-fold outer product,
denoted by ⊗, of the vector δ ∈ RD. For example,
In (.) and (.), we used the slightly sloppy notation of δk,
which is not defined for vectors x ∈ RD, D > , and k > . Note that
both Dk
xf and δk are k-th order tensors, i.e., k-dimensional arrays. The
A vector can be
implemented as a
one-dimensional
array, a matrix as a
two-dimensional
array.
δ := δ ⊗ δ = δδ⊤ ,
δ[i, j] = δ[i]δ[j]
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linearization and Multivariate Taylor Series
δ := δ ⊗ δ ⊗ δ ,
δ[i, j, k] = δ[i]δ[j]δ[k] .
Figure . visualizes two such outer products. In general, we obtain the
terms
Dk
xf(x)δk =
i=
ik=
Dk
xf(x)[i, . . . , ik]δ[i]    δ[ik]
k =  : D
xf(x)δ = f(x) ∈ R
i=
∇xf(x)[i]δ[i] ∈ R
|{z}
D×
in the Taylor series, where Dk
xf(x)δk contains k-th order polynomials.
Now that we defined the Taylor series for vector fields, let us explicitly
write down the first terms Dk
xf(x)δk of the Taylor series expansion for
k = , . . . ,  and δ := x − x:
np.einsum(
’i,i’,Df,d)
np.einsum(
’ij,i,j’,
Df,d,d)
np.einsum(
’ijk,i,j,k’,
Df,d,d,d)
k =  : D
xf(x)δ = ∇xf(x)
{z
×D
 = δ⊤H(x)δ
|{z}
D×
δ⊤
|{z}
×D
k =  : D
xf(x)δ = tr
  H(x)
| {z }
D×D
i=
j=
H[i, j]δ[i]δ[j] ∈ R
k =  : D
xf(x)δ =
i=
j=
k=
xf(x)[i, j, k]δ[i]δ[j]δ[k] ∈ R
Here, H(x) is the Hessian of f evaluated at x.
Example . (Taylor Series Expansion of a Function with Two Vari-
ables)
Consider the function
f(x, y) = x + xy + y .
We want to compute the Taylor series expansion of f at (x, y) = (, ).
Before we start, let us discuss what to expect: The function in (.) is
a polynomial of degree . We are looking for a Taylor series expansion,
which itself is a linear combination of polynomials. Therefore, we do not
expect the Taylor series expansion to contain terms of fourth or higher
order to express a third-order polynomial. This means that it should be
sufficient to determine the first four terms of (.) for an exact alterna-
tive representation of (.).
To determine the Taylor series expansion, we start with the constant
term and the first-order derivatives, which are given by
f(, ) =
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
∂x(, ) =
∂f
∂x = x + y =⇒ ∂f
∂y (, ) =  .
∂f
∂y = x + y =⇒ ∂f
Therefore, we obtain
x,yf(, ) = ∇x,yf(, ) =
∂f
∂x(, )
∂f
∂y (, )
 ∈ R×
such that
x,yf(, )

= (x − ) + (y − ) .
δ =
 x −
y −
Note that D
x,yf(, )δ contains only linear terms, i.e., first-order polyno-
mials.
The second-order partial derivatives are given by
∂x (, ) =
∂f
∂x =  =⇒ ∂f
∂y (, ) =
∂f
∂y = y =⇒ ∂f
∂f
∂y∂x =  =⇒
∂f
∂y∂x(, ) =
∂f
∂x∂y =  =⇒
∂f
∂x∂y(, ) =  .
When we collect the second-order partial derivatives, we obtain the Hes-
sian
H =
" ∂f
∂x
∂f
∂x∂y
∂f
∂y∂x
∂f
∂y

such that
H(, ) =
∈ R× .
Therefore, the next term of the Taylor-series expansion is given by
x,yf(, )
δ =
δ⊤H(, )δ
(.a)
(.b)
x −
y −
x −
y −
= (x − ) + (x − )(y − ) + (y − ) .
(.c)
Here, D
x,yf(, )δ contains only quadratic terms, i.e., second-order poly-
nomials.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Linearization and Multivariate Taylor Series
The third-order derivatives are obtained as
x,yf =
∂H
∂x
∂H
∂y
∈ R×× ,
x,yf[:, :, ] = ∂H
∂x∂y
∂f
∂x =
∂f
∂x
∂f
∂x∂y∂x
∂f
∂x∂y
∂y∂x
∂f
x,yf[:, :, ] = ∂H
∂y∂x∂y
∂f
∂y =
∂f
∂y∂x
∂f
∂y
Since most second-order partial derivatives in the Hessian in (.) are
constant, the only nonzero third-order partial derivative is
∂y (, ) =  .
∂f
∂y =  =⇒ ∂f
Higher-order derivatives and the mixed derivatives of degree  (e.g.,
∂f
∂x∂y) vanish, such that
x,yf[:, :, ] =
x,yf[:, :, ] =
and
x,yf(, )
δ = (y − ) ,
which collects all cubic terms of the Taylor series. Overall, the (exact)
Taylor series expansion of f at (x, y) = (, ) is
f(x) = f(, ) + D
x,yf(, )δ + D
x,yf(, )
δ + D
x,yf(, )
(.a)
= f(, ) + ∂f(, )
∂x
(x − ) + ∂f(, )
∂y
(y − )
∂x
(x − ) + ∂f(, )
∂y
(y − )
∂f(, )
+ ∂f(, )
∂f(, )
∂y
(y − )
(.b)
∂x∂y
(x − )(y − )

=  + (x − ) + (y − )
+ (x − ) + (y − ) + (x − )(y − ) + (y − ) . (.c)
In this case, we obtained an exact Taylor series expansion of the polyno-
mial in (.), i.e., the polynomial in (.c) is identical to the original
polynomial in (.). In this particular example, this result is not sur-
prising since the original function was a third-order polynomial, which
we expressed through a linear combination of constant terms, first-order,
second-order, and third-order polynomials in (.c).
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Vector Calculus
. Further Reading
Further details of matrix differentials, along with a short review of the
required linear algebra, can be found in Magnus and Neudecker ().
Automatic differentiation has had a long history, and we refer to Griewank
and Walther (), Griewank and Walther (), and Elliott ()
and the references therein.
In machine learning (and other disciplines), we often need to compute
expectations, i.e., we need to solve integrals of the form
Ex[f(x)] =
f(x)p(x)dx .
Even if p(x) is in a convenient form (e.g., Gaussian), this integral gen-
erally cannot be solved analytically. The Taylor series expansion of f is
one way of finding an approximate solution: Assuming p(x) = N
 µ, Σ
is Gaussian, then the first-order Taylor series expansion around µ locally
linearizes the nonlinear function f. For linear functions, we can compute
the mean (and the covariance) exactly if p(x) is Gaussian distributed (see
Section .). This property is heavily exploited by the extended Kalman
extended Kalman
filter
filter (Maybeck, ) for online state estimation in nonlinear dynami-
cal systems (also called “state-space models”). Other deterministic ways
to approximate the integral in (.) are the unscented transform (Julier
unscented transform
and Uhlmann, ), which does not require any gradients, or the Laplace
Laplace
approximation
approximation (MacKay, ; Bishop, ; Murphy, ), which uses
a second-order Taylor series expansion (requiring the Hessian) for a local
Gaussian approximation of p(x) around its mode.
Exercises
Compute the derivative f′(x) for
f(x) = log(x) sin(x) .
Compute the derivative f′(x) of the logistic sigmoid
f(x) =
+ exp(−x) .
Compute the derivative f′(x) of the function
f(x) = exp(−
σ (x − µ)) ,
where µ, σ ∈ R are constants.
Compute the Taylor polynomials Tn, n = , . . . ,  of f(x) = sin(x) + cos(x)
at x = .
Consider the following functions:
f(x) = sin(x) cos(x) ,
x ∈ R
f(x, y) = x⊤y ,
x, y ∈ Rn
f(x) = xx⊤ ,
x ∈ Rn
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Exercises
a. What are the dimensions of ∂fi
∂x ?
b. Compute the Jacobians.
Differentiate f with respect to t and g with respect to X, where
f(t) = sin(log(t⊤t)) ,
t ∈ RD
g(X) = tr(AXB) ,
A ∈ RD×E, X ∈ RE×F , B ∈ RF ×D ,
where tr() denotes the trace.
Compute the derivatives df/dx of the following functions by using the chain
rule. Provide the dimensions of every single partial derivative. Describe your
steps in detail.
a.
f(z) = log( + z) ,
z = x⊤x ,
x ∈ RD
b.
f(z) = sin(z) ,
z = Ax + b ,
A ∈ RE×D, x ∈ RD, b ∈ RE
where sin() is applied to every element of z.
Compute the derivatives df/dx of the following functions. Describe your
steps in detail.
a. Use the chain rule. Provide the dimensions of every single partial deriva-
tive.
z)
f(z) = exp(−
z = g(y) = y⊤S−y
y = h(x) = x − µ
where x, µ ∈ RD, S ∈ RD×D.
b.
f(x) = tr(xx⊤ + σI) ,
x ∈ RD
Here tr(A) is the trace of A, i.e., the sum of the diagonal elements Aii.
Hint: Explicitly write out the outer product.
c. Use the chain rule. Provide the dimensions of every single partial deriva-
tive. You do not need to compute the product of the partial derivatives
explicitly.
f = tanh(z) ∈ RM
z = Ax + b,
x ∈ RN, A ∈ RM×N, b ∈ RM.
Here, tanh is applied to every component of z.
We define
g(x, z, ν) := log p(x, z) − log q(z, ν)
z := t(ϵ, ν)
for differentiable functions p, q, t and x ∈ RD, z ∈ RE, ν ∈ RF , ϵ ∈ RG. By
using the chain rule, compute the gradient
dν g(x, z, ν) .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
Probability, loosely speaking, concerns the study of uncertainty. Probabil-
ity can be thought of as the fraction of times an event occurs, or as a degree
of belief about an event. We then would like to use this probability to mea-
sure the chance of something occurring in an experiment. As mentioned
in Chapter , we often quantify uncertainty in the data, uncertainty in the
machine learning model, and uncertainty in the predictions produced by
the model. Quantifying uncertainty requires the idea of a random variable,
random variable
which is a function that maps outcomes of random experiments to a set of
properties that we are interested in. Associated with the random variable
is a function that measures the probability that a particular outcome (or
set of outcomes) will occur; this is called the probability distribution.
probability
distribution
Probability distributions are used as a building block for other con-
cepts, such as probabilistic modeling (Section .), graphical models (Sec-
tion .), and model selection (Section .). In the next section, we present
the three concepts that define a probability space (the sample space, the
events, and the probability of an event) and how they are related to a
fourth concept called the random variable. The presentation is deliber-
ately slightly hand wavy since a rigorous presentation may occlude the
intuition behind the concepts. An outline of the concepts presented in this
chapter are shown in Figure ..
. Construction of a Probability Space
The theory of probability aims at defining a mathematical structure to
describe random outcomes of experiments. For example, when tossing a
single coin, we cannot determine the outcome, but by doing a large num-
ber of coin tosses, we can observe a regularity in the average outcome.
Using this mathematical structure of probability, the goal is to perform
automated reasoning, and in this sense, probability generalizes logical
reasoning (Jaynes, ).
.. Philosophical Issues
When constructing automated reasoning systems, classical Boolean logic
does not allow us to express certain forms of plausible reasoning. Consider
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

. Construction of a Probability Space
Bayes’ Theorem
Mean
Variance
Summary statistics
Sum rule
Product rule
Chapter
Regression
Figure . A mind
map of the concepts
related to random
variables and
probability
distributions, as
described in this
chapter.
Property
Example
Gaussian
Transformations
Random variable
& distribution
Chapter
Example
Dimensionality
reduction
Independence
Bernoulli
Sufficient statistics
Similarity
Chapter
Density estimation
Conjugate
Property
Finite
Inner product
Beta
Exponential family
the following scenario: We observe that A is false. We find B becomes
less plausible, although no conclusion can be drawn from classical logic.
We observe that B is true. It seems A becomes more plausible. We use
this form of reasoning daily. We are waiting for a friend, and consider
three possibilities: H, she is on time; H, she has been delayed by traffic;
and H, she has been abducted by aliens. When we observe our friend
is late, we must logically rule out H. We also tend to consider H to be
more likely, though we are not logically required to do so. Finally, we may
consider H to be possible, but we continue to consider it quite unlikely.
How do we conclude H is the most plausible answer? Seen in this way,
“For plausible
reasoning it is
necessary to extend
the discrete true and
false values of truth
to continuous
plausibilities”
(Jaynes, ).
probability theory can be considered a generalization of Boolean logic. In
the context of machine learning, it is often applied in this way to formalize
the design of automated reasoning systems. Further arguments about how
probability theory is the foundation of reasoning systems can be found
in Pearl ().
The philosophical basis of probability and how it should be somehow
related to what we think should be true (in the logical sense) was studied
by Cox (Jaynes, ). Another way to think about it is that if we are
precise about our common sense we end up constructing probabilities.
E. T. Jaynes (–) identified three mathematical criteria, which
must apply to all plausibilities:
. The degrees of plausibility are represented by real numbers.
. These numbers must be based on the rules of common sense.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
. The resulting reasoning must be consistent, with the three following
meanings of the word “consistent”:
(a) Consistency or non-contradiction: When the same result can be
reached through different means, the same plausibility value must
be found in all cases.
(b) Honesty: All available data must be taken into account.
(c) Reproducibility: If our state of knowledge about two problems are
the same, then we must assign the same degree of plausibility to
both of them.
The Cox–Jaynes theorem proves these plausibilities to be sufficient to
define the universal mathematical rules that apply to plausibility p, up to
transformation by an arbitrary monotonic function. Crucially, these rules
are the rules of probability.
Remark. In machine learning and statistics, there are two major interpre-
tations of probability: the Bayesian and frequentist interpretations (Bishop,
; Efron and Hastie, ). The Bayesian interpretation uses probabil-
ity to specify the degree of uncertainty that the user has about an event. It
is sometimes referred to as “subjective probability” or “degree of belief”.
The frequentist interpretation considers the relative frequencies of events
of interest to the total number of events that occurred. The probability of
an event is defined as the relative frequency of the event in the limit when
one has infinite data.
Some machine learning texts on probabilistic models use lazy notation
and jargon, which is confusing. This text is no exception. Multiple distinct
concepts are all referred to as “probability distribution”, and the reader
has to often disentangle the meaning from the context. One trick to help
make sense of probability distributions is to check whether we are trying
to model something categorical (a discrete random variable) or some-
thing continuous (a continuous random variable). The kinds of questions
we tackle in machine learning are closely related to whether we are con-
sidering categorical or continuous models.
.. Probability and Random Variables
There are three distinct ideas that are often confused when discussing
probabilities. First is the idea of a probability space, which allows us to
quantify the idea of a probability. However, we mostly do not work directly
with this basic probability space. Instead, we work with random variables
(the second idea), which transfers the probability to a more convenient
(often numerical) space. The third idea is the idea of a distribution or law
associated with a random variable. We will introduce the first two ideas
in this section and expand on the third idea in Section ..
Modern probability is based on a set of axioms proposed by Kolmogorov
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Construction of a Probability Space
(Grinstead and Snell, ; Jaynes, ) that introduce the three con-
cepts of sample space, event space, and probability measure. The prob-
ability space models a real-world process (referred to as an experiment)
with random outcomes.
The sample space Ω
The sample space is the set of all possible outcomes of the experiment,
sample space
usually denoted by Ω. For example, two successive coin tosses have
a sample space of {hh, tt, ht, th}, where “h” denotes “heads” and “t”
denotes “tails”.
The event space A
The event space is the space of potential results of the experiment. A
event space
subset A of the sample space Ω is in the event space A if at the end
of the experiment we can observe whether a particular outcome ω ∈ Ω
is in A. The event space A is obtained by considering the collection of
subsets of Ω, and for discrete probability distributions (Section ..)
A is often the power set of Ω.
The probability P
With each event A ∈ A, we associate a number P(A) that measures the
probability or degree of belief that the event will occur. P(A) is called
the probability of A.
probability
finite T , the function corresponding to a random variable is essentially a
lookup table. For any subset S ⊆ T , we associate PX(S) ∈ [, ] (the
probability) to a particular event occurring corresponding to the random
variable X. Example . provides a concrete illustration of the terminol-
ogy.
The probability of a single event must lie in the interval [, ], and the
total probability over all outcomes in the sample space Ω must be , i.e.,
P(Ω) = . Given a probability space (Ω, A, P), we want to use it to model
some real-world phenomenon. In machine learning, we often avoid explic-
itly referring to the probability space, but instead refer to probabilities on
quantities of interest, which we denote by T . In this book, we refer to T
as the target space and refer to elements of T as states. We introduce a
target space
function X : Ω → T that takes an element of Ω (an outcome) and returns
a particular quantity of interest x, a value in T . This association/mapping
from Ω to T is called a random variable. For example, in the case of tossing
random variable
two coins and counting the number of heads, a random variable X maps
to the three possible outcomes: X(hh) = , X(ht) = , X(th) = , and
X(tt) = . In this particular case, T = {, , }, and it is the probabilities
on elements of T that we are interested in. For a finite sample space Ω and
The name “random
variable” is a great
source of
misunderstanding
as it is neither
random nor is it a
variable. It is a
function.
Remark. The aforementioned sample space Ω unfortunately is referred
to by different names in different books. Another common name for Ω
is “state space” (Jacod and Protter, ), but state space is sometimes
reserved for referring to states in a dynamical system (Hasselblatt and
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
Katok, ). Other names sometimes used to describe Ω are: “sample
description space”, “possibility space,” and “event space”.
Example .
We assume that the reader is already familiar with computing probabilities
This toy example is
essentially a biased
coin flip example.
of intersections and unions of sets of events. A gentler introduction to
probability with many examples can be found in chapter  of Walpole
et al. ().
Consider a statistical experiment where we model a funfair game con-
sisting of drawing two coins from a bag (with replacement). There are
coins from USA (denoted as $) and UK (denoted as £) in the bag, and
since we draw two coins from the bag, there are four outcomes in total.
The state space or sample space Ω of this experiment is then ($, $), ($,
£), (£, $), (£, £). Let us assume that the composition of the bag of coins is
such that a draw returns at random a $ with probability ..
The event we are interested in is the total number of times the repeated
draw returns $. Let us define a random variable X that maps the sample
space Ω to T , which denotes the number of times we draw $ out of the
bag. We can see from the preceding sample space we can get zero $, one $,
or two $s, and therefore T = {, , }. The random variable X (a function
or lookup table) can be represented as a table like the following:
X(($, $)) =
X(($, £)) =
X((£, $)) =
X((£, £)) =  .
Since we return the first coin we draw before drawing the second, this
implies that the two draws are independent of each other, which we will
discuss in Section ... Note that there are two experimental outcomes,
which map to the same event, where only one of the draws returns $.
Therefore, the probability mass function (Section ..) of X is given by
P(X = ) = P(($, $))
= P($)  P($)
= .  . = .
P(X = ) = P(($, £) ∪ (£, $))
= P(($, £)) + P((£, $))
= .  ( − .) + ( − .)  . = .
P(X = ) = P((£, £))
= P(£)  P(£)
= ( − .)  ( − .) = . .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Construction of a Probability Space
In the calculation, we equated two different concepts, the probability
of the output of X and the probability of the samples in Ω. For example,
in (.) we say P(X = ) = P((£, £)). Consider the random variable
X : Ω → T and a subset S ⊆ T (for example, a single element of T ,
such as the outcome that one head is obtained when tossing two coins).
Let X−(S) be the pre-image of S by X, i.e., the set of elements of Ω that
map to S under X; {ω ∈ Ω : X(ω) ∈ S}. One way to understand the
transformation of probability from events in Ω via the random variable
X is to associate it with the probability of the pre-image of S (Jacod and
Protter, ). For S ⊆ T , we have the notation
PX(S) = P(X ∈ S) = P(X−(S)) = P({ω ∈ Ω : X(ω) ∈ S}) .
The left-hand side of (.) is the probability of the set of possible outcomes
(e.g., number of $ = ) that we are interested in. Via the random variable
X, which maps states to outcomes, we see in the right-hand side of (.)
that this is the probability of the set of states (in Ω) that have the property
(e.g., $£, £$). We say that a random variable X is distributed according
to a particular probability distribution PX, which defines the probability
mapping between the event and the probability of the outcome of the
random variable. In other words, the function PX or equivalently P ◦X−
is the law or distribution of random variable X.
law
distribution
Remark. The target space, that is, the range T of the random variable X,
is used to indicate the kind of probability space, i.e., a T random variable.
When T is finite or countably infinite, this is called a discrete random
variable (Section ..). For continuous random variables (Section ..),
we only consider T = R or T = RD.
.. Statistics
Probability theory and statistics are often presented together, but they con-
cern different aspects of uncertainty. One way of contrasting them is by the
kinds of problems that are considered. Using probability, we can consider
a model of some process, where the underlying uncertainty is captured
by random variables, and we use the rules of probability to derive what
happens. In statistics, we observe that something has happened and try
to figure out the underlying process that explains the observations. In this
sense, machine learning is close to statistics in its goals to construct a
model that adequately represents the process that generated the data. We
can use the rules of probability to obtain a “best-fitting” model for some
data.
Another aspect of machine learning systems is that we are interested
in generalization error (see Chapter ). This means that we are actually
interested in the performance of our system on instances that we will
observe in future, which are not identical to the instances that we have
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
seen so far. This analysis of future performance relies on probability and
statistics, most of which is beyond what will be presented in this chapter.
The interested reader is encouraged to look at the books by Boucheron
et al. () and Shalev-Shwartz and Ben-David (). We will see more
about statistics in Chapter .
. Discrete and Continuous Probabilities
Let us focus our attention on ways to describe the probability of an event
as introduced in Section .. Depending on whether the target space is dis-
crete or continuous, the natural way to refer to distributions is different.
When the target space T is discrete, we can specify the probability that a
random variable X takes a particular value x ∈ T , denoted as P(X = x).
The expression P(X = x) for a discrete random variable X is known as
the probability mass function. When the target space T is continuous, e.g.,
probability mass
function
the real line R, it is more natural to specify the probability that a random
variable X is in an interval, denoted by P(a ⩽ X ⩽ b) for a < b. By con-
vention, we specify the probability that a random variable X is less than
a particular value x, denoted by P(X ⩽ x). The expression P(X ⩽ x) for
a continuous random variable X is known as the cumulative distribution
cumulative
distribution function
function. We will discuss continuous random variables in Section ...
We will revisit the nomenclature and contrast discrete and continuous
random variables in Section ...
Remark. We will use the phrase univariate distribution to refer to distribu-
univariate
tions of a single random variable (whose states are denoted by non-bold
x). We will refer to distributions of more than one random variable as
multivariate distributions, and will usually consider a vector of random
multivariate
variables (whose states are denoted by bold x).
.. Discrete Probabilities
When the target space is discrete, we can imagine the probability distri-
bution of multiple random variables as filling out a (multidimensional)
array of numbers. Figure . shows an example. The target space of the
joint probability is the Cartesian product of the target spaces of each of
the random variables. We define the joint probability as the entry of both
joint probability
values jointly
P(X = xi, Y = yj) = nij
N ,
where nij is the number of events with state xi and yj and N the total
number of events. The joint probability is the probability of the intersec-
tion of both events, that is, P(X = xi, Y = yj) = P(X = xi ∩ Y = yj).
Figure . illustrates the probability mass function (pmf) of a discrete prob-
probability mass
function
ability distribution. For two random variables X and Y , the probability
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Discrete and Continuous Probabilities
ci
z}|{
nij
rj
Figure .
Visualization of a
discrete bivariate
probability mass
function, with
random variables X
and Y . This
diagram is adapted
from Bishop ().
that X = x and Y = y is (lazily) written as p(x, y) and is called the joint
probability. One can think of a probability as a function that takes state
x and y and returns a real number, which is the reason we write p(x, y).
The marginal probability that X takes the value x irrespective of the value
marginal probability
of random variable Y is (lazily) written as p(x). We write X ∼ p(x) to
denote that the random variable X is distributed according to p(x). If we
consider only the instances where X = x, then the fraction of instances
(the conditional probability) for which Y = y is written (lazily) as p(y | x).
conditional
probability
Example .
Consider two random variables X and Y , where X has five possible states
and Y has three possible states, as shown in Figure .. We denote by nij
the number of events with state X = xi and Y = yj, and denote by
N the total number of events. The value ci is the sum of the individual
frequencies for the ith column, that is, ci = P
j= nij. Similarly, the value
rj is the row sum, that is, rj = P
i= nij. Using these definitions, we can
compactly express the distribution of X and Y .
The probability distribution of each random variable, the marginal
probability, can be seen as the sum over a row or column
P(X = xi) = ci
N =
j= nij
and
P(Y = yj) = rj
N =
i= nij
where ci and rj are the ith column and jth row of the probability table,
respectively. By convention, for discrete random variables with a finite
number of events, we assume that probabilties sum up to one, that is,
i=
P(X = xi) =
and
j=
P(Y = yj) =  .
The conditional probability is the fraction of a row or column in a par-
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
ticular cell. For example, the conditional probability of Y given X is
ci
P(Y = yj | X = xi) = nij
and the conditional probability of X given Y is
rj
P(X = xi | Y = yj) = nij
In machine learning, we use discrete probability distributions to model
categorical variables, i.e., variables that take a finite set of unordered val-
categorical variable
ues. They could be categorical features, such as the degree taken at uni-
versity when used for predicting the salary of a person, or categorical la-
bels, such as letters of the alphabet when doing handwriting recognition.
Discrete distributions are also often used to construct probabilistic models
that combine a finite number of continuous distributions (Chapter ).
.. Continuous Probabilities
We consider real-valued random variables in this section, i.e., we consider
target spaces that are intervals of the real line R. In this book, we pretend
that we can perform operations on real random variables as if we have dis-
crete probability spaces with finite states. However, this simplification is
not precise for two situations: when we repeat something infinitely often,
and when we want to draw a point from an interval. The first situation
arises when we discuss generalization errors in machine learning (Chap-
ter ). The second situation arises when we want to discuss continuous
distributions, such as the Gaussian (Section .). For our purposes, the
lack of precision allows for a briefer introduction to probability.
Remark. In continuous spaces, there are two additional technicalities,
which are counterintuitive. First, the set of all subsets (used to define
the event space A in Section .) is not well behaved enough. A needs
to be restricted to behave well under set complements, set intersections,
and set unions. Second, the size of a set (which in discrete spaces can be
obtained by counting the elements) turns out to be tricky. The size of a
set is called its measure. For example, the cardinality of discrete sets, the
measure
length of an interval in R, and the volume of a region in Rd are all mea-
sures. Sets that behave well under set operations and additionally have
a topology are called a Borel σ-algebra. Betancourt details a careful con-
Borel σ-algebra
struction of probability spaces from set theory without being bogged down
in technicalities; see https://tinyurl.com/ybtmfd. For a more pre-
cise construction, we refer to Billingsley () and Jacod and Protter
In this book, we consider real-valued random variables with their cor-
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Discrete and Continuous Probabilities
responding Borel σ-algebra. We consider random variables with values in
RD to be a vector of real-valued random variables.
RD f(x)dx =  .
Definition . (Probability Density Function). A function f : RD → R is
called a probability density function (pdf) if
probability density
function
pdf
. ∀x ∈ RD : f(x) ⩾
. Its integral exists and
For probability mass functions (pmf) of discrete random variables, the
integral in (.) is replaced with a sum (.).
Observe that the probability density function is any function f that is
non-negative and integrates to one. We associate a random variable X
with this function f by
f(x)dx ,
P(a ⩽ X ⩽ b) =
Z b
where a, b ∈ R and x ∈ R are outcomes of the continuous random vari-
able X. States x ∈ RD are defined analogously by considering a vector
of x ∈ R. This association (.) is called the law or distribution of the
law
random variable X.
P(X = x) is a set of
measure zero.
Remark. In contrast to discrete random variables, the probability of a con-
tinuous random variable X taking a particular value P(X = x) is zero.
This is like trying to specify an interval in (.) where a = b.
Definition . (Cumulative Distribution Function). A cumulative distribu-
cumulative
distribution function
tion function (cdf) of a multivariate real-valued random variable X with
states x ∈ RD is given by
FX(x) = P(X ⩽ x, . . . , XD ⩽ xD) ,
where X = [X, . . . , XD]⊤, x = [x, . . . , xD]⊤, and the right-hand side
represents the probability that random variable Xi takes the value smaller
than or equal to xi.
There are cdfs,
which do not have
corresponding pdfs.
The cdf can be expressed also as the integral of the probability density
function f(x) so that
f(z, . . . , zD)dz    dzD .
FX(x) =
Z x

Z xD
Remark. We reiterate that there are in fact two distinct concepts when
talking about distributions. First is the idea of a pdf (denoted by f(x)),
which is a nonnegative function that sums to one. Second is the law of a
random variable X, that is, the association of a random variable X with
the pdf f(x).
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
p(x)
P(Z = z)
Figure .
Examples of
(a) discrete and
(b) continuous
uniform
distributions. See
Example . for
details of the
distributions.
(a) Discrete distribution
(b) Continuous distribution
For most of this book, we will not use the notation f(x) and FX(x) as
we mostly do not need to distinguish between the pdf and cdf. However,
we will need to be careful about pdfs and cdfs in Section ..
.. Contrasting Discrete and Continuous Distributions
Recall from Section .. that probabilities are positive and the total prob-
ability sums up to one. For discrete random variables (see (.)), this
implies that the probability of each state must lie in the interval [, ].
However, for continuous random variables the normalization (see (.))
does not imply that the value of the density is less than or equal to  for
all values. We illustrate this in Figure . using the uniform distribution
uniform distribution
for both discrete and continuous random variables.
as a table of probability values:
P(Z = z)
Example .
We consider two examples of the uniform distribution, where each state is
equally likely to occur. This example illustrates some differences between
discrete and continuous probability distributions.
Let Z be a discrete uniform random variable with three states {z =
−., z = ., z = .}. The probability mass function can be represented
The actual values of
these states are not
meaningful here,
and we deliberately
chose numbers to
drive home the
point that we do not
want to use (and
should ignore) the
ordering of the
states.
Alternatively, we can think of this as a graph (Figure .(a)), where we
use the fact that the states can be located on the x-axis, and the y-axis
represents the probability of a particular state. The y-axis in Figure .(a)
is deliberately extended so that is it the same as in Figure .(b).
Let X be a continuous random variable taking values in the range . ⩽
X ⩽ ., as represented by Figure .(b). Observe that the height of the
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Sum Rule, Product Rule, and Bayes’ Theorem
Type
“Point probability”
“Interval probability”
Discrete
P(X = x)
Not applicable
Probability mass function
Table .
Nomenclature for
probability
distributions.
Continuous
p(x)
P(X ⩽ x)
Probability density function
Cumulative distribution function
p(x)dx =  .
density can be greater than . However, it needs to hold that
Z .
Remark. There is an additional subtlety with regards to discrete prob-
ability distributions. The states z, . . . , zd do not in principle have any
structure, i.e., there is usually no way to compare them, for example
z = red, z = green, z = blue. However, in many machine learning
applications discrete states take numerical values, e.g., z = −., z =
., z = ., where we could say z < z < z. Discrete states that as-
sume numerical values are particularly useful because we often consider
expected values (Section ..) of random variables.
Unfortunately, machine learning literature uses notation and nomen-
clature that hides the distinction between the sample space Ω, the target
space T , and the random variable X. For a value x of the set of possible
outcomes of the random variable X, i.e., x ∈ T , p(x) denotes the prob-
We think of the
outcome x as the
argument that
results in the
probability p(x).
ability that random variable X has the outcome x. For discrete random
variables, this is written as P(X = x), which is known as the probabil-
ity mass function. The pmf is often referred to as the “distribution”. For
continuous variables, p(x) is called the probability density function (often
referred to as a density). To muddy things even further, the cumulative
distribution function P(X ⩽ x) is often also referred to as the “distribu-
tion”. In this chapter, we will use the notation X to refer to both univariate
and multivariate random variables, and denote the states by x and x re-
spectively. We summarize the nomenclature in Table ..
Remark. We will be using the expression “probability distribution” not
only for discrete probability mass functions but also for continuous proba-
bility density functions, although this is technically incorrect. In line with
most machine learning literature, we also rely on context to distinguish
the different uses of the phrase probability distribution.
. Sum Rule, Product Rule, and Bayes’ Theorem
We think of probability theory as an extension to logical reasoning. As we
discussed in Section .., the rules of probability presented here follow
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
The first rule, the sum rule, states that
p(x) =
naturally from fulfilling the desiderata (Jaynes, , chapter ). Prob-
abilistic modeling (Section .) provides a principled foundation for de-
signing machine learning methods. Once we have defined probability dis-
tributions (Section .) corresponding to the uncertainties of the data and
our problem, it turns out that there are only two fundamental rules, the
sum rule and the product rule.
Recall from (.) that p(x, y) is the joint distribution of the two ran-
dom variables x, y. The distributions p(x) and p(y) are the correspond-
ing marginal distributions, and p(y | x) is the conditional distribution of y
given x. Given the definitions of the marginal and conditional probability
for discrete and continuous random variables in Section ., we can now
present the two fundamental rules in probability theory.
These two rules
arise
naturally (Jaynes,
) from the
requirements we
discussed in
Section ...

sum rule
p(x, y)dy
if y is continuous
y∈Y
p(x, y)
if y is discrete

where Y are the states of the target space of random variable Y . This
means that we sum out (or integrate out) the set of states y of the random
variable Y . The sum rule is also known as the marginalization property.
marginalization
property
The sum rule relates the joint distribution to a marginal distribution. In
general, when the joint distribution contains more than two random vari-
ables, the sum rule can be applied to any subset of the random variables,
resulting in a marginal distribution of potentially more than one random
variable. More concretely, if x = [x, . . . , xD]⊤, we obtain the marginal
p(xi) =
p(x, . . . , xD)dx\i
by repeated application of the sum rule where we integrate/sum out all
random variables except xi, which is indicated by \i, which reads “all
except i.”
Remark. Many of the computational challenges of probabilistic modeling
are due to the application of the sum rule. When there are many variables
or discrete variables with many states, the sum rule boils down to per-
forming a high-dimensional sum or integral. Performing high-dimensional
sums or integrals is generally computationally hard, in the sense that there
is no known polynomial-time algorithm to calculate them exactly.
The second rule, known as the product rule, relates the joint distribution
product rule
to the conditional distribution via
p(x, y) = p(y | x)p(x) .
The product rule can be interpreted as the fact that every joint distribu-
tion of two random variables can be factorized (written as a product)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Sum Rule, Product Rule, and Bayes’ Theorem
of two other distributions. The two factors are the marginal distribu-
tion of the first random variable p(x), and the conditional distribution
of the second random variable given the first p(y | x). Since the ordering
of random variables is arbitrary in p(x, y), the product rule also implies
p(x, y) = p(x | y)p(y). To be precise, (.) is expressed in terms of the
probability mass functions for discrete random variables. For continuous
random variables, the product rule is expressed in terms of the probability
density functions (Section ..).
In machine learning and Bayesian statistics, we are often interested in
making inferences of unobserved (latent) random variables given that we
have observed other random variables. Let us assume we have some prior
knowledge p(x) about an unobserved random variable x and some rela-
tionship p(y | x) between x and a second random variable y, which we
can observe. If we observe y, we can use Bayes’ theorem to draw some
conclusions about x given the observed values of y. Bayes’ theorem (also
Bayes’ theorem
Bayes’ rule or Bayes’ law)
Bayes’ rule
Bayes’ law
likelihood
z }| {
p(y | x)
prior
z}|{
p(x)
p(x | y)
| {z }
posterior
is a direct consequence of the product rule in (.) since
p(y)
|{z}
evidence
p(x, y) = p(x | y)p(y)
and
p(x, y) = p(y | x)p(x)
so that
p(y)
p(x | y)p(y) = p(y | x)p(x) ⇐⇒ p(x | y) = p(y | x)p(x)
In (.), p(x) is the prior, which encapsulates our subjective prior
prior
knowledge of the unobserved (latent) variable x before observing any
data. We can choose any prior that makes sense to us, but it is critical to
ensure that the prior has a nonzero pdf (or pmf) on all plausible x, even
if they are very rare.
The likelihood p(y | x) describes how x and y are related, and in the
likelihood
The likelihood is
sometimes also
called the
“measurement
model”.
case of discrete probability distributions, it is the probability of the data y
if we were to know the latent variable x. Note that the likelihood is not a
distribution in x, but only in y. We call p(y | x) either the “likelihood of
x (given y)” or the “probability of y given x” but never the likelihood of
y (MacKay, ).
The posterior p(x | y) is the quantity of interest in Bayesian statistics
posterior
because it expresses exactly what we are interested in, i.e., what we know
about x after having observed y.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
The quantity
p(y) :=
p(y | x)p(x)dx = EX[p(y | x)]
is the marginal likelihood/evidence. The right-hand side of (.) uses the
marginal likelihood
evidence
expectation operator which we define in Section ... By definition, the
marginal likelihood integrates the numerator of (.) with respect to the
latent variable x. Therefore, the marginal likelihood is independent of
x, and it ensures that the posterior p(x | y) is normalized. The marginal
likelihood can also be interpreted as the expected likelihood where we
take the expectation with respect to the prior p(x). Beyond normalization
of the posterior, the marginal likelihood also plays an important role in
Bayesian model selection, as we will discuss in Section .. Due to the
integration in (.), the evidence is often hard to compute.
Bayes’ theorem is
also called the
“probabilistic
inverse.”
Bayes’ theorem (.) allows us to invert the relationship between x
and y given by the likelihood. Therefore, Bayes’ theorem is sometimes
called the probabilistic inverse. We will discuss Bayes’ theorem further in
probabilistic inverse
Section ..
Remark. In Bayesian statistics, the posterior distribution is the quantity
of interest as it encapsulates all available information from the prior and
the data. Instead of carrying the posterior around, it is possible to focus
on some statistic of the posterior, such as the maximum of the posterior,
which we will discuss in Section .. However, focusing on some statistic
of the posterior leads to loss of information. If we think in a bigger con-
text, then the posterior can be used within a decision-making system, and
having the full posterior can be extremely useful and lead to decisions that
are robust to disturbances. For example, in the context of model-based re-
inforcement learning, Deisenroth et al. () show that using the full
posterior distribution of plausible transition functions leads to very fast
(data/sample efficient) learning, whereas focusing on the maximum of
the posterior leads to consistent failures. Therefore, having the full pos-
terior can be very useful for a downstream task. In Chapter , we will
continue this discussion in the context of linear regression.
. Summary Statistics and Independence
We are often interested in summarizing sets of random variables and com-
paring pairs of random variables. A statistic of a random variable is a de-
terministic function of that random variable. The summary statistics of a
distribution provide one useful view of how a random variable behaves,
and as the name suggests, provide numbers that summarize and charac-
terize the distribution. We describe the mean and the variance, two well-
known summary statistics. Then we discuss two ways to compare a pair
of random variables: first, how to say that two random variables are inde-
pendent; and second, how to compute an inner product between them.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Summary Statistics and Independence
.. Means and Covariances
Mean and (co)variance are often useful to describe properties of probabil-
ity distributions (expected values and spread). We will see in Section .
that there is a useful family of distributions (called the exponential fam-
ily), where the statistics of the random variable capture all possible infor-
mation.
The concept of the expected value is central to machine learning, and
the foundational concepts of probability itself can be derived from the
expected value (Whittle, ).
Definition . (Expected Value). The expected value of a function g : R →
expected value
R of a univariate continuous random variable X ∼ p(x) is given by
g(x)p(x)dx .
EX[g(x)] =
Correspondingly, the expected value of a function g of a discrete random
variable X ∼ p(x) is given by
x∈X
g(x)p(x) ,
EX[g(x)] =
where X is the set of possible outcomes (the target space) of the random
variable X.
Remark. We consider multivariate random variables X as a finite vector
of univariate random variables [X, . . . , XD]⊤. For multivariate random
variables, we define the expected value element wise
EX[g(x)] =
In this section, we consider discrete random variables to have numerical
outcomes. This can be seen by observing that the function g takes real
numbers as inputs.
The expected value
of a function of a
random variable is
sometimes referred
to as the law of the
unconscious
statistician (Casella
and Berger, ,
Section .).
EX[g(x)]
EXD[g(xD)]
 ∈ RD ,
where the subscript EXd indicates that we are taking the expected value
with respect to the dth element of the vector x.
Definition . defines the meaning of the notation EX as the operator
indicating that we should take the integral with respect to the probabil-
ity density (for continuous distributions) or the sum over all states (for
discrete distributions). The definition of the mean (Definition .), is a
special case of the expected value, obtained by choosing g to be the iden-
tity function.
Definition . (Mean). The mean of a random variable X with states
mean
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
x ∈ RD is an average and is defined as
EX[x] =
EX[x]
EXD[xD]
 ∈ RD ,
where
EXd[xd] :=

xi∈X
xip(xd = xi)
if X is a discrete random variable
xdp(xd)dxd
if X is a continuous random variable

for d = , . . . , D, where the subscript d indicates the corresponding di-
mension of x. The integral and sum are over the states X of the target
space of the random variable X.
In one dimension, there are two other intuitive notions of “average”,
which are the median and the mode. The median is the “middle” value if
median
we sort the values, i.e., % of the values are greater than the median and
% are smaller than the median. This idea can be generalized to contin-
uous values by considering the value where the cdf (Definition .) is ..
For distributions, which are asymmetric or have long tails, the median
provides an estimate of a typical value that is closer to human intuition
than the mean value. Furthermore, the median is more robust to outliers
than the mean. The generalization of the median to higher dimensions is
non-trivial as there is no obvious way to “sort” in more than one dimen-
sion (Hallin et al., ; Kong and Mizera, ). The mode is the most
mode
frequently occurring value. For a discrete random variable, the mode is
defined as the value of x having the highest frequency of occurrence. For
a continuous random variable, the mode is defined as a peak in the density
p(x). A particular density p(x) may have more than one mode, and fur-
thermore there may be a very large number of modes in high-dimensional
distributions. Therefore, finding all the modes of a distribution can be
computationally challenging.
Example .
Consider the two-dimensional distribution illustrated in Figure .:
p(x) = . N

+ . N

We will define the Gaussian distribution N
 µ, σ
in Section .. Also
shown is its corresponding marginal distribution in each dimension. Ob-
serve that the distribution is bimodal (has two modes), but one of the
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Summary Statistics and Independence
marginal distributions is unimodal (has one mode). The horizontal bi-
modal univariate distribution illustrates that the mean and median can
be different from each other. While it is tempting to define the two-
dimensional median to be the concatenation of the medians in each di-
mension, the fact that we cannot define an ordering of two-dimensional
points makes it difficult. When we say “cannot define an ordering”, we
mean that there is more than one way to define the relation < so that
Mean
Modes
Median
Figure .
Illustration of the
mean, mode, and
median for a
two-dimensional
dataset, as well as
its marginal
densities.
Remark. The expected value (Definition .) is a linear operator. For ex-
ample, given a real-valued function f(x) = ag(x)+bh(x) where a, b ∈ R
and x ∈ RD, we obtain
EX[f(x)] =
f(x)p(x)dx
(.a)
[ag(x) + bh(x)]p(x)dx
(.b)
= a
g(x)p(x)dx + b
h(x)p(x)dx
(.c)
= aEX[g(x)] + bEX[h(x)] .
(.d)
For two random variables, we may wish to characterize their correspon-
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
dence to each other. The covariance intuitively represents the notion of
how dependent random variables are to one another.
Definition . (Covariance (Univariate)). The covariance between two
covariance
univariate random variables X, Y ∈ R is given by the expected product
of their deviations from their respective means, i.e.,
Remark. When the random variable associated with the expectation or
covariance is clear by its arguments, the subscript is often suppressed (for
example, EX[x] is often written as E[x]).
By using the linearity of expectations, the expression in Definition .
can be rewritten as the expected value of the product minus the product
of the expected values, i.e.,
CovX,Y [x, y] := EX,Y
(x − EX[x])(y − EY [y])
 .
Terminology: The
covariance of
multivariate random
variables Cov[x, y]
is sometimes
referred to as
cross-covariance,
with covariance
referring to
Cov[x, x].
Cov[x, y] = E[xy] − E[x]E[y] .
The covariance of a variable with itself Cov[x, x] is called the variance and
variance
is denoted by VX[x]. The square root of the variance is called the standard
standard deviation
deviation and is often denoted by σ(x). The notion of covariance can be
generalized to multivariate random variables.
Definition . (Covariance (Multivariate)). If we consider two multivari-
ate random variables X and Y with states x ∈ RD and y ∈ RE respec-
tively, the covariance between X and Y is defined as
covariance
Cov[x, y] = E[xy⊤] − E[x]E[y]⊤ = Cov[y, x]⊤ ∈ RD×E .
Definition . can be applied with the same multivariate random vari-
able in both arguments, which results in a useful concept that intuitively
captures the “spread” of a random variable. For a multivariate random
variable, the variance describes the relation between individual dimen-
sions of the random variable.
Definition . (Variance). The variance of a random variable X with
variance
states x ∈ RD and a mean vector µ ∈ RD is defined as
VX[x] = CovX[x, x]
(.a)
= EX[(x − µ)(x − µ)⊤] = EX[xx⊤] − EX[x]EX[x]⊤
(.b)
Cov[x, x]
Cov[x, x]
. . .
Cov[x, xD]
Cov[x, x]
Cov[x, x]
. . .
Cov[x, xD]
Cov[xD, x]
. . .
. . .
Cov[xD, xD]
 .
(.c)
The D × D matrix in (.c) is called the covariance matrix of the mul-
covariance matrix
tivariate random variable X. The covariance matrix is symmetric and pos-
itive semidefinite and tells us something about the spread of the data. On
its diagonal, the covariance matrix contains the variances of the marginals
marginal
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Summary Statistics and Independence
Figure .
Two-dimensional
datasets with
identical means and
variances along
each axis (colored
lines) but with
different
covariances.
(a) x and y are negatively correlated.
(b) x and y are positively correlated.
p(xi) =
p(x, . . . , xD)dx\i ,
where “\i” denotes “all variables but i”. The off-diagonal entries are the
cross-covariance terms Cov[xi, xj] for i, j = , . . . , D, i ̸= j.
cross-covariance
Remark. In this book, we generally assume that covariance matrices are
positive definite to enable better intuition. We therefore do not discuss
corner cases that result in positive semidefinite (low-rank) covariance ma-
trices.
When we want to compare the covariances between different pairs of
random variables, it turns out that the variance of each random variable
affects the value of the covariance. The normalized version of covariance
is called the correlation.
Definition . (Correlation). The correlation between two random vari-
correlation
ables X, Y is given by
V[x]V[y] ∈ [−, ] .
corr[x, y] =
Cov[x, y]
The correlation matrix is the covariance matrix of standardized random
variables, x/σ(x). In other words, each random variable is divided by its
standard deviation (the square root of the variance) in the correlation
matrix.
The covariance (and correlation) indicate how two random variables
are related; see Figure .. Positive correlation corr[x, y] means that when
x grows, then y is also expected to grow. Negative correlation means that
as x increases, then y decreases.
.. Empirical Means and Covariances
The definitions in Section .. are often also called the population mean
population mean
and covariance
and covariance, as it refers to the true statistics for the population. In ma-
chine learning, we need to learn from empirical observations of data. Con-
sider a random variable X. There are two conceptual steps to go from
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
population statistics to the realization of empirical statistics. First, we use
the fact that we have a finite dataset (of size N) to construct an empirical
statistic that is a function of a finite number of identical random variables,
X, . . . , XN. Second, we observe the data, that is, we look at the realiza-
tion x, . . . , xN of each of the random variables and apply the empirical
statistic.
Specifically, for the mean (Definition .), given a particular dataset we
can obtain an estimate of the mean, which is called the empirical mean or
empirical mean
sample mean. The same holds for the empirical covariance.
sample mean
Definition . (Empirical Mean and Covariance). The empirical mean vec-
empirical mean
tor is the arithmetic average of the observations for each variable, and it
is defined as
¯x :=
n=
xn ,
where xn ∈ RD.
Similar to the empirical mean, the empirical covariance matrix is a D×D
empirical covariance
matrix
Σ :=
n=
(xn − ¯x)(xn − ¯x)⊤.
To compute the statistics for a particular dataset, we would use the
realizations (observations) x, . . . , xN and use (.) and (.). Em-
pirical covariance matrices are symmetric, positive semidefinite (see Sec-
tion ..).
.. Three Expressions for the Variance
Throughout the
book, we use the
empirical
covariance, which is
a biased estimate.
The unbiased
(sometimes called
corrected)
covariance has the
factor N −  in the
denominator
instead of N.
We now focus on a single random variable X and use the preceding em-
pirical formulas to derive three possible expressions for the variance. The
The derivations are
exercises at the end
of this chapter.
following derivation is the same for the population variance, except that
we need to take care of integrals. The standard definition of variance, cor-
responding to the definition of covariance (Definition .), is the expec-
tation of the squared deviation of a random variable X from its expected
value µ, i.e.,
VX[x] := EX[(x − µ)] .
The expectation in (.) and the mean µ = EX(x) are computed us-
ing (.), depending on whether X is a discrete or continuous random
variable. The variance as expressed in (.) is the mean of a new random
variable Z := (X − µ).
When estimating the variance in (.) empirically, we need to resort
to a two-pass algorithm: one pass through the data to calculate the mean
µ using (.), and then a second pass using this estimate ˆµ calculate the
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Summary Statistics and Independence
variance. It turns out that we can avoid two passes by rearranging the
terms. The formula in (.) can be converted to the so-called raw-score
raw-score formula
for variance
formula for variance:
VX[x] = EX[x] − (EX[x])
The expression in (.) can be remembered as “the mean of the square
minus the square of the mean”. It can be calculated empirically in one pass
through data since we can accumulate xi (to calculate the mean) and x
simultaneously, where xi is the ith observation. Unfortunately, if imple-
If the two terms
in (.) are huge
and approximately
equal, we may
suffer from an
unnecessary loss of
numerical precision
in floating-point
arithmetic.
mented in this way, it can be numerically unstable. The raw-score version
of the variance can be useful in machine learning, e.g., when deriving the
bias–variance decomposition (Bishop, ).
A third way to understand the variance is that it is a sum of pairwise dif-
ferences between all pairs of observations. Consider a sample x, . . . , xN
of realizations of random variable X, and we compute the squared differ-
ence between pairs of xi and xj. By expanding the square, we can show
that the sum of N  pairwise differences is the empirical variance of the
observations:

i,j=
(xi − xj) =
i=
i −
i=
xi
 .
We see that (.) is twice the raw-score expression (.). This means
that we can express the sum of pairwise distances (of which there are N
of them) as a sum of deviations from the mean (of which there are N). Ge-
ometrically, this means that there is an equivalence between the pairwise
distances and the distances from the center of the set of points. From a
computational perspective, this means that by computing the mean (N
terms in the summation), and then computing the variance (again N
terms in the summation), we can obtain an expression (left-hand side
of (.)) that has N  terms.
.. Sums and Transformations of Random Variables
We may want to model a phenomenon that cannot be well explained by
textbook distributions (we introduce some in Sections . and .), and
hence may perform simple manipulations of random variables (such as
adding two random variables).
Consider two random variables X, Y with states x, y ∈ RD. Then:
E[x + y] = E[x] + E[y]
E[x − y] = E[x] − E[y]
V[x + y] = V[x] + V[y] + Cov[x, y] + Cov[y, x]
V[x − y] = V[x] + V[y] − Cov[x, y] − Cov[y, x] .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
Mean and (co)variance exhibit some useful properties when it comes
to affine transformation of random variables. Consider a random variable
X with mean µ and covariance matrix Σ and a (deterministic) affine
transformation y = Ax + b of x. Then y is itself a random variable
whose mean vector and covariance matrix are given by
EY [y] = EX[Ax + b] = AEX[x] + b = Aµ + b ,
VY [y] = VX[Ax + b] = VX[Ax] = AVX[x]A⊤ = AΣA⊤ ,
Cov[x, y] = E[x(Ax + b)⊤] − E[x]E[Ax + b]⊤
(.a)
respectively. Furthermore,
This can be shown
directly by using the
definition of the
mean and
covariance.
= E[x]b⊤ + E[xx⊤]A⊤ − µb⊤ − µµ⊤A⊤
(.b)
= µb⊤ − µb⊤ +
E[xx⊤] − µµ⊤A⊤
(.c)
(.b)
ΣA⊤ ,
(.d)
where Σ = E[xx⊤] − µµ⊤ is the covariance of X.
.. Statistical Independence
Definition . (Independence). Two random variables X, Y are statis-
statistical
independence
tically independent if and only if
p(x, y) = p(x)p(y) .
Intuitively, two random variables X and Y are independent if the value
of y (once known) does not add any additional information about x (and
vice versa). If X, Y are (statistically) independent, then
p(y | x) = p(y)
p(x | y) = p(x)
VX,Y [x + y] = VX[x] + VY [y]
CovX,Y [x, y] =
The last point may not hold in converse, i.e., two random variables can
have covariance zero but are not statistically independent. To understand
why, recall that covariance measures only linear dependence. Therefore,
random variables that are nonlinearly dependent could have covariance
zero.
Example .
Consider a random variable X with zero mean (EX[x] = ) and also
EX[x] = . Let y = x (hence, Y is dependent on X) and consider the
covariance (.) between X and Y . But this gives
Cov[x, y] = E[xy] − E[x]E[y] = E[x] =  .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Summary Statistics and Independence
In machine learning, we often consider problems that can be mod-
eled as independent and identically distributed (i.i.d.) random variables,
independent and
identically
distributed
i.i.d.
X, . . . , XN. For more than two random variables, the word “indepen-
dent” (Definition .) usually refers to mutually independent random
variables, where all subsets are independent (see Pollard (, chap-
ter ) and Jacod and Protter (, chapter )). The phrase “identically
distributed” means that all the random variables are from the same distri-
bution.
Another concept that is important in machine learning is conditional
independence.
Definition . (Conditional Independence). Two random variables X
and Y are conditionally independent given Z if and only if
conditionally
independent
p(x, y | z) = p(x | z)p(y | z)
for all
z ∈ Z ,
where Z is the set of states of random variable Z. We write X ⊥⊥ Y | Z to
denote that X is conditionally independent of Y given Z.
Definition . requires that the relation in (.) must hold true for
every value of z. The interpretation of (.) can be understood as “given
knowledge about z, the distribution of x and y factorizes”. Independence
can be cast as a special case of conditional independence if we write X ⊥⊥
Y | ∅. By using the product rule of probability (.), we can expand the
left-hand side of (.) to obtain
p(x, y | z) = p(x | y, z)p(y | z) .
By comparing the right-hand side of (.) with (.), we see that p(y | z)
appears in both of them so that
p(x | y, z) = p(x | z) .
Equation (.) provides an alternative definition of conditional indepen-
dence, i.e., X ⊥⊥ Y | Z. This alternative presentation provides the inter-
pretation “given that we know z, knowledge about y does not change our
knowledge of x”.
.. Inner Products of Random Variables
inner product between random variables, which we briefly describe in this
section. If we have two uncorrelated random variables X, Y , then
V[x + y] = V[x] + V[y] .
Recall the definition of inner products from Section .. We can define an
Inner products
between
multivariate random
variables can be
treated in a similar
fashion
Since variances are measured in squared units, this looks very much like
the Pythagorean theorem for right triangles c = a + b.
In the following, we see whether we can find a geometric interpreta-
tion of the variance relation of uncorrelated random variables in (.).
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
var[x] + var[y]
Figure .
Geometry of
random variables. If
random variables X
and Y are
uncorrelated, they
are orthogonal
vectors in a
corresponding
vector space, and
the Pythagorean
theorem applies.
var[x]
var[x + y] =
var[y]
Random variables can be considered vectors in a vector space, and we
can define inner products to obtain geometric properties of random vari-
ables (Eaton, ). If we define
⟨X, Y ⟩ := Cov[x, y]
V[x] = σ[x] ,
for zero mean random variables X and Y , we obtain an inner product. We
see that the covariance is symmetric, positive definite, and linear in either
Cov[x, x] =  ⇐⇒
x =
argument. The length of a random variable is
Cov[αx + z, y] =
α Cov[x, y] +
Cov[z, y] for α ∈ R.
∥X∥ =
Cov[x, x] =
i.e., its standard deviation. The “longer” the random variable, the more
uncertain it is; and a random variable with length  is deterministic.
If we look at the angle θ between two random variables X, Y , we get
cos θ =
⟨X, Y ⟩
V[x]V[y] ,
∥X∥ ∥Y ∥ =
Cov[x, y]
which is the correlation (Definition .) between the two random vari-
ables. This means that we can think of correlation as the cosine of the
angle between two random variables when we consider them geometri-
cally. We know from Definition . that X ⊥ Y
⇐⇒ ⟨X, Y ⟩ = . In our
case, this means that X and Y are orthogonal if and only if Cov[x, y] = ,
i.e., they are uncorrelated. Figure . illustrates this relationship.
Remark. While it is tempting to use the Euclidean distance (constructed
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Gaussian Distribution
Figure .
Gaussian
distribution of two
random variables x
and x.
p(x, x)
from the preceding definition of inner products) to compare probability
distributions, it is unfortunately not the best way to obtain distances be-
tween distributions. Recall that the probability mass (or density) is posi-
tive and needs to add up to . These constraints mean that distributions
live on something called a statistical manifold. The study of this space of
probability distributions is called information geometry. Computing dis-
tances between distributions are often done using Kullback-Leibler diver-
gence, which is a generalization of distances that account for properties of
the statistical manifold. Just like the Euclidean distance is a special case of
a metric (Section .), the Kullback-Leibler divergence is a special case of
two more general classes of divergences called Bregman divergences and
f-divergences. The study of divergences is beyond the scope of this book,
and we refer for more details to the recent book by Amari (), one of
the founders of the field of information geometry.
. Gaussian Distribution
The Gaussian distribution is the most well-studied probability distribution
for continuous-valued random variables. It is also referred to as the normal
normal distribution
distribution. Its importance originates from the fact that it has many com-
The Gaussian
distribution arises
naturally when we
consider sums of
independent and
identically
distributed random
variables. This is
known as the
central limit
theorem (Grinstead
and Snell, ).
putationally convenient properties, which we will be discussing in the fol-
lowing. In particular, we will use it to define the likelihood and prior for
linear regression (Chapter ), and consider a mixture of Gaussians for
density estimation (Chapter ).
There are many other areas of machine learning that also benefit from
using a Gaussian distribution, for example Gaussian processes, variational
inference, and reinforcement learning. It is also widely used in other ap-
plication areas such as signal processing (e.g., Kalman filter), control (e.g.,
linear quadratic regulator), and statistics (e.g., hypothesis testing).
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
Mean
Sample
p(x)
Mean
Sample
Figure .
Gaussian
distributions
overlaid with
samples. (a) One-
dimensional case;
(b) two-dimensional
case.
(a) Univariate (one-dimensional) Gaussian;
The red cross shows the mean and the red
line shows the extent of the variance.
(b) Multivariate (two-dimensional) Gaus-
sian, viewed from top. The red cross shows
the mean and the colored lines show the con-
tour lines of the density.
For a univariate random variable, the Gaussian distribution has a den-
sity that is given by
p(x | µ, σ) =

πσ exp

−(x − µ)
vector µ and a covariance matrix Σ and defined as
The multivariate Gaussian distribution is fully characterized by a mean
multivariate
Gaussian
distribution
mean vector
covariance matrix
p(x | µ, Σ) = (π)− D
|Σ|−
exp
  −
(x − µ)⊤Σ−(x − µ)
 ,
where x ∈ RD. We write p(x) = N
 x | µ, Σ
or X ∼ N
 µ, Σ
. Fig-
Also known as a
multivariate normal
distribution.
ure . shows a bivariate Gaussian (mesh), with the corresponding con-
tour plot. Figure . shows a univariate Gaussian and a bivariate Gaussian
with corresponding samples. The special case of the Gaussian with zero
mean and identity covariance, that is, µ =  and Σ = I, is referred to as
the standard normal distribution.
standard normal
distribution
Gaussians are widely used in statistical estimation and machine learn-
ing as they have closed-form expressions for marginal and conditional dis-
tributions. In Chapter , we use these closed-form expressions extensively
for linear regression. A major advantage of modeling with Gaussian ran-
dom variables is that variable transformations (Section .) are often not
needed. Since the Gaussian distribution is fully specified by its mean and
covariance, we often can obtain the transformed distribution by applying
the transformation to the mean and covariance of the random variable.
.. Marginals and Conditionals of Gaussians are Gaussians
In the following, we present marginalization and conditioning in the gen-
eral case of multivariate random variables. If this is confusing at first read-
ing, the reader is advised to consider two univariate random variables in-
stead. Let X and Y be two multivariate random variables, that may have
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Gaussian Distribution
different dimensions. To consider the effect of applying the sum rule of
probability and the effect of conditioning, we explicitly write the Gaus-
sian distribution in terms of the concatenated states [x⊤ y⊤]⊤ so that

Σxx
Σxy
Σyx
Σyy
p(x, y) = N
µx
µy

where Σxx = Cov[x, x] and Σyy = Cov[y, y] are the marginal covari-
ance matrices of x and y, respectively, and Σxy = Cov[x, y] is the cross-
covariance matrix between x and y.
The conditional distribution p(x | y) is also Gaussian (illustrated in Fig-
ure .(c)) and given by (derived in Section . of Bishop, )
p(x | y) = N
 µx | y, Σx | y
µx | y = µx + ΣxyΣ−
yy (y − µy)
Σx | y = Σxx − ΣxyΣ−
yy Σyx .
Note that in the computation of the mean in (.), the y-value is an
observation and no longer random.
Remark. The conditional Gaussian distribution shows up in many places,
where we are interested in posterior distributions:
The Kalman filter (Kalman, ), one of the most central algorithms
for state estimation in signal processing, does nothing but computing
Gaussian conditionals of joint distributions (Deisenroth and Ohlsson,
; S¨arkk¨a, ).
Gaussian processes (Rasmussen and Williams, ), which are a prac-
tical implementation of a distribution over functions. In a Gaussian pro-
cess, we make assumptions of joint Gaussianity of random variables. By
(Gaussian) conditioning on observed data, we can determine a poste-
rior distribution over functions.
Latent linear Gaussian models (Roweis and Ghahramani, ; Mur-
phy, ), which include probabilistic principal component analysis
(PPCA) (Tipping and Bishop, ). We will look at PPCA in more de-
tail in Section ..
The marginal distribution p(x) of a joint Gaussian distribution p(x, y)
(see (.)) is itself Gaussian and computed by applying the sum rule
(.) and given by
p(x) =
p(x, y)dy = N
 x | µx, Σxx
 .
The corresponding result holds for p(y), which is obtained by marginaliz-
ing with respect to x. Intuitively, looking at the joint distribution in (.),
we ignore (i.e., integrate out) everything we are not interested in. This is
illustrated in Figure .(b).
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
Example .
x = −
Figure .
(a) Bivariate
Gaussian;
(b) marginal of a
joint Gaussian
distribution is
Gaussian; (c) the
conditional
distribution of a
Gaussian is also
Gaussian.
(a) Bivariate Gaussian.
p(x)
p(x|x = −)
Mean
Mean
(b) Marginal distribution.
(c) Conditional distribution.
Consider the bivariate Gaussian distribution (illustrated in Figure .):

p(x, x) = N
We can compute the parameters of the univariate Gaussian, conditioned
on x = −, by applying (.) and (.) to obtain the mean and vari-
ance respectively. Numerically, this is
µx | x=− =  + (−)  .  (− − ) = .
and
x | x=− = . − (−)  .  (−) = . .
Therefore, the conditional Gaussian is given by
p(x | x = −) = N
 ., .
 .
The marginal distribution p(x), in contrast, can be obtained by apply-
ing (.), which is essentially using the mean and variance of the random
variable x, giving us
p(x) = N
 , .
 .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Gaussian Distribution
.. Product of Gaussian Densities
For linear regression (Chapter ), we need to compute a Gaussian likeli-
hood. Furthermore, we may wish to assume a Gaussian prior (Section .).
We apply Bayes’ Theorem to compute the posterior, which results in a mul-
tiplication of the likelihood and the prior, that is, the multiplication of two
Gaussian densities. The product of two Gaussians N
 x | a, A
N
 x | b, B
The derivation is an
exercise at the end
of this chapter.
is a Gaussian distribution scaled by a c ∈ R, given by c N
 x | c, C
with
C = (A− + B−)−
c = C(A−a + B−b)
c = (π)− D
|A + B|−
(a − b)⊤(A + B)−(a − b)
 . (.)
exp
  −
The scaling constant c itself can be written in the form of a Gaussian
density either in a or in b with an “inflated” covariance matrix A + B,
i.e., c = N
 a | b, A + B
 = N
 b | a, A + B
Remark. For notation convenience, we will sometimes use N
 x | m, S
to describe the functional form of a Gaussian density even if x is not a
random variable. We have just done this in the preceding demonstration
when we wrote
c = N
 a | b, A + B
 = N
 b | a, A + B
 .
Here, neither a nor b are random variables. However, writing c in this way
is more compact than (.).
.. Sums and Linear Transformations
If X, Y are independent Gaussian random variables (i.e., the joint distri-
bution is given as p(x, y) = p(x)p(y)) with p(x) = N
 x | µx, Σx
and
p(y) = N
 y | µy, Σy
, then x + y is also Gaussian distributed and given
by
p(x + y) = N
 µx + µy, Σx + Σy
 .
Knowing that p(x + y) is Gaussian, the mean and covariance matrix can
be determined immediately using the results from (.) through (.).
This property will be important when we consider i.i.d. Gaussian noise
acting on random variables, as is the case for linear regression (Chap-
ter ).
Example .
Since expectations are linear operations, we can obtain the weighted sum
of independent Gaussian random variables
p(ax + by) = N
 aµx + bµy, aΣx + bΣy
 .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
Remark. A case that will be useful in Chapter  is the weighted sum of
Gaussian densities. This is different from the weighted sum of Gaussian
random variables.
In Theorem ., the random variable x is from a density that is a
mixture of two densities p(x) and p(x), weighted by α. The theorem can
be generalized to the multivariate random variable case, since linearity of
expectations holds also for multivariate random variables. However, the
idea of a squared random variable needs to be replaced by xx⊤.
Theorem .. Consider a mixture of two univariate Gaussian densities
p(x) = αp(x) + ( − α)p(x) ,
where the scalar  < α <  is the mixture weight, and p(x) and p(x) are
univariate Gaussian densities (Equation (.)) with different parameters,
i.e., (µ, σ
) ̸= (µ, σ
Then the mean of the mixture density p(x) is given by the weighted sum
of the means of each random variable:
E[x] = αµ + ( − α)µ .
The variance of the mixture density p(x) is given by
V[x] =
ασ
+ ( − α)σ
αµ
+ ( − α)µ
 − [αµ + ( − α)µ]
Proof
The mean of the mixture density p(x) is given by the weighted
sum of the means of each random variable. We apply the definition of the
mean (Definition .), and plug in our mixture (.), which yields
xp(x)dx
(.a)
E[x] =
Z ∞
(αxp(x) + ( − α)xp(x)) dx
(.b)
Z ∞
xp(x)dx
(.c)
= α
Z ∞
xp(x)dx + ( − α)
Z ∞
= αµ + ( − α)µ .
(.d)
To compute the variance, we can use the raw-score version of the vari-
ance from (.), which requires an expression of the expectation of the
squared random variable. Here we use the definition of an expectation of
a function (the square) of a random variable (Definition .),
xp(x)dx
(.a)
E[x] =
Z ∞
Z ∞
 αxp(x) + ( − α)xp(x)
 dx
(.b)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Gaussian Distribution
xp(x)dx
(.c)
= α
Z ∞
xp(x)dx + ( − α)
Z ∞
= α(µ
+ σ
) + ( − α)(µ
+ σ
) ,
(.d)
where in the last equality, we again used the raw-score version of the
variance (.) giving σ = E[x] − µ. This is rearranged such that the
expectation of a squared random variable is the sum of the squared mean
and the variance.
Therefore, the variance is given by subtracting (.d) from (.d),
V[x] = E[x] − (E[x])
(.a)
= α(µ
+ σ
) + ( − α)(µ
+ σ
) − (αµ + ( − α)µ)
(.b)
ασ
+ ( − α)σ
αµ
+ ( − α)µ
 − [αµ + ( − α)µ]
(.c)
Remark. The preceding derivation holds for any density, but since the
Gaussian is fully determined by the mean and variance, the mixture den-
sity can be determined in closed form.
For a mixture density, the individual components can be considered
to be conditional distributions (conditioned on the component identity).
Equation (.c) is an example of the conditional variance formula, also
known as the law of total variance, which generally states that for two ran-
law of total variance
dom variables X and Y it holds that VX[x] = EY [VX[x|y]]+VY [EX[x|y]],
i.e., the (total) variance of X is the expected conditional variance plus the
variance of a conditional mean.
We consider in Example . a bivariate standard Gaussian random
variable X and performed a linear transformation Ax on it. The outcome
is a Gaussian random variable with mean zero and covariance AA⊤. Ob-
serve that adding a constant vector will change the mean of the distribu-
tion, without affecting its variance, that is, the random variable x + µ is
Gaussian with mean µ and identity covariance. Hence, any linear/affine
transformation of a Gaussian random variable is Gaussian distributed.
Any linear/affine
transformation of a
Gaussian random
variable is also
Gaussian
distributed.
Consider a Gaussian distributed random variable X ∼ N
 µ, Σ
. For
a given matrix A of appropriate shape, let Y be a random variable such
that y = Ax is a transformed version of x. We can compute the mean of
y by exploiting that the expectation is a linear operator (.) as follows:
E[y] = E[Ax] = AE[x] = Aµ .
Similarly the variance of y can be found by using (.):
V[y] = V[Ax] = AV[x]A⊤ = AΣA⊤ .
This means that the random variable y is distributed according to
p(y) = N
 y | Aµ, AΣA⊤.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
Let us now consider the reverse transformation: when we know that a
random variable has a mean that is a linear transformation of another
random variable. For a given full rank matrix A ∈ RM×N, where M ⩾ N,
let y ∈ RM be a Gaussian random variable with mean Ax, i.e.,
p(y) = N
 y | Ax, Σ
 .
What is the corresponding probability distribution p(x)? If A is invert-
ible, then we can write x = A−y and apply the transformation in the
previous paragraph. However, in general A is not invertible, and we use
an approach similar to that of the pseudo-inverse (.). That is, we pre-
multiply both sides with A⊤ and then invert A⊤A, which is symmetric
and positive definite, giving us the relation
y = Ax ⇐⇒ (A⊤A)−A⊤y = x .
Hence, x is a linear transformation of y, and we obtain
p(x) = N
 x | (A⊤A)−A⊤y, (A⊤A)−A⊤ΣA(A⊤A)− .
.. Sampling from Multivariate Gaussian Distributions
We will not explain the subtleties of random sampling on a computer, and
the interested reader is referred to Gentle (). In the case of a mul-
tivariate Gaussian, this process consists of three stages: first, we need a
source of pseudo-random numbers that provide a uniform sample in the
interval [,]; second, we use a non-linear transformation such as the
Box-M¨uller transform (Devroye, ) to obtain a sample from a univari-
ate Gaussian; and third, we collate a vector of these samples to obtain a
sample from a multivariate standard normal N
 , I
For a general multivariate Gaussian, that is, where the mean is non
zero and the covariance is not the identity matrix, we use the proper-
ties of linear transformations of a Gaussian random variable. Assume we
are interested in generating samples xi, i = , . . . , n, from a multivariate
Gaussian distribution with mean µ and covariance matrix Σ. We would
To compute the
Cholesky
factorization of a
matrix, it is required
that the matrix is
symmetric and
positive definite
(Section ..).
Covariance matrices
possess this
property.
like to construct the sample from a sampler that provides samples from
the multivariate standard normal N
 , I
To obtain samples from a multivariate normal N
 µ, Σ
, we can use
the properties of a linear transformation of a Gaussian random variable:
If x ∼ N
 , I
, then y = Ax + µ, where AA⊤ = Σ is Gaussian dis-
tributed with mean µ and covariance matrix Σ. One convenient choice of
A is to use the Cholesky decomposition (Section .) of the covariance
matrix Σ = AA⊤. The Cholesky decomposition has the benefit that A is
triangular, leading to efficient computation.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Conjugacy and the Exponential Family
. Conjugacy and the Exponential Family
Many of the probability distributions “with names” that we find in statis-
tics textbooks were discovered to model particular types of phenomena.
For example, we have seen the Gaussian distribution in Section .. The
distributions are also related to each other in complex ways (Leemis and
McQueston, ). For a beginner in the field, it can be overwhelming to
figure out which distribution to use. In addition, many of these distribu-
tions were discovered at a time that statistics and computation were done
“Computers” used to
be a job description.
by pencil and paper. It is natural to ask what are meaningful concepts
in the computing age (Efron and Hastie, ). In the previous section,
we saw that many of the operations required for inference can be conve-
niently calculated when the distribution is Gaussian. It is worth recalling
at this point the desiderata for manipulating probability distributions in
the machine learning context:
. There is some “closure property” when applying the rules of probability,
e.g., Bayes’ theorem. By closure, we mean that applying a particular
operation returns an object of the same type.
. As we collect more data, we do not need more parameters to describe
the distribution.
. Since we are interested in learning from data, we want parameter es-
timation to behave nicely.
It turns out that the class of distributions called the exponential family
exponential family
provides the right balance of generality while retaining favorable compu-
tation and inference properties. Before we introduce the exponential fam-
ily, let us see three more members of “named” probability distributions,
the Bernoulli (Example .), Binomial (Example .), and Beta (Exam-
ple .) distributions.
Example .
The
Bernoulli distribution is a distribution for a single binary random
Bernoulli
distribution
variable X with state x ∈ {, }. It is governed by a single continuous pa-
rameter µ ∈ [, ] that represents the probability of X = . The Bernoulli
distribution Ber(µ) is defined as
p(x | µ) = µx( − µ)−x ,
x ∈ {, } ,
E[x] = µ ,
V[x] = µ( − µ) ,
where E[x] and V[x] are the mean and variance of the binary random
variable X.
An example where the Bernoulli distribution can be used is when we
are interested in modeling the probability of “heads” when flipping a coin.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
µ = .
µ = .
µ = .
Figure .
Examples of the
Binomial
distribution for
µ ∈ {., ., .}
and N = .
p(m)
Number m of observations x =  in N =  experiments
Remark. The rewriting above of the Bernoulli distribution, where we use
Boolean variables as numerical  or  and express them in the exponents,
is a trick that is often used in machine learning textbooks. Another oc-
curence of this is when expressing the Multinomial distribution.
Example . (Binomial Distribution)
The Binomial distribution is a generalization of the Bernoulli distribution
Binomial
distribution
to a distribution over integers (illustrated in Figure .). In particular,
the Binomial can be used to describe the probability of observing m oc-
currences of X =  in a set of N samples from a Bernoulli distribution
where p(X = ) = µ ∈ [, ]. The Binomial distribution Bin(N, µ) is
defined as
p(m | N, µ) =
µm( − µ)N−m ,

E[m] = Nµ ,
V[m] = Nµ( − µ) ,
where E[m] and V[m] are the mean and variance of m, respectively.
An example where the Binomial could be used is if we want to describe
the probability of observing m “heads” in N coin-flip experiments if the
probability for observing head in a single experiment is µ.
Example . (Beta Distribution)
We may wish to model a continuous random variable on a finite interval.
The Beta distribution is a distribution over a continuous random variable
Beta distribution
µ ∈ [, ], which is often used to represent the probability for some binary
event (e.g., the parameter governing the Bernoulli distribution). The Beta
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Conjugacy and the Exponential Family
distribution Beta(α, β) (illustrated in Figure .) itself is governed by
two parameters α > , β >  and is defined as
p(µ | α, β) = Γ(α + β)
Γ(α)Γ(β)µα−( − µ)β−
E[µ] =
α + β ,
V[µ] =
αβ
(α + β)(α + β + )
where Γ() is the Gamma function defined as
xt− exp(−x)dx,
t >  .
Γ(t) :=
Z ∞
Γ(t + ) = tΓ(t) .
Note that the fraction of Gamma functions in (.) normalizes the Beta
distribution.
Figure .
Examples of the
Beta distribution for
different values of α
and β.
α = . = β
α =  = β
α = , β = .
α = , β =
α = , β =
p(µ|α, β)
Intuitively, α moves probability mass toward , whereas β moves prob-
ability mass toward . There are some special cases (Murphy, ):
For α =  = β, we obtain the uniform distribution U[, ].
For α, β < , we get a bimodal distribution with spikes at  and .
For α, β > , the distribution is unimodal.
For α, β >  and α = β, the distribution is unimodal, symmetric, and
centered in the interval [, ], i.e., the mode/mean is at
Remark. There is a whole zoo of distributions with names, and they are
related in different ways to each other (Leemis and McQueston, ).
It is worth keeping in mind that each named distribution is created for a
particular reason, but may have other applications. Knowing the reason
behind the creation of a particular distribution often allows insight into
how to best use it. We introduced the preceding three distributions to be
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
able to illustrate the concepts of conjugacy (Section ..) and exponen-
tial families (Section ..).
.. Conjugacy
According to Bayes’ theorem (.), the posterior is proportional to the
product of the prior and the likelihood. The specification of the prior can
be tricky for two reasons: First, the prior should encapsulate our knowl-
edge about the problem before we see any data. This is often difficult to
describe. Second, it is often not possible to compute the posterior distribu-
tion analytically. However, there are some priors that are computationally
convenient: conjugate priors.
conjugate prior
Definition . (Conjugate Prior). A prior is conjugate for the likelihood
conjugate
function if the posterior is of the same form/type as the prior.
Conjugacy is particularly convenient because we can algebraically cal-
culate our posterior distribution by updating the parameters of the prior
distribution.
Remark. When considering the geometry of probability distributions, con-
jugate priors retain the same distance structure as the likelihood (Agarwal
and Daum´e III, ).
To introduce a concrete example of conjugate priors, we describe in Ex-
ample . the Binomial distribution (defined on discrete random vari-
ables) and the Beta distribution (defined on continuous random vari-
ables).
Example . (Beta-Binomial Conjugacy)
Consider a Binomial random variable x ∼ Bin(N, µ) where
p(x | N, µ) =
µx( − µ)N−x ,
x = , , . . . , N ,

is the probability of finding x times the outcome “heads” in N coin flips,
where µ is the probability of a “head”. We place a Beta prior on the pa-
rameter µ, that is, µ ∼ Beta(α, β), where
p(µ | α, β) = Γ(α + β)
Γ(α)Γ(β)µα−( − µ)β− .
If we now observe some outcome x = h, that is, we see h heads in N coin
flips, we compute the posterior distribution on µ as
p(µ | x = h, N, α, β) ∝ p(x | N, µ)p(µ | α, β)
(.a)
∝ µh( − µ)(N−h)µα−( − µ)β−
(.b)
= µh+α−( − µ)(N−h)+β−
(.c)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Conjugacy and the Exponential Family
Likelihood
Conjugate prior
Posterior
Table . Examples
of conjugate priors
for common
likelihood functions.
Bernoulli
Beta
Beta
Binomial
Beta
Beta
Gaussian
Gaussian/inverse Gamma
Gaussian/inverse Gamma
Gaussian
Gaussian/inverse Wishart
Gaussian/inverse Wishart
Multinomial
Dirichlet
Dirichlet
∝ Beta(h + α, N − h + β) ,
(.d)
i.e., the posterior distribution is a Beta distribution as the prior, i.e., the
Beta prior is conjugate for the parameter µ in the Binomial likelihood
function.
In the following example, we will derive a result that is similar to the
Beta-Binomial conjugacy result. Here we will show that the Beta distribu-
tion is a conjugate prior for the Bernoulli distribution.
Example . (Beta-Bernoulli Conjugacy)
Let x ∈ {, } be distributed according to the Bernoulli distribution with
parameter θ ∈ [, ], that is, p(x =  | θ) = θ. This can also be expressed
as p(x | θ) = θx( − θ)−x. Let θ be distributed according to a Beta distri-
bution with parameters α, β, that is, p(θ | α, β) ∝ θα−( − θ)β−.
Multiplying the Beta and the Bernoulli distributions, we get
p(θ | x, α, β) ∝ p(x | θ)p(θ | α, β)
(.a)
= θx( − θ)−xθα−( − θ)β−
(.b)
= θα+x−( − θ)β+(−x)−
(.c)
∝ p(θ | α + x, β + ( − x)) .
(.d)
The last line is the Beta distribution with parameters (α + x, β + ( − x)).
Table . lists examples for conjugate priors for the parameters of some
standard likelihoods used in probabilistic modeling. Distributions such as
The Gamma prior is
conjugate for the
precision (inverse
variance) in the
univariate Gaussian
likelihood, and the
Wishart prior is
conjugate for the
precision matrix
(inverse covariance
matrix) in the
multivariate
Gaussian likelihood.
Multinomial, inverse Gamma, inverse Wishart, and Dirichlet can be found
in any statistical text, and are described in Bishop (), for example.
The Beta distribution is the conjugate prior for the parameter µ in both
the Binomial and the Bernoulli likelihood. For a Gaussian likelihood func-
tion, we can place a conjugate Gaussian prior on the mean. The reason
why the Gaussian likelihood appears twice in the table is that we need
to distinguish the univariate from the multivariate case. In the univariate
(scalar) case, the inverse Gamma is the conjugate prior for the variance.
In the multivariate case, we use a conjugate inverse Wishart distribution
as a prior on the covariance matrix. The Dirichlet distribution is the conju-
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
gate prior for the multinomial likelihood function. For further details, we
refer to Bishop ().
.. Sufficient Statistics
Recall that a statistic of a random variable is a deterministic function of
that random variable. For example, if x = [x, . . . , xN]⊤ is a vector of
univariate Gaussian random variables, that is, xn ∼ N
 µ, σ
, then the
sample mean ˆµ =
N (x +    + xN) is a statistic. Sir Ronald Fisher dis-
covered the notion of sufficient statistics: the idea that there are statistics
sufficient statistics
that will contain all available information that can be inferred from data
corresponding to the distribution under consideration. In other words, suf-
ficient statistics carry all the information needed to make inference about
the population, that is, they are the statistics that are sufficient to repre-
sent the distribution.
For a set of distributions parametrized by θ, let X be a random variable
with distribution p(x | θ) given an unknown θ. A vector ϕ(x) of statistics
is called sufficient statistics for θ if they contain all possible informa-
tion about θ. To be more formal about “contain all possible information”,
this means that the probability of x given θ can be factored into a part
that does not depend on θ, and a part that depends on θ only via ϕ(x).
The Fisher-Neyman factorization theorem formalizes this notion, which
we state in Theorem . without proof.
Theorem . (Fisher-Neyman). [Theorem . in Lehmann and Casella
()] Let X have probability density function p(x | θ). Then the statistics
Fisher-Neyman
theorem
ϕ(x) are sufficient for θ if and only if p(x | θ) can be written in the form
p(x | θ) = h(x)gθ(ϕ(x)) ,
where h(x) is a distribution independent of θ and gθ captures all the depen-
dence on θ via sufficient statistics ϕ(x).
If p(x | θ) does not depend on θ, then ϕ(x) is trivially a sufficient statistic
for any function ϕ. The more interesting case is that p(x | θ) is dependent
only on ϕ(x) and not x itself. In this case, ϕ(x) is a sufficient statistic for
θ.
In machine learning, we consider a finite number of samples from a
distribution. One could imagine that for simple distributions (such as the
Bernoulli in Example .) we only need a small number of samples to
estimate the parameters of the distributions. We could also consider the
opposite problem: If we have a set of data (a sample from an unknown
distribution), which distribution gives the best fit? A natural question to
ask is, as we observe more data, do we need more parameters θ to de-
scribe the distribution? It turns out that the answer is yes in general, and
this is studied in non-parametric statistics (Wasserman, ). A converse
question is to consider which class of distributions have finite-dimensional
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Conjugacy and the Exponential Family
sufficient statistics, that is the number of parameters needed to describe
them does not increase arbitrarily. The answer is exponential family dis-
tributions, described in the following section.
.. Exponential Family
There are three possible levels of abstraction we can have when con-
sidering distributions (of discrete or continuous random variables). At
level one (the most concrete end of the spectrum), we have a particu-
lar named distribution with fixed parameters, for example a univariate
Gaussian N
with zero mean and unit variance. In machine learning,
we often use the second level of abstraction, that is, we fix the paramet-
ric form (the univariate Gaussian) and infer the parameters from data. For
example, we assume a univariate Gaussian N
 µ, σ
with unknown mean
µ and unknown variance σ, and use a maximum likelihood fit to deter-
mine the best parameters (µ, σ). We will see an example of this when
considering linear regression in Chapter . A third level of abstraction is
to consider families of distributions, and in this book, we consider the ex-
ponential family. The univariate Gaussian is an example of a member of
the exponential family. Many of the widely used statistical models, includ-
ing all the “named” models in Table ., are members of the exponential
family. They can all be unified into one concept (Brown, ).
Remark. A brief historical anecdote: Like many concepts in mathemat-
ics and science, exponential families were independently discovered at
the same time by different researchers. In the years –, Edwin
Pitman in Tasmania, Georges Darmois in Paris, and Bernard Koopman in
New York independently showed that the exponential families are the only
families that enjoy finite-dimensional sufficient statistics under repeated
independent sampling (Lehmann and Casella, ).
An exponential family is a family of probability distributions, parame-
exponential family
terized by θ ∈ RD, of the form
p(x | θ) = h(x) exp (⟨θ, ϕ(x)⟩ − A(θ)) ,
where ϕ(x) is the vector of sufficient statistics. In general, any inner prod-
uct (Section .) can be used in (.), and for concreteness we will use
the standard dot product here (⟨θ, ϕ(x)⟩ = θ⊤ϕ(x)). Note that the form
of the exponential family is essentially a particular expression of gθ(ϕ(x))
in the Fisher-Neyman theorem (Theorem .).
The factor h(x) can be absorbed into the dot product term by adding
another entry (log h(x)) to the vector of sufficient statistics ϕ(x), and
constraining the corresponding parameter θ = . The term A(θ) is the
normalization constant that ensures that the distribution sums up or inte-
grates to one and is called the log-partition function. A good intuitive no-
log-partition
function
tion of exponential families can be obtained by ignoring these two terms
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
and considering exponential families as distributions of the form
p(x | θ) ∝ exp
 θ⊤ϕ(x)
 .
For this form of parametrization, the parameters θ are called the natural
natural parameters
parameters. At first glance, it seems that exponential families are a mun-
dane transformation by adding the exponential function to the result of a
dot product. However, there are many implications that allow for conve-
nient modeling and efficient computation based on the fact that we can
capture information about data in ϕ(x).
Example . (Gaussian as Exponential Family)

Then by using the definition of the exponential family,
Consider the univariate Gaussian distribution N
 µ, σ
. Let ϕ(x) =
p(x | θ) ∝ exp(θx + θx) .
Setting
σ , −
θ =
and substituting into (.), we obtain
σ − x
p(x | θ) ∝ exp
µx

∝ exp

σ (x − µ)
Therefore, the univariate Gaussian distribution is a member of the expo-

, and natural parame-
nential family with sufficient statistic ϕ(x) =
ters given by θ in (.).
Example . (Bernoulli as Exponential Family)
Recall the Bernoulli distribution from Example .
p(x | µ) = µx( − µ)−x ,
x ∈ {, }.
This can be written in exponential family form
p(x | µ) = exp
log
 µx( − µ)−x
(.a)
= exp [x log µ + ( − x) log( − µ)]
(.b)
= exp [x log µ − x log( − µ) + log( − µ)]
(.c)
= exp
x log
−µ + log( − µ)
(.d)
The last line (.d) can be identified as being in exponential family
form (.) by observing that
h(x) =
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Conjugacy and the Exponential Family
θ = log
−µ
ϕ(x) = x
A(θ) = − log( − µ) = log( + exp(θ)).
The relationship between θ and µ is invertible so that
µ =
+ exp(−θ) .
The relation (.) is used to obtain the right equality of (.).
Remark. The relationship between the original Bernoulli parameter µ and
the natural parameter θ is known as the sigmoid or logistic function. Ob-
sigmoid
serve that µ ∈ (, ) but θ ∈ R, and therefore the sigmoid function
squeezes a real value into the range (, ). This property is useful in ma-
chine learning, for example it is used in logistic regression (Bishop, ,
section ..), as well as as a nonlinear activation functions in neural net-
works (Goodfellow et al., , chapter ).
It is often not obvious how to find the parametric form of the conjugate
distribution of a particular distribution (for example, those in Table .).
Exponential families provide a convenient way to find conjugate pairs of
distributions. Consider the random variable X is a member of the expo-
nential family (.):
p(x | θ) = h(x) exp (⟨θ, ϕ(x)⟩ − A(θ)) .
Every member of the exponential family has a conjugate prior (Brown,
p(θ | γ) = hc(θ) exp
− Ac(γ)

−A(θ)

has dimension dim(θ) + . The sufficient statistics of
where γ =
. By using the knowledge of the general
the conjugate prior are

−A(θ)
form of conjugate priors for exponential families, we can derive functional
forms of conjugate priors corresponding to particular distributions.
Example .
Recall the exponential family form of the Bernoulli distribution (.d)
p(x | µ) = exp

x log
− µ + log( − µ)

© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
The canonical conjugate prior has the form
p(µ | α, β) =
− µ exp

α log
− µ + (β + α) log( − µ) − Ac(γ)

where we defined γ := [α, β + α]⊤ and hc(µ) := µ/( − µ). Equa-
tion (.) then simplifies to
p(µ | α, β) = exp [(α − ) log µ + (β − ) log( − µ) − Ac(α, β)] .
Putting this in non-exponential family form yields
p(µ | α, β) ∝ µα−( − µ)β− ,
which we identify as the Beta distribution (.). In example ., we
assumed that the Beta distribution is the conjugate prior of the Bernoulli
distribution and showed that it was indeed the conjugate prior. In this
example, we derived the form of the Beta distribution by looking at the
canonical conjugate prior of the Bernoulli distribution in exponential fam-
ily form.
As mentioned in the previous section, the main motivation for expo-
nential families is that they have finite-dimensional sufficient statistics.
Additionally, conjugate distributions are easy to write down, and the con-
jugate distributions also come from an exponential family. From an infer-
ence perspective, maximum likelihood estimation behaves nicely because
empirical estimates of sufficient statistics are optimal estimates of the pop-
ulation values of sufficient statistics (recall the mean and covariance of a
Gaussian). From an optimization perspective, the log-likelihood function
is concave, allowing for efficient optimization approaches to be applied
(Chapter ).
. Change of Variables/Inverse Transform
It may seem that there are very many known distributions, but in reality
the set of distributions for which we have names is quite limited. There-
fore, it is often useful to understand how transformed random variables
are distributed. For example, assuming that X is a random variable dis-
tributed according to the univariate normal distribution N
, what is
the distribution of X? Another example, which is quite common in ma-
chine learning, is, given that X and X are univariate standard normal,
what is the distribution of
(X + X)?
One option to work out the distribution of
(X + X) is to calculate
the mean and variance of X and X and then combine them. As we saw
in Section .., we can calculate the mean and variance of resulting ran-
dom variables when we consider affine transformations of random vari-
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Change of Variables/Inverse Transform
ables. However, we may not be able to obtain the functional form of the
distribution under transformations. Furthermore, we may be interested
in nonlinear transformations of random variables for which closed-form
expressions are not readily available.
Remark (Notation). In this section, we will be explicit about random vari-
ables and the values they take. Hence, recall that we use capital letters
X, Y to denote random variables and small letters x, y to denote the val-
ues in the target space T that the random variables take. We will explicitly
write pmfs of discrete random variables X as P(X = x). For continuous
random variables X (Section ..), the pdf is written as f(x) and the cdf
is written as FX(x).
We will look at two approaches for obtaining distributions of transfor-
mations of random variables: a direct approach using the definition of a
cumulative distribution function and a change-of-variable approach that
uses the chain rule of calculus (Section ..). The change-of-variable ap-
Moment generating
functions can also
be used to study
transformations of
random
variables (Casella
and Berger, ,
chapter ).
proach is widely used because it provides a “recipe” for attempting to
compute the resulting distribution due to a transformation. We will ex-
plain the techniques for univariate random variables, and will only briefly
provide the results for the general case of multivariate random variables.
Transformations of discrete random variables can be understood di-
rectly. Suppose that there is a discrete random variable X with pmf P(X =
x) (Section ..), and an invertible function U(x). Consider the trans-
formed random variable Y := U(X), with pmf P(Y = y). Then
P(Y = y) = P(U(X) = y)
transformation of interest
(.a)
= P(X = U −(y))
inverse
(.b)
where we can observe that x = U −(y). Therefore, for discrete random
variables, transformations directly change the individual events (with the
probabilities appropriately transformed).
.. Distribution Function Technique
The distribution function technique goes back to first principles, and uses
the definition of a cdf FX(x) = P(X ⩽ x) and the fact that its differential
is the pdf f(x) (Wasserman, , chapter ). For a random variable X
and a function U, we find the pdf of the random variable Y := U(X) by
. Finding the cdf:
FY (y) = P(Y ⩽ y)
. Differentiating the cdf FY (y) to get the pdf f(y).
f(y) = d
dyFY (y) .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
We also need to keep in mind that the domain of the random variable may
have changed due to the transformation by U.
Example .
Let X be a continuous random variable with probability density function
on  ⩽ x ⩽
f(x) = x .
We are interested in finding the pdf of Y = X.
The function f is an increasing function of x, and therefore the resulting
value of y lies in the interval [, ]. We obtain
FY (y) = P(Y ⩽ y)
definition of cdf
(.a)
= P(X ⩽ y)
transformation of interest
(.b)
= P(X ⩽ y
inverse
(.c)
= FX(y
definition of cdf
(.d)
tdt
cdf as a definite integral
(.e)
Z y
t=
result of integration
(.f)
tt=y
= y
⩽ y ⩽  .
(.g)
Therefore, the cdf of Y is
FY (y) = y
for  ⩽ y ⩽ . To obtain the pdf, we differentiate the cdf
f(y) = d
dyFY (y) =
for  ⩽ y ⩽ .
In Example ., we considered a strictly monotonically increasing func-
tion f(x) = x. This means that we could compute an inverse function.
Functions that have
inverses are called
bijective functions
(Section .).
In general, we require that the function of interest y = U(x) has an in-
verse x = U −(y). A useful result can be obtained by considering the cu-
mulative distribution function FX(x) of a random variable X, and using
it as the transformation U(x). This leads to the following theorem.
Theorem .. [Theorem .. in Casella and Berger ()] Let X be a
continuous random variable with a strictly monotonic cumulative distribu-
tion function FX(x). Then the random variable Y defined as
Y := FX(X)
has a uniform distribution.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Change of Variables/Inverse Transform
Theorem . is known as the probability integral transform, and it is
probability integral
transform
used to derive algorithms for sampling from distributions by transforming
the result of sampling from a uniform random variable (Bishop, ).
The algorithm works by first generating a sample from a uniform distribu-
tion, then transforming it by the inverse cdf (assuming this is available)
to obtain a sample from the desired distribution. The probability integral
transform is also used for hypothesis testing whether a sample comes from
a particular distribution (Lehmann and Romano, ). The idea that the
output of a cdf gives a uniform distribution also forms the basis of copu-
las (Nelsen, ).
.. Change of Variables
The distribution function technique in Section .. is derived from first
principles, based on the definitions of cdfs and using properties of in-
verses, differentiation, and integration. This argument from first principles
relies on two facts:
. We can transform the cdf of Y into an expression that is a cdf of X.
. We can differentiate the cdf to obtain the pdf.
Let us break down the reasoning step by step, with the goal of understand-
ing the more general change-of-variables approach in Theorem ..
Change of variables
in probability relies
on the
change-of-variables
method in
calculus (Tandra,
Remark. The name “change of variables” comes from the idea of chang-
ing the variable of integration when faced with a difficult integral. For
univariate functions, we use the substitution rule of integration,
f(g(x))g′(x)dx =
f(u)du ,
where
u = g(x) .
The derivation of this rule is based on the chain rule of calculus (.) and
by applying twice the fundamental theorem of calculus. The fundamental
theorem of calculus formalizes the fact that integration and differentiation
are somehow “inverses” of each other. An intuitive understanding of the
rule can be obtained by thinking (loosely) about small changes (differen-
tials) to the equation u = g(x), that is by considering ∆u = g′(x)∆x as a
differential of u = g(x). By substituting u = g(x), the argument inside the
integral on the right-hand side of (.) becomes f(g(x)). By pretending
that the term du can be approximated by du ≈ ∆u = g′(x)∆x, and that
dx ≈ ∆x, we obtain (.).
Consider a univariate random variable X, and an invertible function
U, which gives us another random variable Y = U(X). We assume that
random variable X has states x ∈ [a, b]. By the definition of the cdf, we
have
FY (y) = P(Y ⩽ y) .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
We are interested in a function U of the random variable
P(Y ⩽ y) = P(U(X) ⩽ y) ,
where we assume that the function U is invertible. An invertible function
on an interval is either strictly increasing or strictly decreasing. In the case
that U is strictly increasing, then its inverse U − is also strictly increasing.
By applying the inverse U − to the arguments of P(U(X) ⩽ y), we obtain
P(U(X) ⩽ y) = P(U −(U(X)) ⩽ U −(y)) = P(X ⩽ U −(y)) .
The right-most term in (.) is an expression of the cdf of X. Recall the
definition of the cdf in terms of the pdf
f(x)dx .
P(X ⩽ U −(y)) =
Z U −(y)
Now we have an expression of the cdf of Y in terms of x:
f(x)dx .
FY (y) =
Z U −(y)
To obtain the pdf, we differentiate (.) with respect to y:
f(y) = d
dyFy(y) = d
dy
f(x)dx .
Z U −(y)
Note that the integral on the right-hand side is with respect to x, but we
need an integral with respect to y because we are differentiating with
respect to y. In particular, we use (.) to get the substitution
f(U −(y))U −′(y)dy =
f(x)dx
where
x = U −(y) .
Using (.) on the right-hand side of (.) gives us
f(y) = d
dy
fx(U −(y))U −′(y)dy .
Z U −(y)
We then recall that differentiation is a linear operator and we use the
subscript x to remind ourselves that fx(U −(y)) is a function of x and not
y. Invoking the fundamental theorem of calculus again gives us
f(y) = fx(U −(y))
dyU −(y)

Recall that we assumed that U is a strictly increasing function. For decreas-
ing functions, it turns out that we have a negative sign when we follow
the same derivation. We introduce the absolute value of the differential to
have the same expression for both increasing and decreasing U:
f(y) = fx(U −(y))

dyU −(y)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Change of Variables/Inverse Transform
dyU −(y)
in
change-of-variable
technique
(.) measures how much a unit volume changes when applying U
(see also the definition of the Jacobian in Section .).
This is called the change-of-variable technique. The term
Remark. In comparison to the discrete case in (.b), we have an addi-
tional factor
dyU −(y)
. The continuous case requires more care because
P(Y = y) =  for all y. The probability density function f(y) does not
have a description as a probability of an event involving y.
So far in this section, we have been studying univariate change of vari-
ables. The case for multivariate random variables is analogous, but com-
plicated by fact that the absolute value cannot be used for multivariate
functions. Instead, we use the determinant of the Jacobian matrix. Recall
from (.) that the Jacobian is a matrix of partial derivatives, and that
the existence of a nonzero determinant shows that we can invert the Ja-
cobian. Recall the discussion in Section . that the determinant arises
because our differentials (cubes of volume) are transformed into paral-
lelepipeds by the Jacobian. Let us summarize preceding the discussion in
the following theorem, which gives us a recipe for multivariate change of
variables.
Theorem .. [Theorem . in Billingsley ()] Let f(x) be the value
of the probability density of the multivariate continuous random variable X.
If the vector-valued function y = U(x) is differentiable and invertible for
all values within the domain of x, then for corresponding values of y, the
probability density of Y = U(X) is given by
f(y) = fx(U −(y))
det
∂yU −(y)
The theorem looks intimidating at first glance, but the key point is that
a change of variable of a multivariate random variable follows the pro-
cedure of the univariate change of variable. First we need to work out
the inverse transform, and substitute that into the density of x. Then we
calculate the determinant of the Jacobian and multiply the result. The
following example illustrates the case of a bivariate random variable.
Example .
and proba-
Consider a bivariate random variable X with states x =
bility density function
π exp
⊤ x
We use the change-of-variable technique from Theorem . to derive the
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
effect of a linear transformation (Section .) of the random variable.
Consider a matrix A ∈ R× defined as
A =

We are interested in finding the probability density function of the trans-
formed bivariate random variable Y with states y = Ax.
Recall that for change of variables we require the inverse transformation
of x as a function of y. Since we consider linear transformations, the
inverse transformation is given by the matrix inverse (see Section ..).
For  ×  matrices, we can explicitly write out the formula, given by
= A−
−b
−c
ad − bc
Observe that ad − bc is the determinant (Section .) of A. The corre-
sponding probability density function is given by
f(x) = f(A−y) =
π exp

y⊤A−⊤A−y

The partial derivative of a matrix times a vector with respect to the vector
is the matrix itself (Section .), and therefore
∂yA−y = A− .
Recall from Section . that the determinant of the inverse is the inverse
of the determinant so that the determinant of the Jacobian matrix is
det
∂yA−y

ad − bc .
We are now able to apply the change-of-variable formula from Theo-
rem . by multiplying (.) with (.), which yields
f(y) = f(x)
det
∂yA−y

(.a)
π exp

y⊤A−⊤A−y

|ad − bc|−.
(.b)
While Example . is based on a bivariate random variable, which al-
lows us to easily compute the matrix inverse, the preceding relation holds
for higher dimensions.
Remark. We saw in Section . that the density f(x) in (.) is actually
the standard Gaussian distribution, and the transformed density f(y) is a
bivariate Gaussian with covariance Σ = AA⊤.
We will use the ideas in this chapter to describe probabilistic modeling
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Further Reading
in Section ., as well as introduce a graphical language in Section .. We
will see direct machine learning applications of these ideas in Chapters
and .
. Further Reading
This chapter is rather terse at times. Grinstead and Snell () and
Walpole et al. () provide more relaxed presentations that are suit-
able for self-study. Readers interested in more philosophical aspects of
probability should consider Hacking (), whereas an approach that
is more related to software engineering is presented by Downey ().
An overview of exponential families can be found in Barndorff-Nielsen
(). We will see more about how to use probability distributions to
model machine learning tasks in Chapter . Ironically, the recent surge
in interest in neural networks has resulted in a broader appreciation of
probabilistic models. For example, the idea of normalizing flows (Jimenez
Rezende and Mohamed, ) relies on change of variables for transform-
ing random variables. An overview of methods for variational inference as
applied to neural networks is described in chapters  to  of the book
by Goodfellow et al. ().
We side stepped a large part of the difficulty in continuous random vari-
ables by avoiding measure theoretic questions (Billingsley, ; Pollard,
), and by assuming without construction that we have real numbers,
and ways of defining sets on real numbers as well as their appropriate fre-
quency of occurrence. These details do matter, for example, in the specifi-
cation of conditional probability p(y | x) for continuous random variables
x, y (Proschan and Presnell, ). The lazy notation hides the fact that
we want to specify that X = x (which is a set of measure zero). Fur-
thermore, we are interested in the probability density function of y. A
more precise notation would have to say Ey[f(y) | σ(x)], where we take
the expectation over y of a test function f conditioned on the σ-algebra of
x. A more technical audience interested in the details of probability the-
ory have many options (Jaynes, ; MacKay, ; Jacod and Protter,
; Grimmett and Welsh, ), including some very technical discus-
sions (Shiryayev, ; Lehmann and Casella, ; Dudley, ; Bickel
and Doksum, ; C¸inlar, ). An alternative way to approach proba-
bility is to start with the concept of expectation, and “work backward” to
derive the necessary properties of a probability space (Whittle, ). As
machine learning allows us to model more intricate distributions on ever
more complex types of data, a developer of probabilistic machine learn-
ing models would have to understand these more technical aspects. Ma-
chine learning texts with a probabilistic modeling focus include the books
by MacKay (); Bishop (); Rasmussen and Williams (); Bar-
ber (); Murphy ().
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
Exercises
Consider the following bivariate distribution p(x, y) of two discrete random
variables X and Y .
y . . .
. .
. . . .
Compute:
a. The marginal distributions p(x) and p(y).
b. The conditional distributions p(x|Y = y) and p(y|X = x).
Consider a mixture of two Gaussian distributions (illustrated in Figure .),
. N

+ . N

a. Compute the marginal distributions for each dimension.
b. Compute the mean, mode and median for each marginal distribution.
c. Compute the mean and mode for the two-dimensional distribution.
You have written a computer program that sometimes compiles and some-
times not (code does not change). You decide to model the apparent stochas-
ticity (success vs. no success) x of the compiler using a Bernoulli distribution
with parameter µ:
p(x | µ) = µx( − µ)−x ,
x ∈ {, } .
Choose a conjugate prior for the Bernoulli likelihood and compute the pos-
terior distribution p(µ | x, . . . , xN).
There are two bags. The first bag contains four mangos and two apples; the
second bag contains four mangos and four apples.
We also have a biased coin, which shows “heads” with probability . and
“tails” with probability .. If the coin shows “heads”. we pick a fruit at
random from bag ; otherwise we pick a fruit at random from bag .
Your friend flips the coin (you cannot see the result), picks a fruit at random
from the corresponding bag, and presents you a mango.
What is the probability that the mango was picked from bag ?
Hint: Use Bayes’ theorem.
Consider the time-series model
xt+ = Axt + w ,
w ∼ N 
, Q
yt = Cxt + v ,
v ∼ N 
, R
where w, v are i.i.d. Gaussian noise variables. Further, assume that p(x) =
N 
µ, Σ
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Exercises
a. What is the form of p(x, x, . . . , xT )? Justify your answer (you do not
have to explicitly compute the joint distribution).
b. Assume that p(xt | y, . . . , yt) = N 
µt, Σt
. Compute p(xt+ | y, . . . , yt).
. Compute p(xt+, yt+ | y, . . . , yt).
. At time t+, we observe the value yt+ = ˆy. Compute the conditional
distribution p(xt+ | y, . . . , yt+).
Prove the relationship in (.), which relates the standard definition of the
variance to the raw-score expression for the variance.
Prove the relationship in (.), which relates the pairwise difference be-
tween examples in a dataset with the raw-score expression for the variance.
Express the Bernoulli distribution in the natural parameter form of the ex-
ponential family, see (.).
Express the Binomial distribution as an exponential family distribution. Also
express the Beta distribution is an exponential family distribution. Show that
the product of the Beta and the Binomial distribution is also a member of
the exponential family.
. Derive the relationship in Section .. in two ways:
a. By completing the square
b. By expressing the Gaussian in its exponential family form
The product of two Gaussians N 
x | a, A
N 
x | b, B is an unnormalized
Gaussian distribution c N 
x | c, C with
C = (A− + B−)−
c = C(A−a + B−b)
c = (π)− D
| A + B | −
(a − b)⊤(A + B)−(a − b)
exp  
Note that the normalizing constant c itself can be considered a (normalized)
Gaussian distribution either in a or in b with an “inflated” covariance matrix
A + B, i.e., c = N 
a | b, A + B
= N 
b | a, A + B.
. Iterated Expectations.
Consider two random variables x, y with joint distribution p(x, y). Show that
EX[x] = EY
EX[x | y]
Here, EX[x | y] denotes the expected value of x under the conditional distri-
bution p(x | y).
. Manipulation of Gaussian Random Variables.
Consider a Gaussian random variable x ∼ N 
x | µx, Σx
, where x ∈ RD.
Furthermore, we have
y = Ax + b + w ,
where y ∈ RE, A ∈ RE×D, b ∈ RE, and w ∼ N 
w | , Q is indepen-
dent Gaussian noise. “Independent” implies that x and w are independent
random variables and that Q is diagonal.
a. Write down the likelihood p(y | x).
b. The distribution p(y) = R
p(y | x)p(x)dx is Gaussian. Compute the mean
µy and the covariance Σy. Derive your result in detail.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Probability and Distributions
c. The random variable y is being transformed according to the measure-
ment mapping
z = Cy + v ,
where z ∈ RF , C ∈ RF ×E, and v ∼ N 
v | , R is independent Gaus-
sian (measurement) noise.
Write down p(z | y).
Compute p(z), i.e., the mean µz and the covariance Σz. Derive your
result in detail.
d. Now, a value ˆy is measured. Compute the posterior distribution p(x | ˆy).
Hint for solution: This posterior is also Gaussian, i.e., we need to de-
termine only its mean and covariance matrix. Start by explicitly com-
puting the joint Gaussian p(x, y). This also requires us to compute the
cross-covariances Covx,y[x, y] and Covy,x[y, x]. Then apply the rules
for Gaussian conditioning.
. Probability Integral Transformation
Given a continuous random variable X, with cdf FX(x), show that the ran-
dom variable Y := FX(X) is uniformly distributed (Theorem .).
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Continuous Optimization
Since machine learning algorithms are implemented on a computer, the
mathematical formulations are expressed as numerical optimization meth-
ods. This chapter describes the basic numerical methods for training ma-
chine learning models. Training a machine learning model often boils
down to finding a good set of parameters. The notion of “good” is de-
termined by the objective function or the probabilistic model, which we
will see examples of in the second part of this book. Given an objective
function, finding the best value is done using optimization algorithms.
Since we consider
data and models in
RD, the
optimization
problems we face
are continuous
optimization
problems, as
opposed to
combinatorial
optimization
problems for
discrete variables.
ℓ(x) = x + x + x − x +  ,
we obtain the corresponding gradient as
This chapter covers two main branches of continuous optimization (Fig-
ure .): unconstrained and constrained optimization. We will assume in
this chapter that our objective function is differentiable (see Chapter ),
hence we have access to a gradient at each location in the space to help us
find the optimum value. By convention, most objective functions in ma-
chine learning are intended to be minimized, that is, the best value is the
minimum value. Intuitively finding the best value is like finding the val-
leys of the objective function, and the gradients point us uphill. The idea is
to move downhill (opposite to the gradient) and hope to find the deepest
point. For unconstrained optimization, this is the only concept we need,
but there are several design choices, which we discuss in Section .. For
constrained optimization, we need to introduce other concepts to man-
age the constraints (Section .). We will also introduce a special class
of problems (convex optimization problems in Section .) where we can
make statements about reaching the global optimum.
Consider the function in Figure .. The function has a global minimum
global minimum
around x = −., with a function value of approximately −. Since
the function is “smooth,” the gradients can be used to help find the min-
imum by indicating whether we should take a step to the right or left.
This assumes that we are in the correct bowl, as there exists another local
local minimum
minimum around x = .. Recall that we can solve for all the stationary
points of a function by calculating its derivative and setting it to zero. For
Stationary points
are the real roots of
the derivative, that
is, points that have
zero gradient.
dℓ(x)
dx
= x + x + x −  .
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

Continuous Optimization
Stepsize
Continuous
optimization
Momentum
Gradient descent
Unconstrained
optimization
Figure . A mind
map of the concepts
related to
optimization, as
presented in this
chapter. There are
two main ideas:
gradient descent
and convex
optimization.
Stochastic
gradient
descent
Chapter
Constrained
optimization
Dimension reduc.
Chapter
Lagrange
multipliers
Density estimation
Convex
Linear
programming
Convex optimization
& duality
Convex conjugate
Quadratic
programming
Chapter
Classification
Since this is a cubic equation, it has in general three solutions when set to
zero. In the example, two of them are minimums and one is a maximum
(around x = −.). To check whether a stationary point is a minimum
or maximum, we need to take the derivative a second time and check
whether the second derivative is positive or negative at the stationary
point. In our case, the second derivative is
dℓ(x)
dx
= x + x +  .
By substituting our visually estimated values of x = −., −., ., we
will observe that as expected the middle point is a maximum

dℓ(x)
dx
and the other two stationary points are minimums.
Note that we have avoided analytically solving for values of x in the
previous discussion, although for low-order polynomials such as the pre-
ceding we could do so. In general, we are unable to find analytic solu-
tions, and hence we need to start at some value, say x = −, and follow
the negative gradient. The negative gradient indicates that we should go
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Optimization Using Gradient Descent
x + x + x − x +
Figure . Example
objective function.
Negative gradients
are indicated by
arrows, and the
global minimum is
indicated by the
dashed blue line.
Objective
Value of parameter
right, but not how far (this is called the step-size). Furthermore, if we
According to the
Abel–Ruffini
theorem, there is in
general no algebraic
solution for
polynomials of
degree  or more
(Abel, ).
had started at the right side (e.g., x = ) the negative gradient would
have led us to the wrong minimum. Figure . illustrates the fact that for
x > −, the negative gradient points toward the minimum on the right of
the figure, which has a larger objective value.
In Section ., we will learn about a class of functions, called convex
functions, that do not exhibit this tricky dependency on the starting point
of the optimization algorithm. For convex functions, all local minimums
are global minimum. It turns out that many machine learning objective
For convex functions
all local minima are
global minimum.
functions are designed such that they are convex, and we will see an ex-
ample in Chapter .
The discussion in this chapter so far was about a one-dimensional func-
tion, where we are able to visualize the ideas of gradients, descent direc-
tions, and optimal values. In the rest of this chapter we develop the same
ideas in high dimensions. Unfortunately, we can only visualize the con-
cepts in one dimension, but some concepts do not generalize directly to
higher dimensions, therefore some care needs to be taken when reading.
. Optimization Using Gradient Descent
We now consider the problem of solving for the minimum of a real-valued
function
min
x f(x) ,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
where f : Rd → R is an objective function that captures the machine
learning problem at hand. We assume that our function f is differentiable,
and we are unable to analytically find a solution in closed form.
Gradient descent is a first-order optimization algorithm. To find a local
minimum of a function using gradient descent, one takes steps propor-
tional to the negative of the gradient of the function at the current point.
Recall from Section . that the gradient points in the direction of the
We use the
convention of row
vectors for
gradients.
steepest ascent. Another useful intuition is to consider the set of lines
where the function is at a certain value (f(x) = c for some value c ∈ R),
which are known as the contour lines. The gradient points in a direction
that is orthogonal to the contour lines of the function we wish to optimize.
Let us consider multivariate functions. Imagine a surface (described by
the function f(x)) with a ball starting at a particular location x. When
the ball is released, it will move downhill in the direction of steepest de-
scent. Gradient descent exploits the fact that f(x) decreases fastest if one
moves from x in the direction of the negative gradient −((∇f)(x))⊤ of
f at x. We assume in this book that the functions are differentiable, and
refer the reader to more general settings in Section .. Then, if
x = x − γ((∇f)(x))⊤
for a small step-size γ ⩾ , then f(x) ⩽ f(x). Note that we use the
transpose for the gradient since otherwise the dimensions will not work
out.
This observation allows us to define a simple gradient descent algo-
rithm: If we want to find a local optimum f(x∗) of a function f : Rn →
R, x → f(x), we start with an initial guess x of the parameters we wish
to optimize and then iterate according to
xi+ = xi − γi((∇f)(xi))⊤ .
For suitable step-size γi, the sequence f(x) ⩾ f(x) ⩾ . . . converges to
a local minimum.
Example .
Consider a quadratic function in two dimensions
⊤ x
with gradient

∇f
Starting at the initial location x = [−, −]⊤, we iteratively apply (.)
to obtain a sequence of estimates that converge to the minimum value
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Optimization Using Gradient Descent
Figure . Gradient
descent on a
two-dimensional
quadratic surface
(shown as a
heatmap). See
Example . for a
description.
(illustrated in Figure .). We can see (both from the figure and by plug-
ging x into (.) with γ = .) that the negative gradient at x points
north and east, leading to x = [−., .]⊤. Repeating that argument
gives us x = [−., −.]⊤, and so on.
Remark. Gradient descent can be relatively slow close to the minimum:
Its asymptotic rate of convergence is inferior to many other methods. Us-
ing the ball rolling down the hill analogy, when the surface is a long, thin
valley, the problem is poorly conditioned (Trefethen and Bau III, ).
For poorly conditioned convex problems, gradient descent increasingly
“zigzags” as the gradients point nearly orthogonally to the shortest di-
rection to a minimum point; see Figure ..
.. Step-size
As mentioned earlier, choosing a good step-size is important in gradient
descent. If the step-size is too small, gradient descent can be slow. If the
The step-size is also
called the learning
rate.
step-size is chosen too large, gradient descent can overshoot, fail to con-
verge, or even diverge. We will discuss the use of momentum in the next
section. It is a method that smoothes out erratic behavior of gradient up-
dates and dampens oscillations.
Adaptive gradient methods rescale the step-size at each iteration, de-
pending on local properties of the function. There are two simple heuris-
tics (Toussaint, ):
When the function value increases after a gradient step, the step-size
was too large. Undo the step and decrease the step-size.
When the function value decreases the step could have been larger. Try
to increase the step-size.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
Although the “undo” step seems to be a waste of resources, using this
heuristic guarantees monotonic convergence.
Example . (Solving a Linear Equation System)
When we solve linear equations of the form Ax = b, in practice we solve
Ax−b =  approximately by finding x∗ that minimizes the squared error
∥Ax − b∥ = (Ax − b)⊤(Ax − b)
if we use the Euclidean norm. The gradient of (.) with respect to x is
∇x = (Ax − b)⊤A .
We can use this gradient directly in a gradient descent algorithm. How-
ever, for this particular special case, it turns out that there is an analytic
solution, which can be found by setting the gradient to zero. We will see
more on solving squared error problems in Chapter .
Remark. When applied to the solution of linear systems of equations Ax =
b, gradient descent may converge slowly. The speed of convergence of gra-
dient descent is dependent on the condition number κ = σ(A)max
σ(A)min , which
condition number
is the ratio of the maximum to the minimum singular value (Section .)
of A. The condition number essentially measures the ratio of the most
curved direction versus the least curved direction, which corresponds to
our imagery that poorly conditioned problems are long, thin valleys: They
are very curved in one direction, but very flat in the other. Instead of di-
rectly solving Ax = b, one could instead solve P −(Ax − b) = , where
P is called the preconditioner. The goal is to design P − such that P −A
preconditioner
has a better condition number, but at the same time P − is easy to com-
pute. For further information on gradient descent, preconditioning, and
convergence we refer to Boyd and Vandenberghe (, chapter ).
.. Gradient Descent With Momentum
As illustrated in Figure ., the convergence of gradient descent may be
very slow if the curvature of the optimization surface is such that there
are regions that are poorly scaled. The curvature is such that the gradient
descent steps hops between the walls of the valley and approaches the
optimum in small steps. The proposed tweak to improve convergence is
to give gradient descent some memory.
Goh () wrote
an intuitive blog
post on gradient
descent with
momentum.
Gradient descent with momentum (Rumelhart et al., ) is a method
that introduces an additional term to remember what happened in the
previous iteration. This memory dampens oscillations and smoothes out
the gradient updates. Continuing the ball analogy, the momentum term
emulates the phenomenon of a heavy ball that is reluctant to change di-
rections. The idea is to have a gradient update with memory to implement
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Optimization Using Gradient Descent
a moving average. The momentum-based method remembers the update
∆xi at each iteration i and determines the next update as a linear combi-
nation of the current and previous gradients
xi+ = xi − γi((∇f)(xi))⊤ + α∆xi
∆xi = xi − xi− = α∆xi− − γi−((∇f)(xi−))⊤ ,
where α ∈ [, ]. Sometimes we will only know the gradient approxi-
mately. In such cases, the momentum term is useful since it averages out
different noisy estimates of the gradient. One particularly useful way to
obtain an approximate gradient is by using a stochastic approximation,
which we discuss next.
.. Stochastic Gradient Descent
Computing the gradient can be very time consuming. However, often it is
possible to find a “cheap” approximation of the gradient. Approximating
the gradient is still useful as long as it points in roughly the same direction
as the true gradient.
stochastic gradient
descent
Stochastic gradient descent (often shortened as SGD) is a stochastic ap-
proximation of the gradient descent method for minimizing an objective
function that is written as a sum of differentiable functions. The word
stochastic here refers to the fact that we acknowledge that we do not
know the gradient precisely, but instead only know a noisy approxima-
tion to it. By constraining the probability distribution of the approximate
gradients, we can still theoretically guarantee that SGD will converge.
In machine learning, given n = , . . . , N data points, we often consider
objective functions that are the sum of the losses Ln incurred by each
example n. In mathematical notation, we have the form
L(θ) =
n=
Ln(θ) ,
where θ is the vector of parameters of interest, i.e., we want to find θ that
minimizes L. An example from regression (Chapter ) is the negative log-
likelihood, which is expressed as a sum over log-likelihoods of individual
examples so that
L(θ) = −
n=
log p(yn|xn, θ) ,
where xn ∈ RD are the training inputs, yn are the training targets, and θ
are the parameters of the regression model.
Standard gradient descent, as introduced previously, is a “batch” opti-
mization method, i.e., optimization is performed using the full training set
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
by updating the vector of parameters according to
θi+ = θi − γi(∇L(θi))⊤ = θi − γi
n=
(∇Ln(θi))⊤
for a suitable step-size parameter γi. Evaluating the sum gradient may re-
quire expensive evaluations of the gradients from all individual functions
Ln. When the training set is enormous and/or no simple formulas exist,
evaluating the sums of gradients becomes very expensive.
Consider the term PN
n=(∇Ln(θi)) in (.). We can reduce the amount
of computation by taking a sum over a smaller set of Ln. In contrast to
batch gradient descent, which uses all Ln for n = , . . . , N, we randomly
choose a subset of Ln for mini-batch gradient descent. In the extreme
case, we randomly select only a single Ln to estimate the gradient. The
key insight about why taking a subset of data is sensible is to realize that
for gradient descent to converge, we only require that the gradient is an
unbiased estimate of the true gradient. In fact the term PN
n=(∇Ln(θi))
in (.) is an empirical estimate of the expected value (Section ..) of
the gradient. Therefore, any other unbiased empirical estimate of the ex-
pected value, for example using any subsample of the data, would suffice
for convergence of gradient descent.
Remark. When the learning rate decreases at an appropriate rate, and sub-
ject to relatively mild assumptions, stochastic gradient descent converges
almost surely to local minimum (Bottou, ).
Why should one consider using an approximate gradient? A major rea-
son is practical implementation constraints, such as the size of central
processing unit (CPU)/graphics processing unit (GPU) memory or limits
on computational time. We can think of the size of the subset used to esti-
mate the gradient in the same way that we thought of the size of a sample
when estimating empirical means (Section ..). Large mini-batch sizes
will provide accurate estimates of the gradient, reducing the variance in
the parameter update. Furthermore, large mini-batches take advantage of
highly optimized matrix operations in vectorized implementations of the
cost and gradient. The reduction in variance leads to more stable conver-
gence, but each gradient calculation will be more expensive.
In contrast, small mini-batches are quick to estimate. If we keep the
mini-batch size small, the noise in our gradient estimate will allow us to
get out of some bad local optima, which we may otherwise get stuck in.
In machine learning, optimization methods are used for training by min-
imizing an objective function on the training data, but the overall goal
is to improve generalization performance (Chapter ). Since the goal in
machine learning does not necessarily need a precise estimate of the min-
imum of the objective function, approximate gradients using mini-batch
approaches have been widely used. Stochastic gradient descent is very
effective in large-scale machine learning problems (Bottou et al., ),
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Constrained Optimization and Lagrange Multipliers
Figure .
Illustration of
constrained
optimization. The
unconstrained
problem (indicated
by the contour
lines) has a
minimum on the
right side (indicated
by the circle). The
box constraints
(− ⩽ x ⩽  and
− ⩽ y ⩽ ) require
that the optimal
solution is within
the box, resulting in
an optimal value
indicated by the
star.
such as training deep neural networks on millions of images (Dean et al.,
), topic models (Hoffman et al., ), reinforcement learning (Mnih
et al., ), or training of large-scale Gaussian process models (Hensman
et al., ; Gal et al., ).
. Constrained Optimization and Lagrange Multipliers
In the previous section, we considered the problem of solving for the min-
imum of a function
min
x f(x) ,
where f : RD → R.
In this section, we have additional constraints. That is, for real-valued
functions gi : RD → R for i = , . . . , m, we consider the constrained
optimization problem (see Figure . for an illustration)
min
f(x)
subject to
gi(x) ⩽
for all
i = , . . . , m .
It is worth pointing out that the functions f and gi could be non-convex
in general, and we will consider the convex case in the next section.
One obvious, but not very practical, way of converting the constrained
problem (.) into an unconstrained one is to use an indicator function
J(x) = f(x) +
i=
(gi(x)) ,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
where (z) is an infinite step function
(z) =
if z ⩽
otherwise .
This gives infinite penalty if the constraint is not satisfied, and hence
would provide the same solution. However, this infinite step function is
equally difficult to optimize. We can overcome this difficulty by introduc-
ing Lagrange multipliers. The idea of Lagrange multipliers is to replace the
Lagrange multiplier
step function with a linear function.
We associate to problem (.) the Lagrangian by introducing the La-
Lagrangian
grange multipliers λi ⩾  corresponding to each inequality constraint re-
spectively (Boyd and Vandenberghe, , chapter ) so that
L(x, λ) = f(x) +
i=
λigi(x)
(.a)
= f(x) + λ⊤g(x) ,
(.b)
where in the last line we have concatenated all constraints gi(x) into a
vector g(x), and all the Lagrange multipliers into a vector λ ∈ Rm.
We now introduce the idea of Lagrangian duality. In general, duality
in optimization is the idea of converting an optimization problem in one
set of variables x (called the primal variables), into another optimization
problem in a different set of variables λ (called the dual variables). We
introduce two different approaches to duality: In this section, we discuss
Lagrangian duality; in Section .., we discuss Legendre-Fenchel duality.
Definition .. The problem in (.)
min
f(x)
subject to
gi(x) ⩽
for all
i = , . . . , m
is known as the primal problem, corresponding to the primal variables x.
primal problem
The associated Lagrangian dual problem is given by
Lagrangian dual
problem
max
λ∈Rm
D(λ)
subject to
λ ⩾  ,
where λ are the dual variables and D(λ) = minx∈Rd L(x, λ).
Remark. In the discussion of Definition ., we use two concepts that are
also of independent interest (Boyd and Vandenberghe, ).
First is the minimax inequality, which says that for any function with
minimax inequality
two arguments φ(x, y), the maximin is less than the minimax, i.e.,
max
min
x φ(x, y) ⩽ min
x max
φ(x, y) .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Constrained Optimization and Lagrange Multipliers
This inequality can be proved by considering the inequality
For all x, y
min
x φ(x, y) ⩽ max
φ(x, y) .
Note that taking the maximum over y of the left-hand side of (.) main-
tains the inequality since the inequality is true for all y. Similarly, we can
take the minimum over x of the right-hand side of (.) to obtain (.).
The second concept is weak duality, which uses (.) to show that
weak duality
primal values are always greater than or equal to dual values. This is de-
scribed in more detail in (.).
Recall that the difference between J(x) in (.) and the Lagrangian
in (.b) is that we have relaxed the indicator function to a linear func-
tion. Therefore, when λ ⩾ , the Lagrangian L(x, λ) is a lower bound of
J(x). Hence, the maximum of L(x, λ) with respect to λ is
J(x) = max
λ⩾ L(x, λ) .
Recall that the original problem was minimizing J(x),
min
x∈Rd max
λ⩾ L(x, λ) .
By the minimax inequality (.), it follows that swapping the order of
the minimum and maximum results in a smaller value, i.e.,
min
x∈Rd max
λ⩾ L(x, λ) ⩾ max
λ⩾ min
x∈Rd L(x, λ) .
This is also known as weak duality. Note that the inner part of the right-
weak duality
hand side is the dual objective function D(λ) and the definition follows.
In contrast to the original optimization problem, which has constraints,
minx∈Rd L(x, λ) is an unconstrained optimization problem for a given
value of λ. If solving minx∈Rd L(x, λ) is easy, then the overall problem is
easy to solve. We can see this by observing from (.b) that L(x, λ) is
affine with respect to λ. Therefore minx∈Rd L(x, λ) is a pointwise min-
imum of affine functions of λ, and hence D(λ) is concave even though
f() and gi() may be nonconvex. The outer problem, maximization over
λ, is the maximum of a concave function and can be efficiently computed.
Assuming f() and gi() are differentiable, we find the Lagrange dual
problem by differentiating the Lagrangian with respect to x, setting the
differential to zero, and solving for the optimal value. We will discuss two
concrete examples in Sections .. and .., where f() and gi() are
convex.
Remark (Equality Constraints). Consider (.) with additional equality
constraints
min
f(x)
subject to
gi(x) ⩽
for all
i = , . . . , m
hj(x) =
for all
j = , . . . , n .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
We can model equality constraints by replacing them with two inequality
constraints. That is for each equality constraint hj(x) =  we equivalently
replace it by two constraints hj(x) ⩽  and hj(x) ⩾ . It turns out that
the resulting Lagrange multipliers are then unconstrained.
Therefore, we constrain the Lagrange multipliers corresponding to the
inequality constraints in (.) to be non-negative, and leave the La-
grange multipliers corresponding to the equality constraints unconstrained.
. Convex Optimization
We focus our attention of a particularly useful class of optimization prob-
lems, where we can guarantee global optimality. When f() is a convex
function, and when the constraints involving g() and h() are convex sets,
this is called a convex optimization problem. In this setting, we have strong
convex optimization
problem
strong duality
duality: The optimal solution of the dual problem is the same as the opti-
mal solution of the primal problem. The distinction between convex func-
tions and convex sets are often not strictly presented in machine learning
literature, but one can often infer the implied meaning from context.
Definition .. A set C is a convex set if for any x, y ∈ C and for any scalar
convex set
θ with  ⩽ θ ⩽ , we have
θx + ( − θ)y ∈ C .
Figure . Example
of a convex set.
Convex sets are sets such that a straight line connecting any two ele-
ments of the set lie inside the set. Figures . and . illustrate convex
and nonconvex sets, respectively.
Convex functions are functions such that a straight line between any
two points of the function lie above the function. Figure . shows a non-
convex function, and Figure . shows a convex function. Another convex
function is shown in Figure ..
Figure . Example
of a nonconvex set.
Definition .. Let function f : RD → R be a function whose domain is a
convex set. The function f is a convex function if for all x, y in the domain
of f, and for any scalar θ with  ⩽ θ ⩽ , we have
f(θx + ( − θ)y) ⩽ θf(x) + ( − θ)f(y) .
Remark. A concave function is the negative of a convex function.
convex function
concave function
The constraints involving g() and h() in (.) truncate functions at a
scalar value, resulting in sets. Another relation between convex functions
and convex sets is to consider the set obtained by “filling in” a convex
function. A convex function is a bowl-like object, and we imagine pouring
water into it to fill it up. This resulting filled-in set, called the epigraph of
epigraph
the convex function, is a convex set.
If a function f : Rn → R is differentiable, we can specify convexity in
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Convex Optimization
Figure . Example
of a convex
function.
y = x − x +
terms of its gradient ∇xf(x) (Section .). A function f(x) is convex if
and only if for any two points x, y it holds that
f(y) ⩾ f(x) + ∇xf(x)⊤(y − x) .
If we further know that a function f(x) is twice differentiable, that is, the
Hessian (.) exists for all values in the domain of x, then the function
f(x) is convex if and only if ∇
xf(x) is positive semidefinite (Boyd and
Vandenberghe, ).
Example .
The negative entropy f(x) = x log x is convex for x > . A visualization
of the function is shown in Figure ., and we can see that the function is
convex. To illustrate the previous definitions of convexity, let us check the
calculations for two points x =  and x = . Note that to prove convexity
of f(x) we would need to check for all points x ∈ R.
Recall Definition .. Consider a point midway between the two points
(that is θ = .); then the left-hand side is f(.   + .  ) =  log  ≈
.. The right-hand side is .( log ) + .( log ) =  +  = . And
therefore the definition is satisfied.
Since f(x) is differentiable, we can alternatively use (.). Calculating
the derivative of f(x), we obtain
∇x(x log x) =   log x + x
x loge  = log x +
loge  .
Using the same two test points x =  and x = , the left-hand side of
(.) is given by f() = . The right-hand side is
f(x) + ∇⊤
x(y − x) = f() + ∇f()  ( − )
(.a)
=  + ( +
loge )   ≈ . .
(.b)
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
x log x
tangent at x =
Figure . The
negative entropy
function (which is
convex) and its
tangent at x = .
f(x)
We can check that a function or set is convex from first principles by
recalling the definitions. In practice, we often rely on operations that pre-
serve convexity to check that a particular function or set is convex. Al-
though the details are vastly different, this is again the idea of closure
that we introduced in Chapter  for vector spaces.
Example .
A nonnegative weighted sum of convex functions is convex. Observe that
if f is a convex function, and α ⩾  is a nonnegative scalar, then the
function αf is convex. We can see this by multiplying α to both sides of the
equation in Definition ., and recalling that multiplying a nonnegative
number does not change the inequality.
If f and f are convex functions, then we have by the definition
f(θx + ( − θ)y) ⩽ θf(x) + ( − θ)f(y)
f(θx + ( − θ)y) ⩽ θf(x) + ( − θ)f(y) .
Summing up both sides gives us
f(θx + ( − θ)y) + f(θx + ( − θ)y)
⩽ θf(x) + ( − θ)f(y) + θf(x) + ( − θ)f(y) ,
where the right-hand side can be rearranged to
θ(f(x) + f(x)) + ( − θ)(f(y) + f(y)) ,
completing the proof that the sum of convex functions is convex.
Combining the preceding two facts, we see that αf(x) + βf(x) is
convex for α, β ⩾ . This closure property can be extended using a sim-
ilar argument for nonnegative weighted sums of more than two convex
functions.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Convex Optimization
Remark. The inequality in (.) is sometimes called Jensen’s inequality.
Jensen’s inequality
In fact, a whole class of inequalities for taking nonnegative weighted sums
of convex functions are all called Jensen’s inequality.
In summary, a constrained optimization problem is called a convex opti-
convex optimization
problem
mization problem if
min
x f(x)
subject to gi(x) ⩽
for all
i = , . . . , m
hj(x) =
for all
j = , . . . , n ,
where all functions f(x) and gi(x) are convex functions, and all hj(x) =
are convex sets. In the following, we will describe two classes of convex
optimization problems that are widely used and well understood.
.. Linear Programming
Consider the special case when all the preceding functions are linear, i.e.,
min
x∈Rd
c⊤x
subject to
Ax ⩽ b ,
where A ∈ Rm×d and b ∈ Rm. This is known as a linear program. It has d
linear program
variables and m linear constraints. The Lagrangian is given by
L(x, λ) = c⊤x + λ⊤(Ax − b) ,
Linear programs are
one of the most
widely used
approaches in
industry.
where λ ∈ Rm is the vector of non-negative Lagrange multipliers. Rear-
ranging the terms corresponding to x yields
L(x, λ) = (c + A⊤λ)⊤x − λ⊤b .
Taking the derivative of L(x, λ) with respect to x and setting it to zero
gives us
c + A⊤λ =  .
Therefore, the dual Lagrangian is D(λ) = −λ⊤b. Recall we would like
to maximize D(λ). In addition to the constraint due to the derivative of
L(x, λ) being zero, we also have the fact that λ ⩾ , resulting in the
following dual optimization problem
It is convention to
minimize the primal
and maximize the
dual.
max
λ∈Rm
− b⊤λ
subject to
c + A⊤λ =
λ ⩾  .
This is also a linear program, but with m variables. We have the choice
of solving the primal (.) or the dual (.) program depending on
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
whether m or d is larger. Recall that d is the number of variables and m is
the number of constraints in the primal linear program.
Example . (Linear Program)
Consider the linear program
min
x∈R
⊤ x
subject to

with two variables. This program is also shown in Figure .. The objective
function is linear, resulting in linear contour lines. The constraint set in
standard form is translated into the legend. The optimal value must lie in
the shaded (feasible) region, and is indicated by the star.
x ≤  − x
x ≥ x −
x ≤ x −
x ≥
x ≤
Figure .
Illustration of a
linear program. The
unconstrained
problem (indicated
by the contour
lines) has a
minimum on the
right side. The
optimal value given
the constraints are
shown by the star.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Convex Optimization
.. Quadratic Programming
Consider the case of a convex quadratic objective function, where the con-
straints are affine, i.e.,
min
x∈Rd
x⊤Qx + c⊤x
subject to
Ax ⩽ b ,
where A ∈ Rm×d, b ∈ Rm, and c ∈ Rd. The square symmetric matrix Q ∈
Rd×d is positive definite, and therefore the objective function is convex.
This is known as a quadratic program. Observe that it has d variables and
m linear constraints.
Example . (Quadratic Program)
Consider the quadratic program
min
x∈R
⊤ x
subject to

of two variables. The program is also illustrated in Figure .. The objec-
tive function is quadratic with a positive semidefinite matrix Q, resulting
in elliptical contour lines. The optimal value must lie in the shaded (feasi-
ble) region, and is indicated by the star.
The Lagrangian is given by
L(x, λ) =
x⊤Qx + c⊤x + λ⊤(Ax − b)
(.a)
x⊤Qx + (c + A⊤λ)⊤x − λ⊤b ,
(.b)
where again we have rearranged the terms. Taking the derivative of L(x, λ)
with respect to x and setting it to zero gives
Qx + (c + A⊤λ) =  .
Since Q is positive definite and therefore invertible, we get
x = −Q−(c + A⊤λ) .
Substituting (.) into the primal Lagrangian L(x, λ), we get the dual
Lagrangian
D(λ) = −
(c + A⊤λ)⊤Q−(c + A⊤λ) − λ⊤b .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
Therefore, the dual optimization problem is given by
(c + A⊤λ)⊤Q−(c + A⊤λ) − λ⊤b
max
λ∈Rm
subject to
λ ⩾  .
We will see an application of quadratic programming in machine learning
in Chapter .
.. Legendre–Fenchel Transform and Convex Conjugate
Let us revisit the idea of duality from Section ., without considering
constraints. One useful fact about a convex set is that it can be equiva-
lently described by its supporting hyperplanes. A hyperplane is called a
supporting hyperplane of a convex set if it intersects the convex set, and
supporting
hyperplane
the convex set is contained on just one side of it. Recall that we can fill up
a convex function to obtain the epigraph, which is a convex set. Therefore,
we can also describe convex functions in terms of their supporting hyper-
planes. Furthermore, observe that the supporting hyperplane just touches
the convex function, and is in fact the tangent to the function at that point.
And recall that the tangent of a function f(x) at a given point x is the
evaluation of the gradient of that function at that point
df(x)
dx

x=x. In
summary, because convex sets can be equivalently described by their sup-
porting hyperplanes, convex functions can be equivalently described by a
function of their gradient. The Legendre transform formalizes this concept.
Legendre transform
We begin with the most general definition, which unfortunately has a
counter-intuitive form, and look at special cases to relate the definition to
the intuition described in the preceding paragraph. The Legendre-Fenchel
Physics students are
often introduced to
the Legendre
transform as
relating the
Lagrangian and the
Hamiltonian in
classical mechanics.
Legendre-Fenchel
transform
transform is a transformation (in the sense of a Fourier transform) from
a convex differentiable function f(x) to a function that depends on the
tangents s(x) = ∇xf(x). It is worth stressing that this is a transformation
of the function f() and not the variable x or the function evaluated at x.
The Legendre-Fenchel transform is also known as the convex conjugate (for
convex conjugate
reasons we will see soon) and is closely related to duality (Hiriart-Urruty
and Lemar´echal, , chapter ).
Definition .. The convex conjugate of a function f : RD → R is a
convex conjugate
function f ∗ defined by
f ∗(s) = sup
x∈RD (⟨s, x⟩ − f(x)) .
Note that the preceding convex conjugate definition does not need the
function f to be convex nor differentiable. In Definition ., we have used
a general inner product (Section .) but in the rest of this section we
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Convex Optimization
will consider the standard dot product between finite-dimensional vectors
(⟨s, x⟩ = s⊤x) to avoid too many technical details.
To understand Definition . in a geometric fashion, consider a nice
This derivation is
easiest to
understand by
drawing the
reasoning as it
progresses.
simple one-dimensional convex and differentiable function, for example
f(x) = x. Note that since we are looking at a one-dimensional problem,
hyperplanes reduce to a line. Consider a line y = sx+c. Recall that we are
able to describe convex functions by their supporting hyperplanes, so let
us try to describe this function f(x) by its supporting lines. Fix the gradi-
ent of the line s ∈ R and for each point (x, f(x)) on the graph of f, find
the minimum value of c such that the line still intersects (x, f(x)). Note
that the minimum value of c is the place where a line with slope s “just
touches” the function f(x) = x. The line passing through (x, f(x))
with gradient s is given by
y − f(x) = s(x − x) .
The y-intercept of this line is −sx + f(x). The minimum of c for which
y = sx + c intersects with the graph of f is therefore
inf
x −sx + f(x) .
The preceding convex conjugate is by convention defined to be the nega-
tive of this. The reasoning in this paragraph did not rely on the fact that
we chose a one-dimensional convex and differentiable function, and holds
for f : RD → R, which are nonconvex and non-differentiable.
The classical
Legendre transform
is defined on convex
differentiable
functions in RD.
Remark. Convex differentiable functions such as the example f(x) = x is
a nice special case, where there is no need for the supremum, and there is
a one-to-one correspondence between a function and its Legendre trans-
form. Let us derive this from first principles. For a convex differentiable
function, we know that at x the tangent touches f(x) so that
f(x) = sx + c .
Recall that we want to describe the convex function f(x) in terms of its
gradient ∇xf(x), and that s = ∇xf(x). We rearrange to get an expres-
sion for −c to obtain
− c = sx − f(x) .
Note that −c changes with x and therefore with s, which is why we can
think of it as a function of s, which we call
f ∗(s) := sx − f(x) .
Comparing (.) with Definition ., we see that (.) is a special case
(without the supremum).
The conjugate function has nice properties; for example, for convex
functions, applying the Legendre transform again gets us back to the orig-
inal function. In the same way that the slope of f(x) is s, the slope of f ∗(s)
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
is x. The following two examples show common uses of convex conjugates
in machine learning.
Example . (Convex Conjugates)
To illustrate the application of convex conjugates, consider the quadratic
function
f(y) = λ
y⊤K−y
based on a positive definite matrix K ∈ Rn×n. We denote the primal
variable to be y ∈ Rn and the dual variable to be α ∈ Rn.
Applying Definition ., we obtain the function
y⊤K−y .
f ∗(α) = sup
y∈Rn ⟨y, α⟩ − λ
Since the function is differentiable, we can find the maximum by taking
the derivative and with respect to y setting it to zero.
∂y
= (α − λK−y)⊤
y⊤K−y
⟨y, α⟩ − λ
and hence when the gradient is zero we have y =
λKα. Substituting
into (.) yields
f ∗(α) =
λα⊤Kα .
λα⊤Kα − λ

λKα
K−

λKα

Example .
In machine learning, we often use sums of functions; for example, the ob-
jective function of the training set includes a sum of the losses for each ex-
ample in the training set. In the following, we derive the convex conjugate
of a sum of losses ℓ(t), where ℓ : R → R. This also illustrates the appli-
cation of the convex conjugate to the vector case. Let L(t) = Pn
i= ℓi(ti).
Then,
i=
ℓi(ti)
(.a)
L∗(z) = sup
t∈Rn ⟨z, t⟩ −
i=
ziti − ℓi(ti)
definition of dot product
(.b)
= sup
t∈Rn
i=
sup
t∈Rn ziti − ℓi(ti)
(.c)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Convex Optimization
i=
ℓ∗
i (zi) .
definition of conjugate
(.d)
Recall that in Section . we derived a dual optimization problem using
Lagrange multipliers. Furthermore, for convex optimization problems we
have strong duality, that is the solutions of the primal and dual problem
match. The Legendre-Fenchel transform described here also can be used
to derive a dual optimization problem. Furthermore, when the function
is convex and differentiable, the supremum is unique. To further investi-
gate the relation between these two approaches, let us consider a linear
equality constrained convex optimization problem.
Example .
Let f(y) and g(x) be convex functions, and A a real matrix of appropriate
dimensions such that Ax = y. Then
min
x f(Ax) + g(x) = min
Ax=y f(y) + g(x).
By introducing the Lagrange multiplier u for the constraints Ax = y,
min
Ax=y f(y) + g(x) = min
x,y max
f(y) + g(x) + (Ax − y)⊤u
(.a)
= max
min
x,y f(y) + g(x) + (Ax − y)⊤u ,
(.b)
where the last step of swapping max and min is due to the fact that f(y)
and g(x) are convex functions. By splitting up the dot product term and
collecting x and y,
max
min
x,y f(y) + g(x) + (Ax − y)⊤u
(.a)
= max

min
y −y⊤u + f(y)

min
x (Ax)⊤u + g(x)
(.b)
= max

min
y −y⊤u + f(y)

min
x x⊤A⊤u + g(x)
(.c)
Recall the convex conjugate (Definition .) and the fact that dot prod-
For general inner
products, A⊤ is
replaced by the
adjoint A∗.
ucts are symmetric,
max

min
y −y⊤u + f(y)

min
x x⊤A⊤u + g(x)
(.a)
= max
−f ∗(u) − g∗(−A⊤u) .
(.b)
Therefore, we have shown that
min
x f(Ax) + g(x) = max
−f ∗(u) − g∗(−A⊤u) .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
The Legendre-Fenchel conjugate turns out to be quite useful for ma-
chine learning problems that can be expressed as convex optimization
problems. In particular, for convex loss functions that apply independently
to each example, the conjugate loss is a convenient way to derive a dual
problem.
. Further Reading
Continuous optimization is an active area of research, and we do not try
to provide a comprehensive account of recent advances.
From a gradient descent perspective, there are two major weaknesses
which each have their own set of literature. The first challenge is the fact
that gradient descent is a first-order algorithm, and does not use infor-
mation about the curvature of the surface. When there are long valleys,
the gradient points perpendicularly to the direction of interest. The idea
of momentum can be generalized to a general class of acceleration meth-
ods (Nesterov, ). Conjugate gradient methods avoid the issues faced
by gradient descent by taking previous directions into account (Shewchuk,
). Second-order methods such as Newton methods use the Hessian to
provide information about the curvature. Many of the choices for choos-
ing step-sizes and ideas like momentum arise by considering the curvature
of the objective function (Goh, ; Bottou et al., ). Quasi-Newton
methods such as L-BFGS try to use cheaper computational methods to ap-
proximate the Hessian (Nocedal and Wright, ). Recently there has
been interest in other metrics for computing descent directions, result-
ing in approaches such as mirror descent (Beck and Teboulle, ) and
natural gradient (Toussaint, ).
The second challenge is to handle non-differentiable functions. Gradi-
ent methods are not well defined when there are kinks in the function.
In these cases, subgradient methods can be used (Shor, ). For fur-
ther information and algorithms for optimizing non-differentiable func-
tions, we refer to the book by Bertsekas (). There is a vast amount
of literature on different approaches for numerically solving continuous
optimization problems, including algorithms for constrained optimization
problems. Good starting points to appreciate this literature are the books
by Luenberger () and Bonnans et al. (). A recent survey of con-
tinuous optimization is provided by Bubeck ().
Hugo Gonc¸alves’
blog is also a good
resource for an
easier introduction
to Legendre–Fenchel
transforms:
https://tinyurl.
com/ydaalhj
Modern applications of machine learning often mean that the size of
datasets prohibit the use of batch gradient descent, and hence stochastic
gradient descent is the current workhorse of large-scale machine learning
methods. Recent surveys of the literature include Hazan () and Bot-
tou et al. ().
For duality and convex optimization, the book by Boyd and Vanden-
berghe () includes lectures and slides online. A more mathematical
treatment is provided by Bertsekas (), and recent book by one of
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Exercises
the key researchers in the area of optimization is Nesterov (). Con-
vex optimization is based upon convex analysis, and the reader interested
in more foundational results about convex functions is referred to Rock-
afellar (), Hiriart-Urruty and Lemar´echal (), and Borwein and
Lewis (). Legendre–Fenchel transforms are also covered in the afore-
mentioned books on convex analysis, but a more beginner-friendly pre-
sentation is available at Zia et al. (). The role of Legendre–Fenchel
transforms in the analysis of convex optimization algorithms is surveyed
in Polyak ().
Exercises
Consider the univariate function
f(x) = x + x − x − .
Find its stationary points and indicate whether they are maximum, mini-
mum, or saddle points.
Consider the update equation for stochastic gradient descent (Equation (.)).
Write down the update when we use a mini-batch size of one.
Consider whether the following statements are true or false:
a. The intersection of any two convex sets is convex.
b. The union of any two convex sets is convex.
c. The difference of a convex set A from another convex set B is convex.
Consider whether the following statements are true or false:
a. The sum of any two convex functions is convex.
b. The difference of any two convex functions is convex.
c. The product of any two convex functions is convex.
d. The maximum of any two convex functions is convex.
Express the following optimization problem as a standard linear program in
matrix notation
max
x∈R, ξ∈R p⊤x + ξ
subject to the constraints that ξ ⩾ , x ⩽  and x ⩽ .
Consider the linear program illustrated in Figure .,
min
x∈R −

subject to

Derive the dual linear program using Lagrange duality.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Continuous Optimization
Consider the quadratic program illustrated in Figure .,
min
x∈R

subject to

Derive the dual quadratic program using Lagrange duality.
Consider the following convex optimization problem
min
w∈RD
w⊤w
subject to
w⊤x ⩾  .
Derive the Lagrangian dual by introducing the Lagrange multiplier λ.
Consider the negative entropy of x ∈ RD,
f(x) =
d=
xd log xd .
Derive the convex conjugate function f∗(s), by assuming the standard dot
product.
Hint: Take the gradient of an appropriate function and set the gradient to zero.
. Consider the function
f(x) =
x⊤Ax + b⊤x + c ,
where A is strictly positive definite, which means that it is invertible. Derive
the convex conjugate of f(x).
Hint: Take the gradient of an appropriate function and set the gradient to zero.
. The hinge loss (which is the loss used by the support vector machine) is
given by
L(α) = max{,  − α} ,
If we are interested in applying gradient methods such as L-BFGS, and do
not want to resort to subgradient methods, we need to smooth the kink in
the hinge loss. Compute the convex conjugate of the hinge loss L∗(β) where
β is the dual variable. Add a ℓ proximal term, and compute the conjugate
of the resulting function
L∗(β) + γ
β ,
where γ is a given hyperparameter.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Part II
Central Machine Learning Problems
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

When Models Meet Data
In the first part of the book, we introduced the mathematics that form
the foundations of many machine learning methods. The hope is that a
reader would be able to learn the rudimentary forms of the language of
mathematics from the first part, which we will now use to describe and
discuss machine learning. The second part of the book introduces four
pillars of machine learning:
Regression (Chapter )
Dimensionality reduction (Chapter )
Density estimation (Chapter )
Classification (Chapter )
The main aim of this part of the book is to illustrate how the mathematical
concepts introduced in the first part of the book can be used to design
machine learning algorithms that can be used to solve tasks within the
remit of the four pillars. We do not intend to introduce advanced machine
learning concepts, but instead to provide a set of practical methods that
allow the reader to apply the knowledge they gained from the first part
of the book. It also provides a gateway to the wider machine learning
literature for readers already familiar with the mathematics.
. Data, Models, and Learning
It is worth at this point, to pause and consider the problem that a ma-
chine learning algorithm is designed to solve. As discussed in Chapter ,
there are three major components of a machine learning system: data,
models, and learning. The main question of machine learning is “What do
we mean by good models?”. The word model has many subtleties, and we
model
will revisit it multiple times in this chapter. It is also not entirely obvious
how to objectively define the word “good”. One of the guiding principles
of machine learning is that good models should perform well on unseen
data. This requires us to define some performance metrics, such as accu-
racy or distance from ground truth, as well as figuring out ways to do well
under these performance metrics. This chapter covers a few necessary bits
and pieces of mathematical and statistical language that are commonly
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

When Models Meet Data
Name
Gender
Degree
Postcode
Age
Annual salary
Table . Example
data from a
fictitious human
resource database
that is not in a
numerical format.
Aditya
MSc
WBG
Bob
PhD
ECABA
Chlo´e
BEcon
SWABH
Daisuke
BSc
SEAT
Elisabeth
MBA
SEAA
used to talk about machine learning models. By doing so, we briefly out-
line the current best practices for training a model such that the resulting
predictor does well on data that we have not yet seen.
As mentioned in Chapter , there are two different senses in which we
use the phrase “machine learning algorithm”: training and prediction. We
will describe these ideas in this chapter, as well as the idea of selecting
among different models. We will introduce the framework of empirical
risk minimization in Section ., the principle of maximum likelihood in
Section ., and the idea of probabilistic models in Section .. We briefly
outline a graphical language for specifying probabilistic models in Sec-
tion . and finally discuss model selection in Section .. The rest of this
section expands upon the three main components of machine learning:
data, models and learning.
.. Data as Vectors
We assume that our data can be read by a computer, and represented ade-
quately in a numerical format. Data is assumed to be tabular (Figure .),
where we think of each row of the table as representing a particular in-
stance or example, and each column to be a particular feature. In recent
Data is assumed to
be in a tidy
format (Wickham,
; Codd, ).
years, machine learning has been applied to many types of data that do not
obviously come in the tabular numerical format, for example genomic se-
quences, text and image contents of a webpage, and social media graphs.
We do not discuss the important and challenging aspects of identifying
good features. Many of these aspects depend on domain expertise and re-
quire careful engineering, and, in recent years, they have been put under
the umbrella of data science (Stray, ; Adhikari and DeNero, ).
Even when we have data in tabular format, there are still choices to be
made to obtain a numerical representation. For example, in Table ., the
gender column (a categorical variable) may be converted into numbers
representing “Male” and  representing “Female”. Alternatively, the gen-
der could be represented by numbers −, +, respectively (as shown in
Table .). Furthermore, it is often important to use domain knowledge
when constructing the representation, such as knowing that university
degrees progress from bachelor’s to master’s to PhD or realizing that the
postcode provided is not just a string of characters but actually encodes
an area in London. In Table ., we converted the data from Table .
to a numerical format, and each postcode is represented as two numbers,
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Data, Models, and Learning
Gender ID
Degree
Latitude
Longitude
Age
Annual Salary
(in degrees)
(in degrees)
(in thousands)
Table . Example
data from a
fictitious human
resource database
(see Table .),
converted to a
numerical format.
a latitude and longitude. Even numerical data that could potentially be
directly read into a machine learning algorithm should be carefully con-
sidered for units, scaling, and constraints. Without additional information,
one should shift and scale all columns of the dataset such that they have
an empirical mean of  and an empirical variance of . For the purposes
of this book, we assume that a domain expert already converted data ap-
propriately, i.e., each input xn is a D-dimensional vector of real numbers,
which are called features, attributes, or covariates. We consider a dataset to
feature
attribute
covariate
be of the form as illustrated by Table .. Observe that we have dropped
the Name column of Table . in the new numerical representation. There
are two main reasons why this is desirable: () we do not expect the iden-
tifier (the Name) to be informative for a machine learning task; and ()
we may wish to anonymize the data to help protect the privacy of the
employees.
In this part of the book, we will use N to denote the number of exam-
ples in a dataset and index the examples with lowercase n = , . . . , N.
We assume that we are given a set of numerical data, represented as an
array of vectors (Table .). Each row is a particular individual xn, often
referred to as an example or data point in machine learning. The subscript
example
data point
n refers to the fact that this is the nth example out of a total of N exam-
ples in the dataset. Each column represents a particular feature of interest
about the example, and we index the features as d = , . . . , D. Recall that
data is represented as vectors, which means that each example (each data
point) is a D-dimensional vector. The orientation of the table originates
from the database community, but for some machine learning algorithms
(e.g., in Chapter ) it is more convenient to represent examples as col-
umn vectors.
Let us consider the problem of predicting annual salary from age, based
on the data in Table .. This is called a supervised learning problem
where we have a label yn (the salary) associated with each example xn
label
(the age). The label yn has various other names, including target, re-
sponse variable, and annotation. A dataset is written as a set of example-
label pairs {(x, y), . . . , (xn, yn), . . . , (xN, yN)}. The table of examples
{x, . . . , xN} is often concatenated, and written as X ∈ RN×D. Fig-
ure . illustrates the dataset consisting of the two rightmost columns
of Table ., where x = age and y = salary.
We use the concepts introduced in the first part of the book to formalize
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
Figure . Toy data
for linear regression.
Training data in
(xn, yn) pairs from
the rightmost two
columns of
Table .. We are
interested in the
salary of a person
aged sixty (x = )
illustrated as a
vertical dashed red
line, which is not
part of the training
data.
the machine learning problems such as that in the previous paragraph.
Representing data as vectors xn allows us to use concepts from linear al-
gebra (introduced in Chapter ). In many machine learning algorithms,
we need to additionally be able to compare two vectors. As we will see in
Chapters  and , computing the similarity or distance between two ex-
amples allows us to formalize the intuition that examples with similar fea-
tures should have similar labels. The comparison of two vectors requires
that we construct a geometry (explained in Chapter ) and allows us to
optimize the resulting learning problem using techniques from Chapter .
Since we have vector representations of data, we can manipulate data to
find potentially better representations of it. We will discuss finding good
representations in two ways: finding lower-dimensional approximations
of the original feature vector, and using nonlinear higher-dimensional
combinations of the original feature vector. In Chapter , we will see an
example of finding a low-dimensional approximation of the original data
space by finding the principal components. Finding principal components
is closely related to concepts of eigenvalue and singular value decomposi-
tion as introduced in Chapter . For the high-dimensional representation,
we will see an explicit feature map ϕ() that allows us to represent in-
feature map
puts xn using a higher-dimensional representation ϕ(xn). The main mo-
tivation for higher-dimensional representations is that we can construct
new features as non-linear combinations of the original features, which in
turn may make the learning problem easier. We will discuss the feature
map in Section . and show how this feature map leads to a kernel in
kernel
Section .. In recent years, deep learning methods (Goodfellow et al.,
) have shown promise in using the data itself to learn new good fea-
tures and have been very successful in areas, such as computer vision,
speech recognition, and natural language processing. We will not cover
neural networks in this part of the book, but the reader is referred to
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Data, Models, and Learning
Figure . Example
function (black solid
diagonal line) and
its prediction at
x = , i.e.,
f() = .
Section . for the mathematical description of backpropagation, a key
concept for training neural networks.
.. Models as Functions
Once we have data in an appropriate vector representation, we can get to
the business of constructing a predictive function (known as a predictor).
predictor
In Chapter , we did not yet have the language to be precise about models.
Using the concepts from the first part of the book, we can now introduce
what “model” means. We present two major approaches in this book: a
predictor as a function, and a predictor as a probabilistic model. We de-
scribe the former here and the latter in the next subsection.
A predictor is a function that, when given a particular input example
(in our case, a vector of features), produces an output. For now, consider
the output to be a single number, i.e., a real-valued scalar output. This can
be written as
f : RD → R ,
where the input vector x is D-dimensional (has D features), and the func-
tion f then applied to it (written as f(x)) returns a real number. Fig-
ure . illustrates a possible function that can be used to compute the
value of the prediction for input values x.
In this book, we do not consider the general case of all functions, which
would involve the need for functional analysis. Instead, we consider the
special case of linear functions
f(x) = θ⊤x + θ
for unknown θ and θ. This restriction means that the contents of Chap-
ters  and  suffice for precisely stating the notion of a predictor for
the non-probabilistic (in contrast to the probabilistic view described next)
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
Figure . Example
function (black solid
diagonal line) and
its predictive
uncertainty at
x =  (drawn as a
Gaussian).
view of machine learning. Linear functions strike a good balance between
the generality of the problems that can be solved and the amount of back-
ground mathematics that is needed.
.. Models as Probability Distributions
We often consider data to be noisy observations of some true underlying
effect, and hope that by applying machine learning we can identify the
signal from the noise. This requires us to have a language for quantify-
ing the effect of noise. We often would also like to have predictors that
express some sort of uncertainty, e.g., to quantify the confidence we have
about the value of the prediction for a particular test data point. As we
have seen in Chapter , probability theory provides a language for quan-
tifying uncertainty. Figure . illustrates the predictive uncertainty of the
function as a Gaussian distribution.
Instead of considering a predictor as a single function, we could con-
sider predictors to be probabilistic models, i.e., models describing the dis-
tribution of possible functions. We limit ourselves in this book to the spe-
cial case of distributions with finite-dimensional parameters, which allows
us to describe probabilistic models without needing stochastic processes
and random measures. For this special case, we can think about prob-
abilistic models as multivariate probability distributions, which already
allow for a rich class of models.
We will introduce how to use concepts from probability (Chapter ) to
define machine learning models in Section ., and introduce a graphical
language for describing probabilistic models in a compact way in Sec-
tion ..
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Data, Models, and Learning
.. Learning is Finding Parameters
The goal of learning is to find a model and its corresponding parame-
ters such that the resulting predictor will perform well on unseen data.
There are conceptually three distinct algorithmic phases when discussing
machine learning algorithms:
. Prediction or inference
. Training or parameter estimation
. Hyperparameter tuning or model selection
The prediction phase is when we use a trained predictor on previously un-
seen test data. In other words, the parameters and model choice is already
fixed and the predictor is applied to new vectors representing new input
data points. As outlined in Chapter  and the previous subsection, we will
consider two schools of machine learning in this book, corresponding to
whether the predictor is a function or a probabilistic model. When we
have a probabilistic model (discussed further in Section .) the predic-
tion phase is called inference.
Remark. Unfortunately, there is no agreed upon naming for the different
algorithmic phases. The word “inference” is sometimes also used to mean
parameter estimation of a probabilistic model, and less often may be also
used to mean prediction for non-probabilistic models.
Chapter  and implement numerical optimization approaches from Chap-
ter .
As mentioned in Chapter , we are interested in learning a model based
on data such that it performs well on future data. It is not enough for
The training or parameter estimation phase is when we adjust our pre-
dictive model based on training data. We would like to find good predic-
tors given training data, and there are two main strategies for doing so:
finding the best predictor based on some measure of quality (sometimes
called finding a point estimate), or using Bayesian inference. Finding a
point estimate can be applied to both types of predictors, but Bayesian
inference requires probabilistic models.
For the non-probabilistic model, we follow the principle of empirical risk
empirical risk
minimization
minimization, which we describe in Section .. Empirical risk minimiza-
tion directly provides an optimization problem for finding good parame-
ters. With a statistical model, the principle of maximum likelihood is used
maximum likelihood
to find a good set of parameters (Section .). We can additionally model
the uncertainty of parameters using a probabilistic model, which we will
look at in more detail in Section ..
We use numerical methods to find good parameters that “fit” the data,
and most training methods can be thought of as hill-climbing approaches
to find the maximum of an objective, for example the maximum of a likeli-
hood. To apply hill-climbing approaches we use the gradients described in
The convention in
optimization is to
minimize objectives.
Hence, there is often
an extra minus sign
in machine learning
objectives.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
the model to only fit the training data well, the predictor needs to per-
form well on unseen data. We simulate the behavior of our predictor on
future unseen data using cross-validation (Section ..). As we will see
cross-validation
in this chapter, to achieve the goal of performing well on unseen data,
we will need to balance between fitting well on training data and finding
“simple” explanations of the phenomenon. This trade-off is achieved us-
ing regularization (Section ..) or by adding a prior (Section ..). In
philosophy, this is considered to be neither induction nor deduction, but
is called abduction. According to the Stanford Encyclopedia of Philosophy,
abduction
abduction is the process of inference to the best explanation (Douven,
A good movie title is
“AI abduction”.
We often need to make high-level modeling decisions about the struc-
ture of the predictor, such as the number of components to use or the
class of probability distributions to consider. The choice of the number of
components is an example of a hyperparameter, and this choice can af-
hyperparameter
fect the performance of the model significantly. The problem of choosing
among different models is called model selection, which we describe in
model selection
Section .. For non-probabilistic models, model selection is often done
using nested cross-validation, which is described in Section ... We also
nested
cross-validation
use model selection to choose hyperparameters of our model.
Remark. The distinction between parameters and hyperparameters is some-
what arbitrary, and is mostly driven by the distinction between what can
be numerically optimized versus what needs to use search techniques.
Another way to consider the distinction is to consider parameters as the
explicit parameters of a probabilistic model, and to consider hyperparam-
eters (higher-level parameters) as parameters that control the distribution
of these explicit parameters.
In the following sections, we will look at three flavors of machine learn-
ing: empirical risk minimization (Section .), the principle of maximum
likelihood (Section .), and probabilistic modeling (Section .).
. Empirical Risk Minimization
After having all the mathematics under our belt, we are now in a posi-
tion to introduce what it means to learn. The “learning” part of machine
learning boils down to estimating parameters based on training data.
In this section, we consider the case of a predictor that is a function,
and consider the case of probabilistic models in Section .. We describe
the idea of empirical risk minimization, which was originally popularized
by the proposal of the support vector machine (described in Chapter ).
However, its general principles are widely applicable and allow us to ask
the question of what is learning without explicitly constructing probabilis-
tic models. There are four main design choices, which we will cover in
detail in the following subsections:
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Empirical Risk Minimization
Section .. What is the set of functions we allow the predictor to take?
Section .. How do we measure how well the predictor performs on
the training data?
Section .. How do we construct predictors from only training data
that performs well on unseen test data?
Section .. What is the procedure for searching over the space of mod-
els?
.. Hypothesis Class of Functions
Assume we are given N examples xn ∈ RD and corresponding scalar la-
bels yn ∈ R. We consider the supervised learning setting, where we obtain
pairs (x, y), . . . , (xN, yN). Given this data, we would like to estimate a
predictor f(, θ) : RD → R, parametrized by θ. We hope to be able to find
a good parameter θ∗ such that we fit the data well, that is,
f(xn, θ∗) ≈ yn
for all
n = , . . . , N .
In this section, we use the notation ˆyn = f(xn, θ∗) to represent the output
of the predictor.
Remark. For ease of presentation, we will describe empirical risk mini-
mization in terms of supervised learning (where we have labels). This
simplifies the definition of the hypothesis class and the loss function. It
is also common in machine learning to choose a parametrized class of
functions, for example affine functions.
Example .
We introduce the problem of ordinary least-squares regression to illustrate
empirical risk minimization. A more comprehensive account of regression
is given in Chapter . When the label yn is real-valued, a popular choice
of function class for predictors is the set of affine functions. We choose a
Affine functions are
often referred to as
linear functions in
machine learning.
more compact notation for an affine function by concatenating an addi-
tional unit feature x() =  to xn, i.e., xn = [, x()
n , x()
n , . . . , x(D)
n ]⊤. The
parameter vector is correspondingly θ = [θ, θ, θ, . . . , θD]⊤, allowing us
to write the predictor as a linear function
f(xn, θ) = θ⊤xn .
This linear predictor is equivalent to the affine model
f(xn, θ) = θ +
d=
θdx(d)
n .
The predictor takes the vector of features representing a single example
xn as input and produces a real-valued output, i.e., f : RD+ → R. The
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
previous figures in this chapter had a straight line as a predictor, which
means that we have assumed an affine function.
Instead of a linear function, we may wish to consider non-linear func-
tions as predictors. Recent advances in neural networks allow for efficient
computation of more complex non-linear function classes.
Given the class of functions, we want to search for a good predictor.
We now move on to the second ingredient of empirical risk minimization:
how to measure how well the predictor fits the training data.
.. Loss Function for Training
Consider the label yn for a particular example; and the corresponding pre-
diction ˆyn that we make based on xn. To define what it means to fit the
data well, we need to specify a loss function ℓ(yn, ˆyn) that takes the ground
loss function
truth label and the prediction as input and produces a non-negative num-
ber (referred to as the loss) representing how much error we have made
on this particular prediction. Our goal for finding a good parameter vector
The expression
“error” is often used
to mean loss.
θ∗ is to minimize the average loss on the set of N training examples.
One assumption that is commonly made in machine learning is that
the set of examples (x, y), . . . , (xN, yN) is independent and identically
independent and
identically
distributed
distributed. The word independent (Section ..) means that two data
points (xi, yi) and (xj, yj) do not statistically depend on each other, mean-
ing that the empirical mean is a good estimate of the population mean
(Section ..). This implies that we can use the empirical mean of the
loss on the training data. For a given training set {(x, y), . . . , (xN, yN)},
training set
we introduce the notation of an example matrix X := [x, . . . , xN]⊤ ∈
RN×D and a label vector y := [y, . . . , yN]⊤ ∈ RN. Using this matrix
notation the average loss is given by
Remp(f, X, y) =
n=
ℓ(yn, ˆyn) ,
where ˆyn = f(xn, θ). Equation (.) is called the empirical risk and de-
empirical risk
pends on three arguments, the predictor f and the data X, y. This general
strategy for learning is called empirical risk minimization.
empirical risk
minimization
Example . (Least-Squares Loss)
Continuing the example of least-squares regression, we specify that we
measure the cost of making an error during training using the squared
loss ℓ(yn, ˆyn) = (yn − ˆyn). We wish to minimize the empirical risk (.),
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Empirical Risk Minimization
which is the average of the losses over the data
n=
(yn − f(xn, θ)),
min
θ∈RD
where we substituted the predictor ˆyn = f(xn, θ). By using our choice of
a linear predictor f(xn, θ) = θ⊤xn, we obtain the optimization problem
n=
(yn − θ⊤xn) .
min
θ∈RD
This equation can be equivalently expressed in matrix form
min
θ∈RD
N ∥y − Xθ∥
This is known as the least-squares problem. There exists a closed-form an-
least-squares
problem
alytic solution for this by solving the normal equations, which we will
discuss in Section ..
We are not interested in a predictor that only performs well on the
training data. Instead, we seek a predictor that performs well (has low
risk) on unseen test data. More formally, we are interested in finding a
predictor f (with parameters fixed) that minimizes the expected risk
expected risk
Rtrue(f) = Ex,y[ℓ(y, f(x))] ,
where y is the label and f(x) is the prediction based on the example x.
The notation Rtrue(f) indicates that this is the true risk if we had access to
an infinite amount of data. The expectation is over the (infinite) set of all
Another phrase
commonly used for
expected risk is
“population risk”.
possible data and labels. There are two practical questions that arise from
our desire to minimize expected risk, which we address in the following
two subsections:
How should we change our training procedure to generalize well?
How do we estimate expected risk from (finite) data?
Remark. Many machine learning tasks are specified with an associated
performance measure, e.g., accuracy of prediction or root mean squared
error. The performance measure could be more complex, be cost sensitive,
and capture details about the particular application. In principle, the de-
sign of the loss function for empirical risk minimization should correspond
directly to the performance measure specified by the machine learning
task. In practice, there is often a mismatch between the design of the loss
function and the performance measure. This could be due to issues such
as ease of implementation or efficiency of optimization.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
.. Regularization to Reduce Overfitting
This section describes an addition to empirical risk minimization that al-
lows it to generalize well (approximately minimizing expected risk). Re-
call that the aim of training a machine learning predictor is so that we can
perform well on unseen data, i.e., the predictor generalizes well. We sim-
ulate this unseen data by holding out a proportion of the whole dataset.
This hold out set is referred to as the test set. Given a sufficiently rich class
test set
Even knowing only
the performance of
the predictor on the
test set leaks
information (Blum
and Hardt, ).
of functions for the predictor f, we can essentially memorize the training
data to obtain zero empirical risk. While this is great to minimize the loss
(and therefore the risk) on the training data, we would not expect the
predictor to generalize well to unseen data. In practice, we have only a
finite set of data, and hence we split our data into a training and a test
set. The training set is used to fit the model, and the test set (not seen
by the machine learning algorithm during training) is used to evaluate
generalization performance. It is important for the user to not cycle back
to a new round of training after having observed the test set. We use the
subscripts train and test to denote the training and test sets, respectively.
We will revisit this idea of using a finite dataset to evaluate expected risk
in Section ...
It turns out that empirical risk minimization can lead to overfitting, i.e.,
overfitting
the predictor fits too closely to the training data and does not general-
ize well to new data (Mitchell, ). This general phenomenon of hav-
ing very small average loss on the training set but large average loss on
the test set tends to occur when we have little data and a complex hy-
pothesis class. For a particular predictor f (with parameters fixed), the
phenomenon of overfitting occurs when the risk estimate from the train-
ing data Remp(f, Xtrain, ytrain) underestimates the expected risk Rtrue(f).
Since we estimate the expected risk Rtrue(f) by using the empirical risk
on the test set Remp(f, Xtest, ytest) if the test risk is much larger than
the training risk, this is an indication of overfitting. We revisit the idea of
overfitting in Section ...
Therefore, we need to somehow bias the search for the minimizer of
empirical risk by introducing a penalty term, which makes it harder for
the optimizer to return an overly flexible predictor. In machine learning,
the penalty term is referred to as regularization. Regularization is a way
regularization
to compromise between accurate solution of empirical risk minimization
and the size or complexity of the solution.
Example . (Regularized Least Squares)
Regularization is an approach that discourages complex or extreme solu-
tions to an optimization problem. The simplest regularization strategy is
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Empirical Risk Minimization
to replace the least-squares problem
min
N ∥y − Xθ∥
in the previous example with the “regularized” problem by adding a
penalty term involving only θ:
min
N ∥y − Xθ∥
+ λ ∥θ∥
The additional term ∥θ∥
is called the
regularizer, and the parameter
regularizer
λ is the
regularization parameter. The regularization parameter trades
regularization
parameter
off minimizing the loss on the training set and the magnitude of the pa-
rameters θ. It often happens that the magnitude of the parameter values
becomes relatively large if we run into overfitting (Bishop, ).
The regularization term is sometimes called the penalty term, which bi-
penalty term
ases the vector θ to be closer to the origin. The idea of regularization also
appears in probabilistic models as the prior probability of the parameters.
Recall from Section . that for the posterior distribution to be of the same
form as the prior distribution, the prior and the likelihood need to be con-
jugate. We will revisit this idea in Section ... We will see in Chapter
that the idea of the regularizer is equivalent to the idea of a large margin.
.. Cross-Validation to Assess the Generalization Performance
We mentioned in the previous section that we measure the generalization
error by estimating it by applying the predictor on test data. This data is
also sometimes referred to as the validation set. The validation set is a sub-
validation set
set of the available training data that we keep aside. A practical issue with
this approach is that the amount of data is limited, and ideally we would
use as much of the data available to train the model. This would require
us to keep our validation set V small, which then would lead to a noisy
estimate (with high variance) of the predictive performance. One solu-
tion to these contradictory objectives (large training set, large validation
set) is to use cross-validation. K-fold cross-validation effectively partitions
cross-validation
the data into K chunks, K −  of which form the training set R, and
the last chunk serves as the validation set V (similar to the idea outlined
previously). Cross-validation iterates through (ideally) all combinations
of assignments of chunks to R and V; see Figure .. This procedure is
repeated for all K choices for the validation set, and the performance of
the model from the K runs is averaged.
We partition our dataset into two sets D = R∪V, such that they do not
overlap (R ∩ V = ∅), where V is the validation set, and train our model
on R. After training, we assess the performance of the predictor f on the
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
Training
Validation
Figure . K-fold
cross-validation.
The dataset is
divided into K =
chunks, K −  of
which serve as the
training set (blue)
and one as the
validation set
(orange hatch).
validation set V (e.g., by computing root mean square error (RMSE) of
the trained model on the validation set). More precisely, for each partition
k the training data R(k) produces a predictor f (k), which is then applied
to validation set V(k) to compute the empirical risk R(f (k), V(k)). We cycle
through all possible partitionings of validation and training sets and com-
pute the average generalization error of the predictor. Cross-validation
approximates the expected generalization error
EV[R(f, V)] ≈
k=
R(f (k), V(k)) ,
where R(f (k), V(k)) is the risk (e.g., RMSE) on the validation set V(k) for
predictor f (k). The approximation has two sources: first, due to the finite
training set, which results in not the best possible f (k); and second, due to
the finite validation set, which results in an inaccurate estimation of the
risk R(f (k), V(k)). A potential disadvantage of K-fold cross-validation is
the computational cost of training the model K times, which can be bur-
densome if the training cost is computationally expensive. In practice, it
is often not sufficient to look at the direct parameters alone. For example,
we need to explore multiple complexity parameters (e.g., multiple regu-
larization parameters), which may not be direct parameters of the model.
Evaluating the quality of the model, depending on these hyperparameters,
may result in a number of training runs that is exponential in the number
of model parameters. One can use nested cross-validation (Section ..)
to search for good hyperparameters.
However, cross-validation is an embarrassingly parallel problem, i.e., lit-
embarrassingly
parallel
tle effort is needed to separate the problem into a number of parallel
tasks. Given sufficient computing resources (e.g., cloud computing, server
farms), cross-validation does not require longer than a single performance
assessment.
In this section, we saw that empirical risk minimization is based on the
following concepts: the hypothesis class of functions, the loss function and
regularization. In Section ., we will see the effect of using a probability
distribution to replace the idea of loss functions and regularization.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Estimation
.. Further Reading
Due to the fact that the original development of empirical risk minimiza-
tion (Vapnik, ) was couched in heavily theoretical language, many
of the subsequent developments have been theoretical. The area of study
is called statistical learning theory (Vapnik, ; Evgeniou et al., ;
statistical learning
theory
Hastie et al., ; von Luxburg and Sch¨olkopf, ). A recent machine
learning textbook that builds on the theoretical foundations and develops
efficient learning algorithms is Shalev-Shwartz and Ben-David ().
The concept of regularization has its roots in the solution of ill-posed in-
verse problems (Neumaier, ). The approach presented here is called
Tikhonov regularization, and there is a closely related constrained version
Tikhonov
regularization
called Ivanov regularization. Tikhonov regularization has deep relation-
ships to the bias-variance trade-off and feature selection (B¨uhlmann and
Van De Geer, ). An alternative to cross-validation is bootstrap and
jackknife (Efron and Tibshirani, ; Davidson and Hinkley, ; Hall,
Thinking about empirical risk minimization (Section .) as “probabil-
ity free” is incorrect. There is an underlying unknown probability distri-
bution p(x, y) that governs the data generation. However, the approach
of empirical risk minimization is agnostic to that choice of distribution.
This is in contrast to standard statistical approaches that explicitly re-
quire the knowledge of p(x, y). Furthermore, since the distribution is a
joint distribution on both examples x and labels y, the labels can be non-
deterministic. In contrast to standard statistics we do not need to specify
the noise distribution for the labels y.
. Parameter Estimation
In Section ., we did not explicitly model our problem using probability
distributions. In this section, we will see how to use probability distribu-
tions to model our uncertainty due to the observation process and our
uncertainty in the parameters of our predictors. In Section .., we in-
troduce the likelihood, which is analogous to the concept of loss functions
(Section ..) in empirical risk minimization. The concept of priors (Sec-
tion ..) is analogous to the concept of regularization (Section ..).
.. Maximum Likelihood Estimation
The idea behind maximum likelihood estimation (MLE) is to define a func-
maximum likelihood
estimation
tion of the parameters that enables us to find a model that fits the data
well. The estimation problem is focused on the likelihood function, or
likelihood
more precisely its negative logarithm. For data represented by a random
variable x and for a family of probability densities p(x | θ) parametrized
by θ, the negative log-likelihood is given by
negative
log-likelihood
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
Lx(θ) = − log p(x | θ) .
The notation Lx(θ) emphasizes the fact that the parameter θ is varying
and the data x is fixed. We very often drop the reference to x when writing
the negative log-likelihood, as it is really a function of θ, and write it as
L(θ) when the random variable representing the uncertainty in the data
is clear from the context.
Let us interpret what the probability density p(x | θ) is modeling for a
fixed value of θ. It is a distribution that models the uncertainty of the data
for a given parameter setting. For a given dataset x, the likelihood allows
us to express preferences about different settings of the parameters θ, and
we can choose the setting that more “likely” has generated the data.
In a complementary view, if we consider the data to be fixed (because
it has been observed), and we vary the parameters θ, what does L(θ) tell
us? It tells us how likely a particular setting of θ is for the observations x.
Based on this second view, the maximum likelihood estimator gives us the
most likely parameter θ for the set of data.
We consider the supervised learning setting, where we obtain pairs
(x, y), . . . , (xN, yN) with xn ∈ RD and labels yn ∈ R. We are inter-
ested in constructing a predictor that takes a feature vector xn as input
and produces a prediction yn (or something close to it), i.e., given a vec-
tor xn we want the probability distribution of the label yn. In other words,
we specify the conditional probability distribution of the labels given the
examples for the particular parameter setting θ.
Example .
The first example that is often used is to specify that the conditional
probability of the labels given the examples is a Gaussian distribution. In
other words, we assume that we can explain our observation uncertainty
by independent Gaussian noise (refer to Section .) with zero mean,
εn ∼ N
 , σ
. We further assume that the linear model x⊤
n θ is used for
prediction. This means we specify a Gaussian likelihood for each example
label pair (xn, yn),
p(yn | xn, θ) = N
 yn | x⊤
n θ, σ .
An illustration of a Gaussian likelihood for a given parameter θ is shown
in Figure .. We will see in Section . how to explicitly expand the
preceding expression out in terms of the Gaussian distribution.
We assume that the set of examples (x, y), . . . , (xN, yN) are independent
independent and
identically
distributed
and identically distributed (i.i.d.). The word “independent” (Section ..)
implies that the likelihood involving the whole dataset (Y = {y, . . . , yN}
and X = {x, . . . , xN}) factorizes into a product of the likelihoods of
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Estimation
each individual example
p(Y | X, θ) =
n=
p(yn | xn, θ) ,
where p(yn | xn, θ) is a particular distribution (which was Gaussian in Ex-
ample .). The expression “identically distributed” means that each term
in the product (.) is of the same distribution, and all of them share
the same parameters. It is often easier from an optimization viewpoint to
compute functions that can be decomposed into sums of simpler functions.
Hence, in machine learning we often consider the negative log-likelihood
Recall log(ab) =
log(a) + log(b)
L(θ) = − log p(Y | X, θ) = −
n=
log p(yn | xn, θ) .
While it is temping to interpret the fact that θ is on the right of the condi-
tioning in p(yn|xn, θ) (.), and hence should be interpreted as observed
and fixed, this interpretation is incorrect. The negative log-likelihood L(θ)
is a function of θ. Therefore, to find a good parameter vector θ that
explains the data (x, y), . . . , (xN, yN) well, minimize the negative log-
likelihood L(θ) with respect to θ.
Remark. The negative sign in (.) is a historical artifact that is due
to the convention that we want to maximize likelihood, but numerical
optimization literature tends to study minimization of functions.
Example .
Continuing on our example of Gaussian likelihoods (.), the negative
log-likelihood can be rewritten as
L(θ) = −
n=
log p(yn | xn, θ) = −
n=
log N
 yn | x⊤
n θ, σ
(.a)
= −
n=
log
πσ exp

−(yn − x⊤
n θ)
(.b)
= −
πσ
(.c)
n=
log
n=
log exp

−(yn − x⊤
n θ)
πσ .
(.d)
n=
(yn − x⊤
n θ) −
n=
log
As σ is given, the second term in (.d) is constant, and minimizing L(θ)
corresponds to solving the least-squares problem (compare with (.))
expressed in the first term.
It turns out that for Gaussian likelihoods the resulting optimization
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
Figure . For the
given data, the
maximum likelihood
estimate of the
parameters results
in the black
diagonal line. The
orange square
shows the value of
the maximum
likelihood
prediction at
x = .
MLE
MAP
Figure .
Comparing the
predictions with the
maximum likelihood
estimate and the
MAP estimate at
x = . The prior
biases the slope to
be less steep and the
intercept to be
closer to zero. In
this example, the
bias that moves the
intercept closer to
zero actually
increases the slope.
problem corresponding to maximum likelihood estimation has a closed-
form solution. We will see more details on this in Chapter . Figure .
shows a regression dataset and the function that is induced by the maxi-
mum-likelihood parameters. Maximum likelihood estimation may suffer
from overfitting (Section ..), analogous to unregularized empirical risk
minimization (Section ..). For other likelihood functions, i.e., if we
model our noise with non-Gaussian distributions, maximum likelihood es-
timation may not have a closed-form analytic solution. In this case, we
resort to numerical optimization methods discussed in Chapter .
.. Maximum A Posteriori Estimation
If we have prior knowledge about the distribution of the parameters θ, we
can multiply an additional term to the likelihood. This additional term is
a prior probability distribution on parameters p(θ). For a given prior, after
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Estimation
observing some data x, how should we update the distribution of θ? In
other words, how should we represent the fact that we have more specific
knowledge of θ after observing data x? Bayes’ theorem, as discussed in
Section ., gives us a principled tool to update our probability distribu-
tions of random variables. It allows us to compute a posterior distribution
posterior
p(θ | x) (the more specific knowledge) on the parameters θ from general
prior statements (prior distribution) p(θ) and the function p(x | θ) that
prior
links the parameters θ and the observed data x (called the likelihood):
likelihood
p(x)
p(θ | x) = p(x | θ)p(θ)
Recall that we are interested in finding the parameter θ that maximizes
the posterior. Since the distribution p(x) does not depend on θ, we can
ignore the value of the denominator for the optimization and obtain
p(θ | x) ∝ p(x | θ)p(θ) .
The preceding proportion relation hides the density of the data p(x),
which may be difficult to estimate. Instead of estimating the minimum
of the negative log-likelihood, we now estimate the minimum of the neg-
ative log-posterior, which is referred to as maximum a posteriori estima-
maximum a
posteriori
estimation
tion (MAP estimation). An illustration of the effect of adding a zero-mean
MAP estimation
Gaussian prior is shown in Figure ..
Example .
In addition to the assumption of Gaussian likelihood in the previous exam-
ple, we assume that the parameter vector is distributed as a multivariate
Gaussian with zero mean, i.e., p(θ) = N
 , Σ
, where Σ is the covari-
ance matrix (Section .). Note that the conjugate prior of a Gaussian
is also a Gaussian (Section ..), and therefore we expect the posterior
distribution to also be a Gaussian. We will see the details of maximum a
posteriori estimation in Chapter .
The idea of including prior knowledge about where good parameters
lie is widespread in machine learning. An alternative view, which we saw
in Section .., is the idea of regularization, which introduces an addi-
tional term that biases the resulting parameters to be close to the origin.
Maximum a posteriori estimation can be considered to bridge the non-
probabilistic and probabilistic worlds as it explicitly acknowledges the
need for a prior distribution but it still only produces a point estimate
of the parameters.
Remark. The maximum likelihood estimate θML possesses the following
properties (Lehmann and Casella, ; Efron and Hastie, ):
Asymptotic consistency: The MLE converges to the true value in the
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
Mθ
Mθ∗
M ∗
Mθ
Figure . Model
fitting. In a
parametrized class
Mθ of models, we
optimize the model
parameters θ to
minimize the
distance to the true
(unknown) model
M∗.
limit of infinitely many observations, plus a random error that is ap-
proximately normal.
The size of the samples necessary to achieve these properties can be
quite large.
The error’s variance decays in /N, where N is the number of data
points.
Especially, in the “small” data regime, maximum likelihood estimation
can lead to overfitting.
The principle of maximum likelihood estimation (and maximum a pos-
teriori estimation) uses probabilistic modeling to reason about the uncer-
tainty in the data and model parameters. However, we have not yet taken
probabilistic modeling to its full extent. In this section, the resulting train-
ing procedure still produces a point estimate of the predictor, i.e., training
returns one single set of parameter values that represent the best predic-
tor. In Section ., we will take the view that the parameter values should
also be treated as random variables, and instead of estimating “best” val-
ues of that distribution, we will use the full parameter distribution when
making predictions.
.. Model Fitting
Consider the setting where we are given a dataset, and we are interested
in fitting a parametrized model to the data. When we talk about “fit-
ting”, we typically mean optimizing/learning model parameters so that
they minimize some loss function, e.g., the negative log-likelihood. With
maximum likelihood (Section ..) and maximum a posteriori estima-
tion (Section ..), we already discussed two commonly used algorithms
for model fitting.
The parametrization of the model defines a model class Mθ with which
we can operate. For example, in a linear regression setting, we may define
the relationship between inputs x and (noise-free) observations y to be
y = ax + b, where θ := {a, b} are the model parameters. In this case, the
model parameters θ describe the family of affine functions, i.e., straight
lines with slope a, which are offset from  by b. Assume the data comes
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Estimation
Training data
MLE
Training data
MLE
Training data
MLE
Figure . Fitting
(by maximum
likelihood) of
different model
classes to a
regression dataset.
(a) Overfitting
(b) Underfitting.
(c) Fitting well.
from a model M ∗, which is unknown to us. For a given training dataset,
we optimize θ so that Mθ is as close as possible to M ∗, where the “close-
ness” is defined by the objective function we optimize (e.g., squared loss
on the training data). Figure . illustrates a setting where we have a small
model class (indicated by the circle Mθ), and the data generation model
M ∗ lies outside the set of considered models. We begin our parameter
search at Mθ. After the optimization, i.e., when we obtain the best pos-
sible parameters θ∗, we distinguish three different cases: (i) overfitting,
(ii) underfitting, and (iii) fitting well. We will give a high-level intuition
of what these three concepts mean.
Roughly speaking, overfitting refers to the situation where the para-
overfitting
metrized model class is too rich to model the dataset generated by M ∗,
i.e., Mθ could model much more complicated datasets. For instance, if the
dataset was generated by a linear function, and we define Mθ to be the
class of seventh-order polynomials, we could model not only linear func-
tions, but also polynomials of degree two, three, etc. Models that over-
fit typically have a large number of parameters. An observation we often
One way to detect
overfitting in
practice is to
observe that the
model has low
training risk but
high test risk during
cross validation
(Section ..).
make is that the overly flexible model class Mθ uses all its modeling power
to reduce the training error. If the training data is noisy, it will therefore
find some useful signal in the noise itself. This will cause enormous prob-
lems when we predict away from the training data. Figure .(a) gives an
example of overfitting in the context of regression where the model pa-
rameters are learned by means of maximum likelihood (see Section ..).
We will discuss overfitting in regression more in Section ...
When we run into underfitting, we encounter the opposite problem
underfitting
where the model class Mθ is not rich enough. For example, if our dataset
was generated by a sinusoidal function, but θ only parametrizes straight
lines, the best optimization procedure will not get us close to the true
model. However, we still optimize the parameters and find the best straight
line that models the dataset. Figure .(b) shows an example of a model
that underfits because it is insufficiently flexible. Models that underfit typ-
ically have few parameters.
The third case is when the parametrized model class is about right.
Then, our model fits well, i.e., it neither overfits nor underfits. This means
our model class is just rich enough to describe the dataset we are given.
Figure .(c) shows a model that fits the given dataset fairly well. Ideally,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
this is the model class we would want to work with since it has good
generalization properties.
In practice, we often define very rich model classes Mθ with many pa-
rameters, such as deep neural networks. To mitigate the problem of over-
fitting, we can use regularization (Section ..) or priors (Section ..).
We will discuss how to choose the model class in Section ..
.. Further Reading
When considering probabilistic models, the principle of maximum likeli-
hood estimation generalizes the idea of least-squares regression for linear
models, which we will discuss in detail in Chapter . When restricting
the predictor to have linear form with an additional nonlinear function φ
applied to the output, i.e.,
p(yn|xn, θ) = φ(θ⊤xn) ,
we can consider other models for other prediction tasks, such as binary
classification or modeling count data (McCullagh and Nelder, ). An
alternative view of this is to consider likelihoods that are from the ex-
ponential family (Section .). The class of models, which have linear
dependence between parameters and data, and have potentially nonlin-
ear transformation φ (called a link function), is referred to as generalized
link function
generalized linear
model
linear models (Agresti, , chapter ).
Maximum likelihood estimation has a rich history, and was originally
proposed by Sir Ronald Fisher in the s. We will expand upon the idea
of a probabilistic model in Section .. One debate among researchers
who use probabilistic models, is the discussion between Bayesian and fre-
quentist statistics. As mentioned in Section .., it boils down to the
definition of probability. Recall from Section . that one can consider
probability to be a generalization (by allowing uncertainty) of logical rea-
soning (Cheeseman, ; Jaynes, ). The method of maximum like-
lihood estimation is frequentist in nature, and the interested reader is
pointed to Efron and Hastie () for a balanced view of both Bayesian
and frequentist statistics.
There are some probabilistic models where maximum likelihood esti-
mation may not be possible. The reader is referred to more advanced sta-
tistical textbooks, e.g., Casella and Berger (), for approaches, such as
method of moments, M-estimation, and estimating equations.
. Probabilistic Modeling and Inference
In machine learning, we are frequently concerned with the interpretation
and analysis of data, e.g., for prediction of future events and decision
making. To make this task more tractable, we often build models that
describe the generative process that generates the observed data.
generative process
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Probabilistic Modeling and Inference
For example, we can describe the outcome of a coin-flip experiment
(“heads” or “tails”) in two steps. First, we define a parameter µ, which
describes the probability of “heads” as the parameter of a Bernoulli distri-
bution (Chapter ); second, we can sample an outcome x ∈ {head, tail}
from the Bernoulli distribution p(x | µ) = Ber(µ). The parameter µ gives
rise to a specific dataset X and depends on the coin used. Since µ is un-
known in advance and can never be observed directly, we need mecha-
nisms to learn something about µ given observed outcomes of coin-flip
experiments. In the following, we will discuss how probabilistic modeling
can be used for this purpose.
.. Probabilistic Models
A probabilistic
model is specified
by the joint
distribution of all
random variables.
Probabilistic models represent the uncertain aspects of an experiment as
probability distributions. The benefit of using probabilistic models is that
they offer a unified and consistent set of tools from probability theory
(Chapter ) for modeling, inference, prediction, and model selection.
In probabilistic modeling, the joint distribution p(x, θ) of the observed
variables x and the hidden parameters θ is of central importance: It en-
capsulates information from the following:
The prior and the likelihood (product rule, Section .).
The marginal likelihood p(x), which will play an important role in
model selection (Section .), can be computed by taking the joint dis-
tribution and integrating out the parameters (sum rule, Section .).
The posterior, which can be obtained by dividing the joint by the marginal
likelihood.
Only the joint distribution has this property. Therefore, a probabilistic
model is specified by the joint distribution of all its random variables.
.. Bayesian Inference
Parameter
estimation can be
phrased as an
optimization
problem.
A key task in machine learning is to take a model and the data to uncover
the values of the model’s hidden variables θ given the observed variables
x. In Section .., we already discussed two ways for estimating model
parameters θ using maximum likelihood or maximum a posteriori esti-
mation. In both cases, we obtain a single-best value for θ so that the key
algorithmic problem of parameter estimation is solving an optimization
problem. Once these point estimates θ∗ are known, we use them to make
predictions. More specifically, the predictive distribution will be p(x | θ∗),
where we use θ∗ in the likelihood function.
As discussed in Section ., focusing solely on some statistic of the pos-
terior distribution (such as the parameter θ∗ that maximizes the poste-
rior) leads to loss of information, which can be critical in a system that
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
uses the prediction p(x | θ∗) to make decisions. These decision-making
systems typically have different objective functions than the likelihood, a
Bayesian inference
is about learning the
distribution of
random variables.
squared-error loss or a mis-classification error. Therefore, having the full
posterior distribution around can be extremely useful and leads to more
robust decisions. Bayesian inference is about finding this posterior distri-
Bayesian inference
bution (Gelman et al., ). For a dataset X , a parameter prior p(θ), and
a likelihood function, the posterior
p(θ | X) = p(X | θ)p(θ)
p(X)
p(X) =
p(X | θ)p(θ)dθ ,
is obtained by applying Bayes’ theorem. The key idea is to exploit Bayes’
Bayesian inference
inverts the
relationship
between parameters
and the data.
theorem to invert the relationship between the parameters θ and the data
X (given by the likelihood) to obtain the posterior distribution p(θ | X).
The implication of having a posterior distribution on the parameters is
that it can be used to propagate uncertainty from the parameters to the
data. More specifically, with a distribution p(θ) on the parameters our
predictions will be
p(x) =
p(x | θ)p(θ)dθ = Eθ[p(x | θ)] ,
and they no longer depend on the model parameters θ, which have been
marginalized/integrated out. Equation (.) reveals that the prediction
is an average over all plausible parameter values θ, where the plausibility
is encapsulated by the parameter distribution p(θ).
Having discussed parameter estimation in Section . and Bayesian in-
ference here, let us compare these two approaches to learning. Parameter
estimation via maximum likelihood or MAP estimation yields a consistent
point estimate θ∗ of the parameters, and the key computational problem
to be solved is optimization. In contrast, Bayesian inference yields a (pos-
terior) distribution, and the key computational problem to be solved is
integration. Predictions with point estimates are straightforward, whereas
predictions in the Bayesian framework require solving another integration
problem; see (.). However, Bayesian inference gives us a principled
way to incorporate prior knowledge, account for side information, and
incorporate structural knowledge, all of which is not easily done in the
context of parameter estimation. Moreover, the propagation of parameter
uncertainty to the prediction can be valuable in decision-making systems
for risk assessment and exploration in the context of data-efficient learn-
ing (Deisenroth et al., ; Kamthe and Deisenroth, ).
While Bayesian inference is a mathematically principled framework for
learning about parameters and making predictions, there are some prac-
tical challenges that come with it because of the integration problems we
need to solve; see (.) and (.). More specifically, if we do not choose
a conjugate prior on the parameters (Section ..), the integrals in (.)
and (.) are not analytically tractable, and we cannot compute the pos-
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Probabilistic Modeling and Inference
terior, the predictions, or the marginal likelihood in closed form. In these
cases, we need to resort to approximations. Here, we can use stochas-
tic approximations, such as Markov chain Monte Carlo (MCMC) (Gilks
et al., ), or deterministic approximations, such as the Laplace ap-
proximation (Bishop, ; Barber, ; Murphy, ), variational in-
ference (Jordan et al., ; Blei et al., ), or expectation propaga-
tion (Minka, a).
Despite these challenges, Bayesian inference has been successfully ap-
plied to a variety of problems, including large-scale topic modeling (Hoff-
man et al., ), click-through-rate prediction (Graepel et al., ),
data-efficient reinforcement learning in control systems (Deisenroth et al.,
), online ranking systems (Herbrich et al., ), and large-scale rec-
ommender systems. There are generic tools, such as Bayesian optimiza-
tion (Brochu et al., ; Snoek et al., ; Shahriari et al., ), that
are very useful ingredients for an efficient search of meta parameters of
models or algorithms.
Remark. In the machine learning literature, there can be a somewhat ar-
bitrary separation between (random) “variables” and “parameters”. While
parameters are estimated (e.g., via maximum likelihood), variables are
usually marginalized out. In this book, we are not so strict with this sep-
aration because, in principle, we can place a prior on any parameter and
integrate it out, which would then turn the parameter into a random vari-
able according to the aforementioned separation.
.. Latent-Variable Models
In practice, it is sometimes useful to have additional latent variables z
latent variable
(besides the model parameters θ) as part of the model (Moustaki et al.,
). These latent variables are different from the model parameters
θ as they do not parametrize the model explicitly. Latent variables may
describe the data-generating process, thereby contributing to the inter-
pretability of the model. They also often simplify the structure of the
model and allow us to define simpler and richer model structures. Sim-
plification of the model structure often goes hand in hand with a smaller
number of model parameters (Paquet, ; Murphy, ). Learning in
latent-variable models (at least via maximum likelihood) can be done in a
principled way using the expectation maximization (EM) algorithm (Demp-
ster et al., ; Bishop, ). Examples, where such latent variables
are helpful, are principal component analysis for dimensionality reduc-
tion (Chapter ), Gaussian mixture models for density estimation (Chap-
ter ), hidden Markov models (Maybeck, ) or dynamical systems
(Ghahramani and Roweis, ; Ljung, ) for time-series modeling,
and meta learning and task generalization (Hausman et al., ; Sæ-
mundsson et al., ). Although the introduction of these latent variables
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
may make the model structure and the generative process easier, learning
in latent-variable models is generally hard, as we will see in Chapter .
Since latent-variable models also allow us to define the process that
generates data from parameters, let us have a look at this generative pro-
cess. Denoting data by x, the model parameters by θ and the latent vari-
ables by z, we obtain the conditional distribution
p(x | z, θ)
that allows us to generate data for any model parameters and latent vari-
ables. Given that z are latent variables, we place a prior p(z) on them.
As the models we discussed previously, models with latent variables
can be used for parameter learning and inference within the frameworks
we discussed in Sections . and ... To facilitate learning (e.g., by
means of maximum likelihood estimation or Bayesian inference), we fol-
low a two-step procedure. First, we compute the likelihood p(x | θ) of the
model, which does not depend on the latent variables. Second, we use this
likelihood for parameter estimation or Bayesian inference, where we use
exactly the same expressions as in Sections . and .., respectively.
Since the likelihood function p(x | θ) is the predictive distribution of the
data given the model parameters, we need to marginalize out the latent
variables so that
p(x | θ) =
p(x | z, θ)p(z)dz ,
where p(x | z, θ) is given in (.) and p(z) is the prior on the latent
variables. Note that the likelihood must not depend on the latent variables
The likelihood is a
function of the data
and the model
parameters, but is
independent of the
latent variables.
z, but it is only a function of the data x and the model parameters θ.
The likelihood in (.) directly allows for parameter estimation via
maximum likelihood. MAP estimation is also straightforward with an ad-
ditional prior on the model parameters θ as discussed in Section ...
Moreover, with the likelihood (.) Bayesian inference (Section ..)
in a latent-variable model works in the usual way: We place a prior p(θ)
on the model parameters and use Bayes’ theorem to obtain a posterior
distribution
p(θ | X) = p(X | θ)p(θ)
p(X)
over the model parameters given a dataset X . The posterior in (.) can
be used for predictions within a Bayesian inference framework; see (.).
One challenge we have in this latent-variable model is that the like-
lihood p(X | θ) requires the marginalization of the latent variables ac-
cording to (.). Except when we choose a conjugate prior p(z) for
p(x | z, θ), the marginalization in (.) is not analytically tractable, and
we need to resort to approximations (Bishop, ; Paquet, ; Mur-
phy, ; Moustaki et al., ).
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Probabilistic Modeling and Inference
Similar to the parameter posterior (.) we can compute a posterior
on the latent variables according to
p(z | X) = p(X | z)p(z)
p(X)
p(X | z) =
p(X | z, θ)p(θ)dθ ,
where p(z) is the prior on the latent variables and p(X | z) requires us to
integrate out the model parameters θ.
Given the difficulty of solving integrals analytically, it is clear that mar-
ginalizing out both the latent variables and the model parameters at the
same time is not possible in general (Bishop, ; Murphy, ). A
quantity that is easier to compute is the posterior distribution on the latent
variables, but conditioned on the model parameters, i.e.,
p(z | X, θ) = p(X | z, θ)p(z)
p(X | θ)
where p(z) is the prior on the latent variables and p(X | z, θ) is given
in (.).
In Chapters  and , we derive the likelihood functions for PCA and
Gaussian mixture models, respectively. Moreover, we compute the poste-
rior distributions (.) on the latent variables for both PCA and Gaussian
mixture models.
Remark. In the following chapters, we may not be drawing such a clear
distinction between latent variables z and uncertain model parameters θ
and call the model parameters “latent” or “hidden” as well because they
are unobserved. In Chapters  and , where we use the latent variables
z, we will pay attention to the difference as we will have two different
types of hidden variables: model parameters θ and latent variables z.
We can exploit the fact that all the elements of a probabilistic model are
random variables to define a unified language for representing them. In
Section ., we will see a concise graphical language for representing the
structure of probabilistic models. We will use this graphical language to
describe the probabilistic models in the subsequent chapters.
.. Further Reading
Probabilistic models in machine learning (Bishop, ; Barber, ;
Murphy, ) provide a way for users to capture uncertainty about data
and predictive models in a principled fashion. Ghahramani () presents
a short review of probabilistic models in machine learning. Given a proba-
bilistic model, we may be lucky enough to be able to compute parameters
of interest analytically. However, in general, analytic solutions are rare,
and computational methods such as sampling (Gilks et al., ; Brooks
et al., ) and variational inference (Jordan et al., ; Blei et al.,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
) are used. Moustaki et al. () and Paquet () provide a good
overview of Bayesian inference in latent-variable models.
In recent years, several programming languages have been proposed
that aim to treat the variables defined in software as random variables
corresponding to probability distributions. The objective is to be able to
write complex functions of probability distributions, while under the hood
the compiler automatically takes care of the rules of Bayesian inference.
This rapidly changing field is called probabilistic programming.
probabilistic
programming
. Directed Graphical Models
In this section, we introduce a graphical language for specifying a prob-
abilistic model, called the directed graphical model. It provides a compact
directed graphical
model
and succinct way to specify probabilistic models, and allows the reader to
visually parse dependencies between random variables. A graphical model
visually captures the way in which the joint distribution over all random
variables can be decomposed into a product of factors depending only on
a subset of these variables. In Section ., we identified the joint distri-
bution of a probabilistic model as the key quantity of interest because it
comprises information about the prior, the likelihood, and the posterior.
However, the joint distribution by itself can be quite complicated, and
Directed graphical
models are also
known as Bayesian
networks.
it does not tell us anything about structural properties of the probabilis-
tic model. For example, the joint distribution p(a, b, c) does not tell us
anything about independence relations. This is the point where graphical
models come into play. This section relies on the concepts of independence
and conditional independence, as described in Section ...
In a graphical model, nodes are random variables. In Figure .(a), the
graphical model
nodes represent the random variables a, b, c. Edges represent probabilistic
relations between variables, e.g., conditional probabilities.
Remark. Not every distribution can be represented in a particular choice of
graphical model. A discussion of this can be found in Bishop ().
Probabilistic graphical models have some convenient properties:
They are a simple way to visualize the structure of a probabilistic model.
They can be used to design or motivate new kinds of statistical models.
Inspection of the graph alone gives us insight into properties, e.g., con-
ditional independence.
Complex computations for inference and learning in statistical models
can be expressed in terms of graphical manipulations.
.. Graph Semantics
Directed graphical models/Bayesian networks are a method for representing
directed graphical
model/Bayesian
network
conditional dependencies in a probabilistic model. They provide a visual
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Directed Graphical Models
description of the conditional probabilities, hence, providing a simple lan-
guage for describing complex interdependence. The modular description
With additional
assumptions, the
arrows can be used
to indicate causal
relationships (Pearl,
also entails computational simplification. Directed links (arrows) between
two nodes (random variables) indicate conditional probabilities. For ex-
ample, the arrow between a and b in Figure .(a) gives the conditional
probability p(b | a) of b given a.
Figure .
Examples of
directed graphical
models.
(a) Fully connected.
(b) Not fully connected.
Directed graphical models can be derived from joint distributions if we
know something about their factorization.
Example .
Consider the joint distribution
p(a, b, c) = p(c | a, b)p(b | a)p(a)
of three random variables a, b, c. The factorization of the joint distribution
in (.) tells us something about the relationship between the random
variables:
c depends directly on a and b.
b depends directly on a.
a depends neither on b nor on c.
For the factorization in (.), we obtain the directed graphical model in
Figure .(a).
In general, we can construct the corresponding directed graphical model
from a factorized joint distribution as follows:
. Create a node for all random variables.
. For each conditional distribution, we add a directed link (arrow) to
the graph from the nodes corresponding to the variables on which the
distribution is conditioned.
The graph layout
depends on the
factorization of the
joint distribution.
The graph layout depends on the choice of factorization of the joint dis-
tribution.
We discussed how to get from a known factorization of the joint dis-
tribution to the corresponding directed graphical model. Now, we will do
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
exactly the opposite and describe how to extract the joint distribution of
a set of random variables from a given graphical model.
Example .
Looking at the graphical model in Figure .(b), we exploit two proper-
ties:
The joint distribution p(x, . . . , x) we seek is the product of a set of
conditionals, one for each node in the graph. In this particular example,
we will need five conditionals.
Each conditional depends only on the parents of the corresponding
node in the graph. For example, x will be conditioned on x.
These two properties yield the desired factorization of the joint distribu-
tion
p(x, x, x, x, x) = p(x)p(x)p(x | x)p(x | x, x)p(x | x) . (.)
In general, the joint distribution p(x) = p(x, . . . , xK) is given as
p(x) =
k=
p(xk | Pak) ,
where Pak means “the parent nodes of xk”. Parent nodes of xk are nodes
that have arrows pointing to xk.
We conclude this subsection with a concrete example of the coin-flip
experiment. Consider a Bernoulli experiment (Example .) where the
probability that the outcome x of this experiment is “heads” is
p(x | µ) = Ber(µ) .
We now repeat this experiment N times and observe outcomes x, . . . , xN
so that we obtain the joint distribution
p(x, . . . , xN | µ) =
n=
p(xn | µ) .
The expression on the right-hand side is a product of Bernoulli distribu-
tions on each individual outcome because the experiments are indepen-
dent. Recall from Section .. that statistical independence means that
the distribution factorizes. To write the graphical model down for this set-
ting, we make the distinction between unobserved/latent variables and
observed variables. Graphically, observed variables are denoted by shaded
nodes so that we obtain the graphical model in Figure .(a). We see
that the single parameter µ is the same for all xn, n = , . . . , N as the
outcomes xn are identically distributed. A more compact, but equivalent,
graphical model for this setting is given in Figure .(b), where we use
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Directed Graphical Models
Figure .
Graphical models
for a repeated
Bernoulli
experiment.
xn
xn
xN
n = , . . . , N
n = , . . . , N
(a) Version with xn explicit.
(b) Version with
plate notation.
(c)
Hyperparameters
and β on the latent µ.
the plate notation. The plate (box) repeats everything inside (in this case,
plate
the observations xn) N times. Therefore, both graphical models are equiv-
alent, but the plate notation is more compact. Graphical models immedi-
ately allow us to place a hyperprior on µ. A hyperprior is a second layer
hyperprior
of prior distributions on the parameters of the first layer of priors. Fig-
ure .(c) places a Beta(α, β) prior on the latent variable µ. If we treat
α and β as deterministic parameters, i.e., not random variables, we omit
the circle around it.
.. Conditional Independence and d-Separation
Directed graphical models allow us to find conditional independence (Sec-
tion ..) relationship properties of the joint distribution only by looking
at the graph. A concept called d-separation (Pearl, ) is key to this.
d-separation
Consider a general directed graph in which A, B, C are arbitrary nonin-
tersecting sets of nodes (whose union may be smaller than the complete
set of nodes in the graph). We wish to ascertain whether a particular con-
ditional independence statement, “A is conditionally independent of B
given C”, denoted by
A ⊥⊥ B | C ,
is implied by a given directed acyclic graph. To do so, we consider all
possible trails (paths that ignore the direction of the arrows) from any
node in A to any nodes in B. Any such path is said to be blocked if it
includes any node such that either of the following are true:
The arrows on the path meet either head to tail or tail to tail at the
node, and the node is in the set C.
The arrows meet head to head at the node, and neither the node nor
any of its descendants is in the set C.
If all paths are blocked, then A is said to be d-separated from B by C,
and the joint distribution over all of the variables in the graph will satisfy
A ⊥⊥ B | C.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
(a) Directed graphical model
(c) Factor graph
(b)
Undirected
graphical
model
Figure . Three
types of graphical
models: (a) Directed
graphical models
(Bayesian
networks);
(b) Undirected
graphical models
(Markov random
fields); (c) Factor
graphs.
Example . (Conditional Independence)
Figure .
D-separation
example.
Consider the graphical model in Figure .. Visual inspection gives us
b ⊥⊥ d | a, c
a ⊥⊥ c | b
b ̸⊥⊥ d | c
a ̸⊥⊥ c | b, e
Directed graphical models allow a compact representation of proba-
bilistic models, and we will see examples of directed graphical models in
Chapters , , and . The representation, along with the concept of con-
ditional independence, allows us to factorize the respective probabilistic
models into expressions that are easier to optimize.
The graphical representation of the probabilistic model allows us to
visually see the impact of design choices we have made on the structure
of the model. We often need to make high-level assumptions about the
structure of the model. These modeling assumptions (hyperparameters)
affect the prediction performance, but cannot be selected directly using
the approaches we have seen so far. We will discuss different ways to
choose the structure in Section ..
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Model Selection
.. Further Reading
An introduction to probabilistic graphical models can be found in Bishop
(, chapter ), and an extensive description of the different applica-
tions and corresponding algorithmic implications can be found in the book
by Koller and Friedman (). There are three main types of probabilistic
graphical models:
directed graphical
model
Directed graphical models (Bayesian networks); see Figure .(a)
Bayesian network
Undirected graphical models (Markov random fields); see Figure .(b)
Factor graphs; see Figure .(c)
undirected graphical
model
Markov random
field
factor graph
Graphical models allow for graph-based algorithms for inference and
learning, e.g., via local message passing. Applications range from rank-
ing in online games (Herbrich et al., ) and computer vision (e.g.,
image segmentation, semantic labeling, image denoising, image restora-
tion (Kittler and F¨oglein, ; Sucar and Gillies, ; Shotton et al.,
; Szeliski et al., )) to coding theory (McEliece et al., ), solv-
ing linear equation systems (Shental et al., ), and iterative Bayesian
state estimation in signal processing (Bickson et al., ; Deisenroth and
Mohamed, ).
One topic that is particularly important in real applications that we do
not discuss in this book is the idea of structured prediction (Bakir et al.,
; Nowozin et al., ), which allows machine learning models to
tackle predictions that are structured, for example sequences, trees, and
graphs. The popularity of neural network models has allowed more flex-
ible probabilistic models to be used, resulting in many useful applica-
tions of structured models (Goodfellow et al., , chapter ). In recent
years, there has been a renewed interest in graphical models due to their
applications to causal inference (Pearl, ; Imbens and Rubin, ;
Peters et al., ; Rosenbaum, ).
. Model Selection
In machine learning, we often need to make high-level modeling decisions
that critically influence the performance of the model. The choices we
make (e.g., the functional form of the likelihood) influence the number
and type of free parameters in the model and thereby also the flexibility
and expressivity of the model. More complex models are more flexible in
A polynomial
y = a +ax+ax
can also describe
linear functions by
setting a = , i.e.,
it is strictly more
expressive than a
first-order
polynomial.
the sense that they can be used to describe more datasets. For instance, a
polynomial of degree  (a line y = a + ax) can only be used to describe
linear relations between inputs x and observations y. A polynomial of
degree  can additionally describe quadratic relationships between inputs
and observations.
One would now think that very flexible models are generally preferable
to simple models because they are more expressive. A general problem
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
All labeled data
All training data
Test data
Figure . Nested
cross-validation. We
perform two levels
of K-fold
cross-validation.
To train model
Validation
is that at training time we can only use the training set to evaluate the
performance of the model and learn its parameters. However, the per-
formance on the training set is not really what we are interested in. In
Section ., we have seen that maximum likelihood estimation can lead
to overfitting, especially when the training dataset is small. Ideally, our
model (also) works well on the test set (which is not available at training
time). Therefore, we need some mechanisms for assessing how a model
generalizes to unseen test data. Model selection is concerned with exactly
this problem.
.. Nested Cross-Validation
We have already seen an approach (cross-validation in Section ..) that
can be used for model selection. Recall that cross-validation provides an
estimate of the generalization error by repeatedly splitting the dataset into
training and validation sets. We can apply this idea one more time, i.e.,
for each split, we can perform another round of cross-validation. This is
sometimes referred to as nested cross-validation; see Figure .. The inner
nested
cross-validation
level is used to estimate the performance of a particular choice of model
or hyperparameter on a internal validation set. The outer level is used to
estimate generalization performance for the best choice of model chosen
by the inner loop. We can test different model and hyperparameter choices
in the inner loop. To distinguish the two levels, the set used to estimate
the generalization performance is often called the test set and the set used
test set
for choosing the best model is called the validation set. The inner loop
validation set
estimates the expected value of the generalization error for a given model
(.), by approximating it using the empirical error on the validation set,
i.e.,
The standard error
is defined as
EV[R(V | M)] ≈
k=
R(V(k) | M) ,
K ,
where K is the
number of
experiments and σ
is the standard
deviation of the risk
of each experiment.
where R(V | M) is the empirical risk (e.g., root mean square error) on the
validation set V for model M. We repeat this procedure for all models and
choose the model that performs best. Note that cross-validation not only
gives us the expected generalization error, but we can also obtain high-
order statistics, e.g., the standard error, an estimate of how uncertain the
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Model Selection
Evidence
p(D | M)
p(D | M)
Figure .
Bayesian inference
embodies Occam’s
razor. The
horizontal axis
describes the space
of all possible
datasets D. The
evidence (vertical
axis) evaluates how
well a model
predicts available
data. Since
p(D | Mi) needs to
integrate to , we
should choose the
model with the
greatest evidence.
Adapted
from MacKay
mean estimate is. Once the model is chosen, we can evaluate the final
performance on the test set.
.. Bayesian Model Selection
There are many approaches to model selection, some of which are covered
in this section. Generally, they all attempt to trade off model complexity
and data fit. We assume that simpler models are less prone to overfitting
than complex models, and hence the objective of model selection is to find
the simplest model that explains the data reasonably well. This concept is
also known as Occam’s razor.
Occam’s razor
Remark. If we treat model selection as a hypothesis testing problem, we
are looking for the simplest hypothesis that is consistent with the data (Mur-
phy, ).
One may consider placing a prior on models that favors simpler models.
However, it is not necessary to do this: An “automatic Occam’s Razor” is
quantitatively embodied in the application of Bayesian probability (Smith
and Spiegelhalter, ; Jefferys and Berger, ; MacKay, ). Fig-
ure ., adapted from MacKay (), gives us the basic intuition why
complex and very expressive models may turn out to be a less probable
choice for modeling a given dataset D. Let us think of the horizontal axis
These predictions
are quantified by a
normalized
probability
distribution on D,
i.e., it needs to
integrate/sum to .
representing the space of all possible datasets D. If we are interested in
the posterior probability p(Mi | D) of model Mi given the data D, we can
employ Bayes’ theorem. Assuming a uniform prior p(M) over all mod-
els, Bayes’ theorem rewards models in proportion to how much they pre-
dicted the data that occurred. This prediction of the data given model
Mi, p(D | Mi), is called the evidence for Mi. A simple model M can only
evidence
predict a small number of datasets, which is shown by p(D | M); a more
powerful model M that has, e.g., more free parameters than M, is able
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
Mk ∼ p(M)
θk ∼ p(θ | Mk)
D ∼ p(D | θk)
and illustrated in Figure .. Given a training set D, we apply Bayes’
theorem and compute the posterior distribution over models as
p(Mk | D) ∝ p(Mk)p(D | Mk) .
Note that this posterior no longer depends on the model parameters θk
because they have been integrated out in the Bayesian setting since
to predict a greater variety of datasets. This means, however, that M
does not predict the datasets in region C as well as M. Suppose that
equal prior probabilities have been assigned to the two models. Then, if
the dataset falls into region C, the less powerful model M is the more
probable model.
Earlier in this chapter, we argued that models need to be able to explain
the data, i.e., there should be a way to generate data from a given model.
Furthermore, if the model has been appropriately learned from the data,
then we expect that the generated data should be similar to the empirical
data. For this, it is helpful to phrase model selection as a hierarchical
inference problem, which allows us to compute the posterior distribution
over models.
Let us consider a finite number of models M = {M, . . . , MK}, where
each model Mk possesses parameters θk. In Bayesian model selection, we
Bayesian model
selection
place a prior p(M) on the set of models. The corresponding generative
generative process
process that allows us to generate data from this model is
Figure .
Illustration of the
hierarchical
generative process
in Bayesian model
selection. We place
a prior p(M) on the
set of models. For
each model, there is
a distribution
p(θ | M) on the
corresponding
model parameters,
which is used to
generate the data D.
p(D | Mk) =
p(D | θk)p(θk | Mk)dθk ,
where p(θk | Mk) is the prior distribution of the model parameters θk of
model Mk. The term (.) is referred to as the model evidence or marginal
likelihood. From the posterior in (.), we determine the MAP estimate
M ∗ = arg max
Mk p(Mk | D) .
With a uniform prior p(Mk) =
K , which gives every model equal (prior)
probability, determining the MAP estimate over models amounts to pick-
ing the model that maximizes the model evidence (.).
model evidence
marginal likelihood
Remark (Likelihood and Marginal Likelihood). There are some important
differences between a likelihood and a marginal likelihood (evidence):
While the likelihood is prone to overfitting, the marginal likelihood is typ-
ically not as the model parameters have been marginalized out (i.e., we
no longer have to fit the parameters). Furthermore, the marginal likeli-
hood automatically embodies a trade-off between model complexity and
data fit (Occam’s razor).
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Model Selection
.. Bayes Factors for Model Comparison
Consider the problem of comparing two probabilistic models M, M,
given a dataset D. If we compute the posteriors p(M | D) and p(M | D),
we can compute the ratio of the posteriors
p(D | M)p(M)
p(D)
p(D | M)p(M)
p(D)
= p(M)
p(M | D)
p(M | D)
{z
posterior odds
p(M)
| {z }
prior odds
p(D | M)
p(D | M)
{z
Bayes factor
The ratio of the posteriors is also called the posterior odds. The first frac-
posterior odds
tion on the right-hand side of (.), the prior odds, measures how much
prior odds
our prior (initial) beliefs favor M over M. The ratio of the marginal like-
lihoods (second fraction on the right-hand-side) is called the Bayes factor
Bayes factor
and measures how well the data D is predicted by M compared to M.
Remark. The Jeffreys-Lindley paradox states that the “Bayes factor always
Jeffreys-Lindley
paradox
favors the simpler model since the probability of the data under a complex
model with a diffuse prior will be very small” (Murphy, ). Here, a
diffuse prior refers to a prior that does not favor specific models, i.e.,
many models are a priori plausible under this prior.
If we choose a uniform prior over models, the prior odds term in (.)
is , i.e., the posterior odds is the ratio of the marginal likelihoods (Bayes
factor)
p(D | M)
p(D | M) .
If the Bayes factor is greater than , we choose model M, otherwise
model M. In a similar way to frequentist statistics, there are guidelines
on the size of the ratio that one should consider before ”significance” of
the result (Jeffreys, ).
Remark (Computing the Marginal Likelihood). The marginal likelihood
plays an important role in model selection: We need to compute Bayes
factors (.) and posterior distributions over models (.).
Unfortunately, computing the marginal likelihood requires us to solve
an integral (.). This integration is generally analytically intractable,
and we will have to resort to approximation techniques, e.g., numerical
integration (Stoer and Burlirsch, ), stochastic approximations using
Monte Carlo (Murphy, ), or Bayesian Monte Carlo techniques (O’Hagan,
; Rasmussen and Ghahramani, ).
However, there are special cases in which we can solve it. In Section ..,
we discussed conjugate models. If we choose a conjugate parameter prior
p(θ), we can compute the marginal likelihood in closed form. In Chap-
ter , we will do exactly this in the context of linear regression.
We have seen a brief introduction to the basic concepts of machine
learning in this chapter. For the rest of this part of the book we will see
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

When Models Meet Data
how the three different flavors of learning in Sections ., ., and . are
applied to the four pillars of machine learning (regression, dimensionality
reduction, density estimation, and classification).
.. Further Reading
We mentioned at the start of the section that there are high-level modeling
choices that influence the performance of the model. Examples include the
following:
The degree of a polynomial in a regression setting
The number of components in a mixture model
The network architecture of a (deep) neural network
The type of kernel in a support vector machine
The dimensionality of the latent space in PCA
The learning rate (schedule) in an optimization algorithm
In parametric
models, the number
of parameters is
often related to the
complexity of the
model class.
Rasmussen and Ghahramani () showed that the automatic Occam’s
razor does not necessarily penalize the number of parameters in a model,
but it is active in terms of the complexity of functions. They also showed
that the automatic Occam’s razor also holds for Bayesian nonparametric
models with many parameters, e.g., Gaussian processes.
If we focus on the maximum likelihood estimate, there exist a number of
heuristics for model selection that discourage overfitting. They are called
information criteria, and we choose the model with the largest value. The
Akaike information criterion (AIC) (Akaike, )
Akaike information
criterion
log p(x | θ) − M
M log N
corrects for the bias of the maximum likelihood estimator by addition of
a penalty term to compensate for the overfitting of more complex models
with lots of parameters. Here, M is the number of model parameters. The
AIC estimates the relative information lost by a given model.
The Bayesian information criterion (BIC) (Schwarz, )
Bayesian
information
criterion
log p(x) = log
p(x | θ)p(θ)dθ ≈ log p(x | θ) −
can be used for exponential family distributions. Here, N is the number
of data points and M is the number of parameters. BIC penalizes model
complexity more heavily than AIC.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Linear Regression
In the following, we will apply the mathematical concepts from Chap-
ters , , , and  to solve linear regression (curve fitting) problems. In
regression, we aim to find a function f that maps inputs x ∈ RD to corre-
regression
sponding function values f(x) ∈ R. We assume we are given a set of train-
ing inputs xn and corresponding noisy observations yn = f(xn)+ϵ, where
ϵ is an i.i.d. random variable that describes measurement/observation
noise and potentially unmodeled processes (which we will not consider
further in this chapter). Throughout this chapter, we assume zero-mean
Gaussian noise. Our task is to find a function that not only models the
training data, but generalizes well to predicting function values at input
locations that are not part of the training data (see Chapter ). An il-
lustration of such a regression problem is given in Figure .. A typical
regression setting is given in Figure .(a): For some input values xn, we
observe (noisy) function values yn = f(xn) + ϵ. The task is to infer the
function f that generated the data and generalizes well to function values
at new input locations. A possible solution is given in Figure .(b), where
we also show three distributions centered at the function values f(x) that
represent the noise in the data.
Regression is a fundamental problem in machine learning, and regres-
sion problems appear in a diverse range of research areas and applica-
Figure .
(a) Dataset;
(b) possible solution
to the regression
problem.
(a) Regression problem: observed noisy func-
tion values from which we wish to infer the
underlying function that generated the data.
(b) Regression solution: possible function
that could have generated the data (blue)
with indication of the measurement noise of
the function value at the corresponding in-
puts (orange distributions).
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

Linear Regression
tions, including time-series analysis (e.g., system identification), control
and robotics (e.g., reinforcement learning, forward/inverse model learn-
ing), optimization (e.g., line searches, global optimization), and deep-
learning applications (e.g., computer games, speech-to-text translation,
image recognition, automatic video annotation). Regression is also a key
ingredient of classification algorithms. Finding a regression function re-
quires solving a variety of problems, including the following:
Choice of the model (type) and the parametrization of the regres-
sion function. Given a dataset, what function classes (e.g., polynomi-
Normally, the type
of noise could also
be a “model choice”,
but we fix the noise
to be Gaussian in
this chapter.
als) are good candidates for modeling the data, and what particular
parametrization (e.g., degree of the polynomial) should we choose?
Model selection, as discussed in Section ., allows us to compare var-
ious models to find the simplest model that explains the training data
reasonably well.
Finding good parameters. Having chosen a model of the regression
function, how do we find good model parameters? Here, we will need to
look at different loss/objective functions (they determine what a “good”
fit is) and optimization algorithms that allow us to minimize this loss.
Overfitting and model selection. Overfitting is a problem when the
regression function fits the training data “too well” but does not gen-
eralize to unseen test data. Overfitting typically occurs if the underly-
ing model (or its parametrization) is overly flexible and expressive; see
Section .. We will look at the underlying reasons and discuss ways to
mitigate the effect of overfitting in the context of linear regression.
Relationship between loss functions and parameter priors. Loss func-
tions (optimization objectives) are often motivated and induced by prob-
abilistic models. We will look at the connection between loss functions
and the underlying prior assumptions that induce these losses.
Uncertainty modeling. In any practical setting, we have access to only
a finite, potentially large, amount of (training) data for selecting the
model class and the corresponding parameters. Given that this finite
amount of training data does not cover all possible scenarios, we may
want to describe the remaining parameter uncertainty to obtain a mea-
sure of confidence of the model’s prediction at test time; the smaller the
training set, the more important uncertainty modeling. Consistent mod-
eling of uncertainty equips model predictions with confidence bounds.
In the following, we will be using the mathematical tools from Chap-
ters , ,  and  to solve linear regression problems. We will discuss
maximum likelihood and maximum a posteriori (MAP) estimation to find
optimal model parameters. Using these parameter estimates, we will have
a brief look at generalization errors and overfitting. Toward the end of
this chapter, we will discuss Bayesian linear regression, which allows us to
reason about model parameters at a higher level, thereby removing some
of the problems encountered in maximum likelihood and MAP estimation.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Problem Formulation
. Problem Formulation
Because of the presence of observation noise, we will adopt a probabilis-
tic approach and explicitly model the noise using a likelihood function.
More specifically, throughout this chapter, we consider a regression prob-
lem with the likelihood function
p(y | x) = N
 y | f(x), σ .
Here, x ∈ RD are inputs and y ∈ R are noisy function values (targets).
With (.), the functional relationship between x and y is given as
y = f(x) + ϵ ,
where ϵ ∼ N
 , σ
is independent, identically distributed (i.i.d.) Gaus-
sian measurement noise with mean  and variance σ. Our objective is
to find a function that is close (similar) to the unknown function f that
generated the data and that generalizes well.
In this chapter, we focus on parametric models, i.e., we choose a para-
metrized function and find parameters θ that “work well” for modeling the
data. For the time being, we assume that the noise variance σ is known
and focus on learning the model parameters θ. In linear regression, we
consider the special case that the parameters θ appear linearly in our
model. An example of linear regression is given by
p(y | x, θ) = N
 y | x⊤θ, σ
⇐⇒ y = x⊤θ + ϵ ,
ϵ ∼ N
 , σ ,
The likelihood in (.) is the probability density function of y evalu-
ated at x⊤θ. Note that the only source of uncertainty originates from the
observation noise (as x and θ are assumed known in (.)). Without ob-
servation noise, the relationship between x and y would be deterministic
and (.) would be a Dirac delta.
where θ ∈ RD are the parameters we seek. The class of functions de-
scribed by (.) are straight lines that pass through the origin. In (.),
we chose a parametrization f(x) = x⊤θ.
A Dirac delta (delta
function) is zero
everywhere except
at a single point,
and its integral is .
It can be considered
a Gaussian in the
limit of σ → .
likelihood
Example .
For x, θ ∈ R the linear regression model in (.) describes straight lines
(linear functions), and the parameter θ is the slope of the line. Fig-
ure .(a) shows some example functions for different values of θ.
Linear regression
refers to models that
are linear in the
parameters.
The linear regression model in (.)–(.) is not only linear in the pa-
rameters, but also linear in the inputs x. Figure .(a) shows examples
of such functions. We will see later that y = ϕ⊤(x)θ for nonlinear trans-
formations ϕ is also a linear regression model because “linear regression”
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
(b) Training set.
Figure . Linear
regression example.
(a) Example
functions that fall
into this category;
(b) training set;
(c) maximum
likelihood estimate.
(c) Maximum likelihood esti-
mate.
(a) Example functions (straight
lines) that can be described us-
ing the linear model in (.).
refers to models that are “linear in the parameters”, i.e., models that de-
scribe a function by a linear combination of input features. Here, a “fea-
ture” is a representation ϕ(x) of the inputs x.
In the following, we will discuss in more detail how to find good pa-
rameters θ and how to evaluate whether a parameter set “works well”.
For the time being, we assume that the noise variance σ is known.
. Parameter Estimation
corresponding graphical model is given in Figure .. Note that yi and yj
are conditionally independent given their respective inputs xi, xj so that
the likelihood factorizes according to
p(Y | X, θ) = p(y, . . . , yN | x, . . . , xN, θ)
(.a)
Consider the linear regression setting (.) and assume we are given a
training set D := {(x, y), . . . , (xN, yN)} consisting of N inputs xn ∈
training set
RD and corresponding observations/targets yn ∈ R, n = , . . . , N. The
Figure .
Probabilistic
graphical model for
linear regression.
Observed random
variables are
shaded,
deterministic/
known values are
without circles.
n=
p(yn | xn, θ) =
n=
 yn | x⊤
n θ, σ ,
(.b)
yn
xn
n = , . . . , N
where we defined X := {x, . . . , xN} and Y := {y, . . . , yN} as the sets
of training inputs and corresponding targets, respectively. The likelihood
and the factors p(yn | xn, θ) are Gaussian due to the noise distribution;
see (.).
In the following, we will discuss how to find optimal parameters θ∗ ∈
RD for the linear regression model (.). Once the parameters θ∗ are
found, we can predict function values by using this parameter estimate
in (.) so that at an arbitrary test input x∗ the distribution of the corre-
sponding target y∗ is
p(y∗ | x∗, θ∗) = N
 y∗ | x⊤
∗ θ∗, σ .
In the following, we will have a look at parameter estimation by maxi-
mizing the likelihood, a topic that we already covered to some degree in
Section ..
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Estimation
.. Maximum Likelihood Estimation
ing the predictive distribution of the training data given the model param-
eters. We obtain the maximum likelihood parameters as
θML ∈ arg max
p(Y | X, θ) .
A widely used approach to finding the desired parameters θML is maximum
maximum likelihood
estimation
likelihood estimation, where we find parameters θML that maximize the
likelihood (.b). Intuitively, maximizing the likelihood means maximiz-
Maximizing the
likelihood means
maximizing the
predictive
distribution of the
(training) data
given the
parameters.
The likelihood is not
a probability
distribution in the
parameters.
Remark. The likelihood p(y | x, θ) is not a probability distribution in θ: It
is simply a function of the parameters θ but does not integrate to  (i.e.,
it is unnormalized), and may not even be integrable with respect to θ.
However, the likelihood in (.) is a normalized probability distribution
in y.
a closed-form solution exists, which makes iterative gradient descent un-
necessary. In practice, instead of maximizing the likelihood directly, we
apply the log-transformation to the likelihood function and minimize the
negative log-likelihood.
To find the desired parameters θML that maximize the likelihood, we
typically perform gradient ascent (or gradient descent on the negative
likelihood). In the case of linear regression we consider here, however,
Since the logarithm
is a (strictly)
monotonically
increasing function,
the optimum of a
function f is
identical to the
optimum of log f.
Remark (Log-Transformation). Since the likelihood (.b) is a product of
N Gaussian distributions, the log-transformation is useful since (a) it does
not suffer from numerical underflow, and (b) the differentiation rules will
turn out simpler. More specifically, numerical underflow will be a prob-
lem when we multiply N probabilities, where N is the number of data
points, since we cannot represent very small numbers, such as −.
Furthermore, the log-transform will turn the product into a sum of log-
probabilities such that the corresponding gradient is a sum of individual
gradients, instead of a repeated application of the product rule (.) to
compute the gradient of a product of N terms.
To find the optimal parameters θML of our linear regression problem,
we minimize the negative log-likelihood
− log p(Y | X, θ) = − log
n=
p(yn | xn, θ) = −
n=
log p(yn | xn, θ) , (.)
where we exploited that the likelihood (.b) factorizes over the number
of data points due to our independence assumption on the training set.
In the linear regression model (.), the likelihood is Gaussian (due to
the Gaussian additive noise term), such that we arrive at
σ (yn − x⊤
n θ) + const ,
log p(yn | xn, θ) = −
where the constant includes all terms independent of θ. Using (.) in the
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
negative log-likelihood (.), we obtain (ignoring the constant terms)
L(θ) :=
n=
(yn − x⊤
n θ)
(.a)
σ (y − Xθ)⊤(y − Xθ) =
σ ∥y − Xθ∥
(.b)
where we define the design matrix X := [x, . . . , xN]⊤ ∈ RN×D as the
The negative
log-likelihood
function is also
called error function.
collection of training inputs and y := [y, . . . , yN]⊤ ∈ RN as a vector that
collects all training targets. Note that the nth row in the design matrix X
corresponds to the training input xn. In (.b), we used the fact that the
design matrix
sum of squared errors between the observations yn and the corresponding
model prediction x⊤
n θ equals the squared distance between y and Xθ.
The squared error is
often used as a
measure of distance.
Recall from
Section . that
∥x∥ = x⊤x if we
choose the dot
product as the inner
product.
With (.b), we have now a concrete form of the negative log-likelihood
function we need to optimize. We immediately see that (.b) is quadratic
in θ. This means that we can find a unique global solution θML for mini-
mizing the negative log-likelihood L. We can find the global optimum by
computing the gradient of L, setting it to  and solving for θ.
Using the results from Chapter , we compute the gradient of L with
respect to the parameters as
dL
dθ = d
dθ

σ (y − Xθ)⊤(y − Xθ)

(.a)
dθ

y⊤y − y⊤Xθ + θ⊤X⊤Xθ

(.b)
σ (−y⊤X + θ⊤X⊤X) ∈ R×D .
(.c)
The maximum likelihood estimator θML solves dL
dL
dθ = ⊤ (.c)
⇐⇒ θ⊤
MLX⊤X = y⊤X
(.a)
⇐⇒ θ⊤
ML = y⊤X(X⊤X)−
(.b)
dθ = ⊤ (necessary opti-
mality condition) and we obtain
Ignoring the
possibility of
duplicate data
points, rk(X) = D
if N ⩾ D, i.e., we
do not have more
parameters than
data points.
⇐⇒ θML = (X⊤X)−X⊤y .
(.c)
We could right-multiply the first equation by (X⊤X)− because X⊤X is
positive definite if rk(X) = D, where rk(X) denotes the rank of X.
Remark. Setting the gradient to ⊤ is a necessary and sufficient condition,
and we obtain a global minimum since the Hessian ∇
θL(θ) = X⊤X ∈
RD×D is positive definite.
Remark. The maximum likelihood solution in (.c) requires us to solve
a system of linear equations of the form Aθ = b with A = (X⊤X) and
b = X⊤y.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Estimation
Example . (Fitting Lines)
Let us have a look at Figure ., where we aim to fit a straight line f(x) =
θx, where θ is an unknown slope, to a dataset using maximum likelihood
estimation. Examples of functions in this model class (straight lines) are
shown in Figure .(a). For the dataset shown in Figure .(b), we find
the maximum likelihood estimate of the slope parameter θ using (.c)
and obtain the maximum likelihood linear function in Figure .(c).
Maximum Likelihood Estimation with Features
So far, we considered the linear regression setting described in (.),
which allowed us to fit straight lines to data using maximum likelihood
estimation. However, straight lines are not sufficiently expressive when it
Linear regression
refers to “linear-in-
the-parameters”
regression models,
but the inputs can
undergo any
nonlinear
transformation.
comes to fitting more interesting data. Fortunately, linear regression offers
us a way to fit nonlinear functions within the linear regression framework:
Since “linear regression” only refers to “linear in the parameters”, we can
perform an arbitrary nonlinear transformation ϕ(x) of the inputs x and
then linearly combine the components of this transformation. The corre-
sponding linear regression model is
p(y | x, θ) = N
 y | ϕ⊤(x)θ, σ
⇐⇒ y = ϕ⊤(x)θ + ϵ =
k=
θkϕk(x) + ϵ ,
K−
where ϕ : RD → RK is a (nonlinear) transformation of the inputs x and
ϕk : RD → R is the kth component of the feature vector ϕ. Note that the
feature vector
model parameters θ still appear only linearly.
Example . (Polynomial Regression)
We are concerned with a regression problem y = ϕ⊤(x)θ+ϵ, where x ∈ R
and θ ∈ RK. A transformation that is often used in this context is
ϕ(x) =
∈ RK .
ϕ(x)
ϕ(x)
ϕK−(x)
xK−
 =
This means that we “lift” the original one-dimensional input space into
a K-dimensional feature space consisting of all monomials xk for k =
, . . . , K − . With these features, we can model polynomials of degree
⩽ K− within the framework of linear regression: A polynomial of degree
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
K −  is
f(x) =
k=
θkxk = ϕ⊤(x)θ ,
K−
where ϕ is defined in (.) and θ = [θ, . . . , θK−]⊤ ∈ RK contains the
(linear) parameters θk.
Let us now have a look at maximum likelihood estimation of the param-
eters θ in the linear regression model (.). We consider training inputs
xn ∈ RD and targets yn ∈ R, n = , . . . , N, and define the feature matrix
feature matrix
(design matrix) as
design matrix
Φ :=
ϕ⊤(x)
ϕ⊤(xN)
 =
ϕ(x)

ϕK−(x)
ϕ(x)

ϕK−(x)
ϕ(xN)

ϕK−(xN)
 ∈ RN×K ,
where Φij = ϕj(xi) and ϕj : RD → R.
Example . (Feature Matrix for Second-order Polynomials)
For a second-order polynomial and N training points xn ∈ R, n =
, . . . , N, the feature matrix is
Φ =
xN
 .
With the feature matrix Φ defined in (.), the negative log-likelihood
for the linear regression model (.) can be written as
− log p(Y | X, θ) =
σ (y − Φθ)⊤(y − Φθ) + const .
Comparing (.) with the negative log-likelihood in (.b) for the “fea-
ture-free” model, we immediately see we just need to replace X with Φ.
Since both X and Φ are independent of the parameters θ that we wish to
optimize, we arrive immediately at the maximum likelihood estimate
maximum likelihood
estimate
θML = (Φ⊤Φ)−Φ⊤y
for the linear regression problem with nonlinear features defined in (.).
Remark. When we were working without features, we required X⊤X to
be invertible, which is the case when rk(X) = D, i.e., the columns of X
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Estimation
are linearly independent. In (.), we therefore require Φ⊤Φ ∈ RK×K
to be invertible. This is the case if and only if rk(Φ) = K.
Example . (Maximum Likelihood Polynomial Fit)
Training data
MLE
Figure .
Polynomial
regression:
(a) dataset
consisting of
(xn, yn) pairs,
n = , . . . , ;
(b) maximum
likelihood
polynomial of
degree .
(a) Regression dataset.
(b) Polynomial of degree  determined by max-
imum likelihood estimation.
Consider the dataset in Figure .(a). The dataset consists of N =
pairs (xn, yn), where xn ∼ U[−, ] and yn = − sin(xn/) + cos(xn) + ϵ,
where ϵ ∼ N
 , .
We fit a polynomial of degree  using maximum likelihood estimation,
i.e., parameters θML are given in (.). The maximum likelihood estimate
yields function values ϕ⊤(x∗)θML at any test location x∗. The result is
shown in Figure .(b).
Estimating the Noise Variance
Thus far, we assumed that the noise variance σ is known. However, we
can also use the principle of maximum likelihood estimation to obtain the
maximum likelihood estimator σ
ML for the noise variance. To do this, we
follow the standard procedure: We write down the log-likelihood, com-
pute its derivative with respect to σ > , set it to , and solve. The
log-likelihood is given by
log p(Y | X, θ, σ) =
n=
log N
 yn | ϕ⊤(xn)θ, σ
(.a)
log(π) −
log σ −
n=
σ (yn − ϕ⊤(xn)θ)
(.b)
+ const .
(.c)
= −N
log σ −
n=
(yn − ϕ⊤(xn)θ)
{z
=:s
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
The partial derivative of the log-likelihood with respect to σ is then
∂ log p(Y | X, θ, σ)
σ +
σ s =
(.a)
∂σ
= − N
σ =
(.b)
⇐⇒ N
so that we identify
ML = s
N =
n=
(yn − ϕ⊤(xn)θ) .
Therefore, the maximum likelihood estimate of the noise variance is the
empirical mean of the squared distances between the noise-free function
values ϕ⊤(xn)θ and the corresponding noisy observations yn at input lo-
cations xn.
.. Overfitting in Linear Regression
n=
(yn − ϕ⊤(xn)θ) ,
We just discussed how to use maximum likelihood estimation to fit lin-
ear models (e.g., polynomials) to data. We can evaluate the quality of
the model by computing the error/loss incurred. One way of doing this
is to compute the negative log-likelihood (.b), which we minimized
to determine the maximum likelihood estimator. Alternatively, given that
the noise parameter σ is not a free model parameter, we can ignore the
scaling by /σ, so that we end up with a squared-error-loss function
∥y − Φθ∥
. Instead of using this squared loss, we often use the root mean
root mean square
error
square error (RMSE)
RMSE
N ∥y − Φθ∥
which (a) allows us to compare errors of datasets with different sizes
and (b) has the same scale and the same units as the observed func-
The RMSE is
normalized.
tion values yn. For example, if we fit a model that maps post-codes (x
is given in latitude, longitude) to house prices (y-values are EUR) then
the RMSE is also measured in EUR, whereas the squared error is given
in EUR. If we choose to include the factor σ from the original negative
The negative
log-likelihood is
unitless.
log-likelihood (.b), then we end up with a unitless objective, i.e., in
the preceding example, our objective would no longer be in EUR or EUR.
For model selection (see Section .), we can use the RMSE (or the
negative log-likelihood) to determine the best degree of the polynomial by
finding the polynomial degree M that minimizes the objective. Given that
the polynomial degree is a natural number, we can perform a brute-force
search and enumerate all (reasonable) values of M. For a training set of
size N it is sufficient to test  ⩽ M ⩽ N − . For M < N, the maximum
likelihood estimator is unique. For M ⩾ N, we have more parameters
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Estimation
Training data
MLE
Training data
MLE
Training data
MLE
Figure .
Maximum
likelihood fits for
different polynomial
degrees M.
(a) M =
(b) M =
(c) M =
Training data
MLE
Training data
MLE
Training data
MLE
(d) M =
(e) M =
(f) M =
polynomials, we notice that they fit the data better and better. In the ex-
treme case of M = N −  = , the function will pass through every single
data point. However, these high-degree polynomials oscillate wildly and
are a poor representation of the underlying function that generated the
data, such that we suffer from overfitting.
than data points, and would need to solve an underdetermined system of
linear equations (Φ⊤Φ in (.) would also no longer be invertible) so
that there are infinitely many possible maximum likelihood estimators.
Figure . shows a number of polynomial fits determined by maximum
likelihood for the dataset from Figure .(a) with N =  observations.
We notice that polynomials of low degree (e.g., constants (M = ) or
linear (M = )) fit the data poorly and, hence, are poor representations
of the true underlying function. For degrees M = , . . . , , the fits look
plausible and smoothly interpolate the data. When we go to higher-degree
The case of
M = N −  is
extreme in the sense
that otherwise the
null space of the
corresponding
system of linear
equations would be
non-trivial, and we
would have
infinitely many
optimal solutions to
the linear regression
problem.
overfitting
Note that the noise
variance σ > .
Remember that the goal is to achieve good generalization by making
accurate predictions for new (unseen) data. We obtain some quantita-
tive insight into the dependence of the generalization performance on the
polynomial of degree M by considering a separate test set comprising
data points generated using exactly the same procedure used to generate
the training set. As test inputs, we chose a linear grid of  points in the
interval of [−, ]. For each choice of M, we evaluate the RMSE (.) for
both the training data and the test data.
Looking now at the test error, which is a qualitive measure of the gen-
eralization properties of the corresponding polynomial, we notice that ini-
tially the test error decreases; see Figure . (orange). For fourth-order
polynomials, the test error is relatively low and stays relatively constant up
to degree . However, from degree  onward the test error increases signif-
icantly, and high-order polynomials have very bad generalization proper-
ties. In this particular example, this also is evident from the corresponding
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
Figure . Training
and test error.
Training error
Test error
RMSE
Degree of polynomial
maximum likelihood fits in Figure .. Note that the training error (blue
training error
curve in Figure .) never increases when the degree of the polynomial in-
creases. In our example, the best generalization (the point of the smallest
test error) is obtained for a polynomial of degree M = .
test error
.. Maximum A Posteriori Estimation
We just saw that maximum likelihood estimation is prone to overfitting.
We often observe that the magnitude of the parameter values becomes
relatively large if we run into overfitting (Bishop, ).
To mitigate the effect of huge parameter values, we can place a prior
distribution p(θ) on the parameters. The prior distribution explicitly en-
codes what parameter values are plausible (before having seen any data).
For example, a Gaussian prior p(θ) = N
on a single parameter
θ encodes that parameter values are expected lie in the interval [−, ]
(two standard deviations around the mean value). Once a dataset X, Y
is available, instead of maximizing the likelihood we seek parameters that
maximize the posterior distribution p(θ | X, Y). This procedure is called
maximum a posteriori (MAP) estimation.
maximum a
posteriori
MAP
The posterior over the parameters θ, given the training data X, Y, is
obtained by applying Bayes’ theorem (Section .) as
p(θ | X, Y) = p(Y | X, θ)p(θ)
p(Y | X)
Since the posterior explicitly depends on the parameter prior p(θ), the
prior will have an effect on the parameter vector we find as the maximizer
of the posterior. We will see this more explicitly in the following. The
parameter vector θMAP that maximizes the posterior (.) is the MAP
estimate.
To find the MAP estimate, we follow steps that are similar in flavor
to maximum likelihood estimation. We start with the log-transform and
compute the log-posterior as
log p(θ | X, Y) = log p(Y | X, θ) + log p(θ) + const ,
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Estimation
where the constant comprises the terms that are independent of θ. We see
that the log-posterior in (.) is the sum of the log-likelihood p(Y | X, θ)
and the log-prior log p(θ) so that the MAP estimate will be a “compromise”
between the prior (our suggestion for plausible parameter values before
observing data) and the data-dependent likelihood.
To find the MAP estimate θMAP, we minimize the negative log-posterior
distribution with respect to θ, i.e., we solve
θMAP ∈ arg min
θ {− log p(Y | X, θ) − log p(θ)} .
The gradient of the negative log-posterior with respect to θ is
dθ
−d log p(θ | X, Y)
dθ
= −d log p(Y | X, θ)
dθ
− d log p(θ)
where we identify the first term on the right-hand side as the gradient of
the negative log-likelihood from (.c).
With a (conjugate) Gaussian prior p(θ) = N
 , bI
on the parameters
θ, the negative log-posterior for the linear regression setting (.), we
obtain the negative log posterior
b θ⊤θ + const . (.)
− log p(θ | X, Y) =
σ (y − Φθ)⊤(y − Φθ) +
Here, the first term corresponds to the contribution from the log-likelihood,
and the second term originates from the log-prior. The gradient of the log-
posterior with respect to the parameters θ is then
dθ
b θ⊤ .
σ (θ⊤Φ⊤Φ − y⊤Φ) +
−d log p(θ | X, Y)
We will find the MAP estimate θMAP by setting this gradient to ⊤ and
solving for θMAP. We obtain
b θ⊤ = ⊤
(.a)
σ (θ⊤Φ⊤Φ − y⊤Φ) +
σ Φ⊤Φ +
σ y⊤Φ = ⊤
(.b)
⇐⇒ θ⊤

b I

⇐⇒ θ⊤

Φ⊤Φ + σ
b I

= y⊤Φ
(.c)
⇐⇒ θ⊤ = y⊤Φ

Φ⊤Φ + σ
b I
(.d)
θMAP =

Φ⊤Φ + σ
b I
Φ⊤y .
so that the MAP estimate is (by transposing both sides of the last equality)
Φ⊤Φ is symmetric,
positive semi
definite. The
additional term
in (.) is strictly
positive definite so
that the inverse
exists.
Comparing the MAP estimate in (.) with the maximum likelihood es-
timate in (.), we see that the only difference between both solutions
is the additional term σ
b I in the inverse matrix. This term ensures that
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
Φ⊤Φ + σ
b I is symmetric and strictly positive definite (i.e., its inverse
exists and the MAP estimate is the unique solution of a system of linear
equations). Moreover, it reflects the impact of the regularizer.
Example . (MAP Estimation for Polynomial Regression)
In the polynomial regression example from Section .., we place a Gaus-
sian prior p(θ) = N
 , I
on the parameters θ and determine the MAP
estimates according to (.). In Figure ., we show both the maximum
likelihood and the MAP estimates for polynomials of degree  (left) and
degree  (right). The prior (regularizer) does not play a significant role
for the low-degree polynomial, but keeps the function relatively smooth
for higher-degree polynomials. Although the MAP estimate can push the
boundaries of overfitting, it is not a general solution to this problem, so
we need a more principled approach to tackle overfitting.
Training data
MLE
MAP
Figure .
Polynomial
regression:
maximum likelihood
and MAP estimates.
(a) Polynomials of
degree ;
(b) polynomials of
degree .
Training data
MLE
MAP
(a) Polynomials of degree .
(b) Polynomials of degree .
.. MAP Estimation as Regularization
Instead of placing a prior distribution on the parameters θ, it is also pos-
sible to mitigate the effect of overfitting by penalizing the amplitude of
the parameter by means of regularization. In regularized least squares, we
regularization
regularized least
squares
consider the loss function
∥y − Φθ∥
+ λ ∥θ∥
which we minimize with respect to θ (see Section ..). Here, the first
term is a data-fit term (also called misfit term), which is proportional to
data-fit term
misfit term
the negative log-likelihood; see (.b). The second term is called the
regularizer, and the regularization parameter λ ⩾  controls the “strict-
regularizer
regularization
parameter
ness” of the regularization.
Remark. Instead of the Euclidean norm ∥∥, we can choose any p-norm
∥∥p in (.). In practice, smaller values for p lead to sparser solutions.
Here, “sparse” means that many parameter values θd = , which is also
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Bayesian Linear Regression
useful for variable selection. For p = , the regularizer is called LASSO
LASSO
(least absolute shrinkage and selection operator) and was proposed by Tib-
shirani ().
The regularizer λ ∥θ∥
in (.) can be interpreted as a negative log-
Gaussian prior, which we use in MAP estimation; see (.). More specif-
ically, with a Gaussian prior p(θ) = N
 , bI
, we obtain the negative
log-Gaussian prior
− log p(θ) =
b ∥θ∥
+ const
so that for λ =
b the regularization term and the negative log-Gaussian
prior are identical.
Given that the regularized least-squares loss function in (.) consists
of terms that are closely related to the negative log-likelihood plus a neg-
ative log-prior, it is not surprising that, when we minimize this loss, we
obtain a solution that closely resembles the MAP estimate in (.). More
specifically, minimizing the regularized least-squares loss function yields
θRLS = (Φ⊤Φ + λI)−Φ⊤y ,
which is identical to the MAP estimate in (.) for λ = σ
b , where σ is
the noise variance and b the variance of the (isotropic) Gaussian prior
p(θ) = N
 , bI
A point estimate is a
single specific
parameter value,
unlike a distribution
over plausible
parameter settings.
So far, we have covered parameter estimation using maximum likeli-
hood and MAP estimation where we found point estimates θ∗ that op-
timize an objective function (likelihood or posterior). We saw that both
maximum likelihood and MAP estimation can lead to overfitting. In the
next section, we will discuss Bayesian linear regression, where we use
Bayesian inference (Section .) to find a posterior distribution over the
unknown parameters, which we subsequently use to make predictions.
More specifically, for predictions we will average over all plausible sets of
parameters instead of focusing on a point estimate.
. Bayesian Linear Regression
Previously, we looked at linear regression models where we estimated the
model parameters θ, e.g., by means of maximum likelihood or MAP esti-
mation. We discovered that MLE can lead to severe overfitting, in particu-
lar, in the small-data regime. MAP addresses this issue by placing a prior
on the parameters that plays the role of a regularizer.
Bayesian linear
regression
Bayesian linear regression pushes the idea of the parameter prior a step
further and does not even attempt to compute a point estimate of the
parameters, but instead the full posterior distribution over the parameters
is taken into account when making predictions. This means we do not fit
any parameters, but we compute a mean over all plausible parameters
settings (according to the posterior).
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
.. Model
In Bayesian linear regression, we consider the model
prior
p(θ) = N
 m, S
 ,
likelihood
p(y | x, θ) = N
 y | ϕ⊤(x)θ, σ ,
where we now explicitly place a Gaussian prior p(θ) = N
 m, S
on θ,
Figure .
Graphical model for
Bayesian linear
regression.
which turns the parameter vector into a random variable. This allows us
to write down the corresponding graphical model in Figure ., where we
made the parameters of the Gaussian prior on θ explicit. The full proba-
bilistic model, i.e., the joint distribution of observed and unobserved ran-
dom variables, y and θ, respectively, is
p(y, θ | x) = p(y | x, θ)p(θ) .
.. Prior Predictions
In practice, we are usually not so much interested in the parameter values
θ themselves. Instead, our focus often lies in the predictions we make
with those parameter values. In a Bayesian setting, we take the parameter
distribution and average over all plausible parameter settings when we
make predictions. More specifically, to make predictions at an input x∗,
we integrate out θ and obtain
p(y∗ | x∗) =
p(y∗ | x∗, θ)p(θ)dθ = Eθ[p(y∗ | x∗, θ)] ,
which we can interpret as the average prediction of y∗ | x∗, θ for all plau-
sible parameters θ according to the prior distribution p(θ). Note that pre-
dictions using the prior distribution only require us to specify the input
x∗, but no training data.
In our model (.), we chose a conjugate (Gaussian) prior on θ so
that the predictive distribution is Gaussian as well (and can be computed
in closed form): With the prior distribution p(θ) = N
 m, S
, we obtain
the predictive distribution as
p(y∗ | x∗) = N
 ϕ⊤(x∗)m, ϕ⊤(x∗)Sϕ(x∗) + σ ,
where we exploited that (i) the prediction is Gaussian due to conjugacy
(see Section .) and the marginalization property of Gaussians (see Sec-
tion .), (ii) the Gaussian noise is independent so that
V[y∗] = Vθ[ϕ⊤(x∗)θ] + Vϵ[ϵ] ,
and (iii) y∗ is a linear transformation of θ so that we can apply the rules
for computing the mean and covariance of the prediction analytically by
using (.) and (.), respectively. In (.), the term ϕ⊤(x∗)Sϕ(x∗)
in the predictive variance explicitly accounts for the uncertainty associated
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Bayesian Linear Regression
with the parameters θ, whereas σ is the uncertainty contribution due to
the measurement noise.
If we are interested in predicting noise-free function values f(x∗) =
ϕ⊤(x∗)θ instead of the noise-corrupted targets y∗ we obtain
p(f(x∗)) = N
 ϕ⊤(x∗)m, ϕ⊤(x∗)Sϕ(x∗)
 ,
which only differs from (.) in the omission of the noise variance σ in
the predictive variance.
Remark (Distribution over Functions). Since we can represent the distri-
The parameter
distribution p(θ)
induces a
distribution over
functions.
bution p(θ) using a set of samples θi and every sample θi gives rise to a
function fi() = θ⊤
i ϕ(), it follows that the parameter distribution p(θ)
induces a distribution p(f()) over functions. Here we use the notation ()
to explicitly denote a functional relationship.
Example . (Prior over Functions)
(a) Prior distribution over functions.
(b) Samples from the prior distribution over
functions.
Let us consider a Bayesian linear regression problem with polynomials
of degree . We choose a parameter prior p(θ) = N
. Figure .
Figure . Prior
over functions.
(a) Distribution over
functions
represented by the
mean function
(black line) and the
marginal
uncertainties
(shaded),
representing the
% and %
confidence bounds,
respectively;
(b) samples from
the prior over
functions, which are
induced by the
samples from the
parameter prior.
visualizes the induced prior distribution over functions (shaded area: dark
gray: % confidence bound; light gray: % confidence bound) induced
by this parameter prior, including some function samples from this prior.
A function sample is obtained by first sampling a parameter vector
θi ∼ p(θ) and then computing fi() = θ⊤
i ϕ(). We used  input lo-
cations x∗ ∈ [−, ] to which we apply the feature function ϕ(). The
uncertainty (represented by the shaded area) in Figure . is solely due to
the parameter uncertainty because we considered the noise-free predictive
distribution (.).
So far, we looked at computing predictions using the parameter prior
p(θ). However, when we have a parameter posterior (given some train-
ing data X, Y), the same principles for prediction and inference hold
as in (.) – we just need to replace the prior p(θ) with the posterior
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
p(θ | X, Y). In the following, we will derive the posterior distribution in
detail before using it to make predictions.
.. Posterior Distribution
Given a training set of inputs xn ∈ RD and corresponding observations
yn ∈ R, n = , . . . , N, we compute the posterior over the parameters
using Bayes’ theorem as
p(θ | X, Y) = p(Y | X, θ)p(θ)
p(Y | X)
where X is the set of training inputs and Y the collection of correspond-
ing training targets. Furthermore, p(Y | X, θ) is the likelihood, p(θ) the
parameter prior, and
p(Y | X) =
p(Y | X, θ)p(θ)dθ = Eθ[p(Y | X, θ)]
the marginal likelihood/evidence, which is independent of the parameters
marginal likelihood
can think of the marginal likelihood as the likelihood averaged over all
possible parameter settings (with respect to the prior distribution p(θ)).
evidence
θ and ensures that the posterior is normalized, i.e., it integrates to . We
The marginal
likelihood is the
expected likelihood
under the parameter
prior.
Theorem . (Parameter Posterior). In our model (.), the parameter
posterior (.) can be computed in closed form as
SN = (S−
+ σ−Φ⊤Φ)− ,
(.b)
p(θ | X, Y) = N
 θ | mN, SN
 ,
(.a)
mN = SN(S−
m + σ−Φ⊤y) ,
(.c)
where the subscript N indicates the size of the training set.
Proof
Bayes’ theorem tells us that the posterior p(θ | X, Y) is propor-
tional to the product of the likelihood p(Y | X, θ) and the prior p(θ):
Posterior
p(θ | X, Y) = p(Y | X, θ)p(θ)
p(Y | X)
(.a)
Likelihood
p(Y | X, θ) = N
 y | Φθ, σI
(.b)
Prior
p(θ) = N
 θ | m, S
 .
(.c)
Instead of looking at the product of the prior and the likelihood, we
can transform the problem into log-space and solve for the mean and
covariance of the posterior by completing the squares.
The sum of the log-prior and the log-likelihood is
log N
 y | Φθ, σI
 + log N
 θ | m, S
(.a)
= −
(.b)
 σ−(y − Φθ)⊤(y − Φθ) + (θ − m)⊤S−
(θ − m)
 + const
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Bayesian Linear Regression
where the constant contains terms independent of θ. We will ignore the
constant in the following. We now factorize (.b), which yields
 σ−y⊤y − σ−y⊤Φθ + θ⊤σ−Φ⊤Φθ + θ⊤S−
− m⊤
S−
θ + m⊤
S−
(.a)
= −
(.b)
 θ⊤(σ−Φ⊤Φ + S−
)θ − (σ−Φ⊤y + S−
m)⊤θ
 + const ,
where the constant contains the black terms in (.a), which are inde-
pendent of θ. The orange terms are terms that are linear in θ, and the
blue terms are the ones that are quadratic in θ. Inspecting (.b), we
find that this equation is quadratic in θ. The fact that the unnormalized
log-posterior distribution is a (negative) quadratic form implies that the
posterior is Gaussian, i.e.,
p(θ | X, Y) = exp(log p(θ | X, Y)) ∝ exp(log p(Y | X, θ) + log p(θ))
(.a)
∝ exp

(.b)
 θ⊤(σ−Φ⊤Φ + S−
)θ − (σ−Φ⊤y + S−
m)⊤θ
(θ − mN)⊤S−
N (θ − mN) + const
(.a)
where we used (.b) in the last expression.
The remaining task is it to bring this (unnormalized) Gaussian into the
form that is proportional to N
 θ | mN, SN
, i.e., we need to identify the
mean mN and the covariance matrix SN. To do this, we use the concept
of completing the squares. The desired log-posterior is
completing the
squares
log N
 θ | mN, SN
 = −
= −
 θ⊤S−
N θ − m⊤
NS−
N θ + m⊤
NS−
N mN
 .
(.b)
Here, we factorized the quadratic form (θ − mN)⊤S−
N (θ − mN) into a
Since p(θ | X, Y) =
mN, SN
, it
holds that
θMAP = mN.
term that is quadratic in θ alone (blue), a term that is linear in θ (orange),
and a constant term (black). This allows us now to find SN and mN by
matching the colored expressions in (.b) and (.b), which yields
S−
N = Φ⊤σ−IΦ + S−
(.a)
⇐⇒ SN = (σ−Φ⊤Φ + S−
(.b)
and
m⊤
NS−
N = (σ−Φ⊤y + S−
m)⊤
(.a)
⇐⇒ mN = SN(σ−Φ⊤y + S−
m) .
(.b)
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
Remark (General Approach to Completing the Squares). If we are given
an equation
x⊤Ax − a⊤x + const ,
where A is symmetric and positive definite, which we wish to bring into
the form
(x − µ)⊤Σ(x − µ) + const ,
we can do this by setting
Σ := A ,
µ := Σ−a
and const = const − µ⊤Σµ.
We can see that the terms inside the exponential in (.b) are of the
form (.) with
A := σ−Φ⊤Φ + S−
a := σ−Φ⊤y + S−
m .
Since A, a can be difficult to identify in equations like (.a), it is of-
ten helpful to bring these equations into the form (.) that decouples
quadratic term, linear terms, and constants, which simplifies finding the
desired solution.
.. Posterior Predictions
In (.), we computed the predictive distribution of y∗ at a test input
x∗ using the parameter prior p(θ). In principle, predicting with the pa-
rameter posterior p(θ | X, Y) is not fundamentally different given that
in our conjugate model the prior and posterior are both Gaussian (with
different parameters). Therefore, by following the same reasoning as in
Section .., we obtain the (posterior) predictive distribution
p(y∗ | X, Y, x∗) =
p(y∗ | x∗, θ)p(θ | X, Y)dθ
(.a)
 y∗ | ϕ⊤(x∗)θ, σN
 θ | mN, SN
dθ
(.b)
= N
 y∗ | ϕ⊤(x∗)mN, ϕ⊤(x∗)SNϕ(x∗) + σ . (.c)
The term ϕ⊤(x∗)SNϕ(x∗) reflects the posterior uncertainty associated
E[y∗ | X, Y, x∗] =
ϕ⊤(x∗)mN =
ϕ⊤(x∗)θMAP.
with the parameters θ. Note that SN depends on the training inputs
through Φ; see (.b). The predictive mean ϕ⊤(x∗)mN coincides with
the predictions made with the MAP estimate θMAP.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Bayesian Linear Regression
Remark (Marginal Likelihood and Posterior Predictive Distribution). By
replacing the integral in (.a), the predictive distribution can be equiv-
alently written as the expectation Eθ | X,Y[p(y∗ | x∗, θ)], where the expec-
tation is taken with respect to the parameter posterior p(θ | X, Y).
Writing the posterior predictive distribution in this way highlights a
close resemblance to the marginal likelihood (.). The key difference
between the marginal likelihood and the posterior predictive distribution
are (i) the marginal likelihood can be thought of predicting the training
targets y and not the test targets y∗, and (ii) the marginal likelihood av-
erages with respect to the parameter prior and not the parameter poste-
rior.
Remark (Mean and Variance of Noise-Free Function Values). In many
cases, we are not interested in the predictive distribution p(y∗ | X, Y, x∗)
of a (noisy) observation y∗. Instead, we would like to obtain the distribu-
tion of the (noise-free) function values f(x∗) = ϕ⊤(x∗)θ. We determine
the corresponding moments by exploiting the properties of means and
variances, which yields
E[f(x∗) | X, Y] = Eθ[ϕ⊤(x∗)θ | X, Y] = ϕ⊤(x∗)Eθ[θ | X, Y]
= ϕ⊤(x∗)mN = m⊤
Nϕ(x∗) ,
Vθ[f(x∗) | X, Y] = Vθ[ϕ⊤(x∗)θ | X, Y]
= ϕ⊤(x∗)Vθ[θ | X, Y]ϕ(x∗)
= ϕ⊤(x∗)SNϕ(x∗) .
We see that the predictive mean is the same as the predictive mean for
noisy observations as the noise has mean , and the predictive variance
only differs by σ, which is the variance of the measurement noise: When
we predict noisy function values, we need to include σ as a source of
uncertainty, but this term is not needed for noise-free predictions. Here,
the only remaining uncertainty stems from the parameter posterior.
Integrating out
parameters induces
a distribution over
functions.
Remark (Distribution over Functions). The fact that we integrate out the
parameters θ induces a distribution over functions: If we sample θi ∼
p(θ | X, Y) from the parameter posterior, we obtain a single function re-
alization θ⊤
i ϕ(). The mean function, i.e., the set of all expected function
mean function
values Eθ[f() | θ, X, Y], of this distribution over functions is m⊤
Nϕ().
The (marginal) variance, i.e., the variance of the function f(), is given by
ϕ⊤()SNϕ().
Example . (Posterior over Functions)
Let us revisit the Bayesian linear regression problem with polynomials
of degree . We choose a parameter prior p(θ) = N
. Figure .
visualizes the prior over functions induced by the parameter prior and
sample functions from this prior.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
Figure . shows the posterior over functions that we obtain via
Bayesian linear regression. The training dataset is shown in panel (a);
panel (b) shows the posterior distribution over functions, including the
functions we would obtain via maximum likelihood and MAP estimation.
The function we obtain using the MAP estimate also corresponds to the
posterior mean function in the Bayesian linear regression setting. Panel (c)
shows some plausible realizations (samples) of functions under that pos-
terior over functions.
Training data
MLE
MAP
BLR
(a) Training data.
Figure .
Bayesian linear
regression and
posterior over
functions.
(a) training data;
(b) posterior
distribution over
functions;
(c) Samples from
the posterior over
functions.
(c) Samples from the posterior
over functions, which are in-
duced by the samples from the
parameter posterior.
(b) Posterior over functions rep-
resented by the marginal uncer-
tainties (shaded) showing the
% and % predictive con-
fidence bounds, the maximum
likelihood estimate (MLE) and
the MAP estimate (MAP), the
latter of which is identical to
the posterior mean function.
Figure . shows some posterior distributions over functions induced
by the parameter posterior. For different polynomial degrees M, the left
panels show the maximum likelihood function θ⊤
MLϕ(), the MAP func-
tion θ⊤
MAPϕ() (which is identical to the posterior mean function), and the
% and % predictive confidence bounds obtained by Bayesian linear
regression, represented by the shaded areas.
The right panels show samples from the posterior over functions: Here,
we sampled parameters θi from the parameter posterior and computed
the function ϕ⊤(x∗)θi, which is a single realization of a function under
the posterior distribution over functions. For low-order polynomials, the
parameter posterior does not allow the parameters to vary much: The
sampled functions are nearly identical. When we make the model more
flexible by adding more parameters (i.e., we end up with a higher-order
polynomial), these parameters are not sufficiently constrained by the pos-
terior, and the sampled functions can be easily visually separated. We also
see in the corresponding panels on the left how the uncertainty increases,
especially at the boundaries.
Although for a seventh-order polynomial the MAP estimate yields a rea-
sonable fit, the Bayesian linear regression model additionally tells us that
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Bayesian Linear Regression
Training data
MLE
MAP
BLR
(a) Posterior distribution for polynomials of degree M =  (left) and samples from the pos-
terior over functions (right).
Training data
MLE
MAP
BLR
Figure .
Bayesian linear
regression. Left
panels: Shaded
areas indicate the
% (dark gray)
and % (light
gray) predictive
confidence bounds.
The mean of the
Bayesian linear
regression model
coincides with the
MAP estimate. The
predictive
uncertainty is the
sum of the noise
term and the
posterior parameter
uncertainty, which
depends on the
location of the test
input. Right panels:
sampled functions
from the posterior
distribution.
(b) Posterior distribution for polynomials of degree M =  (left) and samples from the
posterior over functions (right).
Training data
MLE
MAP
BLR
(c) Posterior distribution for polynomials of degree M =  (left) and samples from the pos-
terior over functions (right).
the posterior uncertainty is huge. This information can be critical when
we use these predictions in a decision-making system, where bad deci-
sions can have significant consequences (e.g., in reinforcement learning
or robotics).
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
.. Computing the Marginal Likelihood
In Section .., we highlighted the importance of the marginal likelihood
for Bayesian model selection. In the following, we compute the marginal
likelihood for Bayesian linear regression with a conjugate Gaussian prior
on the parameters, i.e., exactly the setting we have been discussing in this
chapter.
Just to recap, we consider the following generative process:
θ ∼ N
 m, S
(.a)
yn | xn, θ ∼ N
 x⊤
n θ, σ ,
(.b)
p(Y | X) =
p(Y | X, θ)p(θ)dθ
(.a)
n = , . . . , N. The marginal likelihood is given by
The marginal
likelihood can be
interpreted as the
expected likelihood
under the prior, i.e.,
Eθ[p(Y | X, θ)].
 y | Xθ, σI
N
 θ | m, S
dθ ,
(.b)
where we integrate out the model parameters θ. We compute the marginal
likelihood in two steps: First, we show that the marginal likelihood is
Gaussian (as a distribution in y); second, we compute the mean and co-
variance of this Gaussian.
. The marginal likelihood is Gaussian: From Section .., we know that
(i) the product of two Gaussian random variables is an (unnormalized)
Gaussian distribution, and (ii) a linear transformation of a Gaussian
random variable is Gaussian distributed. In (.b), we require a linear
transformation to bring N
 y | Xθ, σI
into the form N
 θ | µ, Σ
for
some µ, Σ. Once this is done, the integral can be solved in closed form.
The result is the normalizing constant of the product of the two Gaus-
sians. The normalizing constant itself has Gaussian shape; see (.).
. Mean and covariance. We compute the mean and covariance matrix
of the marginal likelihood by exploiting the standard results for means
and covariances of affine transformations of random variables; see Sec-
tion ... The mean of the marginal likelihood is computed as
E[Y | X] = Eθ,ϵ[Xθ + ϵ] = XEθ[θ] = Xm .
Note that ϵ ∼ N
 , σI
is a vector of i.i.d. random variables. The
covariance matrix is given as
Cov[Y|X] = Covθ,ϵ[Xθ + ϵ] = Covθ[Xθ] + σI
(.a)
= X Covθ[θ]X⊤ + σI = XSX⊤ + σI .
(.b)
Hence, the marginal likelihood is
(.a)
det(XSX⊤ + σI)−
p(Y | X) = (π)− N
exp
  −
(y − Xm)⊤(XSX⊤ + σI)−(y − Xm)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Maximum Likelihood as Orthogonal Projection
Projection
Observations
Maximum likelihood estimate
Figure .
Geometric
interpretation of
least squares.
(a) Dataset;
(b) maximum
likelihood solution
interpreted as a
projection.
(a) Regression dataset consisting of noisy ob-
servations yn (blue) of function values f(xn)
at input locations xn.
(b) The orange dots are the projections of
the noisy observations (blue dots) onto the
line θMLx. The maximum likelihood solution to
a linear regression problem finds a subspace
(line) onto which the overall projection er-
ror (orange lines) of the observations is mini-
mized.
= N
 y | Xm, XSX⊤ + σI
 .
(.b)
Given the close connection with the posterior predictive distribution (see
Remark on Marginal Likelihood and Posterior Predictive Distribution ear-
lier in this section), the functional form of the marginal likelihood should
not be too surprising.
. Maximum Likelihood as Orthogonal Projection
Having crunched through much algebra to derive maximum likelihood
and MAP estimates, we will now provide a geometric interpretation of
maximum likelihood estimation. Let us consider a simple linear regression
setting
y = xθ + ϵ,
ϵ ∼ N
 , σ ,
in which we consider linear functions f : R → R that go through the
origin (we omit features here for clarity). The parameter θ determines the
slope of the line. Figure .(a) shows a one-dimensional dataset.
With a training data set {(x, y), . . . , (xN, yN)} we recall the results
from Section .. and obtain the maximum likelihood estimator for the
slope parameter as
θML = (X⊤X)−X⊤y = X⊤y
X⊤X ∈ R ,
where X = [x, . . . , xN]⊤ ∈ RN, y = [y, . . . , yN]⊤ ∈ RN.
This means for the training inputs X we obtain the optimal (maximum
likelihood) reconstruction of the training targets as
XθML = X X⊤y
X⊤X = XX⊤
X⊤X y ,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
i.e., we obtain the approximation with the minimum least-squares error
between y and Xθ.
As we are looking for a solution of y = Xθ, we can think of linear
regression as a problem for solving systems of linear equations. There-
Linear regression
can be thought of as
a method for solving
systems of linear
equations.
thogonal projections from Section ., we identify XX⊤
fore, we can relate to concepts from linear algebra and analytic geometry
that we discussed in Chapters  and . In particular, looking carefully
at (.) we see that the maximum likelihood estimator θML in our ex-
ample from (.) effectively does an orthogonal projection of y onto
the one-dimensional subspace spanned by X. Recalling the results on or-
Maximum
likelihood linear
regression performs
an orthogonal
projection.
X⊤X as the projection
matrix, θML as the coordinates of the projection onto the one-dimensional
subspace of RN spanned by X and XθML as the orthogonal projection of
y onto this subspace.
Therefore, the maximum likelihood solution provides also a geometri-
cally optimal solution by finding the vectors in the subspace spanned by
X that are “closest” to the corresponding observations y, where “clos-
est” means the smallest (squared) distance of the function values yn to
xnθ. This is achieved by orthogonal projections. Figure .(b) shows the
projection of the noisy observations onto the subspace that minimizes the
squared distance between the original dataset and its projection (note that
the x-coordinate is fixed), which corresponds to the maximum likelihood
solution.
In the general linear regression case where
y = ϕ⊤(x)θ + ϵ,
ϵ ∼ N
 , σ
with vector-valued features ϕ(x) ∈ RK, we again can interpret the maxi-
mum likelihood result
y ≈ ΦθML ,
θML = (Φ⊤Φ)−Φ⊤y
as a projection onto a K-dimensional subspace of RN, which is spanned
by the columns of the feature matrix Φ; see Section ...
If the feature functions ϕk that we use to construct the feature ma-
trix Φ are orthonormal (see Section .), we obtain a special case where
the columns of Φ form an orthonormal basis (see Section .), such that
Φ⊤Φ = I. This will then lead to the projection
Φ(Φ⊤Φ)−Φ⊤y = ΦΦ⊤y =
k=
ϕkϕ⊤
so that the maximum likelihood projection is simply the sum of projections
of y onto the individual basis vectors ϕk, i.e., the columns of Φ. Further-
more, the coupling between different features has disappeared due to the
orthogonality of the basis. Many popular basis functions in signal process-
ing, such as wavelets and Fourier bases, are orthogonal basis functions.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Further Reading
When the basis is not orthogonal, one can convert a set of linearly inde-
pendent basis functions to an orthogonal basis by using the Gram-Schmidt
process; see Section .. and (Strang, ).
. Further Reading
In this chapter, we discussed linear regression for Gaussian likelihoods
and conjugate Gaussian priors on the parameters of the model. This al-
lowed for closed-form Bayesian inference. However, in some applications
we may want to choose a different likelihood function. For example, in
a binary classification setting, we observe only two possible (categorical)
classification
outcomes, and a Gaussian likelihood is inappropriate in this setting. In-
stead, we can choose a Bernoulli likelihood that will return a probability of
the predicted label to be  (or ). We refer to the books by Barber (),
Bishop (), and Murphy () for an in-depth introduction to classifi-
cation problems. A different example where non-Gaussian likelihoods are
important is count data. Counts are non-negative integers, and in this case
a Binomial or Poisson likelihood would be a better choice than a Gaussian.
All these examples fall into the category of generalized linear models, a flex-
generalized linear
model
ible generalization of linear regression that allows for response variables
that have error distributions other than a Gaussian distribution. The GLM
Generalized linear
models are the
building blocks of
deep neural
networks.
generalizes linear regression by allowing the linear model to be related
to the observed values via a smooth and invertible function σ() that may
be nonlinear so that y = σ(f(x)), where f(x) = θ⊤ϕ(x) is the linear
regression model from (.). We can therefore think of a generalized
linear model in terms of function composition y = σ ◦ f, where f is a
linear regression model and σ the activation function. Note that although
we are talking about “generalized linear models”, the outputs y are no
longer linear in the parameters θ. In logistic regression, we choose the
logistic regression
logistic sigmoid σ(f) =
+exp(−f) ∈ [, ], which can be interpreted as the
logistic sigmoid
probability of observing y =  of a Bernoulli random variable y ∈ {, }.
The function σ() is called transfer function or activation function, and its
transfer function
activation function
inverse is called the canonical link function. From this perspective, it is
canonical link
function
For ordinary linear
regression the
activation function
would simply be the
identity.
xk+ = f k(xk)
f k(xk) = σk(Akxk + bk)
also clear that generalized linear models are the building blocks of (deep)
feedforward neural networks: If we consider a generalized linear model
y = σ(Ax + b), where A is a weight matrix and b a bias vector, we iden-
tify this generalized linear model as a single-layer neural network with
activation function σ(). We can now recursively compose these functions
via
A great post on the
relation between
GLMs and deep
networks is
available at
https://tinyurl.
com/glm-dnn.
for k = , . . . , K − , where x are the input features and xK = y are
the observed outputs, such that f K− ◦    ◦ f  is a K-layer deep neural
network. Therefore, the building blocks of this deep neural network are
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Linear Regression
the generalized linear models defined in (.). Neural networks (Bishop,
; Goodfellow et al., ) are significantly more expressive and flexi-
ble than linear regression models. However, maximum likelihood parame-
ter estimation is a non-convex optimization problem, and marginalization
of the parameters in a fully Bayesian setting is analytically intractable.
We briefly hinted at the fact that a distribution over parameters in-
duces a distribution over regression functions. Gaussian processes (Ras-
Gaussian process
mussen and Williams, ) are regression models where the concept of
a distribution over function is central. Instead of placing a distribution
over parameters, a Gaussian process places a distribution directly on the
space of functions without the “detour” via the parameters. To do so, the
Gaussian process exploits the kernel trick (Sch¨olkopf and Smola, ),
kernel trick
which allows us to compute inner products between two function values
f(xi), f(xj) only by looking at the corresponding input xi, xj. A Gaus-
sian process is closely related to both Bayesian linear regression and sup-
port vector regression but can also be interpreted as a Bayesian neural
network with a single hidden layer where the number of units tends to
infinity (Neal, ; Williams, ). Excellent introductions to Gaussian
processes can be found in MacKay () and Rasmussen and Williams
We focused on Gaussian parameter priors in the discussions in this chap-
ter, because they allow for closed-form inference in linear regression mod-
els. However, even in a regression setting with Gaussian likelihoods, we
may choose a non-Gaussian prior. Consider a setting, where the inputs are
x ∈ RD and our training set is small and of size N ≪ D. This means that
the regression problem is underdetermined. In this case, we can choose
a parameter prior that enforces sparsity, i.e., a prior that tries to set as
many parameters to  as possible (variable selection). This prior provides
variable selection
a stronger regularizer than the Gaussian prior, which often leads to an in-
creased prediction accuracy and interpretability of the model. The Laplace
prior is one example that is frequently used for this purpose. A linear re-
gression model with the Laplace prior on the parameters is equivalent to
linear regression with L regularization (LASSO) (Tibshirani, ). The
LASSO
Laplace distribution is sharply peaked at zero (its first derivative is discon-
tinuous) and it concentrates its probability mass closer to zero than the
Gaussian distribution, which encourages parameters to be . Therefore,
the nonzero parameters are relevant for the regression problem, which is
the reason why we also speak of “variable selection”.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

Dimensionality Reduction with Principal
Component Analysis
Working directly with high-dimensional data, such as images, comes with
A  ×  pixel
color image is a data
point in a
million-dimensional
space, where every
pixel responds to
three dimensions,
one for each color
channel (red, green,
blue).
some difficulties: It is hard to analyze, interpretation is difficult, visualiza-
tion is nearly impossible, and (from a practical point of view) storage of
the data vectors can be expensive. However, high-dimensional data often
has properties that we can exploit. For example, high-dimensional data is
often overcomplete, i.e., many dimensions are redundant and can be ex-
plained by a combination of other dimensions. Furthermore, dimensions
in high-dimensional data are often correlated so that the data possesses an
intrinsic lower-dimensional structure. Dimensionality reduction exploits
structure and correlation and allows us to work with a more compact rep-
resentation of the data, ideally without losing information. We can think
of dimensionality reduction as a compression technique, similar to jpeg or
mp, which are compression algorithms for images and music.
In this chapter, we will discuss principal component analysis (PCA), an
principal component
analysis
PCA
algorithm for linear dimensionality reduction. PCA, proposed by Pearson
dimensionality
reduction
() and Hotelling (), has been around for more than  years
and is still one of the most commonly used techniques for data compres-
sion and data visualization. It is also used for the identification of simple
patterns, latent factors, and structures of high-dimensional data. In the
Figure .
Illustration:
dimensionality
reduction. (a) The
original dataset
does not vary much
along the x
direction. (b) The
data from (a) can be
represented using
the x-coordinate
alone with nearly no
loss.
(a) Dataset with x and x coordinates.
(b) Compressed dataset where only the x coor-
dinate is relevant.
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

Dimensionality Reduction with Principal Component Analysis
signal processing community, PCA is also known as the Karhunen-Lo`eve
Karhunen-Lo`eve
transform
transform. In this chapter, we derive PCA from first principles, drawing on
our understanding of basis and basis change (Sections .. and ..),
projections (Section .), eigenvalues (Section .), Gaussian distribu-
tions (Section .), and constrained optimization (Section .).
Dimensionality reduction generally exploits a property of high-dimen-
sional data (e.g., images) that it often lies on a low-dimensional subspace.
Figure . gives an illustrative example in two dimensions. Although
the data in Figure .(a) does not quite lie on a line, the data does not
vary much in the x-direction, so that we can express it as if it were on
a line – with nearly no loss; see Figure .(b). To describe the data in
Figure .(b), only the x-coordinate is required, and the data lies in a
one-dimensional subspace of R.
. Problem Setting
In PCA, we are interested in finding projections ˜xn of data points xn that
are as similar to the original data points as possible, but which have a sig-
nificantly lower intrinsic dimensionality. Figure . gives an illustration
of what this could look like.
More concretely, we consider an i.i.d. dataset X = {x, . . . , xN}, xn ∈
RD, with mean  that possesses the data covariance matrix (.)
data covariance
matrix
S =
n=
xnx⊤
n .
Furthermore, we assume there exists a low-dimensional compressed rep-
resentation (code)
zn = B⊤xn ∈ RM
of xn, where we define the projection matrix
B := [b, . . . , bM] ∈ RD×M .
We assume that the columns of B are orthonormal (Definition .) so that
b⊤
i bj =  if and only if i ̸= j and b⊤
i bi = . We seek an M-dimensional
The columns
b, . . . , bM of B
form a basis of the
M-dimensional
subspace in which
the projected data
˜x = BB⊤x ∈ RD
live.
subspace U ⊆ RD, dim(U) = M < D onto which we project the data. We
denote the projected data by ˜xn ∈ U, and their coordinates (with respect
to the basis vectors b, . . . , bM of U) by zn. Our aim is to find projections
˜xn ∈ RD (or equivalently the codes zn and the basis vectors b, . . . , bM)
so that they are as similar to the original data xn and minimize the loss
due to compression.
Example . (Coordinate Representation/Code)
Consider R with the canonical basis e = [, ]⊤, e = [, ]⊤. From
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Problem Setting
Original
Reconstructed
RD
RD
Compressed
RM
˜x
Figure .
Graphical
illustration of PCA.
In PCA, we find a
compressed version
z of original data x.
The compressed
data can be
reconstructed into
˜x, which lives in the
original data space,
but has an intrinsic
lower-dimensional
representation than
x.
Chapter , we know that x ∈ R can be represented as a linear combina-
tion of these basis vectors, e.g.,
= e + e .
However, when we consider vectors of the form

∈ R ,
z ∈ R ,
˜x =
More precisely, the set of ˜x vectors (with the standard vector addition
and scalar multiplication) forms a vector subspace U (see Section .)
with dim(U) =  because U = span[e].
they can always be written as e + ze. To represent these vectors it is
sufficient to remember/store the coordinate/code z of ˜x with respect to
the e vector.
The dimension of a
vector space
corresponds to the
number of its basis
vectors (see
Section ..).
In Section ., we will find low-dimensional representations that re-
tain as much information as possible and minimize the compression loss.
An alternative derivation of PCA is given in Section ., where we will
be looking at minimizing the squared reconstruction error ∥xn − ˜xn∥
be-
tween the original data xn and its projection ˜xn.
Figure . illustrates the setting we consider in PCA, where z repre-
sents the lower-dimensional representation of the compressed data ˜x and
plays the role of a bottleneck, which controls how much information can
flow between x and ˜x. In PCA, we consider a linear relationship between
the original data x and its low-dimensional code z so that z = B⊤x and
˜x = Bz for a suitable matrix B. Based on the motivation of thinking
of PCA as a data compression technique, we can interpret the arrows in
Figure . as a pair of operations representing encoders and decoders.
The linear mapping represented by B can be thought of as a decoder,
which maps the low-dimensional code z ∈ RM back into the original data
space RD. Similarly, B⊤ can be thought of an encoder, which encodes the
original data x as a low-dimensional (compressed) code z.
Throughout this chapter, we will use the MNIST digits dataset as a re-
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
Figure .
Examples of
handwritten digits
from the MNIST
dataset. http:
//yann.lecun.
com/exdb/mnist/.
occurring example, which contains , examples of handwritten digits
through . Each digit is a grayscale image of size ×, i.e., it contains
pixels so that we can interpret every image in this dataset as a vector
x ∈ R. Examples of these digits are shown in Figure ..
. Maximum Variance Perspective
Figure . gave an example of how a two-dimensional dataset can be
represented using a single coordinate. In Figure .(b), we chose to ig-
nore the x-coordinate of the data because it did not add too much in-
formation so that the compressed data is similar to the original data in
Figure .(a). We could have chosen to ignore the x-coordinate, but
then the compressed data had been very dissimilar from the original data,
and much information in the data would have been lost.
If we interpret information content in the data as how “space filling”
the dataset is, then we can describe the information contained in the data
by looking at the spread of the data. From Section .., we know that the
variance is an indicator of the spread of the data, and we can derive PCA as
a dimensionality reduction algorithm that maximizes the variance in the
low-dimensional representation of the data to retain as much information
as possible. Figure . illustrates this.
Considering the setting discussed in Section ., our aim is to find
a matrix B (see (.)) that retains as much information as possible
when compressing data by projecting it onto the subspace spanned by
the columns b, . . . , bM of B. Retaining most information after data com-
pression is equivalent to capturing the largest amount of variance in the
low-dimensional code (Hotelling, ).
Remark. (Centered Data) For the data covariance matrix in (.), we
assumed centered data. We can make this assumption without loss of gen-
erality: Let us assume that µ is the mean of the data. Using the properties
of the variance, which we discussed in Section .., we obtain
Vz[z] = Vx[B⊤(x − µ)] = Vx[B⊤x − B⊤µ] = Vx[B⊤x] ,
i.e., the variance of the low-dimensional code does not depend on the
mean of the data. Therefore, we assume without loss of generality that the
data has mean  for the remainder of this section. With this assumption
the mean of the low-dimensional code is also  since Ez[z] = Ex[B⊤x] =
B⊤Ex[x] = .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Maximum Variance Perspective
Figure . PCA
finds a
lower-dimensional
subspace (line) that
maintains as much
variance (spread of
the data) as possible
when the data
(blue) is projected
onto this subspace
(orange).
.. Direction with Maximal Variance
variance of the projected data, i.e., we aim to maximize the variance of
the first coordinate z of z ∈ RM so that
V := V[z] =
n=
We maximize the variance of the low-dimensional code using a sequential
approach. We start by seeking a single vector b ∈ RD that maximizes the
The vector b will
be the first column
of the matrix B and
therefore the first of
M orthonormal
basis vectors that
span the
lower-dimensional
subspace.
is maximized, where we exploited the i.i.d. assumption of the data and
defined zn as the first coordinate of the low-dimensional representation
zn ∈ RM of xn ∈ RD. Note that first component of zn is given by
zn = b⊤
xn ,
i.e., it is the coordinate of the orthogonal projection of xn onto the one-
dimensional subspace spanned by b (Section .). We substitute (.)
into (.), which yields
V =
n=
(b⊤
xn) =
n=
b⊤
xnx⊤
n b
(.a)
= b⊤
b = b⊤
Sb ,
(.b)

n=
xnx⊤
where S is the data covariance matrix defined in (.). In (.a), we
have used the fact that the dot product of two vectors is symmetric with
respect to its arguments, that is, b⊤
xn = x⊤
n b.
Notice that arbitrarily increasing the magnitude of the vector b in-
creases V, that is, a vector b that is two times longer can result in V
that is potentially four times larger. Therefore, we restrict all solutions to
∥b∥ =
⇐⇒ ∥b∥ = .
∥b∥
= , which results in a constrained optimization problem in which
we seek the direction along which the data varies most.
With the restriction of the solution space to unit vectors the vector b
that points in the direction of maximum variance can be found by the
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
constrained optimization problem
max
b b⊤
Sb
subject to ∥b∥
=  .
Following Section ., we obtain the Lagrangian
L(b, λ) = b⊤
Sb + λ( − b⊤
b)
to solve this constrained optimization problem. The partial derivatives of
L with respect to b and λ are
∂L
∂b
= b⊤
S − λb⊤
∂L
∂λ
=  − b⊤
b ,
respectively. Setting these partial derivatives to  gives us the relations
Sb = λb ,
b⊤
b =  .
variance objective (.) as
V = b⊤
Sb = λb⊤
b = λ ,
By comparing this with the definition of an eigenvalue decomposition
(Section .), we see that b is an eigenvector of the data covariance
matrix S, and the Lagrange multiplier λ plays the role of the correspond-
ing eigenvalue. This eigenvector property (.) allows us to rewrite our
The quantity √λ is
also called the
loading of the unit
vector b and
represents the
standard deviation
of the data
accounted for by the
principal subspace
span[b].
i.e., the variance of the data projected onto a one-dimensional subspace
equals the eigenvalue that is associated with the basis vector b that spans
this subspace. Therefore, to maximize the variance of the low-dimensional
code, we choose the basis vector associated with the largest eigenvalue
of the data covariance matrix. This eigenvector is called the first principal
principal component
component. We can determine the effect/contribution of the principal com-
ponent b in the original data space by mapping the coordinate zn back
into data space, which gives us the projected data point
˜xn = bzn = bb⊤
xn ∈ RD
in the original data space.
Remark. Although ˜xn is a D-dimensional vector, it only requires a single
coordinate zn to represent it with respect to the basis vector b ∈ RD.
.. M-dimensional Subspace with Maximal Variance
Assume we have found the first m −  principal components as the m −
eigenvectors of S that are associated with the largest m −  eigenvalues.
Since S is symmetric, the spectral theorem (Theorem .) states that we
can use these eigenvectors to construct an orthonormal eigenbasis of an
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Maximum Variance Perspective
(m − )-dimensional subspace of RD. Generally, the mth principal com-
ponent can be found by subtracting the effect of the first m −  principal
components b, . . . , bm− from the data, thereby trying to find principal
components that compress the remaining information. We then arrive at
the new data matrix
ˆX := X −
i=
bib⊤
i X = X − Bm−X ,
m−
vectors and Bm− := Pm−
i= bib⊤
i is a projection matrix that projects onto
the subspace spanned by b, . . . , bm−.
where X = [x, . . . , xN] ∈ RD×N contains the data points as column
The matrix ˆ
X :=
[ˆx, . . . , ˆxN] ∈
RD×N in (.)
contains the
information in the
data that has not yet
been compressed.
Remark (Notation). Throughout this chapter, we do not follow the con-
vention of collecting data x, . . . , xN as the rows of the data matrix, but
we define them to be the columns of X. This means that our data ma-
trix X is a D × N matrix instead of the conventional N × D matrix. The
reason for our choice is that the algebra operations work out smoothly
without the need to either transpose the matrix or to redefine vectors as
row vectors that are left-multiplied onto matrices.
To find the mth principal component, we maximize the variance
Vm = V[zm] =
n=
mn =
n=
(b⊤
m ˆ
xn) = b⊤
m ˆSbm ,
subject to ∥bm∥
= , where we followed the same steps as in (.b)
and defined ˆS as the data covariance matrix of the transformed dataset
X := {ˆx, . . . , ˆxN}. As previously, when we looked at the first principal
component alone, we solve a constrained optimization problem and dis-
cover that the optimal solution bm is the eigenvector of ˆS that is associated
with the largest eigenvalue of ˆS.
It turns out that bm is also an eigenvector of S. More generally, the sets
of eigenvectors of S and ˆS are identical. Since both S and ˆS are sym-
metric, we can find an ONB of eigenvectors (spectral theorem .), i.e.,
there exist D distinct eigenvectors for both S and ˆS. Next, we show that
every eigenvector of S is an eigenvector of ˆS. Assume we have already
found eigenvectors b, . . . , bm− of ˆS. Consider an eigenvector bi of S,
i.e., Sbi = λibi. In general,
ˆSbi =
ˆX ˆX
⊤bi =
N (X − Bm−X)(X − Bm−X)⊤bi
(.a)
= (S − SBm− − Bm−S + Bm−SBm−)bi .
(.b)
We distinguish between two cases. If i ⩾ m, i.e., bi is an eigenvector
that is not among the first m− principal components, then bi is orthogo-
nal to the first m− principal components and Bm−bi = . If i < m, i.e.,
bi is among the first m −  principal components, then bi is a basis vector
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
of the principal subspace onto which Bm− projects. Since b, . . . , bm−
are an ONB of this principal subspace, we obtain Bm−bi = bi. The two
cases can be summarized as follows:
Bm−bi = bi
if i < m ,
Bm−bi =
if i ⩾ m .
In the case i ⩾ m, by using (.) in (.b), we obtain ˆSbi = (S −
Bm−S)bi = Sbi = λibi , i.e., bi is also an eigenvector of ˆS with eigen-
value λi. Specifically,
ˆSbm = Sbm = λmbm .
Equation (.) reveals that bm is not only an eigenvector of S but also
of ˆS. Specifically, λm is the largest eigenvalue of ˆS and λm is the mth
largest eigenvalue of S, and both have the associated eigenvector bm.
In the case i < m, by using (.) in (.b), we obtain
ˆSbi = (S − SBm− − Bm−S + Bm−SBm−)bi =  = bi
With the relation (.) and b⊤
mbm = , the variance of the data pro-
jected onto the mth principal component is
Vm = b⊤
mSbm
λmb⊤
mbm = λm .
This means that the variance of the data, when projected onto an M-
dimensional subspace, equals the sum of the eigenvalues that are associ-
ated with the corresponding eigenvectors of the data covariance matrix.
This means that b, . . . , bm− are also eigenvectors of ˆS, but they are as-
sociated with eigenvalue  so that b, . . . , bm− span the null space of ˆS.
Overall, every eigenvector of S is also an eigenvector of ˆS. However,
if the eigenvectors of S are part of the (m − ) dimensional principal
subspace, then the associated eigenvalue of ˆS is .
This derivation
shows that there is
an intimate
connection between
the M-dimensional
subspace with
maximal variance
and the eigenvalue
decomposition. We
will revisit this
connection in
Section ..
Example . (Eigenvalues of MNIST “”)
Eigenvalue
Captured variance
Index
Number of principal components
Figure .
Properties of the
training data of
MNIST “”. (a)
Eigenvalues sorted
in descending order;
(b) Variance
captured by the
principal
components
associated with the
largest eigenvalues.
(b) Variance captured by the principal compo-
nents.
(a) Eigenvalues (sorted in descending order) of
the data covariance matrix of all digits “” in
the MNIST training set.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Projection Perspective
Figure .
Illustration of the
projection
approach: Find a
subspace (line) that
minimizes the
length of the
difference vector
between projected
(orange) and
original (blue) data.
Taking all digits “” in the MNIST training data, we compute the eigen-
values of the data covariance matrix. Figure .(a) shows the  largest
eigenvalues of the data covariance matrix. We see that only a few of
them have a value that differs significantly from . Therefore, most of
the variance, when projecting data onto the subspace spanned by the cor-
responding eigenvectors, is captured by only a few principal components,
as shown in Figure .(b).
Overall, to find an M-dimensional subspace of RD that retains as much
information as possible, PCA tells us to choose the columns of the matrix
B in (.) as the M eigenvectors of the data covariance matrix S that
are associated with the M largest eigenvalues. The maximum amount of
variance PCA can capture with the first M principal components is
VM =
m=
λm ,
where the λm are the M largest eigenvalues of the data covariance matrix
S. Consequently, the variance lost by data compression via PCA is
JM :=
j=M+
λj = VD − VM .
Instead of these absolute quantities, we can define the relative variance
captured as VM
VD .
VD , and the relative variance lost by compression as  − VM
. Projection Perspective
In the following, we will derive PCA as an algorithm that directly mini-
mizes the average reconstruction error. This perspective allows us to in-
terpret PCA as implementing an optimal linear auto-encoder. We will draw
heavily from Chapters  and .
In the previous section, we derived PCA by maximizing the variance
in the projected space to retain as much information as possible. In the
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
Figure .
Simplified
projection setting.
(a) A vector x ∈ R
(red cross) shall be
projected onto a
one-dimensional
subspace U ⊆ R
spanned by b. (b)
shows the difference
vectors between x
and some
candidates ˜x.
(a) Setting.
(b) Differences x − ˜xi for  different ˜xi are
shown by the red lines.
following, we will look at the difference vectors between the original data
xn and their reconstruction ˜xn and minimize this distance so that xn and
˜xn are as close as possible. Figure . illustrates this setting.
.. Setting and Objective
Assume an (ordered) orthonormal basis (ONB) B = (b, . . . , bD) of RD,
i.e., b⊤
i bj =  if and only if i = j and  otherwise.
From Section . we know that for a basis (b, . . . , bD) of RD any x ∈
RD can be written as a linear combination of the basis vectors of RD, i.e.,
x =
m=
ζmbm +
j=M+
ζjbj
d=
ζdbd =
Vectors ˜x ∈ U could
be vectors on a
plane in R. The
dimensionality of
the plane is , but
the vectors still have
three coordinates
with respect to the
standard basis of
R.
for suitable coordinates ζd ∈ R.
We are interested in finding vectors ˜x ∈ RD, which live in lower-
dimensional subspace U ⊆ RD, dim(U) = M, so that
˜x =
m=
zmbm ∈ U ⊆ RD
is as similar to x as possible. Note that at this point we need to assume
that the coordinates zm of ˜x and ζm of x are not identical.
In the following, we use exactly this kind of representation of ˜x to find
optimal coordinates z and basis vectors b, . . . , bM such that ˜x is as sim-
ilar to the original data point x as possible, i.e., we aim to minimize the
(Euclidean) distance ∥x − ˜x∥. Figure . illustrates this setting.
Without loss of generality, we assume that the dataset X = {x, . . . , xN},
xn ∈ RD, is centered at , i.e., E[X] = . Without the zero-mean assump-
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Projection Perspective
tion, we would arrive at exactly the same solution, but the notation would
be substantially more cluttered.
We are interested in finding the best linear projection of X onto a lower-
dimensional subspace U of RD with dim(U) = M and orthonormal basis
vectors b, . . . , bM. We will call this subspace U the principal subspace.
principal subspace
The projections of the data points are denoted by
˜xn :=
m=
zmnbm = Bzn ∈ RD ,
where zn := [zn, . . . , zMn]⊤ ∈ RM is the coordinate vector of ˜xn with
respect to the basis (b, . . . , bM). More specifically, we are interested in
having the ˜xn as similar to xn as possible.
The similarity measure we use in the following is the squared distance
(Euclidean norm) ∥x − ˜x∥
between x and ˜x. We therefore define our ob-
jective as minimizing the average squared Euclidean distance (reconstruction reconstruction error
error) (Pearson, )
JM :=
n=
∥xn − ˜xn∥ ,
where we make it explicit that the dimension of the subspace onto which
we project the data is M. In order to find this optimal linear projection,
we need to find the orthonormal basis of the principal subspace and the
coordinates zn ∈ RM of the projections with respect to this basis.
To find the coordinates zn and the ONB of the principal subspace, we
follow a two-step approach. First, we optimize the coordinates zn for a
given ONB (b, . . . , bM); second, we find the optimal ONB.
.. Finding Optimal Coordinates
Let us start by finding the optimal coordinates zn, . . . , zMn of the projec-
tions ˜xn for n = , . . . , N. Consider Figure .(b), where the principal
subspace is spanned by a single vector b. Geometrically speaking, finding
the optimal coordinates z corresponds to finding the representation of the
linear projection ˜x with respect to b that minimizes the distance between
˜x − x. From Figure .(b), it is clear that this will be the orthogonal
projection, and in the following we will show exactly this.
We assume an ONB (b, . . . , bM) of U ⊆ RD. To find the optimal co-
ordinates zm with respect to this basis, we require the partial derivatives
∂JM
∂zin
= ∂JM
∂˜xn
∂˜xn
∂zin
(.a)
∂JM
∂˜xn
= −
N (xn − ˜xn)⊤ ∈ R×D ,
(.b)
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
Figure .
Optimal projection
of a vector x ∈ R
∥x − ˜x∥
˜x
onto a
one-dimensional
subspace
(continuation from
Figure .).
(a) Distances
∥x − ˜x∥ for some
˜x ∈ U.
(b) Orthogonal
projection and
optimal coordinates.
(a) Distances ∥x − ˜x∥ for some ˜x = zb ∈
U = span[b]; see panel (b) for the setting.
(b) The vector ˜x that minimizes the distance
in panel (a) is its orthogonal projection onto
U. The coordinate of the projection ˜x with
respect to the basis vector b that spans U
is the factor we need to scale b in order to
“reach” ˜x.
= bi
(.c)
∂˜xn
∂zin
∂zin
m=
zmnbm
for i = , . . . , M, such that we obtain
bi
(.b)
(.c)
∂JM
∂zin
N (xn − ˜xn)⊤bi
xn −

m=
zmnbm
(.a)
ONB
= −
N (x⊤
n bi − zinb⊤
i bi) = −
N (x⊤
n bi − zin) .
(.b)
optimal coordinates
zin = x⊤
n bi = b⊤
i xn
for i = , . . . , M and n = , . . . , N. This means that the optimal co-
ordinates zin of the projection ˜xn are the coordinates of the orthogonal
projection (see Section .) of the original data point xn onto the one-
dimensional subspace that is spanned by bi. Consequently:
since b⊤
i bi = . Setting this partial derivative to  yields immediately the
The coordinates of
the optimal
projection of xn
with respect to the
basis vectors
b, . . . , bM are the
coordinates of the
orthogonal
projection of xn
onto the principal
subspace.
The optimal linear projection ˜xn of xn is an orthogonal projection.
The coordinates of ˜xn with respect to the basis (b, . . . , bM) are the
coordinates of the orthogonal projection of xn onto the principal sub-
space.
An orthogonal projection is the best linear mapping given the objec-
tive (.).
The coordinates ζm of x in (.) and the coordinates zm of ˜x in (.)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Projection Perspective
must be identical for m = , . . . , M since U ⊥ = span[bM+, . . . , bD] is
the orthogonal complement (see Section .) of U = span[b, . . . , bM].
˜x = bj(b⊤
j bj)−b⊤
j x = bjb⊤
j x ∈ RD
Remark (Orthogonal Projections with Orthonormal Basis Vectors). Let us
briefly recap orthogonal projections from Section .. If (b, . . . , bD) is an
orthonormal basis of RD then
b⊤
j x is the
coordinate of the
orthogonal
projection of x onto
the subspace
spanned by bj.
is the orthogonal projection of x onto the subspace spanned by the jth ba-
sis vector, and zj = b⊤
j x is the coordinate of this projection with respect to
the basis vector bj that spans that subspace since zjbj = ˜x. Figure .(b)
illustrates this setting.
More generally, if we aim to project onto an M-dimensional subspace
of RD, we obtain the orthogonal projection of x onto the M-dimensional
subspace with orthonormal basis vectors b, . . . , bM as
˜x = B(B⊤B
| {z }
=I
)−B⊤x = BB⊤x ,
where we defined B := [b, . . . , bM] ∈ RD×M. The coordinates of this
projection with respect to the ordered basis (b, . . . , bM) are z := B⊤x
as discussed in Section ..
We can think of the coordinates as a representation of the projected
vector in a new coordinate system defined by (b, . . . , bM). Note that al-
though ˜x ∈ RD, we only need M coordinates z, . . . , zM to represent
this vector; the other D − M coordinates with respect to the basis vectors
(bM+, . . . , bD) are always .
So far we have shown that for a given ONB we can find the optimal
coordinates of ˜x by an orthogonal projection onto the principal subspace.
In the following, we will determine what the best basis is.
.. Finding the Basis of the Principal Subspace
To determine the basis vectors b, . . . , bM of the principal subspace, we
rephrase the loss function (.) using the results we have so far. This
will make it easier to find the basis vectors. To reformulate the loss func-
tion, we exploit our results from before and obtain
˜xn =
m=
zmnbm
m=
(x⊤
n bm)bm .
We now exploit the symmetry of the dot product, which yields
˜xn =
xn .
m=
bmb⊤
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
U⊥
Figure .
Orthogonal
projection and
displacement
vectors. When
projecting data
points xn (blue)
onto subspace U,
we obtain ˜xn
(orange). The
displacement vector
˜xn − xn lies
completely in the
orthogonal
complement U of
U.
Since we can generally write the original data point xn as a linear combi-
nation of all basis vectors, it holds that
xn
(.a)
xn =
d=
zdnbd
d=
(x⊤
n bd)bd =
d=
bdb⊤
xn +
xn ,
(.b)
m=
bmb⊤
j=M+
bjb⊤

where we split the sum with D terms into a sum over M and a sum
over D − M terms. With this result, we find that the displacement vector
xn − ˜xn, i.e., the difference vector between the original data point and its
projection, is
xn
(.a)
xn − ˜xn =
j=M+
bjb⊤

j=M+
(x⊤
n bj)bj .
(.b)
This means the difference is exactly the projection of the data point onto
the orthogonal complement of the principal subspace: We identify the ma-
trix PD
j=M+ bjb⊤
j in (.a) as the projection matrix that performs this
projection. Hence the displacement vector xn − ˜xn lies in the subspace
that is orthogonal to the principal subspace as illustrated in Figure ..
Remark (Low-Rank Approximation). In (.a), we saw that the projec-
tion matrix, which projects x onto ˜x, is given by
m=
bmb⊤
m = BB⊤ .
By construction as a sum of rank-one matrices bmb⊤
m we see that BB⊤ is
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Projection Perspective
symmetric and has rank M. Therefore, the average squared reconstruction
error can also be written as
n=
∥xn − ˜xn∥
n=
xn − BB⊤xn

(.a)
n=
(I − BB⊤)xn

(.b)
Finding orthonormal basis vectors b, . . . , bM, which minimize the differ-
PCA finds the best
rank-M
approximation of
the identity matrix.
ence between the original data xn and their projections ˜xn, is equivalent
to finding the best rank-M approximation BB⊤ of the identity matrix I
(see Section .).
Now we have all the tools to reformulate the loss function (.).
JM =
n=
∥xn − ˜xn∥ (.b)
n=
j=M+
(b⊤
j xn)bj

We now explicitly compute the squared norm and exploit the fact that the
bj form an ONB, which yields
JM =
n=
n=
j=M+
(b⊤
j xn) =
j=M+
b⊤
j xnb⊤
j xn
(.a)
n=
j=M+
b⊤
j xnx⊤
n bj ,
(.b)
where we exploited the symmetry of the dot product in the last step to
write b⊤
j xn = x⊤
n bj. We now swap the sums and obtain
JM =
bj =

n=
xnx⊤
j=M+
b⊤
j=M+
b⊤
j Sbj
(.a)
{z
=:S
j=M+
tr(b⊤
j Sbj) =

j=M+
bjb⊤

j=M+
tr(Sbjb⊤
j ) = tr

(.b)
{z
projection matrix
where we exploited the property that the trace operator tr() (see (.))
is linear and invariant to cyclic permutations of its arguments. Since we
assumed that our dataset is centered, i.e., E[X] = , we identify S as the
data covariance matrix. Since the projection matrix in (.b) is con-
structed as a sum of rank-one matrices bjb⊤
j it itself is of rank D − M.
Equation (.a) implies that we can formulate the average squared
reconstruction error equivalently as the covariance matrix of the data,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
minimizing the variance of the data when projected onto the subspace we
ignore, i.e., the orthogonal complement of the principal subspace. Equiva-
lently, we maximize the variance of the projection that we retain in the
principal subspace, which links the projection loss immediately to the
maximum-variance formulation of PCA discussed in Section .. But this
then also means that we will obtain the same solution that we obtained
projected onto the orthogonal complement of the principal subspace. Min-
imizing the average squared reconstruction error is therefore equivalent to
Minimizing the
average squared
reconstruction error
is equivalent to
minimizing the
projection of the
data covariance
matrix onto the
orthogonal
complement of the
principal subspace.
for the maximum-variance perspective. Therefore, we omit a derivation
that is identical to the one presented in Section . and summarize the
results from earlier in the light of the projection perspective.
The average squared reconstruction error, when projecting onto the M-
dimensional principal subspace, is
JM =
Minimizing the
average squared
reconstruction error
is equivalent to
maximizing the
variance of the
projected data.
j=M+
λj ,
where λj are the eigenvalues of the data covariance matrix. Therefore,
to minimize (.) we need to select the smallest D − M eigenvalues,
which then implies that their corresponding eigenvectors are the basis of
the orthogonal complement of the principal subspace. Consequently, this
means that the basis of the principal subspace comprises the eigenvectors
b, . . . , bM that are associated with the largest M eigenvalues of the data
covariance matrix.
Example . (MNIST Digits Embedding)
Figure .
Embedding of
MNIST digits
(blue) and
(orange) in a
two-dimensional
principal subspace
using PCA. Four
embeddings of the
digits “” and “” in
the principal
subspace are
highlighted in red
with their
corresponding
original digit.
Figure . visualizes the training data of the MMIST digits “” and “”
embedded in the vector subspace spanned by the first two principal com-
ponents. We observe a relatively clear separation between “”s (blue dots)
and “”s (orange dots), and we see the variation within each individual
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Eigenvector Computation and Low-Rank Approximations
cluster. Four embeddings of the digits “” and “” in the principal subspace
are highlighted in red with their corresponding original digit. The figure
reveals that the variation within the set of “” is significantly greater than
the variation within the set of “”.
. Eigenvector Computation and Low-Rank Approximations
In the previous sections, we obtained the basis of the principal subspace
as the eigenvectors that are associated with the largest eigenvalues of the
data covariance matrix
S =
N XX⊤ ,
n=
xnx⊤
n =
X = [x, . . . , xN] ∈ RD×N .
Note that X is a D × N matrix, i.e., it is the transpose of the “typical”
data matrix (Bishop, ; Murphy, ). To get the eigenvalues (and
the corresponding eigenvectors) of S, we can follow two approaches:
Use
eigendecomposition
or SVD to compute
eigenvectors.
We perform an eigendecomposition (see Section .) and compute the
eigenvalues and eigenvectors of S directly.
We use a singular value decomposition (see Section .). Since S is
symmetric and factorizes into XX⊤ (ignoring the factor
N ), the eigen-
values of S are the squared singular values of X.
More specifically, the SVD of X is given by
|{z}
D×N
= U
|{z}
D×D
|{z}
D×N
V ⊤
|{z}
N×N
where U ∈ RD×D and V ⊤ ∈ RN×N are orthogonal matrices and Σ ∈
RD×N is a matrix whose only nonzero entries are the singular values σii ⩾
. It then follows that
S =
N XX⊤ =
N UΣΣ⊤U ⊤ .
N UΣ V ⊤V
| {z }
=IN
Σ⊤U ⊤ =
With the results from Section ., we get that the columns of U are the
The columns of U
are the eigenvectors
of S.
eigenvectors of XX⊤ (and therefore S). Furthermore, the eigenvalues
λd of S are related to the singular values of X via
λd = σ
N .
This relationship between the eigenvalues of S and the singular values
of X provides the connection between the maximum variance view (Sec-
tion .) and the singular value decomposition.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
.. PCA Using Low-Rank Matrix Approximations
To maximize the variance of the projected data (or minimize the average
squared reconstruction error), PCA chooses the columns of U in (.)
to be the eigenvectors that are associated with the M largest eigenvalues
of the data covariance matrix S so that we identify U as the projection ma-
trix B in (.), which projects the original data onto a lower-dimensional
subspace of dimension M. The Eckart-Young theorem (Theorem . in
Eckart-Young
theorem
Section .) offers a direct way to estimate the low-dimensional represen-
tation. Consider the best rank-M approximation
˜XM := argminrk(A)⩽M ∥X − A∥ ∈ RD×N
of X, where ∥∥ is the spectral norm defined in (.). The Eckart-Young
theorem states that ˜XM is given by truncating the SVD at the top-M
singular value. In other words, we obtain
∈ RD×N
˜XM = U M
|{z}
D×M
ΣM
|{z}
M×M
V ⊤
|{z}
M×N
with orthogonal matrices U M := [u, . . . , uM] ∈ RD×M and V M :=
[v, . . . , vM] ∈ RN×M and a diagonal matrix ΣM ∈ RM×M whose diago-
nal entries are the M largest singular values of X.
.. Practical Aspects
Finding eigenvalues and eigenvectors is also important in other funda-
mental machine learning methods that require matrix decompositions. In
theory, as we discussed in Section ., we can solve for the eigenvalues as
roots of the characteristic polynomial. However, for matrices larger than
× this is not possible because we would need to find the roots of a poly-
nomial of degree  or higher. However, the Abel-Ruffini theorem (Ruffini,
Abel-Ruffini
theorem
; Abel, ) states that there exists no algebraic solution to this
problem for polynomials of degree  or more. Therefore, in practice, we
np.linalg.eigh
or
np.linalg.svd
solve for eigenvalues or singular values using iterative methods, which are
implemented in all modern packages for linear algebra.
In many applications (such as PCA presented in this chapter), we only
require a few eigenvectors. It would be wasteful to compute the full de-
composition, and then discard all eigenvectors with eigenvalues that are
beyond the first few. It turns out that if we are interested in only the first
few eigenvectors (with the largest eigenvalues), then iterative processes,
which directly optimize these eigenvectors, are computationally more effi-
cient than a full eigendecomposition (or SVD). In the extreme case of only
needing the first eigenvector, a simple method called the power iteration
power iteration
is very efficient. Power iteration chooses a random vector x that is not in
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. PCA in High Dimensions
the null space of S and follows the iteration
xk+ =
Sxk
∥Sxk∥ ,
k = , , . . . .
This means the vector xk is multiplied by S in every iteration and then
If S is invertible, it
is sufficient to
ensure that x ̸= .
normalized, i.e., we always have ∥xk∥ = . This sequence of vectors con-
verges to the eigenvector associated with the largest eigenvalue of S. The
original Google PageRank algorithm (Page et al., ) uses such an al-
gorithm for ranking web pages based on their hyperlinks.
. PCA in High Dimensions
In order to do PCA, we need to compute the data covariance matrix. In D
dimensions, the data covariance matrix is a D ×D matrix. Computing the
eigenvalues and eigenvectors of this matrix is computationally expensive
as it scales cubically in D. Therefore, PCA, as we discussed earlier, will be
infeasible in very high dimensions. For example, if our xn are images with
, pixels (e.g.,  ×  pixel images), we would need to compute
the eigendecomposition of a , × , covariance matrix. In the
following, we provide a solution to this problem for the case that we have
substantially fewer data points than dimensions, i.e., N ≪ D.
Assume we have a centered dataset x, . . . , xN, xn ∈ RD. Then the
data covariance matrix is given as
S =
N XX⊤ ∈ RD×D ,
where X = [x, . . . , xN] is a D × N matrix whose columns are the data
points.
We now assume that N ≪ D, i.e., the number of data points is smaller
than the dimensionality of the data. If there are no duplicate data points,
the rank of the covariance matrix S is N, so it has D −N + many eigen-
values that are . Intuitively, this means that there are some redundancies.
In the following, we will exploit this and turn the D×D covariance matrix
into an N × N covariance matrix whose eigenvalues are all positive.
In PCA, we ended up with the eigenvector equation
Sbm = λmbm ,
m = , . . . , M ,
where bm is a basis vector of the principal subspace. Let us rewrite this
equation a bit: With S defined in (.), we obtain
Sbm =
N XX⊤bm = λmbm .
We now multiply X⊤ ∈ RN×D from the left-hand side, which yields
N X⊤X
| {z }
N×N
X⊤bm
| {z }
=:cm
= λmX⊤bm ⇐⇒
N X⊤Xcm = λmcm ,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
and we get a new eigenvector/eigenvalue equation: λm remains eigen-
value, which confirms our results from Section .. that the nonzero
eigenvalues of XX⊤ equal the nonzero eigenvalues of X⊤X. We obtain
the eigenvector of the matrix
N X⊤X ∈ RN×N associated with λm as
cm := X⊤bm. Assuming we have no duplicate data points, this matrix
has rank N and is invertible. This also implies that
N X⊤X has the same
(nonzero) eigenvalues as the data covariance matrix S. But this is now an
N × N matrix, so that we can compute the eigenvalues and eigenvectors
much more efficiently than for the original D ×D data covariance matrix.
Now that we have the eigenvectors of
N X⊤X, we are going to re-
cover the original eigenvectors, which we still need for PCA. Currently,
we know the eigenvectors of
N X⊤X. If we left-multiply our eigenvalue/
eigenvector equation with X, we get
Xcm = λmXcm
N XX⊤
{z
and we recover the data covariance matrix again. This now also means
that we recover Xcm as an eigenvector of S.
Remark. If we want to apply the PCA algorithm that we discussed in Sec-
tion ., we need to normalize the eigenvectors Xcm of S so that they
have norm .
. Key Steps of PCA in Practice
In the following, we will go through the individual steps of PCA using a
running example, which is summarized in Figure .. We are given a
two-dimensional dataset (Figure .(a)), and we want to use PCA to
project it onto a one-dimensional subspace.
. Mean subtraction
We start by centering the data by computing the
mean µ of the dataset and subtracting it from every single data point.
This ensures that the dataset has mean  (Figure .(b)). Mean sub-
traction is not strictly necessary but reduces the risk of numerical prob-
lems.
. Standardization
Divide the data points by the standard deviation σd
of the dataset for every dimension d = , . . . , D. Now the data is unit
free, and it has variance  along each axis, which is indicated by the
two arrows in Figure .(c). This step completes the standardization
standardization
of the data.
. Eigendecomposition of the covariance matrix
Compute the data
covariance matrix and its eigenvalues and corresponding eigenvectors.
Since the covariance matrix is symmetric, the spectral theorem (The-
orem .) states that we can find an ONB of eigenvectors. In Fig-
ure .(d), the eigenvectors are scaled by the magnitude of the cor-
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Key Steps of PCA in Practice
Figure . Steps
of PCA. (a) Original
dataset;
(b) centering;
(c) divide by
standard deviation;
(d) eigendecomposi-
tion; (e) projection;
(f) mapping back to
original data space.
(a) Original dataset.
(b) Step : Centering by sub-
tracting the mean from each
data point.
(c) Step : Dividing by the
standard deviation to make
the data unit free. Data has
variance  along each axis.
(e) Step : Project data onto
the principal subspace.
(d) Step : Compute eigenval-
ues and eigenvectors (arrows)
of the data covariance matrix
(ellipse).
(f) Undo the standardization
and move projected data back
into the original data space
from (a).
responding eigenvalue. The longer vector spans the principal subspace,
which we denote by U. The data covariance matrix is represented by
the ellipse.
. Projection
We can project any data point x∗ ∈ RD onto the principal
subspace: To get this right, we need to standardize x∗ using the mean
µd and standard deviation σd of the training data in the dth dimension,
respectively, so that
x(d)
← x(d)
− µd
σd
d = , . . . , D ,
where x(d)
is the dth component of x∗. We obtain the projection as
˜x∗ = BB⊤x∗
with coordinates
z∗ = B⊤x∗
with respect to the basis of the principal subspace. Here, B is the ma-
trix that contains the eigenvectors that are associated with the largest
eigenvalues of the data covariance matrix as columns. PCA returns the
coordinates (.), not the projections x∗.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
Having standardized our dataset, (.) only yields the projections in
the context of the standardized dataset. To obtain our projection in the
original data space (i.e., before standardization), we need to undo the
standardization (.) and multiply by the standard deviation before
adding the mean so that we obtain
˜x(d)
← ˜x(d)
∗ σd + µd ,
d = , . . . , D .
Figure .(f) illustrates the projection in the original data space.
Example . (MNIST Digits: Reconstruction)
In the following, we will apply PCA to the MNIST digits dataset, which
contains , examples of handwritten digits  through . Each digit is
an image of size ×, i.e., it contains  pixels so that we can interpret
every image in this dataset as a vector x ∈ R. Examples of these digits
are shown in Figure ..
Original
Figure . Effect
of increasing the
number of principal
components on
reconstruction.
PCs:
PCs:
PCs:
PCs:
For illustration purposes, we apply PCA to a subset of the MNIST digits,
and we focus on the digit “”. We used , training images of the digit
“” and determined the principal subspace as detailed in this chapter. We
then used the learned projection matrix to reconstruct a set of test im-
ages, which is illustrated in Figure .. The first row of Figure .
shows a set of four original digits from the test set. The following rows
show reconstructions of exactly these digits when using a principal sub-
space of dimensions , , , and , respectively. We see that even
with a single-dimensional principal subspace we get a halfway decent re-
construction of the original digits, which, however, is blurry and generic.
With an increasing number of principal components (PCs), the reconstruc-
tions become sharper and more details are accounted for. With  prin-
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Latent Variable Perspective
cipal components, we effectively obtain a near-perfect reconstruction. If
we were to choose  PCs, we would recover the exact digit without any
compression loss.
Figure . shows the average squared reconstruction error, which is
n=
∥xn − ˜xn∥
i=M+
λi ,
as a function of the number M of principal components. We can see that
the importance of the principal components drops off rapidly, and only
marginal gains can be achieved by adding more PCs. This matches exactly
our observation in Figure ., where we discovered that the most of the
variance of the projected data is captured by only a few principal compo-
nents. With about  PCs, we can essentially fully reconstruct the training
data that contains the digit “” (some pixels around the boundaries show
no variation across the dataset as they are always black).
Average squared reconstruction error
Figure .
Average squared
reconstruction error
as a function of the
number of principal
components. The
average squared
reconstruction error
is the sum of the
eigenvalues in the
orthogonal
complement of the
principal subspace.
Number of PCs
. Latent Variable Perspective
In the previous sections, we derived PCA without any notion of a prob-
abilistic model using the maximum-variance and the projection perspec-
tives. On the one hand, this approach may be appealing as it allows us to
sidestep all the mathematical difficulties that come with probability the-
ory, but on the other hand, a probabilistic model would offer us more flex-
ibility and useful insights. More specifically, a probabilistic model would
Come with a likelihood function, and we can explicitly deal with noisy
observations (which we did not even discuss earlier)
Allow us to do Bayesian model comparison via the marginal likelihood
as discussed in Section .
View PCA as a generative model, which allows us to simulate new data
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
Allow us to make straightforward connections to related algorithms
Deal with data dimensions that are missing at random by applying
Bayes’ theorem
Give us a notion of the novelty of a new data point
Give us a principled way to extend the model, e.g., to a mixture of PCA
models
Have the PCA we derived in earlier sections as a special case
Allow for a fully Bayesian treatment by marginalizing out the model
parameters
By introducing a continuous-valued latent variable z ∈ RM it is possible
to phrase PCA as a probabilistic latent-variable model. Tipping and Bishop
() proposed this latent-variable model as probabilistic PCA (PPCA).
probabilistic PCA
PPCA
PPCA addresses most of the aforementioned issues, and the PCA solution
that we obtained by maximizing the variance in the projected space or
by minimizing the reconstruction error is obtained as the special case of
maximum likelihood estimation in a noise-free setting.
.. Generative Process and Probabilistic Model
In PPCA, we explicitly write down the probabilistic model for linear di-
mensionality reduction. For this we assume a continuous latent variable
z ∈ RM with a standard-normal prior p(z) = N
 , I
and a linear rela-
tionship between the latent variables and the observed x data where
x = Bz + µ + ϵ ∈ RD ,
where ϵ ∼ N
 , σI
is Gaussian observation noise and B ∈ RD×M
and µ ∈ RD describe the linear/affine mapping from latent to observed
variables. Therefore, PPCA links latent and observed variables via
Overall, PPCA induces the following generative process:
p(x|z, B, µ, σ) = N
 x | Bz + µ, σI
 .
zn ∼ N
 z | , I
xn | zn ∼ N
 x | Bzn + µ, σI
To generate a data point that is typical given the model parameters, we
follow an ancestral sampling scheme: We first sample a latent variable zn
ancestral sampling
from p(z). Then we use zn in (.) to sample a data point conditioned
on the sampled zn, i.e., xn ∼ p(x | zn, B, µ, σ).
This generative process allows us to write down the probabilistic model
(i.e., the joint distribution of all random variables; see Section .) as
p(x, z|B, µ, σ) = p(x|z, B, µ, σ)p(z) ,
which immediately gives rise to the graphical model in Figure . using
the results from Section ..
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Latent Variable Perspective
zn
xn
n = , . . . , N
Figure .
Graphical model for
probabilistic PCA.
The observations xn
explicitly depend on
corresponding
latent variables
zn ∼ N
, I
. The
model parameters
B, µ and the
likelihood
parameter σ are
shared across the
dataset.
Remark. Note the direction of the arrow that connects the latent variables
z and the observed data x: The arrow points from z to x, which means
that the PPCA model assumes a lower-dimensional latent cause z for high-
dimensional observations x. In the end, we are obviously interested in
finding something out about z given some observations. To get there we
will apply Bayesian inference to “invert” the arrow implicitly and go from
observations to latent variables.
Example . (Generating New Data Using Latent Variables)
Figure .
Generating new
MNIST digits. The
latent variables z
can be used to
generate new data
˜x = Bz. The closer
we stay to the
training data, the
more realistic the
generated data.
Figure . shows the latent coordinates of the MNIST digits “” found
by PCA when using a two-dimensional principal subspace (blue dots). We
can query any vector z∗ in this latent space and generate an image ˜x∗ =
Bz∗ that resembles the digit “”. We show eight of such generated images
with their corresponding latent space representation. Depending on where
we query the latent space, the generated images look different (shape,
rotation, size, etc.). If we query away from the training data, we see more
and more artifacts, e.g., the top-left and top-right digits. Note that the
intrinsic dimensionality of these generated images is only two.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
.. Likelihood and Joint Distribution
The likelihood does
not depend on the
latent variables z.
Using the results from Chapter , we obtain the likelihood of this proba-
bilistic model by integrating out the latent variable z (see Section ..)
so that
p(x | B, µ, σ) =
p(x | z, B, µ, σ)p(z)dz
(.a)
 x | Bz + µ, σI
N
 z | , I
dz .
(.b)
From Section ., we know that the solution to this integral is a Gaussian
distribution with mean
Ex[x] = Ez[Bz + µ] + Eϵ[ϵ] = µ
and with covariance matrix
V[x] = Vz[Bz + µ] + Vϵ[ϵ] = Vz[Bz] + σI
(.a)
= BVz[z]B⊤ + σI = BB⊤ + σI .
(.b)
The likelihood in (.b) can be used for maximum likelihood or MAP
estimation of the model parameters.
Remark. We cannot use the conditional distribution in (.) for maxi-
mum likelihood estimation as it still depends on the latent variables. The
likelihood function we require for maximum likelihood (or MAP) estima-
tion should only be a function of the data x and the model parameters,
but must not depend on the latent variables.
From Section ., we know that a Gaussian random variable z and
a linear/affine transformation x = Bz of it are jointly Gaussian dis-
tributed. We already know the marginals p(z) = N
 z | , I
and p(x) =
 x | µ, BB⊤ + σI
. The missing cross-covariance is given as
Cov[x, z] = Covz[Bz + µ] = B Covz[z, z] = B .
Therefore, the probabilistic model of PPCA, i.e., the joint distribution of
latent and observed random variables is explicitly given by

p(x, z | B, µ, σ) = N
BB⊤ + σI
B⊤

with a mean vector of length D + M and a covariance matrix of size
(D + M) × (D + M).
.. Posterior Distribution
The joint Gaussian distribution p(x, z | B, µ, σ) in (.) allows us to
determine the posterior distribution p(z | x) immediately by applying the
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Further Reading
rules of Gaussian conditioning from Section ... The posterior distribu-
tion of the latent variable given an observation x is then
p(z | x) = N
 z | m, C
 ,
m = B⊤(BB⊤ + σI)−(x − µ) ,
C = I − B⊤(BB⊤ + σI)−B .
Note that the posterior covariance does not depend on the observed data
x. For a new observation x∗ in data space, we use (.) to determine
the posterior distribution of the corresponding latent variable z∗. The co-
variance matrix C allows us to assess how confident the embedding is. A
covariance matrix C with a small determinant (which measures volumes)
tells us that the latent embedding z∗ is fairly certain. If we obtain a pos-
terior distribution p(z∗ | x∗) with much variance, we may be faced with
an outlier. However, we can explore this posterior distribution to under-
stand what other data points x are plausible under this posterior. To do
this, we exploit the generative process underlying PPCA, which allows us
to explore the posterior distribution on the latent variables by generating
new data that is plausible under this posterior:
. Sample a latent variable z∗ ∼ p(z | x∗) from the posterior distribution
over the latent variables (.).
. Sample a reconstructed vector ˜x∗ ∼ p(x | z∗, B, µ, σ) from (.).
If we repeat this process many times, we can explore the posterior dis-
tribution (.) on the latent variables z∗ and its implications on the
observed data. The sampling process effectively hypothesizes data, which
is plausible under the posterior distribution.
. Further Reading
We derived PCA from two perspectives: (a) maximizing the variance in the
projected space; (b) minimizing the average reconstruction error. How-
ever, PCA can also be interpreted from different perspectives. Let us recap
what we have done: We took high-dimensional data x ∈ RD and used
a matrix B⊤ to find a lower-dimensional representation z ∈ RM. The
columns of B are the eigenvectors of the data covariance matrix S that are
associated with the largest eigenvalues. Once we have a low-dimensional
representation z, we can get a high-dimensional version of it (in the orig-
inal data space) as x ≈ ˜x = Bz = BB⊤x ∈ RD, where BB⊤ is a
projection matrix.
We can also think of PCA as a linear auto-encoder as illustrated in Fig-
auto-encoder
ure .. An auto-encoder encodes the data xn ∈ RD to a code zn ∈ RM
code
and decodes it to a ˜xn similar to xn. The mapping from the data to the
code is called the encoder, and the mapping from the code back to the orig-
encoder
inal data space is called the decoder. If we consider linear mappings where
decoder
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
Original
Code
RD
RD
RM
B⊤
˜x
Encoder
Decoder
Figure . PCA
can be viewed as a
linear auto-encoder.
It encodes the
high-dimensional
data x into a
lower-dimensional
representation
(code) z ∈ RM and
decodes z using a
decoder. The
decoded vector ˜x is
the orthogonal
projection of the
original data x onto
the M-dimensional
principal subspace.
the code is given by zn = B⊤xn ∈ RM and we are interested in minimiz-
ing the average squared error between the data xn and its reconstruction
˜xn = Bzn, n = , . . . , N, we obtain
n=
∥xn − ˜xn∥ =
n=
xn − BB⊤xn

This means we end up with the same objective function as in (.) that
we discussed in Section . so that we obtain the PCA solution when we
minimize the squared auto-encoding loss. If we replace the linear map-
ping of PCA with a nonlinear mapping, we get a nonlinear auto-encoder.
A prominent example of this is a deep auto-encoder where the linear func-
tions are replaced with deep neural networks. In this context, the encoder
is also known as a recognition network or inference network, whereas the
recognition network
inference network
decoder is also called a generator.
generator
Another interpretation of PCA is related to information theory. We can
think of the code as a smaller or compressed version of the original data
point. When we reconstruct our original data using the code, we do not
get the exact data point back, but a slightly distorted or noisy version
of it. This means that our compression is “lossy”. Intuitively, we want
The code is a
compressed version
of the original data.
to maximize the correlation between the original data and the lower-
dimensional code. More formally, this is related to the mutual information.
We would then get the same solution to PCA we discussed in Section .
by maximizing the mutual information, a core concept in information the-
ory (MacKay, ).
In our discussion on PPCA, we assumed that the parameters of the
model, i.e., B, µ, and the likelihood parameter σ, are known. Tipping
and Bishop () describe how to derive maximum likelihood estimates
for these parameters in the PPCA setting (note that we use a different
notation in this chapter). The maximum likelihood parameters, when pro-
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Further Reading
jecting D-dimensional data onto an M-dimensional subspace, are
µML =
n=
xn ,
BML = T (Λ − σI)
R ,
ML =
j=M+
λj ,
D − M
where T ∈ RD×M contains M eigenvectors of the data covariance matrix,
The matrix Λ − σI
in (.) is
guaranteed to be
positive semidefinite
as the smallest
eigenvalue of the
data covariance
matrix is bounded
from below by the
noise variance σ.
Λ = diag(λ, . . . , λM) ∈ RM×M is a diagonal matrix with the eigenvalues
associated with the principal axes on its diagonal, and R ∈ RM×M is
an arbitrary orthogonal matrix. The maximum likelihood solution BML is
unique up to an arbitrary orthogonal transformation, e.g., we can right-
multiply BML with any rotation matrix R so that (.) essentially is a
singular value decomposition (see Section .). An outline of the proof is
given by Tipping and Bishop ().
The maximum likelihood estimate for µ given in (.) is the sample
mean of the data. The maximum likelihood estimator for the observation
noise variance σ given in (.) is the average variance in the orthog-
onal complement of the principal subspace, i.e., the average leftover vari-
ance that we cannot capture with the first M principal components is
treated as observation noise.
In the noise-free limit where σ → , PPCA and PCA provide identical
solutions: Since the data covariance matrix S is symmetric, it can be di-
agonalized (see Section .), i.e., there exists a matrix T of eigenvectors
of S so that
S = T ΛT − .
In the PPCA model, the data covariance matrix is the covariance matrix of
the Gaussian likelihood p(x | B, µ, σ), which is BB⊤+σI, see (.b).
For σ → , we obtain BB⊤ so that this data covariance must equal the
PCA data covariance (and its factorization given in (.)) so that
R ,
Cov[X] = T ΛT − = BB⊤ ⇐⇒ B = T Λ
i.e., we obtain the maximum likelihood estimate in (.) for σ = .
From (.) and (.), it becomes clear that (P)PCA performs a de-
composition of the data covariance matrix.
In a streaming setting, where data arrives sequentially, it is recom-
mended to use the iterative expectation maximization (EM) algorithm for
maximum likelihood estimation (Roweis, ).
To determine the dimensionality of the latent variables (the length of
the code, the dimensionality of the lower-dimensional subspace onto which
we project the data), Gavish and Donoho () suggest the heuristic
that, if we can estimate the noise variance σ of the data, we should
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Dimensionality Reduction with Principal Component Analysis
discard all singular values smaller than σ
. Alternatively, we can use
(nested) cross-validation (Section ..) or Bayesian model selection cri-
teria (discussed in Section ..) to determine a good estimate of the
intrinsic dimensionality of the data (Minka, b).
Similar to our discussion on linear regression in Chapter , we can place
a prior distribution on the parameters of the model and integrate them
out. By doing so, we (a) avoid point estimates of the parameters and the
issues that come with these point estimates (see Section .) and (b) al-
low for an automatic selection of the appropriate dimensionality M of the
latent space. In this Bayesian PCA, which was proposed by Bishop (),
Bayesian PCA
a prior p(µ, B, σ) is placed on the model parameters. The generative
process allows us to integrate the model parameters out instead of condi-
tioning on them, which addresses overfitting issues. Since this integration
is analytically intractable, Bishop () proposes to use approximate in-
ference methods, such as MCMC or variational inference. We refer to the
work by Gilks et al. () and Blei et al. () for more details on these
approximate inference techniques.
In PPCA, we considered the linear model p(xn | zn) = N
 xn | Bzn +
µ, σI
with prior p(zn) = N
 , I
, where all observation dimensions
are affected by the same amount of noise. If we allow each observation
dimension d to have a different variance σ
d, we obtain factor analysis
factor analysis
(FA) (Spearman, ; Bartholomew et al., ). This means that FA
gives the likelihood some more flexibility than PPCA, but still forces the
data to be explained by the model parameters B, µ.However, FA no
An overly flexible
likelihood would be
able to explain more
than just the noise.
longer allows for a closed-form maximum likelihood solution so that we
need to use an iterative scheme, such as the expectation maximization
algorithm, to estimate the model parameters. While in PPCA all station-
ary points are global optima, this no longer holds for FA. Compared to
PPCA, FA does not change if we scale the data, but it does return different
solutions if we rotate the data.
An algorithm that is also closely related to PCA is independent com-
independent
component analysis
ponent analysis (ICA (Hyvarinen et al., )). Starting again with the
ICA
latent-variable perspective p(xn | zn) = N
 xn | Bzn + µ, σI
we now
change the prior on zn to non-Gaussian distributions. ICA can be used
for blind-source separation. Imagine you are in a busy train station with
blind-source
separation
many people talking. Your ears play the role of microphones, and they
linearly mix different speech signals in the train station. The goal of blind-
source separation is to identify the constituent parts of the mixed signals.
As discussed previously in the context of maximum likelihood estimation
for PPCA, the original PCA solution is invariant to any rotation. Therefore,
PCA can identify the best lower-dimensional subspace in which the sig-
nals live, but not the signals themselves (Murphy, ). ICA addresses
this issue by modifying the prior distribution p(z) on the latent sources
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Further Reading
to require non-Gaussian priors p(z). We refer to the books by Hyvarinen
et al. () and Murphy () for more details on ICA.
PCA, factor analysis, and ICA are three examples for dimensionality re-
duction with linear models. Cunningham and Ghahramani () provide
a broader survey of linear dimensionality reduction.
The (P)PCA model we discussed here allows for several important ex-
tensions. In Section ., we explained how to do PCA when the in-
put dimensionality D is significantly greater than the number N of data
points. By exploiting the insight that PCA can be performed by computing
(many) inner products, this idea can be pushed to the extreme by consid-
ering infinite-dimensional features. The kernel trick is the basis of kernel
kernel trick
kernel PCA
PCA and allows us to implicitly compute inner products between infinite-
dimensional features (Sch¨olkopf et al., ; Sch¨olkopf and Smola, ).
There are nonlinear dimensionality reduction techniques that are de-
rived from PCA (Burges () provides a good overview). The auto-
encoder perspective of PCA that we discussed previously in this section
can be used to render PCA as a special case of a deep auto-encoder. In the
deep auto-encoder
deep auto-encoder, both the encoder and the decoder are represented by
multilayer feedforward neural networks, which themselves are nonlinear
mappings. If we set the activation functions in these neural networks to be
the identity, the model becomes equivalent to PCA. A different approach to
nonlinear dimensionality reduction is the Gaussian process latent-variable
Gaussian process
latent-variable
model
model (GP-LVM) proposed by Lawrence (). The GP-LVM starts off with
GP-LVM
the latent-variable perspective that we used to derive PPCA and replaces
the linear relationship between the latent variables z and the observations
x with a Gaussian process (GP). Instead of estimating the parameters of
the mapping (as we do in PPCA), the GP-LVM marginalizes out the model
parameters and makes point estimates of the latent variables z. Similar
to Bayesian PCA, the Bayesian GP-LVM proposed by Titsias and Lawrence
Bayesian GP-LVM
() maintains a distribution on the latent variables z and uses approx-
imate inference to integrate them out as well.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture
Models
In earlier chapters, we covered already two fundamental problems in
machine learning: regression (Chapter ) and dimensionality reduction
(Chapter ). In this chapter, we will have a look at a third pillar of ma-
chine learning: density estimation. On our journey, we introduce impor-
tant concepts, such as the expectation maximization (EM) algorithm and
a latent variable perspective of density estimation with mixture models.
When we apply machine learning to data we often aim to represent
data in some way. A straightforward way is to take the data points them-
selves as the representation of the data; see Figure . for an example.
However, this approach may be unhelpful if the dataset is huge or if we
are interested in representing characteristics of the data. In density esti-
mation, we represent the data compactly using a density from a paramet-
ric family, e.g., a Gaussian or Beta distribution. For example, we may be
looking for the mean and variance of a dataset in order to represent the
data compactly using a Gaussian distribution. The mean and variance can
be found using tools we discussed in Section .: maximum likelihood or
maximum a posteriori estimation. We can then use the mean and variance
of this Gaussian to represent the distribution underlying the data, i.e., we
think of the dataset to be a typical realization from this distribution if we
were to sample from it.
Figure .
Two-dimensional
dataset that cannot
be meaningfully
represented by a
Gaussian.
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

. Gaussian Mixture Model
In practice, the Gaussian (or similarly all other distributions we encoun-
tered so far) have limited modeling capabilities. For example, a Gaussian
approximation of the density that generated the data in Figure . would
be a poor approximation. In the following, we will look at a more ex-
pressive family of distributions, which we can use for density estimation:
mixture models.
mixture model
Mixture models can be used to describe a distribution p(x) by a convex
combination of K simple (base) distributions
p(x) =
k=
πkpk(x)
⩽ πk ⩽  ,
k=
πk =  ,
where the components pk are members of a family of basic distributions,
e.g., Gaussians, Bernoullis, or Gammas, and the πk are mixture weights.
mixture weight
Mixture models are more expressive than the corresponding base distri-
butions because they allow for multimodal data representations, i.e., they
can describe datasets with multiple “clusters”, such as the example in Fig-
ure ..
We will focus on Gaussian mixture models (GMMs), where the basic
distributions are Gaussians. For a given dataset, we aim to maximize the
likelihood of the model parameters to train the GMM. For this purpose,
we will use results from Chapter , Chapter , and Section .. However,
unlike other applications we discussed earlier (linear regression or PCA),
we will not find a closed-form maximum likelihood solution. Instead, we
will arrive at a set of dependent simultaneous equations, which we can
only solve iteratively.
. Gaussian Mixture Model
A Gaussian mixture model is a density model where we combine a finite
Gaussian mixture
model
number of K Gaussian distributions N
 x | µk, Σk
so that
p(x | θ) =
k=
πkN
 x | µk, Σk
⩽ πk ⩽  ,
k=
πk =  ,
where we defined θ := {µk, Σk, πk : k = , . . . , K} as the collection of
all parameters of the model. This convex combination of Gaussian distri-
bution gives us significantly more flexibility for modeling complex densi-
ties than a simple Gaussian distribution (which we recover from (.) for
K = ). An illustration is given in Figure ., displaying the weighted
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture Models
Component
Component
Component
GMM density
p(x)
Figure .
Gaussian mixture
model. The
Gaussian mixture
distribution (black)
is composed of a
convex combination
of Gaussian
distributions and is
more expressive
than any individual
component. Dashed
lines represent the
weighted Gaussian
components.
components and the mixture density, which is given as
p(x | θ) = .N
 x | − ,
 + .N
 x | ,
 + .N
 x | ,
 .
. Parameter Learning via Maximum Likelihood
Assume we are given a dataset X = {x, . . . , xN}, where xn, n =
, . . . , N, are drawn i.i.d. from an unknown distribution p(x). Our ob-
jective is to find a good approximation/representation of this unknown
distribution p(x) by means of a GMM with K mixture components. The
parameters of the GMM are the K means µk, the covariances Σk, and
mixture weights πk. We summarize all these free parameters in θ :=
{πk, µk, Σk : k = , . . . , K}.
Example . (Initial Setting)
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
GMM density
p(x)
Figure . Initial
setting: GMM
(black) with
mixture three
mixture components
(dashed) and seven
data points (discs).
Throughout this chapter, we will have a simple running example that
helps us illustrate and visualize important concepts.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Learning via Maximum Likelihood
We consider a one-dimensional dataset X = {−, −., −, , , , }
consisting of seven data points and wish to find a GMM with K =
components that models the density of the data. We initialize the mixture
components as
p(x) = N
 x | − ,
p(x) = N
 x | , .
p(x) = N
 x | ,
and assign them equal weights π = π = π =
. The corresponding
model (and the data points) are shown in Figure ..
In the following, we detail how to obtain a maximum likelihood esti-
mate θML of the model parameters θ. We start by writing down the like-
lihood, i.e., the predictive distribution of the training data given the pa-
rameters. We exploit our i.i.d. assumption, which leads to the factorized
likelihood
p(X | θ) =
n=
p(xn | θ) ,
p(xn | θ) =
k=
πkN
 xn | µk, Σk
 ,
where every individual likelihood term p(xn | θ) is a Gaussian mixture
density. Then we obtain the log-likelihood as
. (.)
log p(X | θ) =
n=
log p(xn | θ) =
n=
log
k=
πkN
 xn | µk, Σk
{z
=:L
We aim to find parameters θ∗
ML that maximize the log-likelihood L defined
in (.). Our “normal” procedure would be to compute the gradient
dL/dθ of the log-likelihood with respect to the model parameters θ, set
it to , and solve for θ. However, unlike our previous examples for max-
imum likelihood estimation (e.g., when we discussed linear regression in
Section .), we cannot obtain a closed-form solution. However, we can
exploit an iterative scheme to find good model parameters θML, which will
turn out to be the EM algorithm for GMMs. The key idea is to update one
model parameter at a time while keeping the others fixed.
Remark. If we were to consider a single Gaussian as the desired density,
the sum over k in (.) vanishes, and the log can be applied directly to
the Gaussian component, such that we get
log(π) −
log det(Σ) −
(x − µ)⊤Σ−(x − µ).
log N
 x | µ, Σ
 = − D
This simple form allows us to find closed-form maximum likelihood esti-
mates of µ and Σ, as discussed in Chapter . In (.), we cannot move
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture Models
the log into the sum over k so that we cannot obtain a simple closed-form
maximum likelihood solution.
Any local optimum of a function exhibits the property that its gradi-
ent with respect to the parameters must vanish (necessary condition); see
Chapter . In our case, we obtain the following necessary conditions when
we optimize the log-likelihood in (.) with respect to the GMM param-
eters µk, Σk, πk:
∂ log p(xn | θ)
∂L
∂µk
= ⊤ ⇐⇒
∂µk
= ⊤ ,
n=
∂ log p(xn | θ)
∂L
∂Σk
=  ⇐⇒
∂Σk
=  ,
n=
∂ log p(xn | θ)
∂L
∂πk
=  ⇐⇒
∂πk
=  .
n=
For all three necessary conditions, by applying the chain rule (see Sec-
tion ..), we require partial derivatives of the form
∂ log p(xn | θ)
∂p(xn | θ)
∂θ
∂θ
p(xn | θ)
where θ = {µk, Σk, πk, k = , . . . , K} are the model parameters and
p(xn | θ) =
PK
j= πjN
 xn | µj, Σj
 .
In the following, we will compute the partial derivatives (.) through
(.). But before we do this, we introduce a quantity that will play a
central role in the remainder of this chapter: responsibilities.
.. Responsibilities
We define the quantity
rnk :=
πkN
 xn | µk, Σk
PK
j= πjN
 xn | µj, Σj
as the responsibility of the kth mixture component for the nth data point.
responsibility
The responsibility rnk of the kth mixture component for data point xn is
proportional to the likelihood
p(xn | πk, µk, Σk) = πkN
 xn | µk, Σk
of the mixture component given the data point. Therefore, mixture com-
rn follows a
Boltzmann/Gibbs
distribution.
ponents have a high responsibility for a data point when the data point
could be a plausible sample from that mixture component. Note that
rn := [rn, . . . , rnK]⊤ ∈ RK is a (normalized) probability vector, i.e.,
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Learning via Maximum Likelihood
sponsibility rnk from (.) represents the probability that xn has been
generated by the kth mixture component.
k rnk =  with rnk ⩾ . This probability vector distributes probabil-
ity mass among the K mixture components, and we can think of rn as a
“soft assignment” of xn to the K mixture components. Therefore, the re-
The responsibility
rnk is the
probability that the
kth mixture
component
generated the nth
data point.
Example . (Responsibilities)
For our example from Figure ., we compute the responsibilities rnk
∈ RN×K .
Here the nth row tells us the responsibilities of all mixture components
for xn. The sum of all K responsibilities for a data point (sum of every
row) is . The kth column gives us an overview of the responsibility of
the kth mixture component. We can see that the third mixture component
(third column) is not responsible for any of the first four data points, but
takes much responsibility of the remaining data points. The sum of all
entries of a column gives us the values Nk, i.e., the total responsibility of
the kth mixture component. In our example, we get N = ., N =
., N = ..
In the following, we determine the updates of the model parameters
µk, Σk, πk for given responsibilities. We will see that the update equa-
tions all depend on the responsibilities, which makes a closed-form solu-
tion to the maximum likelihood estimation problem impossible. However,
for given responsibilities we will be updating one model parameter at a
time, while keeping the others fixed. After this, we will recompute the
responsibilities. Iterating these two steps will eventually converge to a lo-
cal optimum and is a specific instantiation of the EM algorithm. We will
discuss this in some more detail in Section ..
.. Updating the Means
Theorem . (Update of the GMM Means). The update of the mean pa-
rameters µk, k = , . . . , K, of the GMM is given by
where the responsibilities rnk are defined in (.).
µnew
PN
n= rnkxn
PN
n= rnk
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture Models
Remark. The update of the means µk of the individual mixture compo-
nents in (.) depends on all means, covariance matrices Σk, and mix-
ture weights πk via rnk given in (.). Therefore, we cannot obtain a
closed-form solution for all µk at once.
Proof
From (.), we see that the gradient of the log-likelihood with
respect to the mean parameters µk, k = , . . . , K, requires us to compute
the partial derivative
∂p(xn | θ)
∂µk
∂µk
(.a)
j=
πj
∂N
 xn | µj, Σj
∂µk
= πk
∂N
 xn | µk, Σk
= πk(xn − µk)⊤Σ−
k N
 xn | µk, Σk
 ,
(.b)
where we exploited that only the kth mixture component depends on µk.
We use our result from (.b) in (.) and put everything together
so that the desired partial derivative of L with respect to µk is given as
(.a)
∂ log p(xn | θ)
∂p(xn | θ)
∂L
∂µk
∂µk
∂µk
n=
n=
p(xn | θ)
(.b)
(xn − µk)⊤Σ−
n=
πkN
 xn | µk, Σk
PK
j= πjN
 xn | µj, Σj
{z
=rnk
n=
rnk(xn − µk)⊤Σ−
k .
(.c)
Here we used the identity from (.) and the result of the partial deriva-
tive in (.b) to get to (.b). The values rnk are the responsibilities
we defined in (.).
We now solve (.c) for µnew
so that ∂L(µnew
∂µk
= ⊤ and obtain
Nk
n=
rnkxn =
n=
rnkxn ,
n=
rnkµnew
⇐⇒ µnew
PN
n= rnkxn
PN
n= rnk
where we defined
Nk :=
n=
rnk
as the total responsibility of the kth mixture component for the entire
dataset. This concludes the proof of Theorem ..
Intuitively, (.) can be interpreted as an importance-weighted Monte
Carlo estimate of the mean, where the importance weights of data point
xn are the responsibilities rnk of the kth cluster for xn, k = , . . . , K.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Learning via Maximum Likelihood
given by rnk. The means are pulled stronger toward data points for which
the corresponding mixture component has a high responsibility, i.e., a high
likelihood. Figure . illustrates this. We can also interpret the mean up-
date in (.) as the expected value of all data points under the distri-
bution given by
rk := [rk, . . . , rNk]⊤/Nk ,
which is a normalized probability vector, i.e.,
Therefore, the mean µk is pulled toward a data point xn with strength
Figure . Update
of the mean
parameter of
mixture component
in a GMM. The
mean µ is being
pulled toward
individual data
points with the
weights given by the
corresponding
responsibilities.
µk ← Erk[X] .
Example . (Mean Updates)
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
GMM density
GMM density
p(x)
p(x)
Figure . Effect
of updating the
mean values in a
GMM. (a) GMM
before updating the
mean values;
(b) GMM after
updating the mean
values µk while
retaining the
variances and
mixture weights.
(a) GMM density and individual components
prior to updating the mean values.
(b) GMM density and individual components
after updating the mean values.
In our example from Figure ., the mean values are updated as fol-
lows:
µ : − → −.
µ :  → −.
µ :  → .
Here we see that the means of the first and third mixture component
move toward the regime of the data, whereas the mean of the second
component does not change so dramatically. Figure . illustrates this
change, where Figure .(a) shows the GMM density prior to updating
the means and Figure .(b) shows the GMM density after updating the
mean values µk.
The update of the mean parameters in (.) look fairly straight-
forward. However, note that the responsibilities rnk are a function of
πj, µj, Σj for all j = , . . . , K, such that the updates in (.) depend
on all parameters of the GMM, and a closed-form solution, which we ob-
tained for linear regression in Section . or PCA in Chapter , cannot
be obtained.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture Models
.. Updating the Covariances
Theorem . (Updates of the GMM Covariances). The update of the co-
variance parameters Σk, k = , . . . , K of the GMM is given by
Σnew
Nk
n=
rnk(xn − µk)(xn − µk)⊤ ,
where rnk and Nk are defined in (.) and (.), respectively.
Proof
To prove Theorem ., our approach is to compute the partial
derivatives of the log-likelihood L with respect to the covariances Σk, set
them to , and solve for Σk. We start with our general approach
∂ log p(xn | θ)
∂p(xn | θ)
∂L
∂Σk
∂Σk
∂Σk
n=
n=
p(xn | θ)
We already know /p(xn | θ) from (.). To obtain the remaining par-
tial derivative ∂p(xn | θ)/∂Σk, we write down the definition of the Gaus-
sian distribution p(xn | θ) (see (.)) and drop all terms but the kth. We
then obtain
(.a)
∂p(xn | θ)
∂Σk
det(Σk)−
∂Σk

πk(π)− D
(.b)
exp
(xn − µk)⊤Σ−
k (xn − µk)
= πk(π)− D
∂Σk
det(Σk)−
exp
(xn − µk)⊤Σ−
k (xn − µk)
+ det(Σk)−
∂Σk
exp
(xn − µk)⊤Σ−
k (xn − µk)
(.c)
We now use the identities
Σ−
k ,
det(Σk)−
∂Σk
det(Σk)−
∂Σk
(xn − µk)⊤Σ−
k (xn − µk)
−Σ−
k (xn − µk)(xn − µk)⊤Σ−
and obtain (after some rearranging) the desired partial derivative required
in (.) as
∂p(xn | θ)
∂Σk
= πk N
 xn | µk, Σk

(Σ−
− Σ−
k (xn − µk)(xn − µk)⊤Σ−
k )
 .
Putting everything together, the partial derivative of the log-likelihood
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Learning via Maximum Likelihood
with respect to Σk is given by
(.a)
∂ log p(xn | θ)
∂p(xn | θ)
∂L
∂Σk
∂Σk
∂Σk
n=
n=
p(xn | θ)
n=
πkN
 xn | µk, Σk
PK
j= πjN
 xn | µj, Σj
(.b)
{z
=rnk
(Σ−
− Σ−
k (xn − µk)(xn − µk)⊤Σ−
k )

= −
n=
rnk(Σ−
− Σ−
k (xn − µk)(xn − µk)⊤Σ−
k )
(.c)
Σ−
k .
Σ−
Σ−
= −
n=
rnk(xn − µk)(xn − µk)⊤
(.d)
n=
rnk
| {z }
=Nk
We see that the responsibilities rnk also appear in this partial derivative.
Setting this partial derivative to , we obtain the necessary optimality
condition
NkΣ−
= Σ−
Σ−
(.a)
n=
rnk(xn − µk)(xn − µk)⊤
Σ−
k .
(.b)
⇐⇒ NkI =
n=
rnk(xn − µk)(xn − µk)⊤
By solving for Σk, we obtain
Σnew
Nk
n=
rnk(xn − µk)(xn − µk)⊤ ,
where rk is the probability vector defined in (.). This gives us a sim-
ple update rule for Σk for k = , . . . , K and proves Theorem ..
Similar to the update of µk in (.), we can interpret the update of
the covariance in (.) as an importance-weighted expected value of
the square of the centered data ˜
Xk := {x − µk, . . . , xN − µk}.
Example . (Variance Updates)
In our example from Figure ., the variances are updated as follows:
:  → .
: . → .
:  → .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture Models
Here we see that the variances of the first and third component shrink
significantly, whereas the variance of the second component increases
slightly.
Figure . illustrates this setting. Figure .(a) is identical (but
zoomed in) to Figure .(b) and shows the GMM density and its indi-
vidual components prior to updating the variances. Figure .(b) shows
the GMM density after updating the variances.
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
GMM density
GMM density
p(x)
p(x)
Figure . Effect
of updating the
variances in a GMM.
(a) GMM before
updating the
variances; (b) GMM
after updating the
variances while
retaining the means
and mixture
weights.
(a) GMM density and individual components
prior to updating the variances.
(b) GMM density and individual components
after updating the variances.
Similar to the update of the mean parameters, we can interpret (.)
as a Monte Carlo estimate of the weighted covariance of data points xn
associated with the kth mixture component, where the weights are the
responsibilities rnk. As with the updates of the mean parameters, this up-
date depends on all πj, µj, Σj, j = , . . . , K, through the responsibilities
rnk, which prohibits a closed-form solution.
.. Updating the Mixture Weights
Theorem . (Update of the GMM Mixture Weights). The mixture weights
of the GMM are updated as
πnew
= Nk
N ,
k = , . . . , K ,
where N is the number of data points and Nk is defined in (.).
k πk =  by using Lagrange multipliers (see Section .). The
Lagrangian is
Proof
To find the partial derivative of the log-likelihood with respect
to the weight parameters πk, k = , . . . , K, we account for the con-
straint P
(.a)
L = L + λ
k=
πk −
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Parameter Learning via Maximum Likelihood
(.b)
n=
log
k=
πk −
k=
πkN
 xn | µk, Σk
 + λ
where L is the log-likelihood from (.) and the second term encodes
for the equality constraint that all the mixture weights need to sum up to
. We obtain the partial derivative with respect to πk as
∂L
∂πk
n=
 xn | µk, Σk
PK
j= πjN
 xn | µj, Σj
 + λ
(.a)
+λ = Nk
πk
πk
+ λ ,
(.b)
n=
πkN
 xn | µk, Σk
PK
j= πjN
 xn | µj, Σj
and the partial derivative with respect to the Lagrange multiplier λ as
{z
=Nk
∂L
∂λ =
k=
πk −  .
Setting both partial derivatives to  (necessary condition for optimum)
yields the system of equations
λ ,
πk = −Nk
k=
πk .
Using (.) in (.) and solving for πk, we obtain
Nk
λ =  ⇐⇒ −N
λ =  ⇐⇒ λ = −N .
k=
πk =  ⇐⇒ −
k=
This allows us to substitute −N for λ in (.) to obtain
πnew
= Nk
N ,
which gives us the update for the weight parameters πk and proves Theo-
rem ..
k Nk, the number of data points can also be interpreted as the
total responsibility of all mixture components together, such that πk is the
relative importance of the kth mixture component for the dataset.
We can identify the mixture weight in (.) as the ratio of the to-
tal responsibility of the kth cluster and the number of data points. Since
N = P
Remark. Since Nk = PN
i= rnk, the update equation (.) for the mix-
ture weights πk also depends on all πj, µj, Σj, j = , . . . , K via the re-
sponsibilities rnk.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture Models
Example . (Weight Parameter Updates)
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
GMM density
GMM density
p(x)
p(x)
(a) GMM density and individual components
prior to updating the mixture weights.
(b) GMM density and individual components
after updating the mixture weights.
Figure . Effect
of updating the
mixture weights in a
GMM. (a) GMM
before updating the
mixture weights;
(b) GMM after
updating the
mixture weights
while retaining the
means and
variances. Note the
different scales of
the vertical axes.
In our running example from Figure ., the mixture weights are up-
dated as follows:
π :
→ .
π :
→ .
π :
→ .
Here we see that the third component gets more weight/importance,
while the other components become slightly less important. Figure .
illustrates the effect of updating the mixture weights. Figure .(a) is
identical to Figure .(b) and shows the GMM density and its individual
components prior to updating the mixture weights. Figure .(b) shows
the GMM density after updating the mixture weights.
Overall, having updated the means, the variances, and the weights
once, we obtain the GMM shown in Figure .(b). Compared with the
initialization shown in Figure ., we can see that the parameter updates
caused the GMM density to shift some of its mass toward the data points.
After updating the means, variances, and weights once, the GMM fit
in Figure .(b) is already remarkably better than its initialization from
Figure .. This is also evidenced by the log-likelihood values, which
increased from −. (initialization) to −. after a full update cycle.
. EM Algorithm
Unfortunately, the updates in (.), (.), and (.) do not consti-
tute a closed-form solution for the updates of the parameters µk, Σk, πk
of the mixture model because the responsibilities rnk depend on those pa-
rameters in a complex way. However, the results suggest a simple iterative
scheme for finding a solution to the parameters estimation problem via
maximum likelihood. The expectation maximization algorithm (EM algo-
EM algorithm
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. EM Algorithm
rithm) was proposed by Dempster et al. () and is a general iterative
scheme for learning parameters (maximum likelihood or MAP) in mixture
models and, more generally, latent-variable models.
In our example of the Gaussian mixture model, we choose initial values
for µk, Σk, πk and alternate until convergence between
E-step: Evaluate the responsibilities rnk (posterior probability of data
point n belonging to mixture component k).
M-step: Use the updated responsibilities to reestimate the parameters
µk, Σk, πk.
Every step in the EM algorithm increases the log-likelihood function (Neal
and Hinton, ). For convergence, we can check the log-likelihood or
the parameters directly. A concrete instantiation of the EM algorithm for
estimating the parameters of a GMM is as follows:
. Initialize µk, Σk, πk.
. E-step: Evaluate responsibilities rnk for every data point xn using cur-
rent parameters πk, µk, Σk:
rnk =
πkN
 xn | µk, Σk
j πjN
 xn | µj, Σj
 .
µk =
Nk
n=
rnkxn ,
. M-step: Reestimate parameters πk, µk, Σk using the current responsi-
bilities rnk (from E-step):
Having updated the
means µk
in (.), they are
subsequently used
in (.) to update
the corresponding
covariances.
Σk =
Nk
n=
rnk(xn − µk)(xn − µk)⊤ ,
πk = Nk
N .
Example . (GMM Fit)
πN(x|µ, σ
πN(x|µ, σ
πN(x|µ, σ
GMM density
p(x)
Negative log-likelihood
Figure . EM
algorithm applied to
the GMM from
Figure .. (a)
Final GMM fit;
(b) negative
log-likelihood as a
function of the EM
iteration.
Iteration
(a) Final GMM fit. After five iterations, the EM
algorithm converges and returns this GMM.
(b) Negative log-likelihood as a function of the
EM iterations.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture Models
Negative log-likelihood
EM iteration
(a) Dataset.
(b) Negative log-likelihood.
(c) EM initialization.
(d) EM after one iteration.
Figure .
Illustration of the
EM algorithm for
fitting a Gaussian
mixture model with
three components to
a two-dimensional
dataset. (a) Dataset;
(b) negative
log-likelihood
(lower is better) as
a function of the EM
iterations. The red
dots indicate the
iterations for which
the mixture
components of the
corresponding GMM
fits are shown in (c)
through (f). The
yellow discs indicate
the means of the
Gaussian mixture
components.
Figure .(a)
shows the final
GMM fit.
(e) EM after  iterations.
(f) EM after  iterations.
When we run EM on our example from Figure ., we obtain the final
result shown in Figure .(a) after five iterations, and Figure .(b)
shows how the negative log-likelihood evolves as a function of the EM
iterations. The final GMM is given as
p(x) = .N
 x | − ., .
 + .N
 x | − ., .
+ .N
 x | ., .
 .
We applied the EM algorithm to the two-dimensional dataset shown
in Figure . with K =  mixture components. Figure . illustrates
some steps of the EM algorithm and shows the negative log-likelihood as
a function of the EM iteration (Figure .(b)). Figure .(a) shows
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Latent-Variable Perspective
(a) GMM fit after  iterations.
Figure . GMM
fit and
responsibilities
when EM converges.
(a) GMM fit when
EM converges;
(b) each data point
is colored according
to the
responsibilities of
the mixture
components.
(b) Dataset colored according to the respon-
sibilities of the mixture components.
the corresponding final GMM fit. Figure .(b) visualizes the final re-
sponsibilities of the mixture components for the data points. The dataset is
colored according to the responsibilities of the mixture components when
EM converges. While a single mixture component is clearly responsible
for the data on the left, the overlap of the two data clusters on the right
could have been generated by two mixture components. It becomes clear
that there are data points that cannot be uniquely assigned to a single
component (either blue or yellow), such that the responsibilities of these
two clusters for those points are around ..
. Latent-Variable Perspective
We can look at the GMM from the perspective of a discrete latent-variable
model, i.e., where the latent variable z can attain only a finite set of val-
ues. This is in contrast to PCA, where the latent variables were continuous-
valued numbers in RM.
The advantages of the probabilistic perspective are that (i) it will jus-
tify some ad hoc decisions we made in the previous sections, (ii) it allows
for a concrete interpretation of the responsibilities as posterior probabil-
ities, and (iii) the iterative algorithm for updating the model parameters
can be derived in a principled manner as the EM algorithm for maximum
likelihood parameter estimation in latent-variable models.
.. Generative Process and Probabilistic Model
To derive the probabilistic model for GMMs, it is useful to think about the
generative process, i.e., the process that allows us to generate data, using
a probabilistic model.
We assume a mixture model with K components and that a data point
x can be generated by exactly one mixture component. We introduce a
binary indicator variable zk ∈ {, } with two states (see Section .) that
indicates whether the kth mixture component generated that data point
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture Models
so that
p(x | zk = ) = N
 x | µk, Σk
 .
We define z := [z, . . . , zK]⊤ ∈ RK as a probability vector consisting of
K − many s and exactly one . For example, for K = , a valid z would
be z = [z, z, z]⊤ = [, , ]⊤, which would select the second mixture
component since z = .
Remark. Sometimes this kind of probability distribution is called “multi-
noulli”, a generalization of the Bernoulli distribution to more than two
values (Murphy, ).
The properties of z imply that PK
k= zk = . Therefore, z is a one-hot
one-hot encoding
encoding (also: -of-K representation).
-of-K
representation
Thus far, we assumed that the indicator variables zk are known. How-
ever, in practice, this is not the case, and we place a prior distribution
p(z) = π = [π, . . . , πK]⊤ ,
k=
πk =  ,
on the latent variable z. Then the kth entry
πk = p(zk = )
of this probability vector describes the probability that the kth mixture
component generated data point x.
Figure .
Graphical model for
a GMM with a single
data point.
Remark (Sampling from a GMM). The construction of this latent-variable
model (see the corresponding graphical model in Figure .) lends it-
self to a very simple sampling procedure (generative process) to generate
data:
. Sample z(i) ∼ p(z).
. Sample x(i) ∼ p(x | z(i) = ).
µk
Σk
k = , . . . , K
In the first step, we select a mixture component i (via the one-hot encod-
ing z) at random according to p(z) = π; in the second step we draw a
sample from the corresponding mixture component. When we discard the
samples of the latent variable so that we are left with the x(i), we have
valid samples from the GMM. This kind of sampling, where samples of
random variables depend on samples from the variable’s parents in the
graphical model, is called ancestral sampling.
ancestral sampling
Generally, a probabilistic model is defined by the joint distribution of
the data and the latent variables (see Section .). With the prior p(z)
defined in (.) and (.) and the conditional p(x | z) from (.),
we obtain all K components of this joint distribution via
p(x, zk = ) = p(x | zk = )p(zk = ) = πkN
 x | µk, Σk
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Latent-Variable Perspective
for k = , . . . , K, so that
p(x, z) =
πN
 x | µ, Σ
p(x, z = )
p(x, zK = )
 ,
 =
which fully specifies the probabilistic model.
πKN
 x | µK, ΣK
.. Likelihood
To obtain the likelihood p(x | θ) in a latent-variable model, we need to
marginalize out the latent variables (see Section ..). In our case, this
can be done by summing out all latent variables from the joint p(x, z)
in (.) so that
p(x | θ, z)p(z | θ) ,
θ := {µk, Σk, πk : k = , . . . , K} .
p(x | θ) =
We now explicitly condition on the parameters θ of the probabilistic model,
which we previously omitted. In (.), we sum over all K possible one-
hot encodings of z, which is denoted by P
z. Since there is only a single
nonzero single entry in each z there are only K possible configurations/
settings of z. For example, if K = , then z can have the configurations
 .
 ,
 ,
Summing over all possible configurations of z in (.) is equivalent to
looking at the nonzero entry of the z-vector and writing
p(x | θ, z)p(z | θ)
(.a)
p(x | θ) =
k=
p(x | θ, zk = )p(zk =  | θ)
(.b)
so that the desired marginal distribution is given as
p(x | θ)
(.b)
k=
p(x | θ, zk = )p(zk = |θ)
(.a)
k=
πkN
 x | µk, Σk
 ,
(.b)
which we identify as the GMM model from (.). Given a dataset X , we
immediately obtain the likelihood
p(X | θ) =
n=
p(xn | θ)
(.b)
n=
k=
πkN
 xn | µk, Σk
 ,
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture Models
Figure .
Graphical model for
a GMM with N data
points.
zn
µk
xn
Σk
n = , . . . , N
k = , . . . , K
which is exactly the GMM likelihood from (.). Therefore, the latent-
variable model with latent indicators zk is an equivalent way of thinking
about a Gaussian mixture model.
.. Posterior Distribution
Let us have a brief look at the posterior distribution on the latent variable
z. According to Bayes’ theorem, the posterior of the kth component having
generated data point x
p(x)
p(zk =  | x) = p(zk = )p(x | zk = )
where the marginal p(x) is given in (.b). This yields the posterior
distribution for the kth indicator variable zk
p(zk =  | x) =
p(zk = )p(x | zk = )
PK
j= p(zj = )p(x | zj = )
πkN
 x | µk, Σk
PK
j= πjN
 x | µj, Σj
 ,
which we identify as the responsibility of the kth mixture component for
data point x. Note that we omitted the explicit conditioning on the GMM
parameters πk, µk, Σk where k = , . . . , K.
.. Extension to a Full Dataset
Thus far, we have only discussed the case where the dataset consists only
of a single data point x. However, the concepts of the prior and posterior
can be directly extended to the case of N data points X := {x, . . . , xN}.
In the probabilistic interpretation of the GMM, every data point xn pos-
sesses its own latent variable
zn = [zn, . . . , znK]⊤ ∈ RK .
Previously (when we only considered a single data point x), we omitted
the index n, but now this becomes important.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Latent-Variable Perspective
We share the same prior distribution π across all latent variables zn.
The corresponding graphical model is shown in Figure ., where we
use the plate notation.
The conditional distribution p(x, . . . , xN | z, . . . , zN) factorizes over
the data points and is given as
p(x, . . . , xN | z, . . . , zN) =
n=
p(xn | zn) .
To obtain the posterior distribution p(znk =  | xn), we follow the same
reasoning as in Section .. and apply Bayes’ theorem to obtain
p(znk =  | xn) =
p(xn | znk = )p(znk = )
PK
j= p(xn | znj = )p(znj = )
(.a)
πkN
 xn | µk, Σk
PK
j= πjN
 xn | µj, Σj
 = rnk .
(.b)
This means that p(zk =  | xn) is the (posterior) probability that the kth
mixture component generated data point xn and corresponds to the re-
sponsibility rnk we introduced in (.). Now the responsibilities also
have not only an intuitive but also a mathematically justified interpreta-
tion as posterior probabilities.
.. EM Algorithm Revisited
The EM algorithm that we introduced as an iterative scheme for maximum
likelihood estimation can be derived in a principled way from the latent-
variable perspective. Given a current setting θ(t) of model parameters, the
E-step calculates the expected log-likelihood
Q(θ | θ(t)) = Ez | x,θ(t)[log p(x, z | θ)]
(.a)
log p(x, z | θ)p(z | x, θ(t))dz ,
(.b)
where the expectation of log p(x, z | θ) is taken with respect to the poste-
rior p(z | x, θ(t)) of the latent variables. The M-step selects an updated set
of model parameters θ(t+) by maximizing (.b).
Although an EM iteration does increase the log-likelihood, there are
no guarantees that EM converges to the maximum likelihood solution.
It is possible that the EM algorithm converges to a local maximum of
the log-likelihood. Different initializations of the parameters θ could be
used in multiple EM runs to reduce the risk of ending up in a bad local
optimum. We do not go into further details here, but refer to the excellent
expositions by Rogers and Girolami () and Bishop ().
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Density Estimation with Gaussian Mixture Models
. Further Reading
The GMM can be considered a generative model in the sense that it is
straightforward to generate new data using ancestral sampling (Bishop,
). For given GMM parameters πk, µk, Σk, k = , . . . , K, we sample
an index k from the probability vector [π, . . . , πK]⊤ and then sample a
data point x ∼ N
 µk, Σk
. If we repeat this N times, we obtain a dataset
that has been generated by a GMM. Figure . was generated using this
procedure.
Throughout this chapter, we assumed that the number of components
K is known. In practice, this is often not the case. However, we could use
nested cross-validation, as discussed in Section .., to find good models.
Gaussian mixture models are closely related to the K-means clustering
algorithm. K-means also uses the EM algorithm to assign data points to
clusters. If we treat the means in the GMM as cluster centers and ignore
the covariances (or set them to I), we arrive at K-means. As also nicely
described by MacKay (), K-means makes a “hard” assignment of data
points to cluster centers µk, whereas a GMM makes a “soft” assignment
via the responsibilities.
We only touched upon the latent-variable perspective of GMMs and the
EM algorithm. Note that EM can be used for parameter learning in general
latent-variable models, e.g., nonlinear state-space models (Ghahramani
and Roweis, ; Roweis and Ghahramani, ) and for reinforcement
learning as discussed by Barber (). Therefore, the latent-variable per-
spective of a GMM is useful to derive the corresponding EM algorithm in
a principled way (Bishop, ; Barber, ; Murphy, ).
We only discussed maximum likelihood estimation (via the EM algo-
rithm) for finding GMM parameters. The standard criticisms of maximum
likelihood also apply here:
As in linear regression, maximum likelihood can suffer from severe
overfitting. In the GMM case, this happens when the mean of a mix-
ture component is identical to a data point and the covariance tends to
. Then, the likelihood approaches infinity. Bishop () and Barber
() discuss this issue in detail.
We only obtain a point estimate of the parameters πk, µk, Σk for k =
, . . . , K, which does not give any indication of uncertainty in the pa-
rameter values. A Bayesian approach would place a prior on the param-
eters, which can be used to obtain a posterior distribution on the param-
eters. This posterior allows us to compute the model evidence (marginal
likelihood), which can be used for model comparison, which gives us a
principled way to determine the number of mixture components. Un-
fortunately, closed-form inference is not possible in this setting because
there is no conjugate prior for this model. However, approximations,
such as variational inference, can be used to obtain an approximate
posterior (Bishop, ).
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Further Reading
Data
KDE
Histogram
p(x)
Figure .
Histogram (orange
bars) and kernel
density estimation
(blue line). The
kernel density
estimator produces
a smooth estimate
of the underlying
density, whereas the
histogram is an
unsmoothed count
measure of how
many data points
(black) fall into a
single bin.
In this chapter, we discussed mixture models for density estimation.
There is a plethora of density estimation techniques available. In practice,
we often use histograms and kernel density estimation.
histogram
Histograms provide a nonparametric way to represent continuous den-
sities and have been proposed by Pearson (). A histogram is con-
structed by “binning” the data space and count, how many data points fall
into each bin. Then a bar is drawn at the center of each bin, and the height
of the bar is proportional to the number of data points within that bin. The
bin size is a critical hyperparameter, and a bad choice can lead to overfit-
ting and underfitting. Cross-validation, as discussed in Section .., can
be used to determine a good bin size.
kernel density
estimation
Kernel density estimation, independently proposed by Rosenblatt ()
and Parzen (), is a nonparametric way for density estimation. Given
N i.i.d. samples, the kernel density estimator represents the underlying
distribution as
p(x) =
Nh

n=
x − xn
where k is a kernel function, i.e., a nonnegative function that integrates to
and h >  is a smoothing/bandwidth parameter, which plays a similar
role as the bin size in histograms. Note that we place a kernel on every
single data point xn in the dataset. Commonly used kernel functions are
the uniform distribution and the Gaussian distribution. Kernel density esti-
mates are closely related to histograms, but by choosing a suitable kernel,
we can guarantee smoothness of the density estimate. Figure . illus-
trates the difference between a histogram and a kernel density estimator
(with a Gaussian-shaped kernel) for a given dataset of  data points.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
ues, i.e., there are only two possible outcomes. This machine learning task
is called binary classification. This is in contrast to Chapter , where we
In many situations, we want our machine learning algorithm to predict
one of a number of (discrete) outcomes. For example, an email client sorts
mail into personal mail and junk mail, which has two outcomes. Another
example is a telescope that identifies whether an object in the night sky
is a galaxy, star, or planet. There are usually a small number of outcomes,
and more importantly there is usually no additional structure on these
outcomes. In this chapter, we consider predictors that output binary val-
An example of
structure is if the
outcomes were
ordered, like in the
case of small,
medium, and large
t-shirts.
binary classification
considered a prediction problem with continuous-valued outputs.
For binary classification, the set of possible values that the label/output
can attain is binary, and for this chapter we denote them by {+, −}. In
other words, we consider predictors of the form
f : RD → {+, −} .
the positive and negative classes, respectively. One should be careful not
Recall from Chapter  that we represent each example (data point) xn
as a feature vector of D real numbers. The labels are often referred to as
Input example xn
may also be referred
to as inputs, data
points, features, or
instances.
class
to infer intuitive attributes of positiveness of the + class. For example,
in a cancer detection task, a patient with cancer is often labeled +. In
principle, any two distinct values can be used, e.g., {True, False}, {, }
or {red, blue}. The problem of binary classification is well studied, and
For probabilistic
models, it is
mathematically
convenient to use
{, } as a binary
representation; see
the remark after
Example ..
we defer a survey of other approaches to Section ..
We present an approach known as the support vector machine (SVM),
which solves the binary classification task. As in regression, we have a su-
pervised learning task, where we have a set of examples xn ∈ RD along
with their corresponding (binary) labels yn ∈ {+, −}. Given a train-
ing data set consisting of example–label pairs {(x, y), . . . , (xN, yN)}, we
would like to estimate parameters of the model that will give the smallest
classification error. Similar to Chapter , we consider a linear model, and
hide away the nonlinearity in a transformation ϕ of the examples (.).
We will revisit ϕ in Section ..
The SVM provides state-of-the-art results in many applications, with
sound theoretical guarantees (Steinwart and Christmann, ). There
are two main reasons why we chose to illustrate binary classification using
This material is published by Cambridge University Press as Mathematics for Machine Learning by
Marc Peter Deisenroth, A. Aldo Faisal, and Cheng Soon Ong (). This version is free to view
and download for personal use only. Not for re-distribution, re-sale, or use in derivative works.
©by M. P. Deisenroth, A. A. Faisal, and C. S. Ong, . https://mml-book.com.

Classification with Support Vector Machines
x()
Figure .
Example D data,
illustrating the
intuition of data
where we can find a
linear classifier that
separates orange
crosses from blue
discs.
x()
SVMs. First, the SVM allows for a geometric way to think about supervised
machine learning. While in Chapter  we considered the machine learning
problem in terms of probabilistic models and attacked it using maximum
likelihood estimation and Bayesian inference, here we will consider an
alternative approach where we reason geometrically about the machine
learning task. It relies heavily on concepts, such as inner products and
projections, which we discussed in Chapter . The second reason why we
find SVMs instructive is that in contrast to Chapter , the optimization
problem for SVM does not admit an analytic solution so that we need to
resort to a variety of optimization tools introduced in Chapter .
The SVM view of machine learning is subtly different from the max-
imum likelihood view of Chapter . The maximum likelihood view pro-
poses a model based on a probabilistic view of the data distribution, from
which an optimization problem is derived. In contrast, the SVM view starts
by designing a particular function that is to be optimized during training,
based on geometric intuitions. We have seen something similar already
in Chapter , where we derived PCA from geometric principles. In the
SVM case, we start by designing a loss function that is to be minimized
on training data, following the principles of empirical risk minimization
(Section .).
Let us derive the optimization problem corresponding to training an
SVM on example–label pairs. Intuitively, we imagine binary classification
data, which can be separated by a hyperplane as illustrated in Figure ..
Here, every example xn (a vector of dimension ) is a two-dimensional
location (x()
and x()
n ), and the corresponding binary label yn is one of
two different symbols (orange cross or blue disc). “Hyperplane” is a word
that is commonly used in machine learning, and we encountered hyper-
planes already in Section .. A hyperplane is an affine subspace of di-
mension D −  (if the corresponding vector space is of dimension D).
The examples consist of two classes (there are two possible labels) that
have features (the components of the vector representing the example)
arranged in such a way as to allow us to separate/classify them by draw-
ing a straight line.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
In the following, we formalize the idea of finding a linear separator
of the two classes. We introduce the idea of the margin and then extend
linear separators to allow for examples to fall on the “wrong” side, incur-
ring a classification error. We present two equivalent ways of formalizing
the SVM: the geometric view (Section ..) and the loss function view
(Section ..). We derive the dual version of the SVM using Lagrange
multipliers (Section .). The dual SVM allows us to observe a third way
of formalizing the SVM: in terms of the convex hulls of the examples of
each class (Section ..). We conclude by briefly describing kernels and
how to numerically solve the nonlinear kernel-SVM optimization problem.
. Separating Hyperplanes
Given two examples represented as vectors xi and xj, one way to compute
the similarity between them is using an inner product ⟨xi, xj⟩. Recall from
Section . that inner products are closely related to the angle between
two vectors. The value of the inner product between two vectors depends
on the length (norm) of each vector. Furthermore, inner products allow
us to rigorously define geometric concepts such as orthogonality and pro-
jections.
The main idea behind many classification algorithms is to represent
data in RD and then partition this space, ideally in a way that examples
with the same label (and no other examples) are in the same partition.
In the case of binary classification, the space would be divided into two
parts corresponding to the positive and negative classes, respectively. We
consider a particularly convenient partition, which is to (linearly) split
the space into two halves using a hyperplane. Let example x ∈ RD be an
element of the data space. Consider a function
f : RD → R
(.a)
x → f(x) := ⟨w, x⟩ + b ,
(.b)
parametrized by w ∈ RD and b ∈ R. Recall from Section . that hy-
perplanes are affine subspaces. Therefore, we define the hyperplane that
separates the two classes in our binary classification problem as
x ∈ RD : f(x) =
An illustration of the hyperplane is shown in Figure ., where the
vector w is a vector normal to the hyperplane and b the intercept. We can
derive that w is a normal vector to the hyperplane in (.) by choosing
any two examples xa and xb on the hyperplane and showing that the
vector between them is orthogonal to w. In the form of an equation,
f(xa) − f(xb) = ⟨w, xa⟩ + b − (⟨w, xb⟩ + b)
(.a)
= ⟨w, xa − xb⟩ ,
(.b)
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Separating Hyperplanes
.Positive
Negative
Figure .
Equation of a
separating
hyperplane (.).
(a) The standard
way of representing
the equation in D.
(b) For ease of
drawing, we look at
the hyperplane edge
on.
(a) Separating hyperplane in D
(b) Projection of the setting in (a) onto
a plane
where the second line is obtained by the linearity of the inner product
(Section .). Since we have chosen xa and xb to be on the hyperplane,
this implies that f(xa) =  and f(xb) =  and hence ⟨w, xa − xb⟩ = .
Recall that two vectors are orthogonal when their inner product is zero.
w is orthogonal to
any vector on the
hyperplane.
Therefore, we obtain that w is orthogonal to any vector on the hyperplane.
Remark. Recall from Chapter  that we can think of vectors in different
ways. In this chapter, we think of the parameter vector w as an arrow
indicating a direction, i.e., we consider w to be a geometric vector. In
contrast, we think of the example vector x as a data point (as indicated
by its coordinates), i.e., we consider x to be the coordinates of a vector
with respect to the standard basis.
When presented with a test example, we classify the example as pos-
itive or negative depending on the side of the hyperplane on which it
occurs. Note that (.) not only defines a hyperplane; it additionally de-
fines a direction. In other words, it defines the positive and negative side
of the hyperplane. Therefore, to classify a test example xtest, we calcu-
late the value of the function f(xtest) and classify the example as + if
f(xtest) ⩾  and − otherwise. Thinking geometrically, the positive ex-
amples lie “above” the hyperplane and the negative examples “below” the
hyperplane.
When training the classifier, we want to ensure that the examples with
positive labels are on the positive side of the hyperplane, i.e.,
⟨w, xn⟩ + b ⩾
when
yn = +
and the examples with negative labels are on the negative side, i.e.,
⟨w, xn⟩ + b <
when
yn = − .
Refer to Figure . for a geometric intuition of positive and negative
examples. These two conditions are often presented in a single equation
yn(⟨w, xn⟩ + b) ⩾  .
Equation (.) is equivalent to (.) and (.) when we multiply both
sides of (.) and (.) with yn =  and yn = −, respectively.
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
x()
Figure .
Possible separating
hyperplanes. There
are many linear
classifiers (green
lines) that separate
orange crosses from
blue discs.
x()
. Primal Support Vector Machine
tance between an example and a hyperplane to derive the margin. Recall
that the closest point on the hyperplane to a given point (example xn) is
obtained by the orthogonal projection (Section .).
Based on the concept of distances from points to a hyperplane, we now
are in a position to discuss the support vector machine. For a dataset
{(x, y), . . . , (xN, yN)} that is linearly separable, we have infinitely many
candidate hyperplanes (refer to Figure .), and therefore classifiers,
that solve our classification problem without any (training) errors. To find
a unique solution, one idea is to choose the separating hyperplane that
maximizes the margin between the positive and negative examples. In
other words, we want the positive and negative examples to be separated
by a large margin (Section ..). In the following, we compute the dis-
A classifier with
large margin turns
out to generalize
well (Steinwart and
Christmann, ).
.. Concept of the Margin
The concept of the margin is intuitively simple: It is the distance of the
margin
separating hyperplane to the closest examples in the dataset, assuming
There could be two
or more closest
examples to a
hyperplane.
that the dataset is linearly separable. However, when trying to formalize
this distance, there is a technical wrinkle that may be confusing. The tech-
nical wrinkle is that we need to define a scale at which to measure the
distance. A potential scale is to consider the scale of the data, i.e., the raw
values of xn. There are problems with this, as we could change the units
of measurement of xn and change the values in xn, and, hence, change
the distance to the hyperplane. As we will see shortly, we define the scale
based on the equation of the hyperplane (.) itself.
Consider a hyperplane ⟨w, x⟩ + b, and an example xa as illustrated in
Figure .. Without loss of generality, we can consider the example xa
to be on the positive side of the hyperplane, i.e., ⟨w, xa⟩ + b > . We
would like to compute the distance r >  of xa from the hyperplane. We
do so by considering the orthogonal projection (Section .) of xa onto
the hyperplane, which we denote by x′
a. Since w is orthogonal to the
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Primal Support Vector Machine
.xa
x′ .
Figure . Vector
addition to express
distance to
hyperplane:
xa = x′
a + r
∥w∥ .
hyperplane, we know that the distance r is just a scaling of this vector w.
If the length of w is known, then we can use this scaling factor r factor
to work out the absolute distance between xa and x′
a. For convenience,
we choose to use a vector of unit length (its norm is ) and obtain this
by dividing w by its norm,
∥w∥. Using vector addition (Section .), we
obtain
xa = x′
a + r w
∥w∥ .
Another way of thinking about r is that it is the coordinate of xa in the
subspace spanned by w/ ∥w∥. We have now expressed the distance of xa
from the hyperplane as r, and if we choose xa to be the point closest to
the hyperplane, this distance r is the margin.
Recall that we would like the positive examples to be further than r
from the hyperplane, and the negative examples to be further than dis-
tance r (in the negative direction) from the hyperplane. Analogously to
the combination of (.) and (.) into (.), we formulate this ob-
jective as
yn(⟨w, xn⟩ + b) ⩾ r .
In other words, we combine the requirements that examples are at least
r away from the hyperplane (in the positive and negative direction) into
one single inequality.
Since we are interested only in the direction, we add an assumption to
our model that the parameter vector w is of unit length, i.e., ∥w∥ = ,
where we use the Euclidean norm ∥w∥ =
assumption also allows a more intuitive interpretation of the distance r
(.) since it is the scaling factor of a vector of length .
w⊤w (Section .). This
We will see other
choices of inner
products
(Section .) in
Section ..
Remark. A reader familiar with other presentations of the margin would
notice that our definition of ∥w∥ =  is different from the standard
presentation if the SVM was the one provided by Sch¨olkopf and Smola
(), for example. In Section .., we will show the equivalence of
both approaches.
Collecting the three requirements into a single constrained optimization
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
.xa
Figure .
Derivation of the
margin: r =
∥w∥ .
x′ .
⟨w, x⟩ + b =
⟨w, x⟩ + b =
problem, we obtain the objective
r >  ,
max
w,b,r
|{z}
margin
subject to
yn(⟨w, xn⟩ + b) ⩾ r
{z
data fitting
, ∥w∥ =
{z
normalization
which says that we want to maximize the margin r while ensuring that
the data lies on the correct side of the hyperplane.
Remark. The concept of the margin turns out to be highly pervasive in ma-
chine learning. It was used by Vladimir Vapnik and Alexey Chervonenkis
to show that when the margin is large, the “complexity” of the function
class is low, and hence learning is possible (Vapnik, ). It turns out
that the concept is useful for various different approaches for theoret-
ically analyzing generalization error (Steinwart and Christmann, ;
Shalev-Shwartz and Ben-David, ).
.. Traditional Derivation of the Margin
In the previous section, we derived (.) by making the observation that
we are only interested in the direction of w and not its length, leading to
the assumption that ∥w∥ = . In this section, we derive the margin max-
imization problem by making a different assumption. Instead of choosing
that the parameter vector is normalized, we choose a scale for the data.
We choose this scale such that the value of the predictor ⟨w, x⟩ + b is  at
the closest example. Let us also denote the example in the dataset that is
Recall that we
currently consider
linearly separable
data.
closest to the hyperplane by xa.
Figure . is identical to Figure ., except that now we rescaled the
axes, such that the example xa lies exactly on the margin, i.e., ⟨w, xa⟩ +
b = . Since x′
a is the orthogonal projection of xa onto the hyperplane, it
must by definition lie on the hyperplane, i.e.,
⟨w, x′
a⟩ + b =  .
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Primal Support Vector Machine
By substituting (.) into (.), we obtain

w, xa − r w

+ b =  .
∥w∥
Exploiting the bilinearity of the inner product (see Section .), we get
⟨w, xa⟩ + b − r⟨w, w⟩
∥w∥
=  .
Observe that the first term is  by our assumption of scale, i.e., ⟨w, xa⟩ +
b = . From (.) in Section ., we know that ⟨w, w⟩ = ∥w∥. Hence,
the second term reduces to r∥w∥. Using these simplifications, we obtain
r =
∥w∥ .
This means we derived the distance r in terms of the normal vector w
of the hyperplane. At first glance, this equation is counterintuitive as we
We can also think of
the distance as the
projection error that
incurs when
projecting xa onto
the hyperplane.
seem to have derived the distance from the hyperplane in terms of the
length of the vector w, but we do not yet know this vector. One way to
think about it is to consider the distance r to be a temporary variable
that we only use for this derivation. Therefore, for the rest of this section
we will denote the distance to the hyperplane by
∥w∥. In Section ..,
we will see that the choice that the margin equals  is equivalent to our
previous assumption of ∥w∥ =  in Section ...
Similar to the argument to obtain (.), we want the positive and
negative examples to be at least  away from the hyperplane, which yields
the condition
yn(⟨w, xn⟩ + b) ⩾  .
Combining the margin maximization with the fact that examples need to
be on the correct side of the hyperplane (based on their labels) gives us
max
w,b
∥w∥
subject to yn(⟨w, xn⟩ + b) ⩾
for all
n = , . . . , N.
Instead of maximizing the reciprocal of the norm as in (.), we often
minimize the squared norm. We also often include a constant
not affect the optimal w, b but yields a tidier form when we compute the
gradient. Then, our objective becomes
that does
The squared norm
results in a convex
quadratic
programming
problem for the
SVM (Section .).
min
w,b
∥w∥
subject to yn(⟨w, xn⟩ + b) ⩾
for all
n = , . . . , N .
Equation (.) is known as the hard margin SVM. The reason for the
hard margin SVM
expression “hard” is because the formulation does not allow for any vi-
olations of the margin condition. We will see in Section .. that this
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
“hard” condition can be relaxed to accommodate violations if the data is
not linearly separable.
.. Why We Can Set the Margin to
In Section .., we argued that we would like to maximize some value
r, which represents the distance of the closest example to the hyperplane.
In Section .., we scaled the data such that the closest example is of
distance  to the hyperplane. In this section, we relate the two derivations,
and show that they are equivalent.
Theorem .. Maximizing the margin r, where we consider normalized
weights as in (.),
r >  ,
max
w,b,r
|{z}
margin
subject to
yn(⟨w, xn⟩ + b) ⩾ r
{z
data fitting
∥w∥ =
{z
normalization
is equivalent to scaling the data, such that the margin is unity:
min
w,b
∥w∥
| {z }
margin
subject to
yn(⟨w, xn⟩ + b) ⩾
{z
data fitting
Proof
Consider (.). Since the square is a strictly monotonic trans-
formation for non-negative arguments, the maximum stays the same if we
consider r in the objective. Since ∥w∥ =  we can reparametrize the
equation with a new weight vector w′ that is not normalized by explicitly
using
w′
∥w′∥. We obtain
max
w′,b,r
subject to
yn

+ b

⩾ r,
r >  .
w′
∥w′∥, xn
max
w′,b,r
Equation (.) explicitly states that the distance r is positive. Therefore,
we can divide the first constraint by r, which yields
Note that r >
because we
assumed linear
separability, and
hence there is no
issue to divide by r.
subject to
yn
, xn
w′
 ⩾ ,
r >
|{z}
b′′
∥w′∥ r
| {z }
w′′
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Primal Support Vector Machine
Figure .
(a) Linearly
separable and
(b) non-linearly
separable data.
x()
x()
x()
x()
(b) Non-linearly separable data
(a) Linearly separable data, with a large
margin
renaming the parameters to w′′ and b′′. Since w′′ =
w′
∥w′∥r, rearranging for
r gives
r .
∥w′∥ r
∥w′∥
By substituting this result into (.), we obtain
∥w′′∥ =

w′

w′
max
w′′,b′′
∥w′′∥
subject to
yn (⟨w′′, xn⟩ + b′′) ⩾  .
The final step is to observe that maximizing
∥w′′∥ yields the same solution
as minimizing
∥w′′∥
, which concludes the proof of Theorem ..
.. Soft Margin SVM: Geometric View
In the case where data is not linearly separable, we may wish to allow
some examples to fall within the margin region, or even to be on the
wrong side of the hyperplane as illustrated in Figure ..
The model that allows for some classification errors is called the soft
soft margin SVM
margin SVM. In this section, we derive the resulting optimization problem
using geometric arguments. In Section .., we will derive an equiv-
alent optimization problem using the idea of a loss function. Using La-
grange multipliers (Section .), we will derive the dual optimization
problem of the SVM in Section .. This dual optimization problem al-
lows us to observe a third interpretation of the SVM: as a hyperplane that
bisects the line between convex hulls corresponding to the positive and
negative data examples (Section ..).
The key geometric idea is to introduce a slack variable ξn corresponding
slack variable
to each example–label pair (xn, yn) that allows a particular example to be
within the margin or even on the wrong side of the hyperplane (refer to
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
x+
⟨w, x⟩ + b =
⟨w, x⟩ + b =
Figure . Soft
margin SVM allows
examples to be
within the margin or
on the wrong side of
the hyperplane. The
slack variable ξ
measures the
distance of a
positive example
x+ to the positive
margin hyperplane
⟨w, x⟩ + b =
when x+ is on the
wrong side.
Figure .). We subtract the value of ξn from the margin, constraining
ξn to be non-negative. To encourage correct classification of the samples,
we add ξn to the objective
min
w,b,ξ
∥w∥ + C
n=
ξn
(.a)
subject to
yn(⟨w, xn⟩ + b) ⩾  − ξn
(.b)
ξn ⩾
(.c)
for n = , . . . , N. In contrast to the optimization problem (.) for the
hard margin SVM, this one is called the soft margin SVM. The parameter
soft margin SVM
C >  trades off the size of the margin and the total amount of slack that
we have. This parameter is called the regularization parameter since, as
regularization
parameter
we will see in the following section, the margin term in the objective func-
tion (.a) is a regularization term. The margin term ∥w∥ is called
the regularizer, and in many books on numerical optimization, the reg-
regularizer
ularization parameter is multiplied with this term (Section ..). This
is in contrast to our formulation in this section. Here a large value of C
implies low regularization, as we give the slack variables larger weight,
hence giving more priority to examples that do not lie on the correct side
of the margin.
There are
alternative
parametrizations of
this regularization,
which is
why (.a) is also
often referred to as
the C-SVM.
Remark. In the formulation of the soft margin SVM (.a) w is reg-
ularized, but b is not regularized. We can see this by observing that the
regularization term does not contain b. The unregularized term b com-
plicates theoretical analysis (Steinwart and Christmann, , chapter )
and decreases computational efficiency (Fan et al., ).
.. Soft Margin SVM: Loss Function View
Let us consider a different approach for deriving the SVM, following the
principle of empirical risk minimization (Section .). For the SVM, we
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Primal Support Vector Machine
choose hyperplanes as the hypothesis class, that is
f(x) = ⟨w, x⟩ + b.
We will see in this section that the margin corresponds to the regulariza-
tion term. The remaining question is, what is the loss function? In con-
loss function
trast to Chapter , where we consider regression problems (the output
of the predictor is a real number), in this chapter, we consider binary
classification problems (the output of the predictor is one of two labels
{+, −}). Therefore, the error/loss function for each single example–
label pair needs to be appropriate for binary classification. For example,
the squared loss that is used for regression (.b) is not suitable for bi-
nary classification.
Remark. The ideal loss function between binary labels is to count the num-
ber of mismatches between the prediction and the label. This means that
for a predictor f applied to an example xn, we compare the output f(xn)
with the label yn. We define the loss to be zero if they match, and one if
they do not match. This is denoted by (f(xn) ̸= yn) and is called the
zero-one loss. Unfortunately, the zero-one loss results in a combinatorial
zero-one loss
optimization problem for finding the best parameters w, b. Combinatorial
optimization problems (in contrast to continuous optimization problems
discussed in Chapter ) are in general more challenging to solve.
What is the loss function corresponding to the SVM? Consider the error
between the output of a predictor f(xn) and the label yn. The loss de-
scribes the error that is made on the training data. An equivalent way to
derive (.a) is to use the hinge loss
hinge loss
ℓ(t) = max{,  − t}
where
t = yf(x) = y(⟨w, x⟩ + b) .
If f(x) is on the correct side (based on the corresponding label y) of the
hyperplane, and further than distance , this means that t ⩾  and the
hinge loss returns a value of zero. If f(x) is on the correct side but too
close to the hyperplane ( < t < ), the example x is within the margin,
and the hinge loss returns a positive value. When the example is on the
wrong side of the hyperplane (t < ), the hinge loss returns an even larger
value, which increases linearly. In other words, we pay a penalty once we
are closer than the margin to the hyperplane, even if the prediction is
correct, and the penalty increases linearly. An alternative way to express
the hinge loss is by considering it as two linear pieces
ℓ(t) =
if
t ⩾
− t
if
t <  ,
as illustrated in Figure .. The loss corresponding to the hard margin
SVM . is defined as
ℓ(t) =
if
t ⩾
if
t <  .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
Zero-one loss
Hinge loss
Figure . The
hinge loss is a
convex upper bound
of zero-one loss.
max{,  − t}
This loss can be interpreted as never allowing any examples inside the
margin.
For a given training set {(x, y), . . . , (xN, yN)}, we seek to minimize
the total loss, while regularizing the objective with ℓ-regularization (see
Section ..). Using the hinge loss (.) gives us the unconstrained
optimization problem
+ C
min
w,b
∥w∥
n=
max{,  − yn(⟨w, xn⟩ + b)}
| {z }
regularizer
{z
error term
The first term in (.) is called the regularization term or the regularizer
regularizer
(see Section ..), and the second term is called the loss term or the error
loss term
error term
term. Recall from Section .. that the term
∥w∥
arises directly from
the margin. In other words, margin maximization can be interpreted as
regularization.
regularization
In principle, the unconstrained optimization problem in (.) can
be directly solved with (sub-)gradient descent methods as described in
Section .. To see that (.) and (.a) are equivalent, observe that
the hinge loss (.) essentially consists of two linear parts, as expressed
in (.). Consider the hinge loss for a single example-label pair (.).
We can equivalently replace minimization of the hinge loss over t with a
minimization of a slack variable ξ with two constraints. In equation form,
min
max{,  − t}
is equivalent to
min
ξ,t
subject to
ξ ⩾  ,
ξ ⩾  − t .
By substituting this expression into (.) and rearranging one of the
constraints, we obtain exactly the soft margin SVM (.a).
Remark. Let us contrast our choice of the loss function in this section to the
loss function for linear regression in Chapter . Recall from Section ..
that for finding maximum likelihood estimators, we usually minimize the
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Dual Support Vector Machine
negative log-likelihood. Furthermore, since the likelihood term for linear
regression with Gaussian noise is Gaussian, the negative log-likelihood for
each example is a squared error function. The squared error function is the
loss function that is minimized when looking for the maximum likelihood
solution.
. Dual Support Vector Machine
The description of the SVM in the previous sections, in terms of the vari-
ables w and b, is known as the primal SVM. Recall that we consider inputs
x ∈ RD with D features. Since w is of the same dimension as x, this
means that the number of parameters (the dimension of w) of the opti-
mization problem grows linearly with the number of features.
In the following, we consider an equivalent optimization problem (the
so-called dual view), which is independent of the number of features. In-
stead, the number of parameters increases with the number of examples
in the training set. We saw a similar idea appear in Chapter , where we
expressed the learning problem in a way that does not scale with the num-
ber of features. This is useful for problems where we have more features
than the number of examples in the training dataset. The dual SVM also
has the additional advantage that it easily allows kernels to be applied,
as we shall see at the end of this chapter. The word “dual” appears often
in mathematical literature, and in this particular case it refers to convex
duality. The following subsections are essentially an application of convex
duality, which we discussed in Section ..
.. Convex Duality via Lagrange Multipliers
as the Lagrange multiplier corresponding to the constraint (.b) that
the examples are classified correctly and γn ⩾  as the Lagrange multi-
plier corresponding to the non-negativity constraint of the slack variable;
see (.c). The Lagrangian is then given by
Recall the primal soft margin SVM (.a). We call the variables w, b,
and ξ corresponding to the primal SVM the primal variables. We use αn ⩾
In Chapter , we
used λ as Lagrange
multipliers. In this
section, we follow
the notation
commonly chosen in
SVM literature, and
use α and γ.
L(w, b, ξ, α, γ) =
∥w∥ + C
n=
ξn
n=
αn(yn(⟨w, xn⟩ + b) −  + ξn)
{z
constraint (.b)
n=
γnξn
{z
constraint (.c)
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
By differentiating the Lagrangian (.) with respect to the three primal
variables w, b, and ξ respectively, we obtain
∂L
∂w = w⊤ −
n=
αnynxn
⊤ ,
∂L
∂b = −
n=
αnyn ,
∂L
∂ξn
= C − αn − γn .
We now find the maximum of the Lagrangian by setting each of these
partial derivatives to zero. By setting (.) to zero, we find
w =
n=
αnynxn ,
which is a particular instance of the representer theorem (Kimeldorf and
representer theorem
Wahba, ). Equation (.) states that the optimal weight vector in
The representer
theorem is actually
a collection of
theorems saying
that the solution of
minimizing
empirical risk lies in
the subspace
(Section ..)
defined by the
examples.
the primal is a linear combination of the examples xn. Recall from Sec-
tion .. that this means that the solution of the optimization problem
lies in the span of training data. Additionally, the constraint obtained by
setting (.) to zero implies that the optimal weight vector is an affine
combination of the examples. The representer theorem turns out to hold
for very general settings of regularized empirical risk minimization (Hof-
mann et al., ; Argyriou and Dinuzzo, ). The theorem has more
general versions (Sch¨olkopf et al., ), and necessary and sufficient
conditions on its existence can be found in Yu et al. ().
Remark. The representer theorem (.) also provides an explanation
of the name “support vector machine.” The examples xn, for which the
corresponding parameters αn = , do not contribute to the solution w at
all. The other examples, where αn > , are called support vectors since
support vector
they “support” the hyperplane.
By substituting the expression for w into the Lagrangian (.), we
obtain the dual
D(ξ, α, γ) =
i=
j=
yiyjαiαj ⟨xi, xj⟩ −
i=
yiαi
j=
yjαjxj, xi
* N
+ C
i=
ξi − b
i=
yiαi +
i=
αi −
i=
αiξi −
i=
γiξi .
Note that there are no longer any terms involving the primal variable w.
By setting (.) to zero, we obtain PN
n= ynαn = . Therefore, the term
involving b also vanishes. Recall that inner products are symmetric and
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Dual Support Vector Machine
bilinear (see Section .). Therefore, the first two terms in (.) are
over the same objects. These terms (colored blue) can be simplified, and
we obtain the Lagrangian
D(ξ, α, γ) = −
i=
j=
yiyjαiαj ⟨xi, xj⟩ +
i=
αi +
i=
(C − αi − γi)ξi .
The last term in this equation is a collection of all terms that contain slack
variables ξi. By setting (.) to zero, we see that the last term in (.)
is also zero. Furthermore, by using the same equation and recalling that
the Lagrange multiplers γi are non-negative, we conclude that αi ⩽ C.
We now obtain the dual optimization problem of the SVM, which is ex-
pressed exclusively in terms of the Lagrange multipliers αi. Recall from
Lagrangian duality (Definition .) that we maximize the dual problem.
This is equivalent to minimizing the negative dual problem, such that we
end up with the dual SVM
dual SVM
min
i=
αi
i=
j=
yiyjαiαj ⟨xi, xj⟩ −
subject to
i=
yiαi =
⩽ αi ⩽ C
for all
i = , . . . , N .
Once we obtain the dual parameters α, we can recover the primal pa-
rameters w by using the representer theorem (.). Let us call the op-
timal primal parameter w∗. However, there remains the question on how
to obtain the parameter b∗. Consider an example xn that lies exactly on
the margin’s boundary, i.e., ⟨w∗, xn⟩ + b = yn. Recall that yn is either +
or −. Therefore, the only unknown is b, which can be computed by
b∗ = yn − ⟨w∗, xn⟩ .
The equality constraint in (.) is obtained from setting (.) to
zero. The inequality constraint αi ⩾  is the condition imposed on La-
grange multipliers of inequality constraints (Section .). The inequality
constraint αi ⩽ C is discussed in the previous paragraph.
The set of inequality constraints in the SVM are called “box constraints”
because they limit the vector α = [α,    , αN]⊤ ∈ RN of Lagrange mul-
tipliers to be inside the box defined by  and C on each axis. These
axis-aligned boxes are particularly efficient to implement in numerical
solvers (Dost´al, , chapter ).
It turns out that
examples that lie
exactly on the
margin are
examples whose
dual parameters lie
strictly inside the
box constraints,
< αi < C. This is
derived using the
Karush Kuhn Tucker
conditions, for
example in
Sch¨olkopf and
Smola ().
Remark. In principle, there may be no examples that lie exactly on the
margin. In this case, we should compute |yn − ⟨w∗, xn⟩ | for all support
vectors and take the median value of this absolute value difference to be
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
Figure . Convex
hulls. (a) Convex
hull of points, some
of which lie within
the boundary;
(b) convex hulls
around positive and
negative examples.
(a) Convex hull.
(b) Convex hulls around positive (blue) and
negative (orange) examples. The distance be-
tween the two convex sets is the length of the
difference vector c − d.
the value of b∗. A derivation of this can be found in http://fouryears.
eu////the-svm-bias-term-conspiracy/.
.. Dual SVM: Convex Hull View
Another approach to obtain the dual SVM is to consider an alternative
geometric argument. Consider the set of examples xn with the same label.
We would like to build a convex set that contains all the examples such
that it is the smallest possible set. This is called the convex hull and is
illustrated in Figure ..
Let us first build some intuition about a convex combination of points.
Consider two points x and x and corresponding non-negative weights
α, α ⩾  such that α+α = . The equation αx+αx describes each
point on a line between x and x. Consider what happens when we add
a third point x along with a weight α ⩾  such that P
n= αn = .
The convex combination of these three points x, x, x spans a two-
dimensional area. The convex hull of this area is the triangle formed by
convex hull
the edges corresponding to each pair of of points. As we add more points,
and the number of points becomes greater than the number of dimen-
sions, some of the points will be inside the convex hull, as we can see in
Figure .(a).
In general, building a convex convex hull can be done by introducing
non-negative weights αn ⩾  corresponding to each example xn. Then
the convex hull can be described as the set
with
conv (X) =
n=
αnxn
n=
αn =
and
αn ⩾ , (.)
( N
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Dual Support Vector Machine
for all n = , . . . , N. If the two clouds of points corresponding to the
positive and negative classes are separated, then the convex hulls do not
overlap. Given the training data (x, y), . . . , (xN, yN), we form two con-
vex hulls, corresponding to the positive and negative classes respectively.
We pick a point c, which is in the convex hull of the set of positive exam-
ples, and is closest to the negative class distribution. Similarly, we pick a
point d in the convex hull of the set of negative examples and is closest to
the positive class distribution; see Figure .(b). We define a difference
vector between d and c as
w := c − d .
Picking the points c and d as in the preceding cases, and requiring them
to be closest to each other is equivalent to minimizing the length/norm of
w, so that we end up with the corresponding optimization problem
arg min
w ∥w∥ = arg min
∥w∥
Since c must be in the positive convex hull, it can be expressed as a convex
combination of the positive examples, i.e., for non-negative coefficients
α+
n:yn=+
α+
n xn .
c =
In (.), we use the notation n : yn = + to indicate the set of indices
n for which yn = +. Similarly, for the examples with negative labels, we
obtain
n:yn=−
α−
n xn .
d =
By substituting (.), (.), and (.) into (.), we obtain the
objective
min
n:yn=−
α−
n xn
n:yn=+
α+
n xn −

n:yn=−
α−
n =  .
Let α be the set of all coefficients, i.e., the concatenation of α+ and α−.
Recall that we require that for each convex hull that their coefficients sum
to one,
n:yn=+
α+
n =
and
This implies the constraint
n=
ynαn =  .
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
This result can be seen by multiplying out the individual classes
n:yn=−
(−)α−
(.a)
n:yn=+
(+)α+
n +
n=
ynαn =
n:yn=−
α−
n =  −  =  .
(.b)
n:yn=+
α+
n −
The objective function (.) and the constraint (.), along with the
assumption that α ⩾ , give us a constrained (convex) optimization prob-
lem. This optimization problem can be shown to be the same as that of
the dual hard margin SVM (Bennett and Bredensteiner, a).
Remark. To obtain the soft margin dual, we consider the reduced hull. The
reduced hull is similar to the convex hull but has an upper bound to the
reduced hull
size of the coefficients α. The maximum possible value of the elements
of α restricts the size that the convex hull can take. In other words, the
bound on α shrinks the convex hull to a smaller volume (Bennett and
Bredensteiner, b).
. Kernels
a Hilbert space H and ϕ : X → H a feature map such that
k(xi, xj) = ⟨ϕ(xi), ϕ(xj)⟩H .
Consider the formulation of the dual SVM (.). Notice that the in-
ner product in the objective occurs only between examples xi and xj.
There are no inner products between the examples and the parameters.
Therefore, if we consider a set of features ϕ(xi) to represent xi, the only
change in the dual SVM will be to replace the inner product. This mod-
ularity, where the choice of the classification method (the SVM) and the
choice of the feature representation ϕ(x) can be considered separately,
provides flexibility for us to explore the two problems independently. In
this section, we discuss the representation ϕ(x) and briefly introduce the
idea of kernels, but do not go into the technical details.
Since ϕ(x) could be a non-linear function, we can use the SVM (which
assumes a linear classifier) to construct classifiers that are nonlinear in
the examples xn. This provides a second avenue, in addition to the soft
margin, for users to deal with a dataset that is not linearly separable. It
turns out that there are many algorithms and statistical methods that have
this property that we observed in the dual SVM: the only inner products
are those that occur between examples. Instead of explicitly defining a
non-linear feature map ϕ() and computing the resulting inner product
between examples xi and xj, we define a similarity function k(xi, xj) be-
tween xi and xj. For a certain class of similarity functions, called kernels,
kernel
the similarity function implicitly defines a non-linear feature map ϕ().
Kernels are by definition functions k : X × X → R for which there exists
The inputs X of the
kernel function can
be very general and
are not necessarily
restricted to RD.
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Kernels
Second feature
Second feature
Figure . SVM
with different
kernels. Note that
while the decision
boundary is
nonlinear, the
underlying problem
being solved is for a
linear separating
hyperplane (albeit
with a nonlinear
kernel).
First feature
First feature
(a) SVM with linear kernel
(b) SVM with RBF kernel
Second feature
Second feature
First feature
First feature
(c) SVM with polynomial (degree ) kernel
(d) SVM with polynomial (degree ) kernel
There is a unique reproducing kernel Hilbert space associated with every
kernel k (Aronszajn, ; Berlinet and Thomas-Agnan, ). In this
unique association, ϕ(x) = k(, x) is called the canonical feature map.
canonical feature
map
The generalization from an inner product to a kernel function (.) is
known as the kernel trick (Sch¨olkopf and Smola, ; Shawe-Taylor and
kernel trick
Cristianini, ), as it hides away the explicit non-linear feature map.
The matrix K ∈ RN×N, resulting from the inner products or the appli-
cation of k(, ) to a dataset, is called the Gram matrix, and is often just
Gram matrix
referred to as the kernel matrix. Kernels must be symmetric and positive
kernel matrix
semidefinite functions so that every kernel matrix K is symmetric and
positive semidefinite (Section ..):
∀z ∈ RN : z⊤Kz ⩾  .
Some popular examples of kernels for multivariate real-valued data xi ∈
RD are the polynomial kernel, the Gaussian radial basis function kernel,
and the rational quadratic kernel (Sch¨olkopf and Smola, ; Rasmussen
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
and Williams, ). Figure . illustrates the effect of different kernels
on separating hyperplanes on an example dataset. Note that we are still
solving for hyperplanes, that is, the hypothesis class of functions are still
linear. The non-linear surfaces are due to the kernel function.
Remark. Unfortunately for the fledgling machine learner, there are mul-
tiple meanings of the word “kernel.” In this chapter, the word “kernel”
comes from the idea of the reproducing kernel Hilbert space (RKHS) (Aron-
szajn, ; Saitoh, ). We have discussed the idea of the kernel in lin-
ear algebra (Section ..), where the kernel is another word for the null
space. The third common use of the word “kernel” in machine learning is
the smoothing kernel in kernel density estimation (Section .).
Since the explicit representation ϕ(x) is mathematically equivalent to
the kernel representation k(xi, xj), a practitioner will often design the
kernel function such that it can be computed more efficiently than the
inner product between explicit feature maps. For example, consider the
polynomial kernel (Sch¨olkopf and Smola, ), where the number of
terms in the explicit expansion grows very quickly (even for polynomials
of low degree) when the input dimension is large. The kernel function
only requires one multiplication per input dimension, which can provide
significant computational savings. Another example is the Gaussian ra-
dial basis function kernel (Sch¨olkopf and Smola, ; Rasmussen and
Williams, ), where the corresponding feature space is infinite dimen-
sional. In this case, we cannot explicitly represent the feature space but
can still compute similarities between a pair of examples using the kernel.
The choice of
kernel, as well as
the parameters of
the kernel, is often
chosen using nested
cross-validation
(Section ..).
Another useful aspect of the kernel trick is that there is no need for
the original data to be already represented as multivariate real-valued
data. Note that the inner product is defined on the output of the function
ϕ(), but does not restrict the input to real numbers. Hence, the function
ϕ() and the kernel function k(, ) can be defined on any object, e.g.,
sets, sequences, strings, graphs, and distributions (Ben-Hur et al., ;
G¨artner, ; Shi et al., ; Sriperumbudur et al., ; Vishwanathan
et al., ).
. Numerical Solution
We conclude our discussion of SVMs by looking at how to express the
problems derived in this chapter in terms of the concepts presented in
Chapter . We consider two different approaches for finding the optimal
solution for the SVM. First we consider the loss view of SVM .. and ex-
press this as an unconstrained optimization problem. Then we express the
constrained versions of the primal and dual SVMs as quadratic programs
in standard form ...
Consider the loss function view of the SVM (.). This is a convex
unconstrained optimization problem, but the hinge loss (.) is not dif-
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Numerical Solution
ferentiable. Therefore, we apply a subgradient approach for solving it.
However, the hinge loss is differentiable almost everywhere, except for
one single point at the hinge t = . At this point, the gradient is a set of
possible values that lie between  and −. Therefore, the subgradient g of
the hinge loss is given by
g(t) =
t <
[−, ]
t =
t >

such that the optimization variables are all on the right and the inequality
of the constraint matches the standard form. This yields the optimization
Using this subgradient, we can apply the optimization methods presented
in Section ..
Both the primal and the dual SVM result in a convex quadratic pro-
gramming problem (constrained optimization). Note that the primal SVM
in (.a) has optimization variables that have the size of the dimen-
sion D of the input examples. The dual SVM in (.) has optimization
variables that have the size of the number N of examples.
To express the primal SVM in the standard form (.) for quadratic
programming, let us assume that we use the dot product (.) as the
inner product. We rearrange the equation for the primal SVM (.a),
Recall from
Section . that we
use the phrase dot
product to mean the
inner product on
Euclidean vector
space.
min
w,b,ξ
∥w∥ + C
n=
ξn
subject to
−ynx⊤
n w − ynb − ξn ⩽ −
−ξn ⩽
n = , . . . , N. By concatenating the variables w, b, xn into a single vector,
and carefully collecting the terms, we obtain the following matrix form of
the soft margin SVM:
min
w,b,ξ
ID
D,N+
N+,D
N+,N+
 +
D+,
CN,

subject to
−Y X
−y
−IN
N,D+
−IN
 ⩽
−N,
N,
In the preceding optimization problem, the minimization is over the pa-
rameters [w⊤, b, ξ⊤]⊤ ∈ RD++N, and we use the notation: Im to rep-
resent the identity matrix of size m × m, m,n to represent the matrix
of zeros of size m × n, and m,n to represent the matrix of ones of size
m × n. In addition, y is the vector of labels [y,    , yN]⊤, Y = diag(y)
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
is an N by N matrix where the elements of the diagonal are from y, and
X ∈ RN×D is the matrix obtained by concatenating all the examples.
We can similarly perform a collection of terms for the dual version of the
SVM (.). To express the dual SVM in standard form, we first have to
express the kernel matrix K such that each entry is Kij = k(xi, xj). If we
have an explicit feature representation xi then we define Kij = ⟨xi, xj⟩.
For convenience of notation we introduce a matrix with zeros everywhere
except on the diagonal, where we store the labels, that is, Y = diag(y).
The dual SVM can be written as
min
α⊤Y KY α − ⊤
N,α
y⊤
subject to
−y⊤

−IN
IN
 α ⩽
N+,
CN,
Remark. In Sections .. and .., we introduced the standard forms
of the constraints to be inequality constraints. We will express the dual
SVM’s equality constraint as two inequality constraints, i.e.,
Ax = b
is replaced by
Ax ⩽ b
and
Ax ⩾ b .
Particular software implementations of convex optimization methods may
provide the ability to express equality constraints.
Since there are many different possible views of the SVM, there are
many approaches for solving the resulting optimization problem. The ap-
proach presented here, expressing the SVM problem in standard convex
optimization form, is not often used in practice. The two main implemen-
tations of SVM solvers are Chang and Lin () (which is open source)
and Joachims (). Since SVMs have a clear and well-defined optimiza-
tion problem, many approaches based on numerical optimization tech-
niques (Nocedal and Wright, ) can be applied (Shawe-Taylor and
Sun, ).
. Further Reading
The SVM is one of many approaches for studying binary classification.
Other approaches include the perceptron, logistic regression, Fisher dis-
criminant, nearest neighbor, naive Bayes, and random forest (Bishop, ;
Murphy, ). A short tutorial on SVMs and kernels on discrete se-
quences can be found in Ben-Hur et al. (). The development of SVMs
is closely linked to empirical risk minimization, discussed in Section ..
Hence, the SVM has strong theoretical properties (Vapnik, ; Stein-
wart and Christmann, ). The book about kernel methods (Sch¨olkopf
and Smola, ) includes many details of support vector machines and
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.

. Further Reading
how to optimize them. A broader book about kernel methods (Shawe-
Taylor and Cristianini, ) also includes many linear algebra approaches
for different machine learning problems.
An alternative derivation of the dual SVM can be obtained using the
idea of the Legendre–Fenchel transform (Section ..). The derivation
considers each term of the unconstrained formulation of the SVM (.)
separately and calculates their convex conjugates (Rifkin and Lippert,
). Readers interested in the functional analysis view (also the reg-
ularization methods view) of SVMs are referred to the work by Wahba
(). Theoretical exposition of kernels (Aronszajn, ; Schwartz,
; Saitoh, ; Manton and Amblard, ) requires a basic ground-
ing in linear operators (Akhiezer and Glazman, ). The idea of kernels
have been generalized to Banach spaces (Zhang et al., ) and Kre˘ın
spaces (Ong et al., ; Loosli et al., ).
Observe that the hinge loss has three equivalent representations, as
shown in (.) and (.), as well as the constrained optimization
problem in (.). The formulation (.) is often used when compar-
ing the SVM loss function with other loss functions (Steinwart, ).
The two-piece formulation (.) is convenient for computing subgra-
dients, as each piece is linear. The third formulation (.), as seen
in Section ., enables the use of convex quadratic programming (Sec-
tion ..) tools.
Since binary classification is a well-studied task in machine learning,
other words are also sometimes used, such as discrimination, separation,
and decision. Furthermore, there are three quantities that can be the out-
put of a binary classifier. First is the output of the linear function itself
(often called the score), which can take any real value. This output can be
used for ranking the examples, and binary classification can be thought
of as picking a threshold on the ranked examples (Shawe-Taylor and Cris-
tianini, ). The second quantity that is often considered the output
of a binary classifier is the output determined after it is passed through
a non-linear function to constrain its value to a bounded range, for ex-
ample in the interval [, ]. A common non-linear function is the sigmoid
function (Bishop, ). When the non-linearity results in well-calibrated
probabilities (Gneiting and Raftery, ; Reid and Williamson, ),
this is called class probability estimation. The third output of a binary
classifier is the final binary decision {+, −}, which is the one most com-
monly assumed to be the output of the classifier.
The SVM is a binary classifier that does not naturally lend itself to a
probabilistic interpretation. There are several approaches for converting
the raw output of the linear function (the score) into a calibrated class
probability estimate (P(Y = |X = x)) that involve an additional cal-
ibration step (Platt, ; Zadrozny and Elkan, ; Lin et al., ).
From the training perspective, there are many related probabilistic ap-
proaches. We mentioned at the end of Section .. that there is a re-
© M. P. Deisenroth, A. A. Faisal, C. S. Ong. Published by Cambridge University Press ().

Classification with Support Vector Machines
lationship between loss function and the likelihood (also compare Sec-
tions . and .). The maximum likelihood approach corresponding to
a well-calibrated transformation during training is called logistic regres-
sion, which comes from a class of methods called generalized linear mod-
els. Details of logistic regression from this point of view can be found in
Agresti (, chapter ) and McCullagh and Nelder (, chapter ).
Naturally, one could take a more Bayesian view of the classifier output by
estimating a posterior distribution using Bayesian logistic regression. The
Bayesian view also includes the specification of the prior, which includes
design choices such as conjugacy (Section ..) with the likelihood. Ad-
ditionally, one could consider latent functions as priors, which results in
Gaussian process classification (Rasmussen and Williams, , chapter
Draft (--) of “Mathematics for Machine Learning”. Feedback: https://mml-book.com.