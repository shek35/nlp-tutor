Part I
FUNDAMENTAL ALGORITHMS FOR
NLP
In the ﬁrst part of the book we introduce the fundamental suite of algorithmic
tools that make up the modern neural language model that is the heart of end-to-end
NLP systems. We begin with tokenization and preprocessing, as well as useful algo-
rithms like computing edit distance, and then proceed to the tasks of classiﬁcation,
logistic regression, neural networks, proceeding through feedforward networks, re-
current networks, and then transformers. We’ll also see the role of embeddings as a
model of word meaning.

Introduction
CHAPTER
La derni`ere chose qu’on trouve en faisant un ouvrage est de savoir celle qu’il faut
mettre la premi`ere.
[The last thing you ﬁgure out in writing a book is what to put ﬁrst.]
Pascal
CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
Regular
Expressions,
Text
Normalization, Edit Distance
CHAPTER
User:
I am unhappy.
ELIZA: DO YOU THINK COMING HERE WILL HELP YOU NOT TO BE UNHAPPY
User:
I need some help, that much seems certain.
ELIZA: WHAT WOULD IT MEAN TO YOU IF YOU GOT SOME HELP
User:
Perhaps I could learn to get along with my mother.
ELIZA: TELL ME MORE ABOUT YOUR FAMILY
User:
My mother takes care of me.
ELIZA: WHO ELSE IN YOU FAMILY TAKES CARE OF YOU
User:
My father.
ELIZA: YOUR FATHER
User:
You are like my father in some ways.
Weizenbaum ()
The dialogue above is from ELIZA, an early natural language processing system
ELIZA
that could carry on a limited conversation with a user by imitating the responses of
a Rogerian psychotherapist (Weizenbaum, ). ELIZA is a surprisingly simple
program that uses pattern matching to recognize phrases like “I need X” and translate
them into suitable outputs like “What would it mean to you if you got X?”. This
simple technique succeeds in this domain because ELIZA doesn’t actually need to
know anything to mimic a Rogerian psychotherapist. As Weizenbaum notes, this is
one of the few dialogue genres where listeners can act as if they know nothing of the
world. ELIZA’s mimicry of human conversation was remarkably successful: many
people who interacted with ELIZA came to believe that it really understood them
and their problems, many continued to believe in ELIZA’s abilities even after the
program’s operation was explained to them (Weizenbaum, ), and even today
such chatbots are a fun diversion.
chatbots
Of course modern conversational agents are much more than a diversion; they
can answer questions, book ﬂights, or ﬁnd restaurants, functions for which they rely
on a much more sophisticated understanding of the user’s intent, as we will see in
Chapter . Nonetheless, the simple pattern-based methods that powered ELIZA
and other chatbots play a crucial role in natural language processing.
We’ll begin with the most important tool for describing text patterns: the regular
expression. Regular expressions can be used to specify strings we might want to
extract from a document, from transforming “I need X” in ELIZA above, to deﬁning
strings like $ or $. for extracting tables of prices from a document.
We’ll then turn to a set of tasks collectively called text normalization, in which
text
normalization
regular expressions play an important part. Normalizing text means converting it
to a more convenient, standard form. For example, most of what we are going to
do with language relies on ﬁrst separating out or tokenizing words from running
text, the task of tokenization. English words are often separated from each other
tokenization
by whitespace, but whitespace is not always sufﬁcient. New York and rock ’n’ roll
are sometimes treated as large words despite the fact that they contain spaces, while
sometimes we’ll need to separate I’m into the two words I and am. For processing
tweets or texts we’ll need to tokenize emoticons like :) or hashtags like #nlproc.

REGULAR EXPRESSIONS
Some languages, like Japanese, don’t have spaces between words, so word tokeniza-
tion becomes more difﬁcult.
Another part of text normalization is lemmatization, the task of determining
lemmatization
that two words have the same root, despite their surface differences. For example,
the words sang, sung, and sings are forms of the verb sing. The word sing is the
common lemma of these words, and a lemmatizer maps from all of these to sing.
Lemmatization is essential for processing morphologically complex languages like
Arabic. Stemming refers to a simpler version of lemmatization in which we mainly
stemming
just strip sufﬁxes from the end of the word. Text normalization also includes sen-
tence segmentation: breaking up a text into individual sentences, using cues like
sentence
segmentation
periods or exclamation points.
Finally, we’ll need to compare words and other strings. We’ll introduce a metric
called edit distance that measures how similar two strings are based on the number
of edits (insertions, deletions, substitutions) it takes to change one string into the
other. Edit distance is an algorithm with applications throughout language process-
ing, from spelling correction to speech recognition to coreference resolution.
Regular Expressions
One of the unsung successes in standardization in computer science has been the
regular expression (often shortened to regex), a language for specifying text search
regular
expression
strings. This practical language is used in every computer language, word processor,
and text processing tools like the Unix tools grep or Emacs. Formally, a regular ex-
pression is an algebraic notation for characterizing a set of strings. Regular expres-
sions are particularly useful for searching in texts, when we have a pattern to search
for and a corpus of texts to search through. A regular expression search function
corpus
will search through the corpus, returning all texts that match the pattern. The corpus
can be a single document or a collection. For example, the Unix command-line tool
grep takes a regular expression and returns every line of the input document that
matches the expression.
A search can be designed to return every match on a line, if there are more than
one, or just the ﬁrst match. In the following examples we generally underline the
exact part of the pattern that matches the regular expression and show only the ﬁrst
match. We’ll show regular expressions delimited by slashes but note that slashes are
not part of the regular expressions.
Regular expressions come in many variants. We’ll be describing extended regu-
lar expressions; different regular expression parsers may only recognize subsets of
these, or treat some expressions slightly differently. Using an online regular expres-
sion tester is a handy way to test out your expressions and explore these variations.
Basic Regular Expression Patterns
The simplest kind of regular expression is a sequence of simple characters; putting
characters in sequence is called concatenation. To search for woodchuck, we type
concatenation
/woodchuck/. The expression /Buttercup/ matches any string containing the
substring Buttercup; grep with that expression would return the line I’m called lit-
tle Buttercup. The search string can consist of a single character (like /!/) or a
sequence of characters (like /urgl/) (see Fig. .).
Regular expressions are case sensitive; lower case /s/ is distinct from upper

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
Regex
Example Patterns Matched
/woodchucks/
“interesting links to woodchucks and lemurs”
/a/
“Mary Ann stopped by Mona’s”
“You’ve left the burglar behind again!” said Nori
Figure .
Some simple regex searches.
case /S/ (/s/ matches a lower case s but not an upper case S). This means that
the pattern /woodchucks/ will not match the string Woodchucks. We can solve this
problem with the use of the square braces [ and ]. The string of characters inside the
braces speciﬁes a disjunction of characters to match. For example, Fig. . shows
that the pattern /[wW]/ matches patterns containing either w or W.
Regex
Match
Example Patterns
/[wW]oodchuck/
Woodchuck or woodchuck
“Woodchuck”
/[abc]/
‘a’, ‘b’, or ‘c’
“In uomini, in soldati”
any digit
“plenty of  to ”
Figure .
The use of the brackets [] to specify a disjunction of characters.
The regular expression /[]/ speciﬁes any single digit. While such
classes of characters as digits or letters are important building blocks in expressions,
they can get awkward (e.g., it’s inconvenient to specify
/[ABCDEFGHIJKLMNOPQRSTUVWXYZ]/
to mean “any capital letter”). In cases where there is a well-deﬁned sequence asso-
ciated with a set of characters, the brackets can be used with the dash (-) to specify
any one character in a range. The pattern /[-]/ speciﬁes any one of the charac-
range
ters , , , or . The pattern /[b-g]/ speciﬁes one of the characters b, c, d, e, f, or
g. Some other examples are shown in Fig. ..
Regex
Match
Example Patterns Matched
/[A-Z]/
an upper case letter
“we should call it ‘Drenched Blossoms’ ”
/[a-z]/
a lower case letter
“my beans were impatient to be hoed!”
a single digit
“Chapter : Down the Rabbit Hole”
Figure .
The use of the brackets [] plus the dash - to specify a range.
The square braces can also be used to specify what a single character cannot be,
by use of the caret ˆ. If the caret ˆ is the ﬁrst symbol after the open square brace [,
the resulting pattern is negated. For example, the pattern /[ˆa]/ matches any single
character (including special characters) except a. This is only true when the caret
is the ﬁrst symbol after the open square brace. If it occurs anywhere else, it usually
stands for a caret; Fig. . shows some examples.
Regex
Match (single characters)
Example Patterns Matched
/[ˆA-Z]/
not an upper case letter
“Oyfn pripetchik”
/[ˆSs]/
neither ‘S’ nor ‘s’
“I have no exquisite reason for’t”
/[ˆ.]/
not a period
“our resident Djinn”
/[eˆ]/
either ‘e’ or ‘ˆ’
“look up ˆ now”
/aˆb/
the pattern ‘aˆb’
“look up aˆ b now”
Figure .
The caret ˆ for negation or just to mean ˆ. See below re: the backslash for escaping the period.
How can we talk about optional elements, like an optional s in woodchuck and
woodchucks? We can’t use the square brackets, because while they allow us to say

REGULAR EXPRESSIONS
“s or S”, they don’t allow us to say “s or nothing”. For this we use the question mark
/?/, which means “the preceding character or nothing”, as shown in Fig. ..
Regex
Match
Example Patterns Matched
/woodchucks?/
woodchuck or woodchucks
“woodchuck”
/colou?r/
color or colour
“color”
Figure .
The question mark ? marks optionality of the previous expression.
We can think of the question mark as meaning “zero or one instances of the
previous character”. That is, it’s a way of specifying how many of something that
we want, something that is very important in regular expressions. For example,
consider the language of certain sheep, which consists of strings that look like the
following:
baa!
baaa!
baaaa!
baaaaa!
This language consists of strings with a b, followed by at least two a’s, followed
by an exclamation point. The set of operators that allows us to say things like “some
number of as” are based on the asterisk or *, commonly called the Kleene * (gen-
Kleene *
erally pronounced “cleany star”). The Kleene star means “zero or more occurrences
of the immediately previous character or regular expression”. So /a*/ means “any
string of zero or more as”. This will match a or aaaaaa, but it will also match the
empty string at the start of Off Minor since the string Off Minor starts with zero a’s.
So the regular expression for matching one or more a is /aa*/, meaning one a fol-
lowed by zero or more as. More complex patterns can also be repeated. So /[ab]*/
means “zero or more a’s or b’s” (not “zero or more right square braces”). This will
match strings like aaaa or ababab or bbbb.
For specifying multiple digits (useful for ﬁnding prices) we can extend /[-]/,
the regular expression for a single digit.
An integer (a string of digits) is thus
/[-][-]*/. (Why isn’t it just /[-]*/?)
Sometimes it’s annoying to have to write the regular expression for digits twice,
so there is a shorter way to specify “at least one” of some character. This is the
Kleene +, which means “one or more occurrences of the immediately preceding
Kleene +
character or regular expression”. Thus, the expression /[-]+/ is the normal way
to specify “a sequence of digits”. There are thus two ways to specify the sheep
language: /baaa*!/ or /baa+!/.
One very important special character is the period (/./), a wildcard expression
that matches any single character (except a carriage return), as shown in Fig. ..
Regex
Match
Example Matches
/beg.n/
any character between beg and n
begin, beg’n, begun
Figure .
The use of the period . to specify any character.
The wildcard is often used together with the Kleene star to mean “any string of
characters”. For example, suppose we want to ﬁnd any line in which a particular
word, for example, aardvark, appears twice. We can specify this with the regular
expression /aardvark.*aardvark/.
Anchors are special characters that anchor regular expressions to particular places
anchors

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
in a string. The most common anchors are the caret ˆ and the dollar sign $. The caret
ˆ matches the start of a line. The pattern /ˆThe/ matches the word The only at the
start of a line. Thus, the caret ˆ has three uses: to match the start of a line, to in-
dicate a negation inside of square brackets, and just to mean a caret. (What are the
contexts that allow grep or Python to know which function a given caret is supposed
to have?) The dollar sign $ matches the end of a line. So the pattern ␣$ is a useful
pattern for matching a space at the end of a line, and /ˆThe dog\.$/ matches a
line that contains only the phrase The dog. (We have to use the backslash here since
we want the . to mean “period” and not the wildcard.)
Regex
Match
start of line
end of line
\b
word boundary
\B
non-word boundary
Figure .
Anchors in regular expressions.
There are also two other anchors: \b matches a word boundary, and \B matches
a non-boundary. Thus, /\bthe\b/ matches the word the but not the word other.
More technically, a “word” for the purposes of a regular expression is deﬁned as any
sequence of digits, underscores, or letters; this is based on the deﬁnition of “words”
in programming languages. For example, /\b\b/ will match the string  in
There are  bottles of beer on the wall (because  follows a space) but not  in
There are  bottles of beer on the wall (since  follows a number). But it will
match  in $ (since  follows a dollar sign ($), which is not a digit, underscore,
or letter).
Disjunction, Grouping, and Precedence
Suppose we need to search for texts about pets; perhaps we are particularly interested
in cats and dogs. In such a case, we might want to search for either the string cat or
the string dog. Since we can’t use the square brackets to search for “cat or dog” (why
can’t we say /[catdog]/?), we need a new operator, the disjunction operator, also
disjunction
called the pipe symbol |. The pattern /cat|dog/ matches either the string cat or
the string dog.
Sometimes we need to use this disjunction operator in the midst of a larger se-
quence. For example, suppose I want to search for information about pet ﬁsh for
my cousin David. How can I specify both guppy and guppies? We cannot simply
say /guppy|ies/, because that would match only the strings guppy and ies. This
is because sequences like guppy take precedence over the disjunction operator |.
precedence
To make the disjunction operator apply only to a speciﬁc pattern, we need to use the
parenthesis operators ( and ). Enclosing a pattern in parentheses makes it act like
a single character for the purposes of neighboring operators like the pipe | and the
Kleene*. So the pattern /gupp(y|ies)/ would specify that we meant the disjunc-
tion only to apply to the sufﬁxes y and ies.
The parenthesis operator ( is also useful when we are using counters like the
Kleene*. Unlike the | operator, the Kleene* operator applies by default only to
a single character, not to a whole sequence. Suppose we want to match repeated
instances of a string. Perhaps we have a line that has column labels of the form
Column  Column  Column . The expression /Column␣[-]+␣*/ will not
match any number of columns; instead, it will match a single column followed by

REGULAR EXPRESSIONS
any number of spaces! The star here applies only to the space ␣ that precedes it,
not to the whole sequence. With the parentheses, we could write the expression
/(Column␣[-]+␣*)*/ to match the word Column, followed by a number and
optional spaces, the whole pattern repeated zero or more times.
This idea that one operator may take precedence over another, requiring us to
sometimes use parentheses to specify what we mean, is formalized by the operator
precedence hierarchy for regular expressions. The following table gives the order
operator
precedence
of RE operator precedence, from highest precedence to lowest precedence.
Parenthesis
Counters
* + ? {}
Sequences and anchors
the ˆmy end$
Disjunction
Thus,
because
counters
have
higher
precedence
than
sequences,
/the*/ matches theeeee but not thethe. Because sequences have a higher prece-
dence than disjunction, /the|any/ matches the or any but not thany or theny.
Patterns can be ambiguous in another way. Consider the expression /[a-z]*/
when matching against the text once upon a time. Since /[a-z]*/ matches zero or
more letters, this expression could match nothing, or just the ﬁrst letter o, on, onc,
or once. In these cases regular expressions always match the largest string they can;
we say that patterns are greedy, expanding to cover as much of a string as they can.
greedy
There are, however, ways to enforce non-greedy matching, using another mean-
non-greedy
ing of the ? qualiﬁer. The operator *? is a Kleene star that matches as little text as
possible. The operator +? is a Kleene plus that matches as little text as possible.
A Simple Example
Suppose we wanted to write a RE to ﬁnd cases of the English article the. A simple
(but incorrect) pattern might be:
/the/
One problem is that this pattern will miss the word when it begins a sentence and
hence is capitalized (i.e., The). This might lead us to the following pattern:
/[tT]he/
But we will still incorrectly return texts with the embedded in other words (e.g.,
other or theology). So we need to specify that we want instances with a word bound-
ary on both sides:
/\b[tT]he\b/
Suppose we wanted to do this without the use of /\b/. We might want this since
/\b/ won’t treat underscores and numbers as word boundaries; but we might want
to ﬁnd the in some context where it might also have underlines or numbers nearby
(the or the). We need to specify that we want instances in which there are no
alphabetic letters on either side of the the:
/[ˆa-zA-Z][tT]he[ˆa-zA-Z]/
But there is still one more problem with this pattern: it won’t ﬁnd the word the
when it begins a line. This is because the regular expression [ˆa-zA-Z], which

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
we used to avoid embedded instances of the, implies that there must be some single
(although non-alphabetic) character before the the. We can avoid this by specify-
ing that before the the we require either the beginning-of-line or a non-alphabetic
character, and the same at the end of the line:
/(ˆ|[ˆa-zA-Z])[tT]he([ˆa-zA-Z]|$)/
The process we just went through was based on ﬁxing two kinds of errors: false
positives, strings that we incorrectly matched like other or there, and false nega-
false positives
tives, strings that we incorrectly missed, like The. Addressing these two kinds of
false negatives
errors comes up again and again in implementing speech and language processing
systems. Reducing the overall error rate for an application thus involves two antag-
onistic efforts:
Increasing precision (minimizing false positives)
Increasing recall (minimizing false negatives)
We’ll come back to precision and recall with more precise deﬁnitions in Chapter .
More Operators
Figure . shows some aliases for common ranges, which can be used mainly to
save typing. Besides the Kleene * and Kleene + we can also use explicit numbers as
counters, by enclosing them in curly brackets. The regular expression /{}/ means
“exactly  occurrences of the previous character or expression”. So /a\.{}z/
will match a followed by  dots followed by z (but not a followed by  or  dots
followed by a z).
Regex
Expansion
Match
First Matches
\d
any digit
Party␣of␣
\D
[ˆ-]
any non-digit
Blue␣moon
\w
[a-zA-Z-_]
any alphanumeric/underscore
Daiyu
\W
[ˆ\w]
a non-alphanumeric
\s
[␣\r\t\n\f]
whitespace (space, tab)
in Concord
\S
[ˆ\s]
Non-whitespace
in␣Concord
Figure .
Aliases for common sets of characters.
A range of numbers can also be speciﬁed. So /{n,m}/ speciﬁes from n to m
occurrences of the previous char or expression, and /{n,}/ means at least n occur-
rences of the previous expression. REs for counting are summarized in Fig. ..
Regex
Match
zero or more occurrences of the previous char or expression
one or more occurrences of the previous char or expression
zero or one occurrence of the previous char or expression
{n}
exactly n occurrences of the previous char or expression
{n,m}
from n to m occurrences of the previous char or expression
{n,}
at least n occurrences of the previous char or expression
{,m}
up to m occurrences of the previous char or expression
Figure .
Regular expression operators for counting.
Finally, certain special characters are referred to by special notation based on the
backslash (\) (see Fig. .). The most common of these are the newline character
newline

REGULAR EXPRESSIONS
\n and the tab character \t. To refer to characters that are special themselves (like
., *, [, and \), precede them with a backslash, (i.e., /\./, /\*/, /\[/, and /\\/).
Regex
Match
First Patterns Matched
an asterisk “*”
“K*A*P*L*A*N”
a period “.”
“Dr. Livingston, I presume”
a question mark
“Why don’t they come and lend a hand?”
\n
a newline
\t
a tab
Figure .
Some characters that need to be backslashed.
A More Complex Example
Let’s try out a more signiﬁcant example of the power of REs. Suppose we want to
build an application to help a user buy a computer on the Web. The user might want
“any machine with at least  GHz and  GB of disk space for less than $”.
To do this kind of retrieval, we ﬁrst need to be able to look for expressions like
GHz or  GB or Mac or $.. In the rest of this section we’ll work out some
simple regular expressions for this task.
First, let’s complete our regular expression for prices. Here’s a regular expres-
sion for a dollar sign followed by a string of digits:
Note that the $ character has a different function here than the end-of-line function
we discussed earlier. Most regular expression parsers are smart enough to realize
that $ here doesn’t mean end-of-line. (As a thought experiment, think about how
regex parsers might ﬁgure out the function of $ from the context.)
Now we just need to deal with fractions of dollars. We’ll add a decimal point
and two digits afterwards:
This pattern only allows $. but not $. We need to make the cents
optional and to make sure we’re at a word boundary:
/(ˆ|\W)$[-]+(\.[-][-])?\b/
One last catch! This pattern allows prices like $. which would be far
too expensive! We need to limit the dollars:
/(ˆ|\W)$[-]{,}(\.[-][-])?\b/
Further ﬁxes (like avoiding matching a dollar sign with no price after it) are left
as an exercise for the reader.
How about disk space? We’ll need to allow for optional fractions again (. GB);
note the use of ? for making the ﬁnal s optional, and the use of /␣*/ to mean “zero
or more spaces” since there might always be extra spaces lying around:
/\b[-]+(\.[-]+)?␣*(GB|[Gg]igabytes?)\b/
Modifying this regular expression so that it only matches more than  GB is
left as an exercise for the reader.

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
Substitution, Capture Groups, and ELIZA
An important use of regular expressions is in substitutions. For example, the substi-
substitution
tution operator s/regexp/pattern/ used in Python and in Unix commands like
vim or sed allows a string characterized by a regular expression to be replaced by
another string:
s/colour/color/
It is often useful to be able to refer to a particular subpart of the string matching
the ﬁrst pattern. For example, suppose we wanted to put angle brackets around all
integers in a text, for example, changing the  boxes to the <> boxes. We’d
like a way to refer to the integer we’ve found so that we can easily add the brackets.
To do this, we put parentheses ( and ) around the ﬁrst pattern and use the number
operator \ in the second pattern to refer back. Here’s how it looks:
s/([-]+)/<\>/
The parenthesis and number operators can also specify that a certain string or
expression must occur twice in the text. For example, suppose we are looking for
the pattern “the Xer they were, the Xer they will be”, where we want to constrain
the two X’s to be the same string. We do this by surrounding the ﬁrst X with the
parenthesis operator, and replacing the second X with the number operator \, as
follows:
/the (.*)er they were, the \er they will be/
Here the \ will be replaced by whatever string matched the ﬁrst item in paren-
theses. So this will match the bigger they were, the bigger they will be but not the
bigger they were, the faster they will be.
This use of parentheses to store a pattern in memory is called a capture group.
capture group
Every time a capture group is used (i.e., parentheses surround a pattern), the re-
sulting match is stored in a numbered register. If you match two different sets of
register
parentheses, \ means whatever matched the second capture group. Thus
/the (.*)er they (.*), the \er we \/
will match the faster they ran, the faster we ran but not the faster they ran, the faster
we ate. Similarly, the third capture group is stored in \, the fourth is \, and so on.
Parentheses thus have a double function in regular expressions; they are used
to group terms for specifying the order in which operators should apply, and they
are used to capture something in a register. Occasionally we might want to use
parentheses for grouping, but don’t want to capture the resulting pattern in a register.
In that case we use a non-capturing group, which is speciﬁed by putting the special
non-capturing
group
commands ?: after the open parenthesis, in the form (?: pattern ).
/(?:some|a few) (people|cats) like some \/
will match some cats like some cats but not some cats like some some.
Substitutions and capture groups are very useful in implementing simple chat-
bots like ELIZA (Weizenbaum, ). Recall that ELIZA simulates a Rogerian
psychologist by carrying on conversations like the following:

WORDS
User:
Men are all alike.
ELIZA: IN WHAT WAY
User:
They’re always bugging us about something or other.
ELIZA: CAN YOU THINK OF A SPECIFIC EXAMPLE
User:
Well, my boyfriend made me come here.
ELIZA: YOUR BOYFRIEND MADE YOU COME HERE
User:
He says I’m depressed much of the time.
ELIZA: I AM SORRY TO HEAR YOU ARE DEPRESSED
ELIZA works by having a series or cascade of regular expression substitutions
each of which matches and changes some part of the input lines. After the input
is uppercased, substitutions change all instances of MY to YOUR, and I’M to YOU
ARE, and so on. That way when ELIZA repeats back part of the user utterance, it
will seem to be referring correctly to the user. The next set of substitutions matches
and replaces other patterns in the input. Here are some examples:
s/.* YOU ARE (depressed|sad) .*/I AM SORRY TO HEAR YOU ARE \/
s/.* YOU ARE (depressed|sad) .*/WHY DO YOU THINK YOU ARE \/
s/.* all .*/IN WHAT WAY/
s/.* always .*/CAN YOU THINK OF A SPECIFIC EXAMPLE/
Since multiple substitutions can apply to a given input, substitutions are assigned
a rank and applied in order. Creating patterns is the topic of Exercise ., and we
return to the details of the ELIZA architecture in Chapter .
Lookahead Assertions
Finally, there will be times when we need to predict the future: look ahead in the
text to see if some pattern matches, but not yet advance the pointer we always keep
to where we are in the text, so that we can then deal with the pattern if it occurs, but
if it doesn’t we can check for something else instead.
These lookahead assertions make use of the (? syntax that we saw in the previ-
lookahead
ous section for non-capture groups. The operator (?= pattern) is true if pattern
occurs, but is zero-width, i.e. the match pointer doesn’t advance. The operator
zero-width
(?! pattern) only returns true if a pattern does not match, but again is zero-width
and doesn’t advance the pointer. Negative lookahead is commonly used when we
are parsing some complex pattern but want to rule out a special case. For example
suppose we want to match, at the beginning of a line, any single word that doesn’t
start with “Volcano”. We can use negative lookahead to do this:
/ˆ(?!Volcano)[A-Za-z]+/
Words
Before we talk about processing words, we need to decide what counts as a word.
Let’s start by looking at one particular corpus (plural corpora), a computer-readable
corpus
corpora
collection of text or speech. For example the Brown corpus is a million-word col-
lection of samples from  written English texts from different genres (newspa-
per, ﬁction, non-ﬁction, academic, etc.), assembled at Brown University in –
(Kuˇcera and Francis, ). How many words are in the following Brown sentence?

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
He stepped out into the hall, was delighted to encounter a water brother.
This sentence has  words if we don’t count punctuation marks as words,
if we count punctuation. Whether we treat period (“.”), comma (“,”), and so on as
words depends on the task. Punctuation is critical for ﬁnding boundaries of things
(commas, periods, colons) and for identifying some aspects of meaning (question
marks, exclamation marks, quotation marks). For some tasks, like part-of-speech
tagging or parsing or speech synthesis, we sometimes treat punctuation marks as if
they were separate words.
The Switchboard corpus of American English telephone conversations between
strangers was collected in the early s; it contains  conversations averaging
minutes each, totaling  hours of speech and about  million words (Godfrey
et al., ). Such corpora of spoken language introduce other complications with
regard to deﬁning words. Let’s look at one utterance from Switchboard; an utter-
ance is the spoken correlate of a sentence:
utterance
I do uh main- mainly business data processing
This utterance has two kinds of disﬂuencies. The broken-off word main- is
disﬂuency
called a fragment. Words like uh and um are called ﬁllers or ﬁlled pauses. Should
fragment
ﬁlled pause
we consider these to be words? Again, it depends on the application. If we are
building a speech transcription system, we might want to eventually strip out the
disﬂuencies.
But we also sometimes keep disﬂuencies around. Disﬂuencies like uh or um
are actually helpful in speech recognition in predicting the upcoming word, because
they may signal that the speaker is restarting the clause or idea, and so for speech
recognition they are treated as regular words. Because people use different disﬂu-
encies they can also be a cue to speaker identiﬁcation. In fact Clark and Fox Tree
() showed that uh and um have different meanings. What do you think they are?
Perhaps most important, in thinking about what is a word, we need to distinguish
two ways of talking about words that will be useful throughout the book. Word types
word type
are the number of distinct words in a corpus; if the set of words in the vocabulary
is V, the number of types is the vocabulary size |V|. Word instances are the total
word instance
number N of running words.
If we ignore punctuation, the following Brown sentence has  instances and
types:
They picnicked by the pool, then lay back on the grass and looked at the stars.
We still have decisions to make! For example, should we consider a capitalized
string (like They) and one that is uncapitalized (like they) to be the same word type?
The answer is that it depends on the task! They and they might be lumped together
as the same type in some tasks, like speech recognition, where we might just care
about getting the words in order and don’t care about the formatting, while for other
tasks, such as deciding whether a particular word is a noun or verb (part-of-speech
tagging) or whether a word is a name of a person or location (named-entity tag-
ging), capitalization is a useful feature and is retained. Sometimes we keep around
two versions of a particular NLP model, one with capitalization and one without
capitalization.
How many words are there in English? When we speak about the number of
words in the language, we are generally referring to word types. Fig. . shows
the rough numbers of types and instances computed from some English corpora.
In earlier tradition, and occasionally still, you might see word instances referred to as word tokens, but
we now try to reserve the word token instead to mean the output of word tokenization algorithms.

CORPORA
Corpus
Instances = N Types = |V|
Shakespeare
thousand  thousand
Brown corpus
million  thousand
Switchboard telephone conversations
. million  thousand
COCA
million
million
Google n-grams
trillion
million
Figure .
Rough numbers of wordform types and instances for some English language
corpora. The largest, the Google n-grams corpus, contains  million types, but this count
only includes types appearing  or more times, so the true number would be much larger.
The larger the corpora we look at, the more word types we ﬁnd, and in fact this
relationship between the number of types |V| and number of instances N is called
Herdan’s Law (Herdan, ) or Heaps’ Law (Heaps, ) after its discoverers
Herdan’s Law
Heaps’ Law
(in linguistics and information retrieval respectively). It is shown in Eq. ., where
k and β are positive constants, and  < β < .
|V| = kNβ
The value of β depends on the corpus size and the genre, but at least for the large
corpora in Fig. ., β ranges from . to .. Roughly then we can say that the
vocabulary size for a text goes up signiﬁcantly faster than the square root of its
length in words.
It’s sometimes useful to make a further distinction. Consider inﬂected forms
like cats versus cat. We say these two words are different wordforms but have the
same lemma. A lemma is a set of lexical forms having the same stem, the same
lemma
major part-of-speech, and the same word sense. The wordform is the full inﬂected
wordform
or derived form of the word. The two wordforms cat and cats thus have the same
lemma, which we can represent as cat.
For morphologically complex languages like Arabic, we often need to deal with
lemmatization. For most tasks in English, however, wordforms are sufﬁcient, and
when we talk about words in this book we almost always mean wordsforms (al-
though we will discuss basic algorithms for lemmatization and the related task of
stemming below in Section .). One of the situations even in English where we
talk about lemmas is when we measure the number of words in a dictionary. Dictio-
nary entries or boldface forms are a very rough approximation to (an upper bound
on) the number of lemmas (since some lemmas have multiple boldface forms). The
edition of the Oxford English Dictionary had , entries.
Finally, we should note that in practice, for many NLP applications (for example
for neural language modeling) we don’t actually use words as our internal unit of
representation at all! We instead tokenize the input strings into tokens, which can
be words but can also be only parts of words. We’ll return to this tokenization
question when we introduce the BPE algorithm in Section ...
Corpora
Words don’t appear out of nowhere. Any particular piece of text that we study
is produced by one or more speciﬁc speakers or writers, in a speciﬁc dialect of a
speciﬁc language, at a speciﬁc time, in a speciﬁc place, for a speciﬁc function.
Perhaps the most important dimension of variation is the language. NLP algo-
rithms are most useful when they apply across many languages. The world has
CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
languages at the time of this writing, according to the online Ethnologue catalog
(Simons and Fennig, ). It is important to test algorithms on more than one lan-
guage, and particularly on languages with different properties; by contrast there is
an unfortunate current tendency for NLP algorithms to be developed or tested just
on English (Bender, ). Even when algorithms are developed beyond English,
they tend to be developed for the ofﬁcial languages of large industrialized nations
(Chinese, Spanish, Japanese, German etc.), but we don’t want to limit tools to just
these few languages. Furthermore, most languages also have multiple varieties, of-
ten spoken in different regions or by different social groups. Thus, for example,
if we’re processing text that uses features of African American English (AAE) or
AAE
African American Vernacular English (AAVE)—the variations of English used by
millions of people in African American communities (King )—we must use
NLP tools that function with features of those varieties. Twitter posts might use fea-
tures often used by speakers of African American English, such as constructions like
iont (I don’t in Mainstream American English (MAE)), or talmbout corresponding
MAE
to MAE talking about, both examples that inﬂuence word segmentation (Blodgett
et al. , Jones ).
It’s also quite common for speakers or writers to use multiple languages in a
single communicative act, a phenomenon called code switching. Code switching
code switching
is enormously common across the world; here are examples showing Spanish and
(transliterated) Hindi code switching with English (Solorio et al. , Jurgens et al.
Por primera vez veo a @username actually being hateful! it was beautiful:)
[For the ﬁrst time I get to see @username actually being hateful! it was
beautiful:) ]
dost tha or ra- hega ... dont wory ... but dherya rakhe
[“he was and will remain a friend ... don’t worry ... but have faith”]
Another dimension of variation is the genre. The text that our algorithms must
process might come from newswire, ﬁction or non-ﬁction books, scientiﬁc articles,
Wikipedia, or religious texts. It might come from spoken genres like telephone
conversations, business meetings, police body-worn cameras, medical interviews,
or transcripts of television shows or movies. It might come from work situations
like doctors’ notes, legal text, or parliamentary or congressional proceedings.
Text also reﬂects the demographic characteristics of the writer (or speaker): their
age, gender, race, socioeconomic class can all inﬂuence the linguistic properties of
the text we are processing.
And ﬁnally, time matters too. Language changes over time, and for some lan-
guages we have good corpora of texts from different historical periods.
Because language is so situated, when developing computational models for lan-
guage processing from a corpus, it’s important to consider who produced the lan-
guage, in what context, for what purpose. How can a user of a dataset know all these
details? The best way is for the corpus creator to build a datasheet (Gebru et al.,
datasheet
) or data statement (Bender et al., ) for each corpus. A datasheet speciﬁes
properties of a dataset like:
Motivation: Why was the corpus collected, by whom, and who funded it?
Situation: When and in what situation was the text written/spoken? For example,
was there a task? Was the language originally spoken conversation, edited
text, social media communication, monologue vs. dialogue?
Language variety: What language (including dialect/region) was the corpus in?

SIMPLE UNIX TOOLS FOR WORD TOKENIZATION
Speaker demographics: What was, e.g., the age or gender of the text’s authors?
Collection process: How big is the data? If it is a subsample how was it sampled?
Was the data collected with consent? How was the data pre-processed, and
what metadata is available?
Annotation process: What are the annotations, what are the demographics of the
annotators, how were they trained, how was the data annotated?
Distribution: Are there copyright or other intellectual property restrictions?
Simple Unix Tools for Word Tokenization
Before almost any natural language processing of a text, the text has to be normal-
ized, a task called text normalization. At least three tasks are commonly applied as
text
normalization
part of any normalization process:
. Tokenizing (segmenting) words
. Normalizing word formats
. Segmenting sentences
In the next sections we walk through each of these tasks, but we’ll ﬁrst start with
an easy, if somewhat naive version of word tokenization and normalization (and fre-
quency computation) that can be accomplished for English solely in a single UNIX
command-line, inspired by Church (). We’ll make use of some Unix com-
mands: tr, used to systematically change particular characters in the input; sort,
which sorts input lines in alphabetical order; and uniq, which collapses and counts
adjacent identical lines.
For example let’s begin with the ‘complete words’ of Shakespeare in one ﬁle,
sh.txt. We can use tr to tokenize the words by changing every sequence of non-
alphabetic characters to a newline (’A-Za-z’ means alphabetic and the -c option
complements to non-alphabet, so together they mean to change every non-alphabetic
character into a newline. The -s (‘squeeze’) option is used to replace the result
of multiple consecutive changes into a single output, so a series of non-alphabetic
characters in a row would all be ‘squeezed’ into a single newline):
tr -sc ’A-Za-z’ ’\n’ < sh.txt
The output of this command will be:
THE
SONNETS
by
William
Shakespeare
From
fairest
creatures
We
Now that there is one word per line, we can sort the lines, and pass them to uniq
-c which will collapse and count them:
tr -sc ’A-Za-z’ ’\n’ < sh.txt | sort | uniq -c

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
with the following output:
AARON
ABBESS
Aaron
Abate
Abates
Abbess
Abbey
Abbot
Alternatively, we can collapse all the upper case to lower case:
tr -sc ’A-Za-z’ ’\n’ < sh.txt | tr A-Z a-z | sort | uniq -c
whose output is
aaron
abaissiez
abandon
abandoned
abase
abash
abate
abated
abatement
Now we can sort again to ﬁnd the frequent words. The -n option to sort means
to sort numerically rather than alphabetically, and the -r option means to sort in
reverse order (highest-to-lowest):
tr -sc ’A-Za-z’ ’\n’ < sh.txt | tr A-Z a-z | sort | uniq -c | sort -n -r
The results show that the most frequent words in Shakespeare, as in any other
corpus, are the short function words like articles, pronouns, prepositions:
the
and
to
of
you
my
that
in
Unix tools of this sort can be very handy in building quick word count statistics
for any corpus in English. While in some versions of Unix these command-line tools
also correctly handle Unicode characters and so can be used for many languages,
in general for handling most languages outside English we use more sophisticated
tokenization algorithms.

WORD TOKENIZATION
Word Tokenization
The simple UNIX tools above were ﬁne for getting rough word statistics but more
sophisticated algorithms are generally necessary for tokenization, the task of seg-
tokenization
menting running text into words. There are roughly two classes of tokenization
algorithms. In top-down tokenization, we deﬁne a standard and implement rules
to implement that kind of tokenization. In bottom-up tokenization, we use simple
statistics of letter sequences to break up words into subword tokens.
Top-down (rule-based) tokenization
While the Unix command sequence just removed all the numbers and punctuation,
for most NLP applications we’ll need to keep these in our tokenization. We often
want to break off punctuation as a separate token; commas are a useful piece of infor-
mation for parsers, periods help indicate sentence boundaries. But we’ll often want
to keep the punctuation that occurs word internally, in examples like m.p.h., Ph.D.,
AT&T, and cap’n. Special characters and numbers will need to be kept in prices
($.) and dates (//); we don’t want to segment that price into separate
tokens of “” and “”. And there are URLs (https://www.stanford.edu),
Twitter hashtags (#nlproc), or email addresses (someone@cs.colorado.edu).
Number expressions introduce other complications as well; while commas nor-
mally appear at word boundaries, commas are used inside numbers in English, every
three digits: ,.. Languages, and hence tokenization requirements, differ
on this; many continental European languages like Spanish, French, and German, by
contrast, use a comma to mark the decimal point, and spaces (or sometimes periods)
where English puts commas, for example,  ,.
A tokenizer can also be used to expand clitic contractions that are marked by
clitic
apostrophes, for example, converting what’re to the two tokens what are, and
we’re to we are. A clitic is a part of a word that can’t stand on its own, and can only
occur when it is attached to another word. Some such contractions occur in other
alphabetic languages, including articles and pronouns in French (j’ai, l’homme).
Depending on the application, tokenization algorithms may also tokenize mul-
tiword expressions like New York or rock ’n’ roll as a single token, which re-
quires a multiword expression dictionary of some sort. Tokenization is thus inti-
mately tied up with named entity recognition, the task of detecting names, dates,
and organizations (Chapter ).
One commonly used tokenization standard is known as the Penn Treebank to-
kenization standard, used for the parsed corpora (treebanks) released by the Lin-
Penn Treebank
tokenization
guistic Data Consortium (LDC), the source of many useful datasets. This standard
separates out clitics (doesn’t becomes does plus n’t), keeps hyphenated words to-
gether, and separates out all punctuation (to save space we’re showing visible spaces
‘ ’ between tokens, although newlines is a more common output):
Input:
"The San Francisco-based restaurant," they said,
"doesn’t charge $".
Output: " The San Francisco-based restaurant , " they said ,
" does n’t charge $  " .
In practice, since tokenization needs to be run before any other language process-
ing, it needs to be very fast. The standard method for tokenization is therefore to use
deterministic algorithms based on regular expressions compiled into very efﬁcient

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
ﬁnite state automata. For example, Fig. . shows an example of a basic regular
expression that can be used to tokenize English with the nltk.regexp tokenize
function of the Python-based Natural Language Toolkit (NLTK) (Bird et al. ;
https://www.nltk.org).
>>> text = ’That U.S.A. poster-print costs $....’
>>> pattern = r’’’(?x)
# set flag to allow verbose regexps
(?:[A-Z]\.)+
# abbreviations, e.g. U.S.A.
| \w+(?:-\w+)*
# words with optional internal hyphens
| \$?\d+(?:\.\d+)?%?
# currency, percentages, e.g. $., %
| \.\.\.
# ellipsis
| [][.,;"’?():_‘-]
# these are separate tokens; includes ], [
... ’’’
>>> nltk.regexp_tokenize(text, pattern)
[’That’, ’U.S.A.’, ’poster-print’, ’costs’, ’$.’, ’...’]
Figure .
A Python trace of regular expression tokenization in the NLTK Python-based
natural language processing toolkit (Bird et al., ), commented for readability; the (?x)
verbose ﬂag tells Python to strip comments and whitespace. Figure from Chapter  of Bird
et al. ().
Carefully designed deterministic algorithms can deal with the ambiguities that
arise, such as the fact that the apostrophe needs to be tokenized differently when used
as a genitive marker (as in the book’s cover), a quotative as in ‘The other class’, she
said, or in clitics like they’re.
Word tokenization is more complex in languages like written Chinese, Japanese,
and Thai, which do not use spaces to mark potential word-boundaries. In Chinese,
for example, words are composed of characters (called hanzi in Chinese). Each
hanzi
character generally represents a single unit of meaning (called a morpheme) and is
pronounceable as a single syllable. Words are about . characters long on average.
But deciding what counts as a word in Chinese is complex. For example, consider
the following sentence:
姚明进入总决赛
y´ao m´ıng j`ın r`u zˇong ju´e s`ai
“Yao Ming reaches the ﬁnals”
As Chen et al. (b) point out, this could be treated as  words (‘Chinese Tree-
bank’ segmentation):
姚明
YaoMing
进入
reaches
总决赛
ﬁnals
or as  words (‘Peking University’ segmentation):
Yao
Ming
进入
reaches
overall
决赛
ﬁnals
Finally, it is possible in Chinese simply to ignore words altogether and use characters
as the basic elements, treating the sentence as a series of  characters:
Yao
Ming
enter
enter
overall
decision
game
In fact, for most Chinese NLP tasks it turns out to work better to take characters
rather than words as input, since characters are at a reasonable semantic level for
most applications, and since most word standards, by contrast, result in a huge vo-
cabulary with large numbers of very rare words (Li et al., b).

WORD TOKENIZATION
However, for Japanese and Thai the character is too small a unit, and so algo-
rithms for word segmentation are required. These can also be useful for Chinese
word
segmentation
in the rare situations where word rather than character boundaries are required. The
standard segmentation algorithms for these languages use neural sequence mod-
els trained via supervised machine learning on hand-segmented training sets; we’ll
introduce sequence models in Chapter  and Chapter .
Byte-Pair Encoding: A Bottom-up Tokenization Algorithm
There is a third option to tokenizing text, one that is most commonly used by large
language models. Instead of deﬁning tokens as words (whether delimited by spaces
or more complex algorithms), or as characters (as in Chinese), we can use our data to
automatically tell us what the tokens should be. This is especially useful in dealing
with unknown words, an important problem in language processing. As we will
see in the next chapter, NLP algorithms often learn some facts about language from
one corpus (a training corpus) and then use these facts to make decisions about a
separate test corpus and its language. Thus if our training corpus contains, say the
words low, new, newer, but not lower, then if the word lower appears in our test
corpus, our system will not know what to do with it.
To deal with this unknown word problem, modern tokenizers automatically in-
duce sets of tokens that include tokens smaller than words, called subwords. Sub-
subwords
words can be arbitrary substrings, or they can be meaning-bearing units like the
morphemes -est or -er. (A morpheme is the smallest meaning-bearing unit of a lan-
guage; for example the word unlikeliest has the morphemes un-, likely, and -est.)
In modern tokenization schemes, most tokens are words, but some tokens are fre-
quently occurring morphemes or other subwords like -er. Every unseen word like
lower can thus be represented by some sequence of known subword units, such as
low and er, or even as a sequence of individual letters if necessary.
Most tokenization schemes have two parts: a token learner, and a token seg-
menter. The token learner takes a raw training corpus (sometimes roughly pre-
separated into words, for example by whitespace) and induces a vocabulary, a set
of tokens. The token segmenter takes a raw test sentence and segments it into the
tokens in the vocabulary. Two algorithms are widely used: byte-pair encoding
(Sennrich et al., ), and unigram language modeling (Kudo, ), There is
also a SentencePiece library that includes implementations of both of these (Kudo
and Richardson, a), and people often use the name SentencePiece to simply
mean unigram language modeling tokenization.
In this section we introduce the simplest of the three, the byte-pair encoding or
BPE algorithm (Sennrich et al., ); see Fig. .. The BPE token learner begins
BPE
with a vocabulary that is just the set of all individual characters. It then examines the
training corpus, chooses the two symbols that are most frequently adjacent (say ‘A’,
‘B’), adds a new merged symbol ‘AB’ to the vocabulary, and replaces every adjacent
’A’ ’B’ in the corpus with the new ‘AB’. It continues to count and merge, creating
new longer and longer character strings, until k merges have been done creating
k novel tokens; k is thus a parameter of the algorithm. The resulting vocabulary
consists of the original set of characters plus k new symbols.
The algorithm is usually run inside words (not merging across word boundaries),
so the input corpus is ﬁrst white-space-separated to give a set of strings, each corre-
sponding to the characters of a word, plus a special end-of-word symbol
, and its
counts. Let’s see its operation on the following tiny input corpus of  word tokens
with counts for each word (the word low appears  times, the word newer  times,

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
and so on), which would have a starting vocabulary of  letters:
corpus
vocabulary
l o w
, d, e, i, l, n, o, r, s, t, w
l o w e s t
n e w e r
w i d e r
n e w
The BPE algorithm ﬁrst counts all pairs of adjacent symbols: the most frequent
is the pair e r because it occurs in newer (frequency of ) and wider (frequency of
) for a total of  occurrences. We then merge these symbols, treating er as one
symbol, and count again:
corpus
vocabulary
l o w
, d, e, i, l, n, o, r, s, t, w, er
l o w e s t
n e w er
w i d er
n e w
Now the most frequent pair is er
, which we merge; our system has learned
that there should be a token for word-ﬁnal er, represented as er :
corpus
vocabulary
l o w
, d, e, i, l, n, o, r, s, t, w, er, er
l o w e s t
n e w er
w i d er
n e w
Next n e (total count of ) get merged to ne:
corpus
vocabulary
l o w
, d, e, i, l, n, o, r, s, t, w, er, er , ne
l o w e s t
ne w er
w i d er
ne w
If we continue, the next merges are:
merge
current vocabulary
(ne, w)
, d, e, i, l, n, o, r, s, t, w, er, er , ne, new
(l, o)
, d, e, i, l, n, o, r, s, t, w, er, er , ne, new, lo
(lo, w)
, d, e, i, l, n, o, r, s, t, w, er, er , ne, new, lo, low
(new, er )
, d, e, i, l, n, o, r, s, t, w, er, er , ne, new, lo, low, newer
(low,
, d, e, i, l, n, o, r, s, t, w, er, er , ne, new, lo, low, newer , low
Once we’ve learned our vocabulary, the token segmenter is used to tokenize a
test sentence. The token segmenter just runs on the test data the merges we have
learned from the training data, greedily, in the order we learned them. (Thus the
frequencies in the test data don’t play a role, just the frequencies in the training
data). So ﬁrst we segment each test sentence word into characters. Then we apply
the ﬁrst rule: replace every instance of e r in the test corpus with er, and then the
second rule: replace every instance of er
in the test corpus with er , and so on.
Note that there can be ties; we could have instead chosen to merge r
ﬁrst, since that also has a
frequency of .

WORD NORMALIZATION, LEMMATIZATION AND STEMMING
function BYTE-PAIR ENCODING(strings C, number of merges k) returns vocab V
V←all unique characters in C
# initial set of tokens is characters
for i =  to k do
# merge tokens k times
tL, tR ←Most frequent pair of adjacent tokens in C
tNEW ←tL + tR
# make new token by concatenating
V←V + tNEW
# update the vocabulary
Replace each occurrence of tL, tR in C with tNEW
# and update the corpus
return V
Figure .
The token learner part of the BPE algorithm for taking a corpus broken up
into individual characters or bytes, and learning a vocabulary by iteratively merging tokens.
Figure adapted from Bostrom and Durrett ().
By the end, if the test corpus contained the character sequence n e w e r
, it
would be tokenized as a full word. But the characters of a new (unknown) word like
l o w e r
would be merged into the two tokens low er .
Of course in real settings BPE is run with many thousands of merges on a very
large input corpus. The result is that most words will be represented as full symbols,
and only the very rare words (and unknown words) will have to be represented by
their parts.
Word Normalization, Lemmatization and Stemming
Word normalization is the task of putting words/tokens in a standard format. The
normalization
simplest case of word normalization is case folding. Mapping everything to lower
case folding
case means that Woodchuck and woodchuck are represented identically, which is
very helpful for generalization in many tasks, such as information retrieval or speech
recognition. For sentiment analysis and other text classiﬁcation tasks, information
extraction, and machine translation, by contrast, case can be quite helpful and case
folding is generally not done. This is because maintaining the difference between,
for example, US the country and us the pronoun can outweigh the advantage in
generalization that case folding would have provided for other words.
Systems that use BPE or other kinds of bottom-up tokenization may do no fur-
ther word normalization. In other NLP systems, we may want to do further nor-
malizations, like choosing a single normal form for words with multiple forms like
USA and US or uh-huh and uhhuh. This standardization may be valuable, despite
the spelling information that is lost in the normalization process. For information
retrieval or information extraction about the US, we might want to see information
from documents whether they mention the US or the USA.
Lemmatization
For other natural language processing situations we also want two morphologically
different forms of a word to behave similarly. For example in web search, someone
may type the string woodchucks but a useful system might want to also return pages
that mention woodchuck with no s. This is especially common in morphologically
complex languages like Polish, where for example the word Warsaw has different
endings when it is the subject (Warszawa), or after a preposition like “in Warsaw” (w

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
Warszawie), or “to Warsaw” (do Warszawy), and so on. Lemmatization is the task
lemmatization
of determining that two words have the same root, despite their surface differences.
The words am, are, and is have the shared lemma be; the words dinner and dinners
both have the lemma dinner. Lemmatizing each of these forms to the same lemma
will let us ﬁnd all mentions of words in Polish like Warsaw. The lemmatized form
of a sentence like He is reading detective stories would thus be He be read detective
story.
How is lemmatization done? The most sophisticated methods for lemmatization
involve complete morphological parsing of the word. Morphology is the study of
the way words are built up from smaller meaning-bearing units called morphemes.
morpheme
Two broad classes of morphemes can be distinguished: stems—the central mor-
stem
pheme of the word, supplying the main meaning—and afﬁxes—adding “additional”
afﬁx
meanings of various kinds. So, for example, the word fox consists of one morpheme
(the morpheme fox) and the word cats consists of two: the morpheme cat and the
morpheme -s. A morphological parser takes a word like cats and parses it into the
two morphemes cat and s, or parses a Spanish word like amaren (‘if in the future
they would love’) into the morpheme amar ‘to love’, and the morphological features
PL and future subjunctive.
Stemming: The Porter Stemmer
Lemmatization algorithms can be complex. For this reason we sometimes make
use of a simpler but cruder method, which mainly consists of chopping off word-
ﬁnal afﬁxes. This naive version of morphological analysis is called stemming. For
stemming
example, the Porter stemmer, a widely used stemming algorithm (Porter, ),
Porter stemmer
when applied to the following paragraph:
This was not the map we found in Billy Bones’s chest, but
an accurate copy, complete in all things-names and heights
and soundings-with the single exception of the red crosses
and the written notes.
produces the following stemmed output:
Thi wa not the map we found in Billi Bone s chest but an
accur copi complet in all thing name and height and sound
with the singl except of the red cross and the written note
The algorithm is based on series of rewrite rules run in series: the output of each
pass is fed as input to the next pass. Here are some sample rules (more details can
be found at https://tartarus.org/martin/PorterStemmer/):
ATIONAL → ATE (e.g., relational → relate)
ING → ϵ
if the stem contains a vowel (e.g., motoring → motor)
SSES → SS
(e.g., grasses → grass)
Simple stemmers can be useful in cases where we need to collapse across differ-
ent variants of the same lemma. Nonetheless, they do tend to commit errors of both
over- and under-generalizing, as shown in the table below (Krovetz, ):
Errors of Commission
Errors of Omission
organization organ
European Europe
doing
doe
analyzes
analysis
numerical
numerous
noisy
noise
policy
police
sparsity
sparse

SENTENCE SEGMENTATION
Sentence Segmentation
Sentence segmentation is another important step in text processing. The most use-
sentence
segmentation
ful cues for segmenting a text into sentences are punctuation, like periods, question
marks, and exclamation points. Question marks and exclamation points are rela-
tively unambiguous markers of sentence boundaries. Periods, on the other hand, are
more ambiguous. The period character “.” is ambiguous between a sentence bound-
ary marker and a marker of abbreviations like Mr. or Inc. The previous sentence that
you just read showed an even more complex case of this ambiguity, in which the ﬁnal
period of Inc. marked both an abbreviation and the sentence boundary marker. For
this reason, sentence tokenization and word tokenization may be addressed jointly.
In general, sentence tokenization methods work by ﬁrst deciding (based on rules
or machine learning) whether a period is part of the word or is a sentence-boundary
marker. An abbreviation dictionary can help determine whether the period is part
of a commonly used abbreviation; the dictionaries can be hand-built or machine-
learned (Kiss and Strunk, ), as can the ﬁnal sentence splitter. In the Stanford
CoreNLP toolkit (Manning et al., ), for example sentence splitting is rule-based,
a deterministic consequence of tokenization; a sentence ends when a sentence-ending
punctuation (., !, or ?) is not already grouped with other characters into a token (such
as for an abbreviation or number), optionally followed by additional ﬁnal quotes or
brackets.
Minimum Edit Distance
Much of natural language processing is concerned with measuring how similar two
strings are.
For example in spelling correction, the user typed some erroneous
string—let’s say graffe–and we want to know what the user meant. The user prob-
ably intended a word that is similar to graffe. Among candidate similar words,
the word giraffe, which differs by only one letter from graffe, seems intuitively
to be more similar than, say grail or graf, which differ in more letters. Another
example comes from coreference, the task of deciding whether two strings such as
the following refer to the same entity:
Stanford President Marc Tessier-Lavigne
Stanford University President Marc Tessier-Lavigne
Again, the fact that these two strings are very similar (differing by only one word)
seems like useful evidence for deciding that they might be coreferent.
Edit distance gives us a way to quantify both of these intuitions about string sim-
ilarity. More formally, the minimum edit distance between two strings is deﬁned
minimum edit
distance
as the minimum number of editing operations (operations like insertion, deletion,
substitution) needed to transform one string into another.
The gap between intention and execution, for example, is  (delete an i, substi-
tute e for n, substitute x for t, insert c, substitute u for n). It’s much easier to see
this by looking at the most important visualization for string distances, an alignment
alignment
between the two strings, shown in Fig. .. Given two sequences, an alignment is
a correspondence between substrings of the two sequences. Thus, we say I aligns
with the empty string, N with E, and so on. Beneath the aligned strings is another
representation; a series of symbols expressing an operation list for converting the

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
top string into the bottom string: d for deletion, s for substitution, i for insertion.
I N T E * N T I O N
| | | | | | | | | |
* E X E C U T I O N
d s s
i s
Figure .
Representing the minimum edit distance between two strings as an alignment.
The ﬁnal row gives the operation list for converting the top string into the bottom string: d for
deletion, s for substitution, i for insertion.
We can also assign a particular cost or weight to each of these operations. The
Levenshtein distance between two sequences is the simplest weighting factor in
which each of the three operations has a cost of  (Levenshtein, )—we assume
that the substitution of a letter for itself, for example, t for t, has zero cost. The Lev-
enshtein distance between intention and execution is . Levenshtein also proposed
an alternative version of his metric in which each insertion or deletion has a cost of
and substitutions are not allowed. (This is equivalent to allowing substitution, but
giving each substitution a cost of  since any substitution can be represented by one
insertion and one deletion). Using this version, the Levenshtein distance between
intention and execution is .
The Minimum Edit Distance Algorithm
How do we ﬁnd the minimum edit distance? We can think of this as a search task, in
which we are searching for the shortest path—a sequence of edits—from one string
to another.
i n t e n t i o n
del
ins
subst
n t e n t i o n
i n t e c n t i o n
i n x e n t i o n
Figure .
Finding the edit distance viewed as a search problem
The space of all possible edits is enormous, so we can’t search naively. However,
lots of distinct edit paths will end up in the same state (string), so rather than recom-
puting all those paths, we could just remember the shortest path to a state each time
we saw it. We can do this by using dynamic programming. Dynamic program-
dynamic
programming
ming is the name for a class of algorithms, ﬁrst introduced by Bellman (), that
apply a table-driven method to solve problems by combining solutions to subprob-
lems. Some of the most commonly used algorithms in natural language processing
make use of dynamic programming, such as the Viterbi algorithm (Chapter ) and
the CKY algorithm for parsing (Chapter ).
The intuition of a dynamic programming problem is that a large problem can
be solved by properly combining the solutions to various subproblems. Consider
the shortest path of transformed words that represents the minimum edit distance
between the strings intention and execution shown in Fig. ..
Imagine some string (perhaps it is exention) that is in this optimal path (whatever
it is). The intuition of dynamic programming is that if exention is in the optimal

MINIMUM EDIT DISTANCE
i n t e n t i o n
delete i
n t e n t i o n
substitute n by e
e t e n t i o n
substitute t by x
e x e n t i o n
insert u
e x e n u t i o n
substitute n by c
e x e c u t i o n
Figure .
Path from intention to execution.
operation list, then the optimal sequence must also include the optimal path from
intention to exention. Why? If there were a shorter path from intention to exention,
then we could use it instead, resulting in a shorter overall path, and the optimal
sequence wouldn’t be optimal, thus leading to a contradiction.
The minimum edit distance algorithm was named by Wagner and Fischer
minimum edit
distance
algorithm
() but independently discovered by many people (see the Historical Notes sec-
tion of Chapter ).
Let’s ﬁrst deﬁne the minimum edit distance between two strings. Given two
strings, the source string X of length n, and target string Y of length m, we’ll deﬁne
D[i, j] as the edit distance between X[..i] and Y[.. j], i.e., the ﬁrst i characters of X
and the ﬁrst j characters of Y. The edit distance between X and Y is thus D[n,m].
We’ll use dynamic programming to compute D[n,m] bottom up, combining so-
lutions to subproblems. In the base case, with a source substring of length i but an
empty target string, going from i characters to  requires i deletes. With a target
substring of length j but an empty source going from  characters to j characters
requires j inserts. Having computed D[i, j] for small i, j we then compute larger
D[i, j] based on previously computed smaller values. The value of D[i, j] is com-
puted by taking the minimum of the three possible paths through the matrix which
arrive there:
D[i, j] = min
D[i−, j]+del-cost(source[i])
D[i, j −]+ins-cost(target[j])
D[i−, j −]+sub-cost(source[i],target[j])
If we assume the version of Levenshtein distance in which the insertions and dele-
tions each have a cost of  (ins-cost() = del-cost() = ), and substitutions have a
cost of  (except substitution of identical letters have zero cost), the computation for
D[i, j] becomes:
D[i, j] = min
D[i−, j]+
D[i, j −]+

D[i−, j −]+
; if source[i] ̸= target[j]
; if source[i] = target[j]

The algorithm is summarized in Fig. .; Fig. . shows the results of applying
the algorithm to the distance between intention and execution with the version of
Levenshtein in Eq. ..
Alignment
Knowing the minimum edit distance is useful for algorithms like ﬁnd-
ing potential spelling error corrections. But the edit distance algorithm is important
in another way; with a small change, it can also provide the minimum cost align-
ment between two strings. Aligning two strings is useful throughout speech and

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
function MIN-EDIT-DISTANCE(source, target) returns min-distance
n←LENGTH(source)
m←LENGTH(target)
Create a distance matrix D[n+,m+]
# Initialization: the zeroth row and column is the distance from the empty string
D[,] =
for each row i from  to n do
D[i,]←D[i-,] + del-cost(source[i])
for each column j from  to m do
D[,j]←D[,j-] + ins-cost(target[j])
# Recurrence relation:
for each row i from  to n do
for each column j from  to m do
D[i,j]←MIN( D[i−, j] + del-cost(source[i]),
D[i−, j−] + sub-cost(source[i],target[j]),
D[i, j−] + ins-cost(target[j]))
# Termination
return D[n,m]
Figure .
The minimum edit distance algorithm, an example of the class of dynamic
programming algorithms. The various costs can either be ﬁxed (e.g., ∀x,ins-cost(x) = )
or can be speciﬁc to the letter (to model the fact that some letters are more likely to be in-
serted than others). We assume that there is no cost for substituting a letter for itself (i.e.,
sub-cost(x,x) = ).
Src\Tar
Figure .
Computation of minimum edit distance between intention and execution with
the algorithm of Fig. ., using Levenshtein distance with cost of  for insertions or dele-
tions,  for substitutions.
language processing. In speech recognition, minimum edit distance alignment is
used to compute the word error rate (Chapter ). Alignment plays a role in ma-
chine translation, in which sentences in a parallel corpus (a corpus with a text in two
languages) need to be matched to each other.
To extend the edit distance algorithm to produce an alignment, we can start by
visualizing an alignment as a path through the edit distance matrix. Figure .
shows this path with boldfaced cells. Each boldfaced cell represents an alignment
of a pair of letters in the two strings. If two boldfaced cells occur in the same row,
there will be an insertion in going from the source to the target; two boldfaced cells

SUMMARY
in the same column indicate a deletion.
Figure . also shows the intuition of how to compute this alignment path. The
computation proceeds in two steps. In the ﬁrst step, we augment the minimum edit
distance algorithm to store backpointers in each cell. The backpointer from a cell
points to the previous cell (or cells) that we came from in entering the current cell.
We’ve shown a schematic of these backpointers in Fig. .. Some cells have mul-
tiple backpointers because the minimum extension could have come from multiple
previous cells. In the second step, we perform a backtrace. In a backtrace, we start
backtrace
from the last cell (at the ﬁnal row and column), and follow the pointers back through
the dynamic programming matrix. Each complete path between the ﬁnal cell and the
initial cell is a minimum distance alignment. Exercise . asks you to modify the
minimum edit distance algorithm to store the pointers and compute the backtrace to
output an alignment.
↖←↑  ↖↑
←  ←↑
Figure .
When entering a value in each cell, we mark which of the three neighboring
cells we came from with up to three arrows. After the table is full we compute an alignment
(minimum edit path) by using a backtrace, starting at the  in the lower-right corner and
following the arrows back. The sequence of bold cells represents one possible minimum cost
alignment between the two strings. Diagram design after Gusﬁeld ().
While we worked our example with simple Levenshtein distance, the algorithm
in Fig. . allows arbitrary weights on the operations. For spelling correction, for
example, substitutions are more likely to happen between letters that are next to
each other on the keyboard. The Viterbi algorithm is a probabilistic extension of
minimum edit distance. Instead of computing the “minimum edit distance” between
two strings, Viterbi computes the “maximum probability alignment” of one string
with another. We’ll discuss this more in Chapter .
Summary
This chapter introduced a fundamental tool in language processing, the regular ex-
pression, and showed how to perform basic text normalization tasks including
word segmentation and normalization, sentence segmentation, and stemming.
We also introduced the important minimum edit distance algorithm for comparing
strings. Here’s a summary of the main points we covered about these ideas:
The regular expression language is a powerful tool for pattern-matching.
Basic operations in regular expressions include concatenation of symbols,
disjunction of symbols ([], |, and .), counters (*, +, and {n,m}), anchors

CHAPTER
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
(ˆ, $) and precedence operators ((,)).
Word tokenization and normalization are generally done by cascades of
simple regular expression substitutions or ﬁnite automata.
The Porter algorithm is a simple and efﬁcient way to do stemming, stripping
off afﬁxes. It does not have high accuracy but may be useful for some tasks.
The minimum edit distance between two strings is the minimum number of
operations it takes to edit one into the other. Minimum edit distance can be
computed by dynamic programming, which also results in an alignment of
the two strings.
Bibliographical and Historical Notes
Kleene ;  ﬁrst deﬁned regular expressions and the ﬁnite automaton, based
on the McCulloch-Pitts neuron. Ken Thompson was one of the ﬁrst to build regular
expressions compilers into editors for text searching (Thompson, ). His edi-
tor ed included a command “g/regular expression/p”, or Global Regular Expression
Print, which later became the Unix grep utility.
Text normalization algorithms have been applied since the beginning of the
ﬁeld. One of the earliest widely used stemmers was Lovins (). Stemming
was also applied early to the digital humanities, by Packard (), who built an
afﬁx-stripping morphological parser for Ancient Greek.
Currently a wide vari-
ety of code for tokenization and normalization is available, such as the Stanford
Tokenizer (https://nlp.stanford.edu/software/tokenizer.shtml) or spe-
cialized tokenizers for Twitter (O’Connor et al., ), or for sentiment (http:
//sentiment.christopherpotts.net/tokenizing.html). See Palmer ()
for a survey of text preprocessing. NLTK is an essential tool that offers both useful
Python libraries (https://www.nltk.org) and textbook descriptions (Bird et al.,
) of many algorithms including text normalization and corpus interfaces.
For more on Herdan’s law and Heaps’ Law, see Herdan (, p. ), Heaps
(), Egghe () and Baayen (); Yasseri et al. () discuss the relation-
ship with other measures of linguistic complexity. For more on edit distance, see the
excellent Gusﬁeld (). Our example measuring the edit distance from ‘intention’
to ‘execution’ was adapted from Kruskal (). There are various publicly avail-
able packages to compute edit distance, including Unix diff and the NIST sclite
program (NIST, ).
In his autobiography Bellman () explains how he originally came up with
the term dynamic programming:
“...The s were not good years for mathematical research. [the]
Secretary of Defense ...had a pathological fear and hatred of the word,
research...
I decided therefore to use the word, “programming”.
wanted to get across the idea that this was dynamic, this was multi-
stage... I thought, let’s ... take a word that has an absolutely precise
meaning, namely dynamic... it’s impossible to use the word, dynamic,
in a pejorative sense. Try thinking of some combination that will pos-
sibly give it a pejorative meaning. It’s impossible. Thus, I thought
dynamic programming was a good name. It was something not even a
Congressman could object to.”

EXERCISES
Exercises
Write regular expressions for the following languages.
. the set of all alphabetic strings;
. the set of all lower case alphabetic strings ending in a b;
. the set of all strings from the alphabet a,b such that each a is immedi-
ately preceded by and immediately followed by a b;
Write regular expressions for the following languages. By “word”, we mean
an alphabetic string separated from other words by whitespace, any relevant
punctuation, line breaks, and so forth.
. the set of all strings with two consecutive repeated words (e.g., “Hum-
bert Humbert” and “the the” but not “the bug” or “the big bug”);
. all strings that start at the beginning of the line with an integer and that
end at the end of the line with a word;
. all strings that have both the word grotto and the word raven in them
(but not, e.g., words like grottos that merely contain the word grotto);
. write a pattern that places the ﬁrst word of an English sentence in a
register. Deal with punctuation.
Implement an ELIZA-like program, using substitutions such as those described
on page . You might want to choose a different domain than a Rogerian psy-
chologist, although keep in mind that you would need a domain in which your
program can legitimately engage in a lot of simple repetition.
Compute the edit distance (using insertion cost , deletion cost , substitution
cost ) of “leda” to “deal”. Show your work (using the edit distance grid).
Figure out whether drive is closer to brief or to divers and what the edit dis-
tance is to each. You may use any version of distance that you like.
Now implement a minimum edit distance algorithm and use your hand-computed
results to check your code.
Augment the minimum edit distance algorithm to output an alignment; you
will need to store pointers and add a stage to compute the backtrace.

CHAPTER
N-GRAM LANGUAGE MODELS
N-gram Language Models
CHAPTER
“You are uniformly charming!” cried he, with a smile of associating and now
and then I bowed and they perceived a chaise and four to wish for.
Random sentence generated from a Jane Austen trigram model
Predicting is difﬁcult—especially about the future, as the old quip goes. But how
about predicting something that seems much easier, like the next few words someone
is going to say? What word, for example, is likely to follow
Please turn your homework ...
Hopefully, most of you concluded that a very likely word is in, or possibly over,
but probably not refrigerator or the. In this chapter we formalize this intuition by
introducing models that assign a probability to each possible next word.
Models that assign probabilities to upcoming words, or sequences of words
in general, are called language models or LMs. Why would we want to predict
language model
LM
upcoming words? It turns out that the large language models that revolutionized
modern NLP are trained just by predicting words!! As we’ll see in chapters -,
large language models learn an enormous amount about language solely from being
trained to predict upcoming words from neighboring words.
Language models can also assign a probability to an entire sentence. For exam-
ple, they can predict that the following sequence has a much higher probability of
appearing in a text:
all of a sudden I notice three guys standing on the sidewalk
than does this same set of words in a different order:
on guys all I of notice sidewalk three a sudden standing the
Why does it matter what the probability of a sentence is or how probable the
next word is? In many NLP applications we can use the probability as a way to
choose a better sentence or word over a less-appropriate one. For example we can
correct grammar or spelling errors like Their are two midterms, in which There was
mistyped as Their, or Everything has improve, in which improve should have been
improved. The phrase There are will be much more probable than Their are, and has
improved than has improve, allowing a language model to help users select the more
grammatical variant. Or for a speech recognizer to realize that you said I will be back
soonish and not I will be bassoon dish, it helps to know that back soonish is a much
more probable sequence. Language models can also help in augmentative and
alternative communication systems (Trnka et al. , Kane et al. ). People
often use such AAC devices if they are physically unable to speak or sign but can
AAC
instead use eye gaze or other speciﬁc movements to select words from a menu. Word
prediction can be used to suggest likely words for the menu.

N-GRAMS
In this chapter we introduce the simplest kind of language model: the n-gram
n-gram
language model. An n-gram is a sequence of n words: a -gram (which we’ll
call bigram) is a two-word sequence of words like “please turn”, “turn your”, or
”your homework”, and a -gram (a trigram) is a three-word sequence of words like
“please turn your”, or “turn your homework”. But we also (in a bit of terminological
ambiguity) use the word ‘n-gram’ to mean a probabilistic model that can estimate
the probability of a word given the n- previous words, and thereby also to assign
probabilities to entire sequences.
In later chapters we will introduce the much more powerful neural large lan-
guage models, based on the transformer architecture of Chapter . But because n-
grams have a remarkably simple and clear formalization, we begin our study of lan-
guage modeling with them, introducing major concepts that will play a role through-
out language modeling, concepts like training and test sets, perplexity, sampling,
and interpolation.
N-Grams
Let’s begin with the task of computing P(w|h), the probability of a word w given
some history h. Suppose the history h is “its water is so transparent that” and we
want to know the probability that the next word is the:
P(the|its water is so transparent that).
One way to estimate this probability is from relative frequency counts: take a
very large corpus, count the number of times we see its water is so transparent that,
and count the number of times this is followed by the. This would be answering the
question “Out of the times we saw the history h, how many times was it followed by
the word w”, as follows:
P(the|its water is so transparent that) =
C(its water is so transparent that the)
C(its water is so transparent that)
With a large enough corpus, such as the web, we can compute these counts and
estimate the probability from Eq. .. You should pause now, go to the web, and
compute this estimate for yourself.
While this method of estimating probabilities directly from counts works ﬁne in
many cases, it turns out that even the web isn’t big enough to give us good estimates
in most cases. This is because language is creative; new sentences are created all the
time, and we won’t always be able to count entire sentences. Even simple extensions
of the example sentence may have counts of zero on the web (such as “Walden
Pond’s water is so transparent that the”; well, used to have counts of zero).
Similarly, if we wanted to know the joint probability of an entire sequence of
words like its water is so transparent, we could do it by asking “out of all possible
sequences of ﬁve words, how many of them are its water is so transparent?” We
would have to get the count of its water is so transparent and divide by the sum of
the counts of all possible ﬁve word sequences. That seems rather a lot to estimate!
For this reason, we’ll need to introduce more clever ways of estimating the prob-
ability of a word w given a history h, or the probability of an entire word sequence
W. Let’s start with a little formalizing of notation. To represent the probability of a

CHAPTER
N-GRAM LANGUAGE MODELS
particular random variable Xi taking on the value “the”, or P(Xi = “the”), we will use
the simpliﬁcation P(the). We’ll represent a sequence of n words either as w ...wn
or w:n. Thus the expression w:n− means the string w,w,...,wn−, but we’ll also
be using the equivalent notation w<n, which can be read as “all the elements of w
from w up to and including wn−. For the joint probability of each word in a se-
quence having a particular value P(X = w,X = w,X = w,...,Xn = wn) we’ll
use P(w,w,...,wn).
Now, how can we compute probabilities of entire sequences like P(w,w,...,wn)?
One thing we can do is decompose this probability using the chain rule of proba-
bility:
P(X...Xn) = P(X)P(X|X)P(X|X:)...P(Xn|X:n−)
k=
P(Xk|X:k−)
Applying the chain rule to words, we get
P(w:n) = P(w)P(w|w)P(w|w:)...P(wn|w:n−)
k=
P(wk|w:k−)
The chain rule shows the link between computing the joint probability of a sequence
and computing the conditional probability of a word given previous words. Equa-
tion . suggests that we could estimate the joint probability of an entire sequence of
words by multiplying together a number of conditional probabilities. But using the
chain rule doesn’t really seem to help us! We don’t know any way to compute the
exact probability of a word given a long sequence of preceding words, P(wn|w:n−).
As we said above, we can’t just estimate by counting the number of times every word
occurs following every long string, because language is creative and any particular
context might have never occurred before!
The intuition of the n-gram model is that instead of computing the probability of
a word given its entire history, we can approximate the history by just the last few
words.
The bigram model, for example, approximates the probability of a word given
bigram
all the previous words P(wn|w:n−) by using only the conditional probability of the
preceding word P(wn|wn−). In other words, instead of computing the probability
P(the|Walden Pond’s water is so transparent that)
we approximate it with the probability
P(the|that)
When we use a bigram model to predict the conditional probability of the next word,
we are thus making the following approximation:
P(wn|w:n−) ≈ P(wn|wn−)
The assumption that the probability of a word depends only on the previous word is
called a Markov assumption. Markov models are the class of probabilistic models
Markov
that assume we can predict the probability of some future unit without looking too

N-GRAMS
far into the past. We can generalize the bigram (which looks one word into the past)
to the trigram (which looks two words into the past) and thus to the n-gram (which
n-gram
looks n− words into the past).
Let’s see a general equation for this n-gram approximation to the conditional
probability of the next word in a sequence. We’ll use N here to mean the n-gram
size, so N =  means bigrams and N =  means trigrams. Then we approximate the
probability of a word given its entire context as follows:
P(wn|w:n−) ≈ P(wn|wn−N+:n−)
Given the bigram assumption for the probability of an individual word, we can com-
pute the probability of a complete word sequence by substituting Eq. . into Eq. .:
P(w:n) ≈
k=
P(wk|wk−)
How do we estimate these bigram or n-gram probabilities? An intuitive way to
estimate probabilities is called maximum likelihood estimation or MLE. We get
maximum
likelihood
estimation
the MLE estimate for the parameters of an n-gram model by getting counts from a
corpus, and normalizing the counts so that they lie between  and .
normalize
For example, to compute a particular bigram probability of a word wn given a
previous word wn−, we’ll compute the count of the bigram C(wn−wn) and normal-
ize by the sum of all the bigrams that share the same ﬁrst word wn−:
P(wn|wn−) =
C(wn−wn)
wC(wn−w)
We can simplify this equation, since the sum of all bigram counts that start with
a given word wn− must be equal to the unigram count for that word wn− (the reader
should take a moment to be convinced of this):
P(wn|wn−) = C(wn−wn)
C(wn−)
Let’s work through an example using a mini-corpus of three sentences. We’ll
ﬁrst need to augment each sentence with a special symbol <s> at the beginning
of the sentence, to give us the bigram context of the ﬁrst word. We’ll also need a
special end-symbol. </s>
<s> I am Sam </s>
<s> Sam I am </s>
<s> I do not like green eggs and ham </s>
Here are the calculations for some of the bigram probabilities from this corpus
P(I|<s>) =
= .
P(Sam|<s>) =
= .
P(am|I) =
= .
P(</s>|Sam) =
= .
P(Sam|am) =
= .
P(do|I) =
= .
For probabilistic models, normalizing means dividing by some total count so that the resulting proba-
bilities fall between  and .
We need the end-symbol to make the bigram grammar a true probability distribution. Without an end-
symbol, instead of the sentence probabilities of all sentences summing to one, the sentence probabilities
for all sentences of a given length would sum to one. This model would deﬁne an inﬁnite set of probability
distributions, with one distribution per sentence length. See Exercise ..

CHAPTER
N-GRAM LANGUAGE MODELS
For the general case of MLE n-gram parameter estimation:
P(wn|wn−N+:n−) = C(wn−N+:n− wn)
C(wn−N+:n−)
Equation . (like Eq. .) estimates the n-gram probability by dividing the
observed frequency of a particular sequence by the observed frequency of a preﬁx.
This ratio is called a relative frequency. We said above that this use of relative
relative
frequency
frequencies as a way to estimate probabilities is an example of maximum likelihood
estimation or MLE. In MLE, the resulting parameter set maximizes the likelihood
of the training set T given the model M (i.e., P(T|M)). For example, suppose the
word Chinese occurs  times in a corpus of a million words like the Brown corpus.
What is the probability that a random word selected from some other text of, say,
a million words will be the word Chinese? The MLE of its probability is
or .. Now . is not the best possible estimate of the probability of Chinese
occurring in all situations; it might turn out that in some other corpus or context
Chinese is a very unlikely word. But it is the probability that makes it most likely
that Chinese will occur  times in a million-word corpus. We present ways to
modify the MLE estimates slightly to get better probability estimates in Section ..
Let’s move on to some examples from a slightly larger corpus than our -word
example above. We’ll use data from the now-defunct Berkeley Restaurant Project,
a dialogue system from the last century that answered questions about a database
of restaurants in Berkeley, California (Jurafsky et al., ). Here are some text-
normalized sample user queries (a sample of  sentences is on the website):
can you tell me about any good cantonese restaurants close by
mid priced thai food is what i’m looking for
tell me about chez panisse
can you give me a listing of the kinds of food that are available
i’m looking for a good place to eat breakfast
when is caffe venezia open during the day
Figure . shows the bigram counts from a piece of a bigram grammar from the
Berkeley Restaurant Project. Note that the majority of the values are zero. In fact,
we have chosen the sample words to cohere with each other; a matrix selected from
a random set of eight words would be even more sparse.
want
to
eat
chinese
food
lunch
spend
want
to
eat
chinese
food
lunch
spend
Figure .
Bigram counts for eight of the words (out of V = ) in the Berkeley Restau-
rant Project corpus of  sentences. Zero counts are in gray.
Figure . shows the bigram probabilities after normalization (dividing each cell
in Fig. . by the appropriate unigram for its row, taken from the following set of
unigram probabilities):

N-GRAMS
want to
eat
chinese food lunch spend

want
to
eat
chinese
food
lunch
spend
want
to
eat
chinese
food
lunch
spend
Figure .
Bigram probabilities for eight words in the Berkeley Restaurant Project corpus
of  sentences. Zero probabilities are in gray.
Here are a few other useful probabilities:
P(i|<s>) = .
P(english|want) = .
P(food|english) = .
P(</s>|food) = .
Now we can compute the probability of sentences like I want English food or
I want Chinese food by simply multiplying the appropriate bigram probabilities to-
gether, as follows:
P(<s> i want english food </s>)
= P(i|<s>)P(want|i)P(english|want)
P(food|english)P(</s>|food)
= .×.×.×.×.
= .
We leave it as Exercise . to compute the probability of i want chinese food.
What kinds of linguistic phenomena are captured in these bigram statistics?
Some of the bigram probabilities above encode some facts that we think of as strictly
syntactic in nature, like the fact that what comes after eat is usually a noun or an
adjective, or that what comes after to is usually a verb. Others might be a fact about
the personal assistant task, like the high probability of sentences beginning with
the words I. And some might even be cultural rather than linguistic, like the higher
probability that people are looking for Chinese versus English food.
Some practical issues:
Although for pedagogical purposes we have only described
bigram models, in practice we might use trigram models, which condition on the
trigram
previous two words rather than the previous word, or -gram or even -gram mod-
-gram
-gram
els, when there is sufﬁcient training data. Note that for these larger n-grams, we’ll
need to assume extra contexts to the left and right of the sentence end. For example,
to compute trigram probabilities at the very beginning of the sentence, we use two
pseudo-words for the ﬁrst trigram (i.e., P(I|<s><s>).
We always represent and compute language model probabilities in log format
as log probabilities. Since probabilities are (by deﬁnition) less than or equal to
log
probabilities
, the more probabilities we multiply together, the smaller the product becomes.
Multiplying enough n-grams together would result in numerical underﬂow. By using
log probabilities instead of raw probabilities, we get numbers that are not as small.

CHAPTER
N-GRAM LANGUAGE MODELS
Adding in log space is equivalent to multiplying in linear space, so we combine log
probabilities by adding them. The result of doing all computation and storage in log
space is that we only need to convert back into probabilities if we need to report
them at the end; then we can just take the exp of the logprob:
p × p × p × p = exp(log p +log p +log p +log p)
In practice throughout this book, we’ll use log to mean natural log (ln) when the
base is not speciﬁed.
Evaluating Language Models: Training and Test Sets
The best way to evaluate the performance of a language model is to embed it in
an application and measure how much the application improves. Such end-to-end
evaluation is called extrinsic evaluation. Extrinsic evaluation is the only way to
extrinsic
evaluation
know if a particular improvement in the language model (or any component) is really
going to help the task at hand. Thus for evaluating n-gram language models that are
a component of some task like speech recognition or machine translation, we can
compare the performance of two candidate language models by running the speech
recognizer or machine translator twice, once with each language model, and seeing
which gives the more accurate transcription.
Unfortunately, running big NLP systems end-to-end is often very expensive. In-
stead, it’s helpful to have a metric that can be used to quickly evaluate potential
improvements in a language model. An intrinsic evaluation metric is one that mea-
intrinsic
evaluation
sures the quality of a model independent of any application. In the next section we’ll
introduce perplexity, which is the standard intrinsic metric for measuring language
model performance, both for simple n-gram language models and for the more so-
phisticated neural large language models of Chapter .
In order to evaluate any machine learning model, we need to have at least three
distinct data sets: the training set, the development set, and the test set.
training set
development
set
test set
The training set is the data we use to learn the parameters of our model; for
simple n-gram language models it’s the corpus from which we get the counts that
we normalize into the probabilities of the n-gram language model.
The test set is a different, held-out set of data, not overlapping with the training
set, that we use to evaluate the model. We need a separate test set to give us an
unbiased estimate of how well the model we trained can generalize when we apply
it to some new unknown dataset. A machine learning model that perfectly captured
the training data, but performed terribly on any other data, wouldn’t be much use
when it comes time to apply it to any new data or problem! We thus measure the
quality of an n-gram model by its performance on this unseen test set or test corpus.
How should we choose a training and test set? The test set should reﬂect the
language we want to use the model for. If we’re going to use our language model
for speech recognition of chemistry lectures, the test set should be text of chemistry
lectures. If we’re going to use it as part of a system for translating hotel booking re-
quests from Chinese to English, the test set should be text of hotel booking requests.
If we want our language model to be general purpose, then the test test should be
drawn from a wide variety of texts. In such cases we might collect a lot of texts
from different sources, and then divide it up into a training set and a test set. It’s
important to do the dividing carefully; if we’re building a general purpose model,

EVALUATING LANGUAGE MODELS: PERPLEXITY
we don’t want the test set to consist of only text from one document, or one author,
since that wouldn’t be a good measure of general performance.
Thus if we are given a corpus of text and want to compare the performance of
two different n-gram models, we divide the data into training and test sets, and train
the parameters of both models on the training set. We can then compare how well
the two trained models ﬁt the test set.
But what does it mean to “ﬁt the test set”? The standard answer is simple:
whichever language model assigns a higher probability to the test set—which
means it more accurately predicts the test set—is a better model. Given two proba-
bilistic models, the better model is the one that has a tighter ﬁt to the test data or that
better predicts the details of the test data, and hence will assign a higher probability
to the test data.
Since our evaluation metric is based on test set probability, it’s important not to
let the test sentences into the training set. Suppose we are trying to compute the
probability of a particular “test” sentence. If our test sentence is part of the training
corpus, we will mistakenly assign it an artiﬁcially high probability when it occurs
in the test set. We call this situation training on the test set. Training on the test
set introduces a bias that makes the probabilities all look too high, and causes huge
inaccuracies in perplexity, the probability-based metric we introduce below.
Even if we don’t train on the test set, if we test our language model on it many
times after making different changes, we might implicitly tune to its characteristics,
by noticing which changes seem to make the model better. For this reason, we only
want to run our model on the test set once, or a very few number of times, once we
are sure our model is ready.
For this reason we normally instead have a third dataset called a development
development
test
test set or, devset. We do all our testing on this dataset until the very end, and then
we test on the test once to see how good our model is.
How do we divide our data into training, development, and test sets? We want
our test set to be as large as possible, since a small test set may be accidentally un-
representative, but we also want as much training data as possible. At the minimum,
we would want to pick the smallest test set that gives us enough statistical power
to measure a statistically signiﬁcant difference between two potential models. It’s
important that the dev set be drawn from the same kind of text as the test set, since
its goal is to measure how we would do on the test set.
Evaluating Language Models: Perplexity
In practice we don’t use raw probability as our metric for evaluating language mod-
els, but a function of probability called perplexity. Perplexity is one of the most
important metrics in natural language processing, and we use it to evaluate neural
language models as well.
The perplexity (sometimes abbreviated as PP or PPL) of a language model on a
perplexity
test set is the inverse probability of the test set (one over the probability of the test
set), normalized by the number of words. For this reason it’s sometimes called the
per-word perplexity. For a test set W = ww ...wN,:

CHAPTER
N-GRAM LANGUAGE MODELS
perplexity(W) = P(ww ...wN)−
P(ww ...wN)
Or we can use the chain rule to expand the probability of W:
perplexity(W) =
i=
P(wi|w ...wi−)
Note that because of the inverse in Eq. ., the higher the probability of the
word sequence, the lower the perplexity. Thus the lower the perplexity of a model on
the data, the better the model, and minimizing perplexity is equivalent to maximizing
the test set probability according to the language model. Why does perplexity use
the inverse probability? It turns out the inverse arises from the original deﬁnition
of perplexity from cross-entropy rate in information theory; for those interested,
the explanation is in the advanced section Section .. Meanwhile, we just have to
remember that perplexity has an inverse relationship with probability.
The details of computing the perplexity of a test set W depends on which lan-
guage model we use. Here’s the perplexity of W with a unigram language model
(just the geometric mean of the unigram probabilities):
perplexity(W) =
P(wi)
i=
The perplexity of W computed with a bigram language model is still a geometric
mean, but now of the bigram probabilities:
perplexity(W) =
i=
P(wi|wi−)
What we generally use for word sequence in Eq. . or Eq. . is the entire
sequence of words in some test set. Since this sequence will cross many sentence
boundaries, if our vocabulary includes a between-sentence token <EOS> or separate
begin- and end-sentence markers <s> and </s> then we can include them in the
probability computation. If we do, then we also include one token per sentence in
the total count of word tokens N.
We mentioned above that perplexity is a function of both the text and the lan-
guage model: given a text W, different language models will have different perplex-
ities. Because of this, perplexity can be used to compare different n-gram models.
Let’s look at an example, in which we trained unigram, bigram, and trigram gram-
mars on  million words (including start-of-sentence tokens) from the Wall Street
Journal, using a , word vocabulary. We then computed the perplexity of each
For example if we use both begin and end tokens, we would include the end-of-sentence marker </s>
but not the beginning-of-sentence marker <s> in our count of N; This is because the end-sentence token is
followed directly by the begin-sentence token with probability almost , so we don’t want the probability
of that fake transition to inﬂuence our perplexity.

EVALUATING LANGUAGE MODELS: PERPLEXITY
of these models on a test set of . million words, using Eq. . for unigrams,
Eq. . for bigrams, and the corresponding equation for trigrams. The table below
shows the perplexity of a . million word WSJ test set according to each of these
grammars.
Unigram Bigram Trigram
Perplexity
As we see above, the more information the n-gram gives us about the word
sequence, the higher the probability the n-gram will assign to the string. A trigram
model is less surprised than a unigram model because it has a better idea of what
words might come next, and so it assigns them a higher probability. And the higher
the probability, the lower the perplexity (since as Eq. . showed, perplexity is
related inversely to the likelihood of the test sequence according to the model). So a
lower perplexity can tell us that a language model is a better predictor of the words
in the test set.
Note that in computing perplexities, the n-gram model P must be constructed
without any knowledge of the test set or any prior knowledge of the vocabulary of
the test set. Any kind of knowledge of the test set can cause the perplexity to be
artiﬁcially low. The perplexity of two language models is only comparable if they
use identical vocabularies.
An (intrinsic) improvement in perplexity does not guarantee an (extrinsic) im-
provement in the performance of a language processing task like speech recognition
or machine translation. Nonetheless, because perplexity usually correlates with task
improvements, it is commonly used as a convenient evaluation metric. Still, when
possible a model’s improvement in perplexity should be conﬁrmed by an end-to-end
evaluation on a real task.
Advanced: Perplexity as Weighted Average Branching Factor
It turns out that perplexity can also be thought of as the weighted average branch-
ing factor of a language. The branching factor of a language is the number of
possible next words that can follow any word. If we have an artiﬁcial deterministic
language of integer numbers whose vocabulary consists of the  digits (zero, one,
two,..., nine), in which any digit can follow any other digit, then the branching factor
of that language is .
Let’s ﬁrst convince ourselves that if we compute the perplexity of this artiﬁcial
digit language we indeed get . Let’s suppose that (in training and in test) each
of the  digits occurs with exactly equal probability P =
. Now imagine a test
string of digits of length N, and, again, assume that in the training set all the digits
occurred with equal probability. By Eq. ., the perplexity will be
perplexity(W) = P(ww ...wN)−
= (
But suppose that the number zero is really frequent and occurs far more often
than other numbers. Let’s say that  occur  times in the training set, and each of the
other digits occurred  time each. Now we see the following test set:
CHAPTER
N-GRAM LANGUAGE MODELS
. We should expect the perplexity of this test set to be lower since most of the time
the next number will be zero, which is very predictable, i.e. has a high probability.
Thus, although the branching factor is still , the perplexity or weighted branching
factor is smaller. We leave this exact calculation as exercise ..
Sampling sentences from a language model
One important way to visualize what kind of knowledge a language model embodies
is to sample from it. Sampling from a distribution means to choose random points
sampling
according to their likelihood. Thus sampling from a language model—which rep-
resents a distribution over sentences—means to generate some sentences, choosing
each sentence according to its likelihood as deﬁned by the model. Thus we are more
likely to generate sentences that the model thinks have a high probability and less
likely to generate sentences that the model thinks have a low probability.
This technique of visualizing a language model by sampling was ﬁrst suggested
very early on by Shannon () and Miller and Selfridge (). It’s simplest to
visualize how this works for the unigram case. Imagine all the words of the English
language covering the probability space between  and , each word covering an
interval proportional to its frequency. Fig. . shows a visualization, using a unigram
LM computed from the text of this book. We choose a random value between  and
, ﬁnd that point on the probability line, and print the word whose interval includes
this chosen value. We continue choosing random numbers and generating words
until we randomly generate the sentence-ﬁnal token </s>.
polyphonic
p=.
however
(p=.)
the
of
to in
. . . .
Figure .
A visualization of the sampling distribution for sampling sentences by repeat-
edly sampling unigrams. The blue bar represents the relative frequency of each word (we’ve
ordered them from most frequent to least frequent, but the choice of order is arbitrary). The
number line shows the cumulative probabilities. If we choose a random number between
and , it will fall in an interval corresponding to some word. The expectation for the random
number to fall in the larger intervals of one of the frequent words (the, of, a) is much higher
than in the smaller interval of one of the rare words (polyphonic).
We can use the same technique to generate bigrams by ﬁrst generating a ran-
dom bigram that starts with <s> (according to its bigram probability). Let’s say the
second word of that bigram is w. We next choose a random bigram starting with w
(again, drawn according to its bigram probability), and so on.
Generalization and Zeros
The n-gram model, like many statistical models, is dependent on the training corpus.
One implication of this is that the probabilities often encode speciﬁc facts about a

GENERALIZATION AND ZEROS
given training corpus. Another implication is that n-grams do a better and better job
of modeling the training corpus as we increase the value of N.
We can use the sampling method from the prior section to visualize both of
these facts! To give an intuition for the increasing power of higher-order n-grams,
Fig. . shows random sentences generated from unigram, bigram, trigram, and -
gram models trained on Shakespeare’s works.
–To him swallowed confess hear both. Which. Of save on trail for are ay device and
rote life have
gram
–Hill he late speaks; or! a more to leg less ﬁrst you enter
–Why dost stand forth thy canopy, forsooth; he is this palpable hit the King Henry. Live
king. Follow.
gram
–What means, sir. I confess she? then all sorts, he is trim, captain.
–Fly, and will rid me these news of price. Therefore the sadness of parting, as they say,
’tis done.
gram
–This shall forbid it should be branded, if renown made it empty.
–King Henry. What! I will go seek the traitor Gloucester. Exeunt some of the watch. A
great banquet serv’d in;
gram
–It cannot be but so.
Figure .
Eight sentences randomly generated from four n-grams computed from Shakespeare’s works. All
characters were mapped to lower-case and punctuation marks were treated as words. Output is hand-corrected
for capitalization to improve readability.
The longer the context on which we train the model, the more coherent the sen-
tences. In the unigram sentences, there is no coherent relation between words or any
sentence-ﬁnal punctuation. The bigram sentences have some local word-to-word
coherence (especially if we consider that punctuation counts as a word). The tri-
gram and -gram sentences are beginning to look a lot like Shakespeare. Indeed, a
careful investigation of the -gram sentences shows that they look a little too much
like Shakespeare. The words It cannot be but so are directly from King John. This is
because, not to put the knock on Shakespeare, his oeuvre is not very large as corpora
go (N = ,,V = ,), and our n-gram probability matrices are ridiculously
sparse. There are V  = ,, possible bigrams alone, and the number of pos-
sible -grams is V  = ×. Thus, once the generator has chosen the ﬁrst -gram
(It cannot be), there are only seven possible next words for the th element (but, I,
that, thus, this, and the period).
To get an idea of the dependence of a grammar on its training set, let’s look at an
n-gram grammar trained on a completely different corpus: the Wall Street Journal
(WSJ) newspaper. Shakespeare and the Wall Street Journal are both English, so
we might expect some overlap between our n-grams for the two genres. Fig. .
shows sentences generated by unigram, bigram, and trigram grammars trained on
million words from WSJ.
Compare these examples to the pseudo-Shakespeare in Fig. .. While they both
model “English-like sentences”, there is clearly no overlap in generated sentences,
and little overlap even in small phrases. Statistical models are likely to be pretty use-
less as predictors if the training sets and the test sets are as different as Shakespeare
and WSJ.
How should we deal with this problem when we build n-gram models? One step
is to be sure to use a training corpus that has a similar genre to whatever task we are
trying to accomplish. To build a language model for translating legal documents,

CHAPTER
N-GRAM LANGUAGE MODELS
Last December through the way to preserve the Hudson corporation N.
B. E. C. Taylor would seem to complete the major central planners one
Months the my and issue of year foreign new exchange’s september
gram were recession exchange new endorsed a acquire to six executives
gram
point ﬁve percent of U. S. E. has already old M. X. corporation of living
on information such as more frequently ﬁshing to keep her
They also point to ninety nine point six billion dollars from two hundred
four oh six three percent of the rates of interest stores as Mexico and
gram
Brazil on market conditions
Figure .
Three sentences randomly generated from three n-gram models computed from
million words of the Wall Street Journal, lower-casing all characters and treating punctua-
tion as words. Output was then hand-corrected for capitalization to improve readability.
we need a training corpus of legal documents. To build a language model for a
question-answering system, we need a training corpus of questions.
It is equally important to get training data in the appropriate dialect or variety,
especially when processing social media posts or spoken transcripts. For exam-
ple some tweets will use features of African American English (AAE)— the name
for the many variations of language used in African American communities (King,
). Such features include words like ﬁnna—an auxiliary verb that marks imme-
diate future tense —that don’t occur in other varieties, or spellings like den for then,
in tweets like this one (Blodgett and O’Connor, ):
(.) Bored af den my phone ﬁnna die!!!
while tweets from English-based languages like Nigerian Pidgin have markedly dif-
ferent vocabulary and n-gram patterns from American English (Jurgens et al., ):
(.) @username R u a wizard or wat gan sef: in d mornin - u tweet, afternoon - u
tweet, nyt gan u dey tweet. beta get ur IT placement wiv twitter
Matching genres and dialects is still not sufﬁcient. Our models may still be
subject to the problem of sparsity. For any n-gram that occurred a sufﬁcient number
of times, we might have a good estimate of its probability. But because any corpus is
limited, some perfectly acceptable English word sequences are bound to be missing
from it. That is, we’ll have many cases of putative “zero probability n-grams” that
should really have some non-zero probability. Consider the words that follow the
bigram denied the in the WSJ Treebank corpus, together with their counts:
denied the allegations:
denied the speculation:
denied the rumors:
denied the report:
But suppose our test set has phrases like:
denied the offer
denied the loan
Our model will incorrectly estimate that the P(offer|denied the) is !
These zeros—things that don’t ever occur in the training set but do occur in
zeros
the test set—are a problem for two reasons. First, their presence means we are
underestimating the probability of all sorts of words that might occur, which will
hurt the performance of any application we want to run on this data.
Second, if the probability of any word in the test set is , the entire probability
of the test set is . By deﬁnition, perplexity is based on the inverse probability of the

SMOOTHING
test set. Thus if some words have zero probability, we can’t compute perplexity at
all, since we can’t divide by !
What do we do about zeros? There are two solutions, depending on the kind of
zero. For words whose n-gram probability is zero because they occur in a novel test
set context, like the example of denied the offer above, we’ll introduce in Section .
algorithms called smoothing or discounting. Smoothing algorithms shave off a bit
of probability mass from some more frequent events and give it to these unseen
events. But ﬁrst, let’s talk about an even more insidious form of zero: words that the
model has never seen before at all (in any context): unknown words!
Unknown Words
What do we do about words we have never seen before? Perhaps the word Jurafsky
simply did not occur in our training set, but pops up in the test set! We usually
disallow this situation by stipulating that we already know all the words that can
occur. In such a closed vocabulary system the test set can only contain words from
closed
vocabulary
this known lexicon, and there will be no unknown words. This is what we do for the
neural language models of later chapters. For these models we use subword tokens
rather than words. With subword tokenization (like the BPE algorithm of Chapter )
any unknown word can be modeled as a sequence of smaller subwords, if necessary
by a sequence of individual letters, so we never have unknown words.
If our language model is using words instead of tokens, however, we have to
deal with unknown words, or out of vocabulary (OOV) words: words we haven’t
OOV
seen before. The percentage of OOV words that appear in the test set is called the
OOV rate. One way to create an open vocabulary system is to model potential
open
vocabulary
unknown words in the test set by adding a pseudo-word called <UNK>. Again, most
modern language models are closed vocabulary and don’t use an <UNK> token. But
when necessary, we can train <UNK> probabilities by turning the problem back into
a closed vocabulary one by choosing a ﬁxed vocabulary in advance:
. Choose a vocabulary (word list) that is ﬁxed in advance.
. Convert in the training set any word that is not in this set (any OOV word) to
the unknown word token <UNK> in a text normalization step.
. Estimate the probabilities for <UNK> from its counts just like any other regular
word in the training set.
The exact choice of <UNK> has an effect on perplexity. A language model can
achieve low perplexity by choosing a small vocabulary and assigning the unknown
word a high probability. Thus perplexities can only be compared across language
models with <UNK> if they have the exact same vocabularies (Buck et al., ).
Smoothing
What do we do with words that are in our vocabulary (they are not unknown words)
but appear in a test set in an unseen context (for example they appear after a word
they never appeared after in training)? To keep a language model from assigning
zero probability to these unseen events, we’ll have to shave off a bit of probability
mass from some more frequent events and give it to the events we’ve never seen.
This modiﬁcation is called smoothing or discounting. In this section and the fol-
smoothing
discounting
lowing ones we’ll introduce a variety of ways to do smoothing: Laplace (add-one)

CHAPTER
N-GRAM LANGUAGE MODELS
smoothing, add-k smoothing, and stupid backoff. At the end of the chapter we
also summarize a more complex method, Kneser-Ney smoothing.
Laplace Smoothing
The simplest way to do smoothing is to add one to all the n-gram counts, before
we normalize them into probabilities. All the counts that used to be zero will now
have a count of , the counts of  will be , and so on. This algorithm is called
Laplace smoothing. Laplace smoothing does not perform well enough to be used
Laplace
smoothing
in modern n-gram models, but it usefully introduces many of the concepts that we
see in other smoothing algorithms, gives a useful baseline, and is also a practical
smoothing algorithm for other tasks like text classiﬁcation (Chapter ).
Let’s start with the application of Laplace smoothing to unigram probabilities.
Recall that the unsmoothed maximum likelihood estimate of the unigram probability
of the word wi is its count ci normalized by the total number of word tokens N:
P(wi) = ci
Laplace smoothing merely adds one to each count (hence its alternate name add-
one smoothing). Since there are V words in the vocabulary and each one was incre-
add-one
mented, we also need to adjust the denominator to take into account the extra V
observations. (What happens to our P values if we don’t increase the denominator?)
PLaplace(wi) = ci +
N +V
Instead of changing both the numerator and denominator, it is convenient to
describe how a smoothing algorithm affects the numerator, by deﬁning an adjusted
count c∗. This adjusted count is easier to compare directly with the MLE counts and
can be turned into a probability like an MLE count by normalizing by N. To deﬁne
this count, since we are only changing the numerator in addition to adding  we’ll
also need to multiply by a normalization factor
N+V :
c∗
i = (ci +)
N +V
We can now turn c∗
i into a probability P∗
i by normalizing by N.
A related way to view smoothing is as discounting (lowering) some non-zero
discounting
counts in order to get the probability mass that will be assigned to the zero counts.
Thus, instead of referring to the discounted counts c∗, we might describe a smooth-
ing algorithm in terms of a relative discount dc, the ratio of the discounted counts to
discount
the original counts:
dc = c∗
Now that we have the intuition for the unigram case, let’s smooth our Berkeley
Restaurant Project bigrams. Figure . shows the add-one smoothed counts for the
bigrams in Fig. ..
Figure . shows the add-one smoothed probabilities for the bigrams in Fig. ..
Recall that normal bigram probabilities are computed by normalizing each row of
counts by the unigram count:

SMOOTHING
want
to
eat
chinese
food
lunch
spend
want
to
eat
chinese
food
lunch
spend
Figure .
Add-one smoothed bigram counts for eight of the words (out of V = ) in
the Berkeley Restaurant Project corpus of  sentences. Previously-zero counts are in gray.
P(wn|wn−) = C(wn−wn)
C(wn−)
For add-one smoothed bigram counts, we need to augment the unigram count by
the number of total word types in the vocabulary V:
C(wn−)+V
PLaplace(wn|wn−) =
C(wn−wn)+
w (C(wn−w)+) = C(wn−wn)+
Thus, each of the unigram counts given in the previous section will need to be
augmented by V = . The result is the smoothed bigram probabilities in Fig. ..
want
to
eat
chinese
food
lunch
spend
want
to
eat
chinese
food
lunch
spend
Figure .
Add-one smoothed bigram probabilities for eight of the words (out of V = ) in the BeRP
corpus of  sentences. Previously-zero probabilities are in gray.
It is often convenient to reconstruct the count matrix so we can see how much a
smoothing algorithm has changed the original counts. These adjusted counts can be
computed by Eq. .. Figure . shows the reconstructed counts.
c∗(wn−wn) = [C(wn−wn)+]×C(wn−)
C(wn−)+V
Note that add-one smoothing has made a very big change to the counts. Com-
paring Fig. . to the original counts in Fig. ., we can see that C(want to) changed
from  to ! We can see this in probability space as well: P(to|want) decreases
from . in the unsmoothed case to . in the smoothed case. Looking at the dis-
count d (the ratio between new and old counts) shows us how strikingly the counts
for each preﬁx word have been reduced; the discount for the bigram want to is .,
while the discount for Chinese food is ., a factor of !
The sharp change in counts and probabilities occurs because too much probabil-
ity mass is moved to all the zeros.

CHAPTER
N-GRAM LANGUAGE MODELS
want
to
eat
chinese
food
lunch
spend
want
to
eat
chinese
food
lunch
spend
Figure .
Add-one reconstituted counts for eight words (of V = ) in the BeRP corpus
of  sentences. Previously-zero counts are in gray.
Add-k smoothing
One alternative to add-one smoothing is to move a bit less of the probability mass
from the seen to the unseen events. Instead of adding  to each count, we add a frac-
tional count k (.? .? .?). This algorithm is therefore called add-k smoothing.
add-k
P∗
Add-k(wn|wn−) = C(wn−wn)+k
C(wn−)+kV
Add-k smoothing requires that we have a method for choosing k; this can be
done, for example, by optimizing on a devset. Although add-k is useful for some
tasks (including text classiﬁcation), it turns out that it still doesn’t work well for
language modeling, generating counts with poor variances and often inappropriate
discounts (Gale and Church, ).
Backoff and Interpolation
The discounting we have been discussing so far can help solve the problem of zero
frequency n-grams. But there is an additional source of knowledge we can draw on.
If we are trying to compute P(wn|wn−wn−) but we have no examples of a particular
trigram wn−wn−wn, we can instead estimate its probability by using the bigram
probability P(wn|wn−). Similarly, if we don’t have counts to compute P(wn|wn−),
we can look to the unigram P(wn).
In other words, sometimes using less context is a good thing, helping to general-
ize more for contexts that the model hasn’t learned much about. There are two ways
to use this n-gram “hierarchy”. In backoff, we use the trigram if the evidence is
backoff
sufﬁcient, otherwise we use the bigram, otherwise the unigram. In other words, we
only “back off” to a lower-order n-gram if we have zero evidence for a higher-order
n-gram. By contrast, in interpolation, we always mix the probability estimates
interpolation
from all the n-gram estimators, weighting and combining the trigram, bigram, and
unigram counts.
In simple linear interpolation, we combine different order n-grams by linearly
interpolating them. Thus, we estimate the trigram probability P(wn|wn−wn−) by
mixing together the unigram, bigram, and trigram probabilities, each weighted by a
λ:
ˆP(wn|wn−wn−) = λP(wn)
+λP(wn|wn−)
+λP(wn|wn−wn−)

SMOOTHING
The λs must sum to , making Eq. . equivalent to a weighted average. In a
slightly more sophisticated version of linear interpolation, each λ weight is com-
puted by conditioning on the context. This way, if we have particularly accurate
counts for a particular bigram, we assume that the counts of the trigrams based on
this bigram will be more trustworthy, so we can make the λs for those trigrams
higher and thus give that trigram more weight in the interpolation. Equation .
shows the equation for interpolation with context-conditioned weights:
ˆP(wn|wn−wn−) = λ(wn−:n−)P(wn)
+λ(wn−:n−)P(wn|wn−)
+λ(wn−:n−)P(wn|wn−wn−)
How are these λ values set? Both the simple interpolation and conditional interpo-
lation λs are learned from a held-out corpus. A held-out corpus is an additional
held-out
training corpus, so-called because we hold it out from the training data, that we use
to set hyperparameters like these λ values. We do so by choosing the λ values that
maximize the likelihood of the held-out corpus. That is, we ﬁx the n-gram probabil-
ities and then search for the λ values that—when plugged into Eq. .—give us the
highest probability of the held-out set. There are various ways to ﬁnd this optimal
set of λs. One way is to use the EM algorithm, an iterative learning algorithm that
converges on locally optimal λs (Jelinek and Mercer, ).
In a backoff n-gram model, if the n-gram we need has zero counts, we approx-
imate it by backing off to the (n-)-gram. We continue backing off until we reach a
history that has some counts.
In order for a backoff model to give a correct probability distribution, we have
to discount the higher-order n-grams to save some probability mass for the lower
discount
order n-grams. Just as with add-one smoothing, if the higher-order n-grams aren’t
discounted and we just used the undiscounted MLE probability, then as soon as we
replaced an n-gram which has zero probability with a lower-order n-gram, we would
be adding probability mass, and the total probability assigned to all possible strings
by the language model would be greater than ! In addition to this explicit discount
factor, we’ll need a function α to distribute this probability mass to the lower order
n-grams.
This kind of backoff with discounting is also called Katz backoff. In Katz back-
Katz backoff
off we rely on a discounted probability P∗ if we’ve seen this n-gram before (i.e., if
we have non-zero counts). Otherwise, we recursively back off to the Katz probabil-
ity for the shorter-history (n-)-gram. The probability for a backoff n-gram PBO is
thus computed as follows:
P∗(wn|wn−N+:n−),
if C(wn−N+:n) >
PBO(wn|wn−N+:n−) =
α(wn−N+:n−)PBO(wn|wn−N+:n−),
otherwise.
Katz backoff is often combined with a smoothing method called Good-Turing.
Good-Turing
The combined Good-Turing backoff algorithm involves quite detailed computation
for estimating the Good-Turing smoothing and the P∗ and α values.

CHAPTER
N-GRAM LANGUAGE MODELS
Huge Language Models and Stupid Backoff
By using text from the web or other enormous collections, it is possible to build
extremely large language models. The Web  Trillion -gram corpus released by
Google includes various large sets of n-grams, including -grams through -grams
from all the ﬁve-word sequences that appear at least  times from ,,,,
words of text from publicly accessible Web pages in English (Franz and Brants,
). Google has also released Google Books Ngrams corpora with n-grams drawn
from their book collections, including another  billion tokens of n-grams from
Chinese, English, French, German, Hebrew, Italian, Russian, and Spanish (Lin et al.,
a). Smaller but more carefully curated n-gram corpora for English include
the million most frequent n-grams drawn from the COCA (Corpus of Contempo-
rary American English)  billion word corpus of American English (Davies, ).
COCA is a balanced corpus, meaning that it has roughly equal numbers of words
from different genres: web, newspapers, spoken conversation transcripts, ﬁction,
and so on, drawn from the period -, and has the context of each n-gram as
well as labels for genre and provenance.
Some example -grams from the Google Web corpus:
-gram
Count
serve as the incoming
serve as the incubator
serve as the independent
serve as the index
serve as the indication
serve as the indicator
serve as the indicators
Efﬁciency considerations are important when building language models that use
such large sets of n-grams. Rather than store each word as a string, it is generally
represented in memory as a -bit hash number, with the words themselves stored
on disk. Probabilities are generally quantized using only - bits (instead of -byte
ﬂoats), and n-grams are stored in reverse tries.
An n-gram language model can also be shrunk by pruning, for example only
storing n-grams with counts greater than some threshold (such as the count threshold
of  used for the Google n-gram release) or using entropy to prune less-important
n-grams (Stolcke, ). Another option is to build approximate language models
using techniques like Bloom ﬁlters (Talbot and Osborne , Church et al. ).
Bloom ﬁlters
Finally, efﬁcient language model toolkits like KenLM (Heaﬁeld , Heaﬁeld et al.
) use sorted arrays, efﬁciently combine probabilities and backoffs in a single
value, and use merge sorts to efﬁciently build the probability tables in a minimal
number of passes through a large corpus.
Although with these toolkits it is possible to build web-scale language models
using advanced smoothing algorithms like the Kneser-Ney algorithm we will see in
Section ., Brants et al. () show that with very large language models a much
simpler algorithm may be sufﬁcient. The algorithm is called stupid backoff. Stupid
stupid backoff
backoff gives up the idea of trying to make the language model a true probability dis-
tribution. There is no discounting of the higher-order probabilities. If a higher-order
n-gram has a zero count, we simply backoff to a lower order n-gram, weighed by a
ﬁxed (context-independent) weight. This algorithm does not produce a probability

ADVANCED: KNESER-NEY SMOOTHING
distribution, so we’ll follow Brants et al. () in referring to it as S:
count(wi−N+:i)
count(wi−N+:i−)
if count(wi−N+:i) >
S(wi|wi−N+:i−) =
λS(wi|wi−N+:i−)
otherwise
The backoff terminates in the unigram, which has score S(w) = count(w)
. Brants et al.
() ﬁnd that a value of . worked well for λ.
Advanced: Kneser-Ney Smoothing
A popular advanced n-gram smoothing method is the interpolated Kneser-Ney al-
Kneser-Ney
gorithm (Kneser and Ney , Chen and Goodman ).
Absolute Discounting
Kneser-Ney has its roots in a method called absolute discounting. Recall that dis-
counting of the counts for frequent n-grams is necessary to save some probability
mass for the smoothing algorithm to distribute to the unseen n-grams.
To see this, we can use a clever idea from Church and Gale (). Consider
an n-gram that has count . We need to discount this count by some amount. But
how much should we discount it? Church and Gale’s clever idea was to look at a
held-out corpus and just see what the count is for all those bigrams that had count
in the training set. They computed a bigram grammar from  million words of
AP newswire and then checked the counts of each of these bigrams in another
million words. On average, a bigram that occurred  times in the ﬁrst  million
words occurred . times in the next  million words. Fig. . from Church and
Gale () shows these counts for bigrams with c from  to .
Bigram count in
Bigram count in
training set
heldout set
Figure .
For all bigrams in  million words of AP newswire of count , , ,...,, the
counts of these bigrams in a held-out corpus also of  million words.
Notice in Fig. . that except for the held-out counts for  and , all the other
bigram counts in the held-out set could be estimated pretty well by just subtracting
. from the count in the training set! Absolute discounting formalizes this intu-
absolute
discounting
ition by subtracting a ﬁxed (absolute) discount d from each count. The intuition is
that since we have good estimates already for the very high counts, a small discount

CHAPTER
N-GRAM LANGUAGE MODELS
d won’t affect them much. It will mainly modify the smaller counts, for which we
don’t necessarily trust the estimate anyway, and Fig. . suggests that in practice this
discount is actually a good one for bigrams with counts  through . The equation
for interpolated absolute discounting applied to bigrams:
PAbsoluteDiscounting(wi|wi−) = C(wi−wi)−d
vC(wi− v) +λ(wi−)P(wi)
The ﬁrst term is the discounted bigram, with  ≤ d ≤ , and the second term is the
unigram with an interpolation weight λ. By inspection of Fig. ., it looks like just
setting all the d values to . would work very well, or perhaps keeping a separate
second discount value of . for the bigrams with counts of . There are principled
methods for setting d; for example, Ney et al. () set d as a function of n and
n, the number of unigrams that have a count of  and a count of , respectively:
d =
n +n
Kneser-Ney Discounting
Kneser-Ney discounting (Kneser and Ney, ) augments absolute discounting
with a more sophisticated way to handle the lower-order unigram distribution. Con-
sider the job of predicting the next word in this sentence, assuming we are interpo-
lating a bigram and a unigram model.
I can’t see without my reading
The word glasses seems much more likely to follow here than, say, the word
Kong, so we’d like our unigram model to prefer glasses. But in fact it’s Kong that is
more common, since Hong Kong is a very frequent word. A standard unigram model
will assign Kong a higher probability than glasses. We would like to capture the
intuition that although Kong is frequent, it is mainly only frequent in the phrase Hong
Kong, that is, after the word Hong. The word glasses has a much wider distribution.
In other words, instead of P(w), which answers the question “How likely is
w?”, we’d like to create a unigram model that we might call PCONTINUATION, which
answers the question “How likely is w to appear as a novel continuation?”. How can
we estimate this probability of seeing the word w as a novel continuation, in a new
unseen context? The Kneser-Ney intuition is to base our estimate of PCONTINUATION
on the number of different contexts word w has appeared in, that is, the number of
bigram types it completes. Every bigram type was a novel continuation the ﬁrst time
it was seen. We hypothesize that words that have appeared in more contexts in the
past are more likely to appear in some new context as well. The number of times a
word w appears as a novel continuation can be expressed as:
PCONTINUATION(w) ∝ |{v : C(vw) > }|
To turn this count into a probability, we normalize by the total number of word
bigram types. In summary:
PCONTINUATION(w) =
|{v : C(vw) > }|
|{(u′,w′) : C(u′w′) > }|
An equivalent formulation based on a different metaphor is to use the number of
word types seen to precede w (Eq. . repeated):
PCONTINUATION(w) ∝ |{v : C(vw) > }|

ADVANCED: KNESER-NEY SMOOTHING
normalized by the number of words preceding all words, as follows:
PCONTINUATION(w) =
|{v : C(vw) > }|
w′ |{v : C(vw′) > }|
A frequent word (Kong) occurring in only one context (Hong) will have a low con-
tinuation probability.
The ﬁnal equation for Interpolated Kneser-Ney smoothing for bigrams is then:
Interpolated
Kneser-Ney
PKN(wi|wi−) = max(C(wi−wi)−d,)
C(wi−)
+λ(wi−)PCONTINUATION(wi)
The λ is a normalizing constant that is used to distribute the probability mass we’ve
discounted:
λ(wi−) =
vC(wi−v)|{w : C(wi−w) > }|
The ﬁrst term,
vC(wi−v), is the normalized discount (the discount d,  ≤ d ≤
, was introduced in the absolute discounting section above). The second term,
|{w : C(wi−w) > }|, is the number of word types that can follow wi− or, equiva-
lently, the number of word types that we discounted; in other words, the number of
times we applied the normalized discount.
The general recursive formulation is as follows:
PKN(wi|wi−n+:i−) = max(cKN(wi−n+:i)−d,)
v cKN(wi−n+:i− v)
+λ(wi−n+:i−)PKN(wi|wi−n+:i−)
where the deﬁnition of the count cKN depends on whether we are counting the
highest-order n-gram being interpolated (for example trigram if we are interpolating
trigram, bigram, and unigram) or one of the lower-order n-grams (bigram or unigram
if we are interpolating trigram, bigram, and unigram):
cKN() =

count()
for the highest order
continuationcount()
for lower orders
The continuation count of a string  is the number of unique single word contexts for
that string .
At the termination of the recursion, unigrams are interpolated with the uniform
distribution, where the parameter ϵ is the empty string:
PKN(w) = max(cKN(w)−d,)
w′ cKN(w′)
+λ(ϵ)
If we want to include an unknown word <UNK>, it’s just included as a regular vo-
cabulary entry with count zero, and hence its probability will be a lambda-weighted
uniform distribution λ(ϵ)
V .
The best performing version of Kneser-Ney smoothing is called modiﬁed Kneser-
Ney smoothing, and is due to Chen and Goodman (). Rather than use a single
modiﬁed
Kneser-Ney
ﬁxed discount d, modiﬁed Kneser-Ney uses three different discounts d, d, and
d+ for n-grams with counts of ,  and three or more, respectively. See Chen and
Goodman (, p. ) or Heaﬁeld et al. () for the details.

CHAPTER
N-GRAM LANGUAGE MODELS
Advanced: Perplexity’s Relation to Entropy
We introduced perplexity in Section . as a way to evaluate n-gram models on
a test set. A better n-gram model is one that assigns a higher probability to the
test data, and perplexity is a normalized version of the probability of the test set.
The perplexity measure actually arises from the information-theoretic concept of
cross-entropy, which explains otherwise mysterious properties of perplexity (why
the inverse probability, for example?) and its relationship to entropy. Entropy is a
Entropy
measure of information. Given a random variable X ranging over whatever we are
predicting (words, letters, parts of speech, the set of which we’ll call χ) and with a
particular probability function, call it p(x), the entropy of the random variable X is:
x∈χ
p(x)log p(x)
H(X) = −
The log can, in principle, be computed in any base. If we use log base , the
resulting value of entropy will be measured in bits.
One intuitive way to think about entropy is as a lower bound on the number of
bits it would take to encode a certain decision or piece of information in the optimal
coding scheme.
Consider an example from the standard information theory textbook Cover and
Thomas (). Imagine that we want to place a bet on a horse race but it is too
far to go all the way to Yonkers Racetrack, so we’d like to send a short message to
the bookie to tell him which of the eight horses to bet on. One way to encode this
message is just to use the binary representation of the horse’s number as the code;
thus, horse  would be , horse  , horse  , and so on, with horse  coded
as . If we spend the whole day betting and each horse is coded with  bits, on
average we would be sending  bits per race.
Can we do better? Suppose that the spread is the actual distribution of the bets
placed and that we represent it as the prior probability of each horse as follows:
Horse
Horse
Horse
Horse
Horse
Horse
Horse
Horse
The entropy of the random variable X that ranges over horses gives us a lower
bound on the number of bits and is
H(X) = −
i=
p(i)log p(i)
i=
log
log
log
log
log
=  bits
A code that averages  bits per race can be built with short encodings for more
probable horses, and longer encodings for less probable horses. For example, we
could encode the most likely horse with the code , and the remaining horses as ,
then , , , , , and .

ADVANCED: PERPLEXITY’S RELATION TO ENTROPY
What if the horses are equally likely? We saw above that if we used an equal-
length binary code for the horse numbers, each horse took  bits to code, so the
average was . Is the entropy the same? In this case each horse would have a
probability of
. The entropy of the choice of horses is then
H(X) = −
log
= −log
=  bits
i=
i=
Until now we have been computing the entropy of a single variable. But most
of what we will use entropy for involves sequences. For a grammar, for example,
we will be computing the entropy of some sequence of words W = {w,w,...,wn}.
One way to do this is to have a variable that ranges over sequences of words. For
example we can compute the entropy of a random variable that ranges over all ﬁnite
sequences of words of length n in some language L as follows:
w:n∈L
p(w:n)log p(w:n)
H(w,w,...,wn) = −
We could deﬁne the entropy rate (we could also think of this as the per-word
entropy rate
entropy) as the entropy of this sequence divided by the number of words:
nH(w:n) = −
w:n∈L
p(w:n)log p(w:n)
But to measure the true entropy of a language, we need to consider sequences of
inﬁnite length. If we think of a language as a stochastic process L that produces a
sequence of words, and allow W to represent the sequence of words w,...,wn, then
L’s entropy rate H(L) is deﬁned as
H(L) = lim
n→∞
nH(w,w,...,wn)
= − lim
n→∞
W∈L
p(w,...,wn)log p(w,...,wn)
The Shannon-McMillan-Breiman theorem (Algoet and Cover , Cover and
Thomas ) states that if the language is regular in certain ways (to be exact, if it
is both stationary and ergodic),
n log p(ww ...wn)
H(L) = lim
n→∞−
That is, we can take a single sequence that is long enough instead of summing
over all possible sequences. The intuition of the Shannon-McMillan-Breiman the-
orem is that a long-enough sequence of words will contain in it many other shorter
sequences and that each of these shorter sequences will reoccur in the longer se-
quence according to their probabilities.
A stochastic process is said to be stationary if the probabilities it assigns to a
Stationary
sequence are invariant with respect to shifts in the time index. In other words, the
probability distribution for words at time t is the same as the probability distribution
at time t + . Markov models, and hence n-grams, are stationary. For example, in
a bigram, Pi is dependent only on Pi−. So if we shift our time index by x, Pi+x is
still dependent on Pi+x−. But natural language is not stationary, since as we show

CHAPTER
N-GRAM LANGUAGE MODELS
in Appendix D, the probability of upcoming words can be dependent on events that
were arbitrarily distant and time dependent. Thus, our statistical models only give
an approximation to the correct distributions and entropies of natural language.
To summarize, by making some incorrect but convenient simplifying assump-
tions, we can compute the entropy of some stochastic process by taking a very long
sample of the output and computing its average log probability.
Now we are ready to introduce cross-entropy. The cross-entropy is useful when
cross-entropy
we don’t know the actual probability distribution p that generated some data. It
allows us to use some m, which is a model of p (i.e., an approximation to p). The
cross-entropy of m on p is deﬁned by
H(p,m) = lim
n→∞−
W∈L
p(w,...,wn)logm(w,...,wn)
That is, we draw sequences according to the probability distribution p, but sum
the log of their probabilities according to m.
Again, following the Shannon-McMillan-Breiman theorem, for a stationary er-
godic process:
n logm(ww ...wn)
H(p,m) = lim
n→∞−
This means that, as for entropy, we can estimate the cross-entropy of a model
m on some distribution p by taking a single sequence that is long enough instead of
summing over all possible sequences.
What makes the cross-entropy useful is that the cross-entropy H(p,m) is an up-
per bound on the entropy H(p). For any model m:
H(p) ≤ H(p,m)
This means that we can use some simpliﬁed model m to help estimate the true en-
tropy of a sequence of symbols drawn according to probability p. The more accurate
m is, the closer the cross-entropy H(p,m) will be to the true entropy H(p). Thus,
the difference between H(p,m) and H(p) is a measure of how accurate a model is.
Between two models m and m, the more accurate model will be the one with the
lower cross-entropy. (The cross-entropy can never be lower than the true entropy, so
a model cannot err by underestimating the true entropy.)
We are ﬁnally ready to see the relation between perplexity and cross-entropy
as we saw it in Eq. .. Cross-entropy is deﬁned in the limit as the length of the
observed word sequence goes to inﬁnity. We will need an approximation to cross-
entropy, relying on a (sufﬁciently long) sequence of ﬁxed length. This approxima-
tion to the cross-entropy of a model M = P(wi|wi−N+:i−) on a sequence of words
W is
H(W) = −
N logP(ww ...wN)
The perplexity of a model P on a sequence of words W is now formally deﬁned as
perplexity
raised to the power of this cross-entropy:

SUMMARY
Perplexity(W) = H(W)
= P(ww ...wN)−
P(ww ...wN)
i=
P(wi|w ...wi−)
Summary
This chapter introduced language modeling and the n-gram, one of the most widely
used tools in language processing.
Language models offer a way to assign a probability to a sentence or other
sequence of words, and to predict a word from preceding words.
n-grams are Markov models that estimate words from a ﬁxed window of pre-
vious words. n-gram probabilities can be estimated by counting in a corpus
and normalizing (the maximum likelihood estimate).
n-gram language models are evaluated extrinsically in some task, or intrinsi-
cally using perplexity.
The perplexity of a test set according to a language model is the geometric
mean of the inverse test set probability computed by the model.
Smoothing algorithms provide a more sophisticated way to estimate the prob-
ability of n-grams. Commonly used smoothing algorithms for n-grams rely on
lower-order n-gram counts through backoff or interpolation.
Both backoff and interpolation require discounting to create a probability dis-
tribution.
Kneser-Ney smoothing makes use of the probability of a word being a novel
continuation. The interpolated Kneser-Ney smoothing algorithm mixes a
discounted probability with a lower-order continuation probability.
Bibliographical and Historical Notes
The underlying mathematics of the n-gram was ﬁrst proposed by Markov (),
who used what are now called Markov chains (bigrams and trigrams) to predict
whether an upcoming letter in Pushkin’s Eugene Onegin would be a vowel or a con-
sonant. Markov classiﬁed , letters as V or C and computed the bigram and
trigram probability that a given letter would be a vowel given the previous one or
two letters. Shannon () applied n-grams to compute approximations to English
word sequences. Based on Shannon’s work, Markov models were commonly used in
engineering, linguistic, and psychological work on modeling word sequences by the
s. In a series of extremely inﬂuential papers starting with Chomsky () and
including Chomsky () and Miller and Chomsky (), Noam Chomsky argued
that “ﬁnite-state Markov processes”, while a possibly useful engineering heuristic,

CHAPTER
N-GRAM LANGUAGE MODELS
were incapable of being a complete cognitive model of human grammatical knowl-
edge. These arguments led many linguists and computational linguists to ignore
work in statistical modeling for decades.
The resurgence of n-gram models came from Fred Jelinek and colleagues at the
IBM Thomas J. Watson Research Center, who were inﬂuenced by Shannon, and
James Baker at CMU, who was inﬂuenced by the prior, classiﬁed work of Leonard
Baum and colleagues on these topics at labs like IDA. Independently these two labs
successfully used n-grams in their speech recognition systems at the same time
(Baker b, Jelinek et al. , Baker a, Bahl et al. , Jelinek ).
The terms “language model” and “perplexity” were ﬁrst used for this technology by
the IBM group. Jelinek and his colleagues used the term language model in pretty
modern way, to mean the entire set of linguistic inﬂuences on word sequence prob-
abilities, including grammar, semantics, discourse, and even speaker characteristics,
rather than just the particular n-gram model itself.
Add-one smoothing derives from Laplace’s  law of succession and was ﬁrst
applied as an engineering solution to the zero frequency problem by Jeffreys ()
based on an earlier Add-K suggestion by Johnson (). Problems with the add-
one algorithm are summarized in Gale and Church ().
A wide variety of different language modeling and smoothing techniques were
proposed in the s and s, including Good-Turing discounting—ﬁrst applied to the
n-gram smoothing at IBM by Katz (N´adas , Church and Gale )— Witten-
Bell discounting (Witten and Bell, ), and varieties of class-based n-gram mod-
class-based
n-gram
els that used information about word classes. Starting in the late s, Chen and
Goodman performed a number of carefully controlled experiments comparing differ-
ent discounting algorithms, cache models, class-based models, and other language
model parameters (Chen and Goodman , Goodman , inter alia). They
showed the advantages of Modiﬁed Interpolated Kneser-Ney, which became the
standard baseline for n-gram language modeling, especially because they showed
that caches and class-based models provided only minor additional improvement.
SRILM (Stolcke, ) and KenLM (Heaﬁeld , Heaﬁeld et al. ) are pub-
licly available toolkits for building n-gram language models.
Modern language modeling is more commonly done with neural network lan-
guage models, which solve the major problems with n-grams: the number of param-
eters increases exponentially as the n-gram order increases, and n-grams have no
way to generalize from training to test set. Neural language models instead project
words into a continuous space in which words with similar contexts have similar
representations. We’ll introduce feedforward language models (Bengio et al. ,
Schwenk ) in Chapter , recurrent language models (Mikolov, ) in Chap-
ter , and transformer-based large language models in Chapter .
Exercises
Write out the equation for trigram probability estimation (modifying Eq. .).
Now write out all the non-zero trigram probabilities for the I am Sam corpus
on page .
Calculate the probability of the sentence i want chinese food. Give two
probabilities, one using Fig. . and the ‘useful probabilities’ just below it on
page , and another using the add- smoothed table in Fig. .. Assume the
additional add- smoothed probabilities P(i|<s>) = . and P(</s>|food) =

EXERCISES
Which of the two probabilities you computed in the previous exercise is higher,
unsmoothed or smoothed? Explain why.
We are given the following corpus, modiﬁed from the one in the chapter:
<s> I am Sam </s>
<s> Sam I am </s>
<s> I am Sam </s>
<s> I do not like green eggs and Sam </s>
Using a bigram language model with add-one smoothing, what is P(Sam |
am)? Include <s> and </s> in your counts just like any other token.
Suppose we didn’t use the end-symbol </s>. Train an unsmoothed bigram
grammar on the following training corpus without using the end-symbol </s>:
<s> a b
<s> b b
<s> b a
<s> a a
Demonstrate that your bigram model does not assign a single probability dis-
tribution across all sentence lengths by showing that the sum of the probability
of the four possible  word sentences over the alphabet {a,b} is ., and the
sum of the probability of all possible  word sentences over the alphabet {a,b}
is also ..
Suppose we train a trigram language model with add-one smoothing on a
given corpus. The corpus contains V word types. Express a formula for esti-
mating P(w|w,w), where w is a word which follows the bigram (w,w),
in terms of various n-gram counts and V. Use the notation c(w,w,w) to
denote the number of times that trigram (w,w,w) occurs in the corpus, and
so on for bigrams and unigrams.
We are given the following corpus, modiﬁed from the one in the chapter:
<s> I am Sam </s>
<s> Sam I am </s>
<s> I am Sam </s>
<s> I do not like green eggs and Sam </s>
If we use linear interpolation smoothing between a maximum-likelihood bi-
gram model and a maximum-likelihood unigram model with λ =
and λ =
, what is P(Sam|am)? Include <s> and </s> in your counts just like any
other token.
Write a program to compute unsmoothed unigrams and bigrams.
Run your n-gram program on two different small corpora of your choice (you
might use email text or newsgroups). Now compare the statistics of the two
corpora. What are the differences in the most common unigrams between the
two? How about interesting differences in bigrams?
. Add an option to your program to generate random sentences.
. Add an option to your program to compute the perplexity of a test set.
. You are given a training set of  numbers that consists of  zeros and
each of the other digits -. Now we see the following test set:
. What is the unigram perplexity?

CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
Naive Bayes, Text Classiﬁca-
tion, and Sentiment
CHAPTER
Classiﬁcation lies at the heart of both human and machine intelligence. Deciding
what letter, word, or image has been presented to our senses, recognizing faces
or voices, sorting mail, assigning grades to homeworks; these are all examples of
assigning a category to an input. The potential challenges of this task are highlighted
by the fabulist Jorge Luis Borges (), who imagined classifying animals into:
(a) those that belong to the Emperor, (b) embalmed ones, (c) those that
are trained, (d) suckling pigs, (e) mermaids, (f) fabulous ones, (g) stray
dogs, (h) those that are included in this classiﬁcation, (i) those that
tremble as if they were mad, (j) innumerable ones, (k) those drawn with
a very ﬁne camel’s hair brush, (l) others, (m) those that have just broken
a ﬂower vase, (n) those that resemble ﬂies from a distance.
Many language processing tasks involve classiﬁcation, although luckily our classes
are much easier to deﬁne than those of Borges. In this chapter we introduce the naive
Bayes algorithm and apply it to text categorization, the task of assigning a label or
text
categorization
category to an entire text or document.
We focus on one common text categorization task, sentiment analysis, the ex-
sentiment
analysis
traction of sentiment, the positive or negative orientation that a writer expresses
toward some object. A review of a movie, book, or product on the web expresses the
author’s sentiment toward the product, while an editorial or political text expresses
sentiment toward a candidate or political action. Extracting consumer or public sen-
timent is thus relevant for ﬁelds from marketing to politics.
The simplest version of sentiment analysis is a binary classiﬁcation task, and
the words of the review provide excellent cues. Consider, for example, the follow-
ing phrases extracted from positive and negative reviews of movies and restaurants.
Words like great, richly, awesome, and pathetic, and awful and ridiculously are very
informative cues:
+ ...zany characters and richly applied satire, and some great plot twists
− It was pathetic. The worst part about it was the boxing scenes...
+ ...awesome caramel sauce and sweet toasty almonds. I love this place!
− ...awful pizza and ridiculously overpriced...
Spam detection is another important commercial application, the binary clas-
spam detection
siﬁcation task of assigning an email to one of the two classes spam or not-spam.
Many lexical and other features can be used to perform this classiﬁcation. For ex-
ample you might quite reasonably be suspicious of an email containing phrases like
“online pharmaceutical” or “WITHOUT ANY COST” or “Dear Winner”.
Another thing we might want to know about a text is the language it’s written
in. Texts on social media, for example, can be in any number of languages and
we’ll need to apply different processing. The task of language id is thus the ﬁrst
language id
step in most language processing pipelines. Related text classiﬁcation tasks like au-
thorship attribution— determining a text’s author— are also relevant to the digital
authorship
attribution
humanities, social sciences, and forensic linguistics.

NAIVE BAYES CLASSIFIERS
Finally, one of the oldest tasks in text classiﬁcation is assigning a library sub-
ject category or topic label to a text. Deciding whether a research paper concerns
epidemiology or instead, perhaps, embryology, is an important component of infor-
mation retrieval. Various sets of subject categories exist, such as the MeSH (Medical
Subject Headings) thesaurus. In fact, as we will see, subject category classiﬁcation
is the task for which the naive Bayes algorithm was invented in  Maron ().
Classiﬁcation is essential for tasks below the level of the document as well.
We’ve already seen period disambiguation (deciding if a period is the end of a sen-
tence or part of a word), and word tokenization (deciding if a character should be
a word boundary). Even language modeling can be viewed as classiﬁcation: each
word can be thought of as a class, and so predicting the next word is classifying the
context-so-far into a class for each next word. A part-of-speech tagger (Chapter )
classiﬁes each occurrence of a word in a sentence as, e.g., a noun or a verb.
The goal of classiﬁcation is to take a single observation, extract some useful
features, and thereby classify the observation into one of a set of discrete classes.
One method for classifying text is to use rules handwritten by humans. Handwrit-
ten rule-based classiﬁers can be components of state-of-the-art systems in language
processing. But rules can be fragile, as situations or data change over time, and for
some tasks humans aren’t necessarily good at coming up with the rules.
The most common way of doing text classiﬁcation in language processing is
instead via supervised machine learning, the subject of this chapter. In supervised
supervised
machine
learning
learning, we have a data set of input observations, each associated with some correct
output (a ‘supervision signal’). The goal of the algorithm is to learn how to map
from a new observation to a correct output.
Formally, the task of supervised classiﬁcation is to take an input x and a ﬁxed
set of output classes Y = {y,y,...,yM} and return a predicted class y ∈ Y. For
text classiﬁcation, we’ll sometimes talk about c (for “class”) instead of y as our
output variable, and d (for “document”) instead of x as our input variable. In the
supervised situation we have a training set of N documents that have each been hand-
labeled with a class: {(d,c),....,(dN,cN)}. Our goal is to learn a classiﬁer that is
capable of mapping from a new document d to its correct class c ∈ C, where C is
some set of useful document classes. A probabilistic classiﬁer additionally will tell
us the probability of the observation being in the class. This full distribution over
the classes can be useful information for downstream decisions; avoiding making
discrete decisions early on can be useful when combining systems.
Many kinds of machine learning algorithms are used to build classiﬁers. This
chapter introduces naive Bayes; the following one introduces logistic regression.
These exemplify two ways of doing classiﬁcation. Generative classiﬁers like naive
Bayes build a model of how a class could generate some input data. Given an ob-
servation, they return the class most likely to have generated the observation. Dis-
criminative classiﬁers like logistic regression instead learn what features from the
input are most useful to discriminate between the different possible classes. While
discriminative systems are often more accurate and hence more commonly used,
generative classiﬁers still have a role.
Naive Bayes Classiﬁers
In this section we introduce the multinomial naive Bayes classiﬁer, so called be-
naive Bayes
classiﬁer
cause it is a Bayesian classiﬁer that makes a simplifying (naive) assumption about

CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
how the features interact.
The intuition of the classiﬁer is shown in Fig. .. We represent a text document
as if it were a bag of words, that is, an unordered set of words with their position
bag of words
ignored, keeping only their frequency in the document. In the example in the ﬁgure,
instead of representing the word order in all the phrases like “I love this movie” and
“I would recommend it”, we simply note that the word I occurred  times in the
entire excerpt, the word it  times, the words love, recommend, and movie once, and
so on.
fairy
it
always
love
to
it
whimsical
it
and
seen
areanyone
friend
dialogue
happy
recommend
adventure
satirical
sweet
of
who
it
movie
to
it
but
romantic
yet
several
humor
again
the
it
the
would
seen
to
scenes
the
manages
the
fun
times
and
and
about
I love this movie! It's sweet,
but with satirical humor. The
dialogue is great and the
adventure scenes are fun...
It manages to be whimsical
and romantic while laughing
at the conventions of the
fairy tale genre. I would
recommend it to just about
anyone. I've seen it several
times, and I'm always happy
to see it again whenever I
have a friend who hasn't
seen it yet!
while
whenever
have
conventions
with
it
the
to
and
seen
yet
would
whimsical
times
sweet
satirical
adventure
genre
fairy
humor
have
great
Figure .
Intuition of the multinomial naive Bayes classiﬁer applied to a movie review. The position of the
words is ignored (the bag-of-words assumption) and we make use of the frequency of each word.
Naive Bayes is a probabilistic classiﬁer, meaning that for a document d, out of
all classes c ∈ C the classiﬁer returns the class ˆc which has the maximum posterior
probability given the document. In Eq. . we use the hat notation ˆ to mean “our
estimate of the correct class”.
ˆc = argmax
c∈C
P(c|d)
This idea of Bayesian inference has been known since the work of Bayes (),
Bayesian
inference
and was ﬁrst applied to text classiﬁcation by Mosteller and Wallace (). The
intuition of Bayesian classiﬁcation is to use Bayes’ rule to transform Eq. . into
other probabilities that have some useful properties. Bayes’ rule is presented in
Eq. .; it gives us a way to break down any conditional probability P(x|y) into
three other probabilities:
P(y)
P(x|y) = P(y|x)P(x)
We can then substitute Eq. . into Eq. . to get Eq. .:
P(d|c)P(c)
P(d)
ˆc = argmax
c∈C
P(c|d) = argmax
c∈C

NAIVE BAYES CLASSIFIERS
We can conveniently simplify Eq. . by dropping the denominator P(d). This
is possible because we will be computing P(d|c)P(c)
P(d)
for each possible class. But P(d)
doesn’t change for each class; we are always asking about the most likely class for
the same document d, which must have the same probability P(d). Thus, we can
choose the class that maximizes this simpler formula:
ˆc = argmax
c∈C
P(c|d) = argmax
c∈C
P(d|c)P(c)
We call Naive Bayes a generative model because we can read Eq. . as stating
a kind of implicit assumption about how a document is generated: ﬁrst a class is
sampled from P(c), and then the words are generated by sampling from P(d|c). (In
fact we could imagine generating artiﬁcial documents, or at least their word counts,
by following this process). We’ll say more about this intuition of generative models
in Chapter .
To return to classiﬁcation: we compute the most probable class ˆc given some
document d by choosing the class which has the highest product of two probabilities:
the prior probability of the class P(c) and the likelihood of the document P(d|c):
prior
probability
likelihood
ˆc = argmax
c∈C
prior
z}|{
P(c)
likelihood
z }| {
P(d|c)
Without loss of generalization, we can represent a document d as a set of features
f, f,..., fn:
ˆc = argmax
c∈C
likelihood
P(f, f,...., fn|c)
prior
z}|{
P(c)
Unfortunately, Eq. . is still too hard to compute directly: without some sim-
plifying assumptions, estimating the probability of every possible combination of
features (for example, every possible set of words and positions) would require huge
numbers of parameters and impossibly large training sets. Naive Bayes classiﬁers
therefore make two simplifying assumptions.
The ﬁrst is the bag-of-words assumption discussed intuitively above: we assume
position doesn’t matter, and that the word “love” has the same effect on classiﬁcation
whether it occurs as the st, th, or last word in the document. Thus we assume
that the features f, f,..., fn only encode word identity and not position.
The second is commonly called the naive Bayes assumption: this is the condi-
naive Bayes
assumption
tional independence assumption that the probabilities P(fi|c) are independent given
the class c and hence can be ‘naively’ multiplied as follows:
P(f, f,...., fn|c) = P( f|c)P( f|c)...P( fn|c)
The ﬁnal equation for the class chosen by a naive Bayes classiﬁer is thus:
f∈F
P(f|c)
cNB = argmax
c∈C
P(c)
To apply the naive Bayes classiﬁer to text, we need to consider word positions, by
simply walking an index through every word position in the document:
positions ← all word positions in test document
i∈positions
P(wi|c)
cNB = argmax
c∈C
P(c)

CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
Naive Bayes calculations, like calculations for language modeling, are done in log
space, to avoid underﬂow and increase speed. Thus Eq. . is generally instead
expressed as
i∈positions
logP(wi|c)
cNB = argmax
c∈C
logP(c)+
By considering features in log space, Eq. . computes the predicted class as a lin-
ear function of input features. Classiﬁers that use a linear combination of the inputs
to make a classiﬁcation decision —like naive Bayes and also logistic regression—
are called linear classiﬁers.
linear
classiﬁers
Training the Naive Bayes Classiﬁer
How can we learn the probabilities P(c) and P( fi|c)? Let’s ﬁrst consider the maxi-
mum likelihood estimate. We’ll simply use the frequencies in the data. For the class
prior P(c) we ask what percentage of the documents in our training set are in each
class c. Let Nc be the number of documents in our training data with class c and
Ndoc be the total number of documents. Then:
ˆP(c) = Nc
Ndoc
To learn the probability P(fi|c), we’ll assume a feature is just the existence of a word
in the document’s bag of words, and so we’ll want P(wi|c), which we compute as
the fraction of times the word wi appears among all words in all documents of topic
c. We ﬁrst concatenate all documents with category c into one big “category c” text.
Then we use the frequency of wi in this concatenated document to give a maximum
likelihood estimate of the probability:
ˆP(wi|c) =
count(wi,c)
w∈V count(w,c)
Here the vocabulary V consists of the union of all the word types in all classes, not
just the words in one class c.
There is a problem, however, with maximum likelihood training. Imagine we
are trying to estimate the likelihood of the word “fantastic” given class positive, but
suppose there are no training documents that both contain the word “fantastic” and
are classiﬁed as positive. Perhaps the word “fantastic” happens to occur (sarcasti-
cally?) in the class negative. In such a case the probability for this feature will be
zero:
ˆP(“fantastic”|positive) = count(“fantastic”,positive)
w∈V count(w,positive)
But since naive Bayes naively multiplies all the feature likelihoods together, zero
probabilities in the likelihood term for any class will cause the probability of the
class to be zero, no matter the other evidence!
The simplest solution is the add-one (Laplace) smoothing introduced in Chap-
ter . While Laplace smoothing is usually replaced by more sophisticated smoothing
In practice throughout this book, we’ll use log to mean natural log (ln) when the base is not speciﬁed.

TRAINING THE NAIVE BAYES CLASSIFIER
algorithms in language modeling, it is commonly used in naive Bayes text catego-
rization:
ˆP(wi|c) =
count(wi,c)+
w∈V (count(w,c)+) =
count(wi,c)+
 P
w∈V count(w,c)
+|V|
Note once again that it is crucial that the vocabulary V consists of the union of all the
word types in all classes, not just the words in one class c (try to convince yourself
why this must be true; see the exercise at the end of the chapter).
What do we do about words that occur in our test data but are not in our vocab-
ulary at all because they did not occur in any training document in any class? The
solution for such unknown words is to ignore them—remove them from the test
unknown word
document and not include any probability for them at all.
Finally, some systems choose to completely ignore another class of words: stop
words, very frequent words like the and a. This can be done by sorting the vocabu-
stop words
lary by frequency in the training set, and deﬁning the top – vocabulary entries
as stop words, or alternatively by using one of the many predeﬁned stop word lists
available online. Then each instance of these stop words is simply removed from
both training and test documents as if it had never occurred. In most text classiﬁca-
tion applications, however, using a stop word list doesn’t improve performance, and
so it is more common to make use of the entire vocabulary and not use a stop word
list.
Fig. . shows the ﬁnal algorithm.
function TRAIN NAIVE BAYES(D, C) returns log P(c) and log P(w|c)
for each class c ∈ C
# Calculate P(c) terms
Ndoc = number of documents in D
Nc = number of documents from D in class c
logprior[c]← log Nc
Ndoc
V←vocabulary of D
bigdoc[c]←append(d) for d ∈ D with class c
for each word w in V
# Calculate P(w|c) terms
count(w,c)←# of occurrences of w in bigdoc[c]
loglikelihood[w,c]← log
count(w,c) +
w′ in V (count (w′,c) + )
return logprior, loglikelihood, V
function TEST NAIVE BAYES(testdoc,logprior, loglikelihood, C, V) returns best c
for each class c ∈ C
sum[c]← logprior[c]
for each position i in testdoc
word←testdoc[i]
if word ∈ V
sum[c]←sum[c]+ loglikelihood[word,c]
return argmaxc sum[c]
Figure .
The naive Bayes algorithm, using add- smoothing. To use add-α smoothing
instead, change the + to +α for loglikelihood counts in training.

CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
Worked example
Let’s walk through an example of training and testing naive Bayes with add-one
smoothing. We’ll use a sentiment analysis domain with the two classes positive
(+) and negative (-), and take the following miniature training and test documents
simpliﬁed from actual movie reviews.
Cat
Documents
Training -
just plain boring
entirely predictable and lacks energy
no surprises and very few laughs
very powerful
the most fun ﬁlm of the summer
Test
predictable with no fun
The prior P(c) for the two classes is computed via Eq. . as
Nc
Ndoc :
P(−) =
P(+) =
The word with doesn’t occur in the training set, so we drop it completely (as
mentioned above, we don’t use unknown word models for naive Bayes). The like-
lihoods from the training set for the remaining three words “predictable”, “no”, and
“fun”, are as follows, from Eq. . (computing the probabilities for the remainder
of the words in the training set is left as an exercise for the reader):
P(“predictable”|−) =
P(“predictable”|+) = +
P(“no”|−) =
P(“no”|+) = +
P(“fun”|−) =
P(“fun”|+) = +
For the test sentence S = “predictable with no fun”, after removing the word ‘with’,
the chosen class, via Eq. ., is therefore computed as follows:
P(−)P(S|−) =
= .×−
× ××
P(+)P(S|+) =
= .×−
× ××
The model thus predicts the class negative for the test sentence.
Optimizing for Sentiment Analysis
While standard naive Bayes text classiﬁcation can work well for sentiment analysis,
some small changes are generally employed that improve performance.
First, for sentiment classiﬁcation and a number of other text classiﬁcation tasks,
whether a word occurs or not seems to matter more than its frequency. Thus it often
improves performance to clip the word counts in each document at  (see the end

OPTIMIZING FOR SENTIMENT ANALYSIS
of the chapter for pointers to these results). This variant is called binary multino-
mial naive Bayes or binary naive Bayes. The variant uses the same algorithm as
binary naive
Bayes
in Fig. . except that for each document we remove all duplicate words before con-
catenating them into the single big document during training and we also remove
duplicate words from test documents. Fig. . shows an example in which a set
of four documents (shortened and text-normalized for this example) are remapped
to binary, with the modiﬁed counts shown in the table on the right. The example
is worked without add- smoothing to make the differences clearer. Note that the
results counts need not be ; the word great has a count of  even for binary naive
Bayes, because it appears in multiple documents.
Four original documents:
NB
Binary
Counts
Counts
and
boxing
ﬁlm
− it was pathetic the worst part was the
boxing scenes
− no plot twists or great scenes
+ and satire and great plot twists
+ great scenes great ﬁlm
After per-document binarization:
great
it
no
or
part
pathetic
plot
satire
scenes
the
twists
− it was pathetic the worst part boxing
scenes
− no plot twists or great scenes
+ and satire great plot twists
+ great scenes ﬁlm
was
worst
Figure .
An example of binarization for the binary naive Bayes algorithm.
A second important addition commonly made when doing text classiﬁcation for
sentiment is to deal with negation. Consider the difference between I really like this
movie (positive) and I didn’t like this movie (negative). The negation expressed by
didn’t completely alters the inferences we draw from the predicate like. Similarly,
negation can modify a negative word to produce a positive review (don’t dismiss this
ﬁlm, doesn’t let us get bored).
A very simple baseline that is commonly used in sentiment analysis to deal with
negation is the following: during text normalization, prepend the preﬁx NOT to
every word after a token of logical negation (n’t, not, no, never) until the next punc-
tuation mark. Thus the phrase
didn’t like this movie , but I
becomes
didn’t NOT_like NOT_this NOT_movie , but I
Newly formed ‘words’ like NOT like, NOT recommend will thus occur more of-
ten in negative document and act as cues for negative sentiment, while words like
NOT bored, NOT dismiss will acquire positive associations. We will return in Chap-
ter  to the use of parsing to deal more accurately with the scope relationship be-
tween these negation words and the predicates they modify, but this simple baseline
works quite well in practice.

CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
Finally, in some situations we might have insufﬁcient labeled training data to
train accurate naive Bayes classiﬁers using all words in the training set to estimate
positive and negative sentiment. In such cases we can instead derive the positive
and negative word features from sentiment lexicons, lists of words that are pre-
sentiment
lexicons
annotated with positive or negative sentiment. Four popular lexicons are the General
Inquirer (Stone et al., ), LIWC (Pennebaker et al., ), the opinion lexicon
General
Inquirer
LIWC
of Hu and Liu (a) and the MPQA Subjectivity Lexicon (Wilson et al., ).
For example the MPQA subjectivity lexicon has  words each marked for
whether it is strongly or weakly biased positive or negative. Some examples:
+ : admirable, beautiful, conﬁdent, dazzling, ecstatic, favor, glee, great
− : awful, bad, bias, catastrophe, cheat, deny, envious, foul, harsh, hate
A common way to use lexicons in a naive Bayes classiﬁer is to add a feature
that is counted whenever a word from that lexicon occurs. Thus we might add a
feature called ‘this word occurs in the positive lexicon’, and treat all instances of
words in the lexicon as counts for that one feature, instead of counting each word
separately. Similarly, we might add as a second feature ‘this word occurs in the
negative lexicon’ of words in the negative lexicon. If we have lots of training data,
and if the test data matches the training data, using just two features won’t work as
well as using all the words. But when training data is sparse or not representative of
the test set, using dense lexicon features instead of sparse individual-word features
may generalize better.
We’ll return to this use of lexicons in Chapter , showing how these lexicons
can be learned automatically, and how they can be applied to many other tasks be-
yond sentiment classiﬁcation.
Naive Bayes for other text classiﬁcation tasks
In the previous section we pointed out that naive Bayes doesn’t require that our
classiﬁer use all the words in the training data as features. In fact features in naive
Bayes can express any property of the input text we want.
Consider the task of spam detection, deciding if a particular piece of email is
spam detection
an example of spam (unsolicited bulk email)—one of the ﬁrst applications of naive
Bayes to text classiﬁcation (Sahami et al., ).
A common solution here, rather than using all the words as individual features,
is to predeﬁne likely sets of words or phrases as features, combined with features
that are not purely linguistic. For example the open-source SpamAssassin tool
predeﬁnes features like the phrase “one hundred percent guaranteed”, or the feature
mentions millions of dollars, which is a regular expression that matches suspiciously
large sums of money. But it also includes features like HTML has a low ratio of text
to image area, that aren’t purely linguistic and might require some sophisticated
computation, or totally non-linguistic features about, say, the path that the email
took to arrive. More sample SpamAssassin features:
Email subject line is all capital letters
Contains phrases of urgency like “urgent reply”
Email subject line contains “online pharmaceutical”
HTML has unbalanced “head” tags
https://spamassassin.apache.org

NAIVE BAYES AS A LANGUAGE MODEL
Claims you can be removed from the list
For other tasks, like language id—determining what language a given piece
language id
of text is written in—the most effective naive Bayes features are not words at all,
but character n-grams, -grams (‘zw’) -grams (‘nya’, ‘ Vo’), or -grams (‘ie z’,
‘thei’), or, even simpler byte n-grams, where instead of using the multibyte Unicode
character representations called codepoints, we just pretend everything is a string of
raw bytes. Because spaces count as a byte, byte n-grams can model statistics about
the beginning or ending of words. A widely used naive Bayes system, langid.py
(Lui and Baldwin, ) begins with all possible n-grams of lengths -, using fea-
ture selection to winnow down to the most informative  ﬁnal features.
Language ID systems are trained on multilingual text, such as Wikipedia (Wiki-
pedia text in  different languages was used in (Lui and Baldwin, )), or newswire.
To make sure that this multilingual text correctly reﬂects different regions, dialects,
and socioeconomic classes, systems also add Twitter text in many languages geo-
tagged to many regions (important for getting world English dialects from countries
with large Anglophone populations like Nigeria or India), Bible and Quran transla-
tions, slang websites like Urban Dictionary, corpora of African American Vernacular
English (Blodgett et al., ), and so on (Jurgens et al., ).
Naive Bayes as a Language Model
As we saw in the previous section, naive Bayes classiﬁers can use any sort of fea-
ture: dictionaries, URLs, email addresses, network features, phrases, and so on. But
if, as in the previous section, we use only individual word features, and we use all
of the words in the text (not a subset), then naive Bayes has an important similar-
ity to language modeling. Speciﬁcally, a naive Bayes model can be viewed as a
set of class-speciﬁc unigram language models, in which the model for each class
instantiates a unigram language model.
Since the likelihood features from the naive Bayes model assign a probability to
each word P(word|c), the model also assigns a probability to each sentence:
i∈positions
P(wi|c)
P(s|c) =
Thus consider a naive Bayes model with the classes positive (+) and negative (-)
and the following model parameters:
P(w|+) P(w|-)
love .
this
fun
ﬁlm .
Each of the two columns above instantiates a language model that can assign a
probability to the sentence “I love this fun ﬁlm”:
P(“I love this fun ﬁlm”|+) = .×.×.×.×. = .
P(“I love this fun ﬁlm”|−) = .×.×.×.×. = .
CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
As it happens, the positive model assigns a higher probability to the sentence:
P(s|pos) > P(s|neg). Note that this is just the likelihood part of the naive Bayes
model; once we multiply in the prior a full naive Bayes model might well make a
different classiﬁcation decision.
Evaluation: Precision, Recall, F-measure
To introduce the methods for evaluating text classiﬁcation, let’s ﬁrst consider some
simple binary detection tasks. For example, in spam detection, our goal is to label
every text as being in the spam category (“positive”) or not in the spam category
(“negative”). For each item (email document) we therefore need to know whether
our system called it spam or not. We also need to know whether the email is actually
spam or not, i.e. the human-deﬁned labels for each document that we are trying to
match. We will refer to these human labels as the gold labels.
gold labels
Or imagine you’re the CEO of the Delicious Pie Company and you need to know
what people are saying about your pies on social media, so you build a system that
detects tweets concerning Delicious Pie. Here the positive class is tweets about
Delicious Pie and the negative class is all other tweets.
In both cases, we need a metric for knowing how well our spam detector (or
pie-tweet-detector) is doing. To evaluate any system for detecting things, we start
by building a confusion matrix like the one shown in Fig. .. A confusion matrix
confusion
matrix
is a table for visualizing how an algorithm performs with respect to the human gold
labels, using two dimensions (system output and gold labels), and each cell labeling
a set of possible outcomes. In the spam detection case, for example, true positives
are documents that are indeed spam (indicated by human-created gold labels) that
our system correctly said were spam. False negatives are documents that are indeed
spam but our system incorrectly labeled as non-spam.
To the bottom right of the table is the equation for accuracy, which asks what
percentage of all the observations (for the spam or pie examples that means all emails
or tweets) our system labeled correctly. Although accuracy might seem a natural
metric, we generally don’t use it for text classiﬁcation tasks. That’s because accuracy
doesn’t work well when the classes are unbalanced (as indeed they are with spam,
which is a large majority of email, or with tweets, which are mainly not about pie).
gold standard labels
gold positive
gold negative
precision =
tp
true positive
false positive
tp+fp
system
output
labels
false negative
true negative
system
positive
system
negative
accuracy =
tp+tn
recall = tp
tp+fp+tn+fn
tp+fn
Figure .
A confusion matrix for visualizing how well a binary classiﬁcation system per-
forms against gold standard labels.
To make this more explicit, imagine that we looked at a million tweets, and
let’s say that only  of them are discussing their love (or hatred) for our pie,

EVALUATION: PRECISION, RECALL, F-MEASURE
while the other , are tweets about something completely unrelated. Imagine a
simple classiﬁer that stupidly classiﬁed every tweet as “not about pie”. This classiﬁer
would have , true negatives and only  false negatives for an accuracy of
,/,, or .%! What an amazing accuracy level! Surely we should
be happy with this classiﬁer? But of course this fabulous ‘no pie’ classiﬁer would
be completely useless, since it wouldn’t ﬁnd a single one of the customer comments
we are looking for. In other words, accuracy is not a good metric when the goal is
to discover something that is rare, or at least not completely balanced in frequency,
which is a very common situation in the world.
That’s why instead of accuracy we generally turn to two other metrics shown in
Fig. .: precision and recall. Precision measures the percentage of the items that
precision
the system detected (i.e., the system labeled as positive) that are in fact positive (i.e.,
are positive according to the human gold labels). Precision is deﬁned as
Precision =
true positives
true positives + false positives
Recall measures the percentage of items actually present in the input that were
recall
correctly identiﬁed by the system. Recall is deﬁned as
Recall =
true positives
true positives + false negatives
Precision and recall will help solve the problem with the useless “nothing is
pie” classiﬁer. This classiﬁer, despite having a fabulous accuracy of .%, has
a terrible recall of  (since there are no true positives, and  false negatives, the
recall is /). You should convince yourself that the precision at ﬁnding relevant
tweets is equally problematic. Thus precision and recall, unlike accuracy, emphasize
true positives: ﬁnding the things that we are supposed to be looking for.
There are many ways to deﬁne a single metric that incorporates aspects of both
precision and recall. The simplest of these combinations is the F-measure (van
F-measure
Rijsbergen, ) , deﬁned as:
Fβ = (β  +)PR
β P+R
The β parameter differentially weights the importance of recall and precision,
based perhaps on the needs of an application. Values of β >  favor recall, while
values of β <  favor precision. When β = , precision and recall are equally bal-
anced; this is the most frequently used metric, and is called Fβ= or just F:
F = PR
P+R
F-measure comes from a weighted harmonic mean of precision and recall. The
harmonic mean of a set of numbers is the reciprocal of the arithmetic mean of recip-
rocals:
HarmonicMean(a,a,a,a,...,an) =
an
a +
a +
a +...+
and hence F-measure is
F =
β P+R
or

with β  = −α

F = (β  +)PR
P +(−α)
CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
Harmonic mean is used because the harmonic mean of two values is closer to the
minimum of the two values than the arithmetic mean is. Thus it weighs the lower of
the two numbers more heavily, which is more conservative in this situation.
Evaluating with more than two classes
Up to now we have been describing text classiﬁcation tasks with only two classes.
But lots of classiﬁcation tasks in language processing have more than two classes.
For sentiment analysis we generally have  classes (positive, negative, neutral) and
even more classes are common for tasks like part-of-speech tagging, word sense
disambiguation, semantic role labeling, emotion detection, and so on. Luckily the
naive Bayes algorithm is already a multi-class classiﬁcation algorithm.
gold labels
urgent
normal
spam
urgent
precisionu=
normal
precisionn=
system
output
precisions=
spam
recallu =
recalln = recalls =
Figure .
Confusion matrix for a three-class categorization task, showing for each pair of
classes (c,c), how many documents from c were (in)correctly assigned to c.
But we’ll need to slightly modify our deﬁnitions of precision and recall. Con-
sider the sample confusion matrix for a hypothetical -way one-of email catego-
rization decision (urgent, normal, spam) shown in Fig. .. The matrix shows, for
example, that the system mistakenly labeled one spam document as urgent, and we
have shown how to compute a distinct precision and recall value for each class. In
order to derive a single metric that tells us how well the system is doing, we can com-
bine these values in two ways. In macroaveraging, we compute the performance
macroaveraging
for each class, and then average over classes. In microaveraging, we collect the de-
microaveraging
cisions for all classes into a single confusion matrix, and then compute precision and
recall from that table. Fig. . shows the confusion matrix for each class separately,
and shows the computation of microaveraged and macroaveraged precision.
As the ﬁgure shows, a microaverage is dominated by the more frequent class (in
this case spam), since the counts are pooled. The macroaverage better reﬂects the
statistics of the smaller classes, and so is more appropriate when performance on all
the classes is equally important.
Test sets and Cross-validation
The training and testing procedure for text classiﬁcation follows what we saw with
language modeling (Section .): we use the training set to train the model, then use
the development test set (also called a devset) to perhaps tune some parameters,
development
test set
devset

STATISTICAL SIGNIFICANCE TESTING
Pooled
Class : Spam
Class : Normal
Class : Urgent
true
true
not
true
not
true
not
true
no
true
urgent
normal
true
spam
true
yes
system
yes
system
urgent
system
system
normal
system
system
spam
system
system
not
not
not
no
= .
microaverage
= .
precision = +
= .
precision = +
= .
precision = +
precision
macroaverage
= .
precision
Figure .
Separate confusion matrices for the  classes from the previous ﬁgure, showing the pooled confu-
sion matrix and the microaveraged and macroaveraged precision.
and in general decide what the best model is. Once we come up with what we think
is the best model, we run it on the (hitherto unseen) test set to report its performance.
While the use of a devset avoids overﬁtting the test set, having a ﬁxed train-
ing set, devset, and test set creates another problem: in order to save lots of data
for training, the test set (or devset) might not be large enough to be representative.
Wouldn’t it be better if we could somehow use all our data for training and still use
all our data for test? We can do this by cross-validation.
cross-validation
In cross-validation, we choose a number k, and partition our data into k disjoint
subsets called folds. Now we choose one of those k folds as a test set, train our
folds
classiﬁer on the remaining k −  folds, and then compute the error rate on the test
set. Then we repeat with another fold as the test set, again training on the other k−
folds. We do this sampling process k times and average the test set error rate from
these k runs to get an average error rate. If we choose k = , we would train
different models (each on % of our data), test the model  times, and average
these  values. This is called -fold cross-validation.
-fold
cross-validation
The only problem with cross-validation is that because all the data is used for
testing, we need the whole corpus to be blind; we can’t examine any of the data
to suggest possible features and in general see what’s going on, because we’d be
peeking at the test set, and such cheating would cause us to overestimate the perfor-
mance of our system. However, looking at the corpus to understand what’s going
on is important in designing NLP systems! What to do? For this reason, it is com-
mon to create a ﬁxed training set and test set, then do -fold cross-validation inside
the training set, but compute error rate the normal way in the test set, as shown in
Fig. ..
Statistical Signiﬁcance Testing
In building systems we often need to compare the performance of two systems. How
can we know if the new system we just built is better than our old one? Or better
than some other system described in the literature? This is the domain of statistical
hypothesis testing, and in this section we introduce tests for statistical signiﬁcance
for NLP classiﬁers, drawing especially on the work of Dror et al. () and Berg-
Kirkpatrick et al. ().
Suppose we’re comparing the performance of classiﬁers A and B on a metric M

CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
Training Iterations
Testing
Training
Dev
Training
Dev
Training
Dev
Training
Dev
Training
Dev
Training
Test
Set
Training
Dev
Training
Dev
Training
Dev
Training
Dev
Training
Dev
Figure .
-fold cross-validation
such as F, or accuracy. Perhaps we want to know if our logistic regression senti-
ment classiﬁer A (Chapter ) gets a higher F score than our naive Bayes sentiment
classiﬁer B on a particular test set x. Let’s call M(A,x) the score that system A gets
on test set x, and δ(x) the performance difference between A and B on x:
δ(x) = M(A,x)−M(B,x)
We would like to know if δ(x) > , meaning that our logistic regression classiﬁer
has a higher F than our naive Bayes classiﬁer on X. δ(x) is called the effect size;
effect size
a bigger δ means that A seems to be way better than B; a small δ means A seems to
be only a little better.
Why don’t we just check if δ(x) is positive? Suppose we do, and we ﬁnd that
the F score of A is higher than B’s by .. Can we be certain that A is better? We
cannot! That’s because A might just be accidentally better than B on this particular x.
We need something more: we want to know if A’s superiority over B is likely to hold
again if we checked another test set x′, or under some other set of circumstances.
In the paradigm of statistical hypothesis testing, we test this by formalizing two
hypotheses.
H : δ(x) ≤
H : δ(x) >
The hypothesis H, called the null hypothesis, supposes that δ(x) is actually nega-
null hypothesis
tive or zero, meaning that A is not better than B. We would like to know if we can
conﬁdently rule out this hypothesis, and instead support H, that A is better.
We do this by creating a random variable X ranging over all test sets. Now we
ask how likely is it, if the null hypothesis H was correct, that among these test sets
we would encounter the value of δ(x) that we found, if we repeated the experiment
a great many times. We formalize this likelihood as the p-value: the probability,
p-value
assuming the null hypothesis H is true, of seeing the δ(x) that we saw or one even
greater
P(δ(X) ≥ δ(x)|H is true)
So in our example, this p-value is the probability that we would see δ(x) assuming
A is not better than B. If δ(x) is huge (let’s say A has a very respectable F of .
and B has a terrible F of only . on x), we might be surprised, since that would be

STATISTICAL SIGNIFICANCE TESTING
extremely unlikely to occur if H were in fact true, and so the p-value would be low
(unlikely to have such a large δ if A is in fact not better than B). But if δ(x) is very
small, it might be less surprising to us even if H were true and A is not really better
than B, and so the p-value would be higher.
A very small p-value means that the difference we observed is very unlikely
under the null hypothesis, and we can reject the null hypothesis. What counts as very
small? It is common to use values like . or . as the thresholds. A value of .
means that if the p-value (the probability of observing the δ we saw assuming H is
true) is less than ., we reject the null hypothesis and assume that A is indeed better
than B. We say that a result (e.g., “A is better than B”) is statistically signiﬁcant if
statistically
signiﬁcant
the δ we saw has a probability that is below the threshold and we therefore reject
this null hypothesis.
How do we compute this probability we need for the p-value? In NLP we gen-
erally don’t use simple parametric tests like t-tests or ANOVAs that you might be
familiar with. Parametric tests make assumptions about the distributions of the test
statistic (such as normality) that don’t generally hold in our cases. So in NLP we
usually use non-parametric tests based on sampling: we artiﬁcially create many ver-
sions of the experimental setup. For example, if we had lots of different test sets x′
we could just measure all the δ(x′) for all the x′. That gives us a distribution. Now
we set a threshold (like .) and if we see in this distribution that % or more of
those deltas are smaller than the delta we observed, i.e., that p-value(x)—the proba-
bility of seeing a δ(x) as big as the one we saw—is less than ., then we can reject
the null hypothesis and agree that δ(x) was a sufﬁciently surprising difference and
A is really a better algorithm than B.
There are two common non-parametric tests used in NLP: approximate ran-
domization (Noreen, ) and the bootstrap test. We will describe bootstrap
approximate
randomization
below, showing the paired version of the test, which again is most common in NLP.
Paired tests are those in which we compare two sets of observations that are aligned:
paired
each observation in one set can be paired with an observation in another. This hap-
pens naturally when we are comparing the performance of two systems on the same
test set; we can pair the performance of system A on an individual observation xi
with the performance of system B on the same xi.
The Paired Bootstrap Test
The bootstrap test (Efron and Tibshirani, ) can apply to any metric; from pre-
bootstrap test
cision, recall, or F to the BLEU metric used in machine translation. The word
bootstrapping refers to repeatedly drawing large numbers of samples with replace-
bootstrapping
ment (called bootstrap samples) from an original set. The intuition of the bootstrap
test is that we can create many virtual test sets from an observed test set by repeat-
edly sampling from it. The method only makes the assumption that the sample is
representative of the population.
Consider a tiny text classiﬁcation example with a test set x of  documents. The
ﬁrst row of Fig. . shows the results of two classiﬁers (A and B) on this test set,
with each document labeled by one of the four possibilities: (A and B both right,
both wrong, A right and B wrong, A wrong and B right); a slash through a letter
(B) means that that classiﬁer got the answer wrong. On the ﬁrst document both A
and B get the correct class (AB), while on the second document A got it right but B
got it wrong (AB). If we assume for simplicity that our metric is accuracy, A has an
accuracy of . and B of ., so δ(x) is ..
Now we create a large number b (perhaps ) of virtual test sets x(i), each of size

CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
n = . Fig. . shows a couple of examples. To create each virtual test set x(i), we
repeatedly (n =  times) select a cell from row x with replacement. For example, to
create the ﬁrst cell of the ﬁrst virtual test set x(), if we happened to randomly select
the second cell of the x row; we would copy the value AB into our new cell, and
move on to create the second cell of x(), each time sampling (randomly choosing)
from the original x with replacement.
A% B% δ()
AB AB AB  
AB AB  
AB AB AB  
AB AB .
x()
AB AB AB  
AB  
AB AB  
AB AB  
AB AB .
x()
AB AB  
AB  
AB  
AB AB  
AB AB AB AB .
. -.
x(b)
Figure .
The paired bootstrap test: Examples of b pseudo test sets x(i) being created
from an initial true test set x. Each pseudo test set is created by sampling n =  times with
replacement; thus an individual sample is a single cell, a document with its gold label and
the correct or incorrect performance of classiﬁers A and B. Of course real test sets don’t have
only  examples, and b needs to be large as well.
Now that we have the b test sets, providing a sampling distribution, we can do
statistics on how often A has an accidental advantage. There are various ways to
compute this advantage; here we follow the version laid out in Berg-Kirkpatrick
et al. (). Assuming H (A isn’t better than B), we would expect that δ(X), esti-
mated over many test sets, would be zero; a much higher value would be surprising,
since H speciﬁcally assumes A isn’t better than B. To measure exactly how surpris-
ing our observed δ(x) is, we would in other circumstances compute the p-value by
counting over many test sets how often δ(x(i)) exceeds the expected zero value by
δ(x) or more:
p-value(x) =
i=
δ(x(i))−δ(x) ≥
(We use the notation (x) to mean “ if x is true, and  otherwise”.) However,
although it’s generally true that the expected value of δ(X) over many test sets,
(again assuming A isn’t better than B) is , this isn’t true for the bootstrapped test
sets we created. That’s because we didn’t draw these samples from a distribution
with  mean; we happened to create them from the original test set x, which happens
to be biased (by .) in favor of A. So to measure how surprising is our observed
δ(x), we actually compute the p-value by counting over many test sets how often
δ(x(i)) exceeds the expected value of δ(x) by δ(x) or more:
p-value(x) =
i=
δ(x(i))−δ(x) ≥ δ(x)

i=
δ(x(i)) ≥ δ(x)

So if for example we have , test sets x(i) and a threshold of ., and in only
of the test sets do we ﬁnd that A is accidentally better δ(x(i)) ≥ δ(x), the resulting
p-value of . is smaller than ., indicating that the delta we found, δ(x) is indeed

AVOIDING HARMS IN CLASSIFICATION
sufﬁciently surprising and unlikely to have happened by accident, and we can reject
the null hypothesis and conclude A is better than B.
function BOOTSTRAP(test set x, num of samples b) returns p-value(x)
Calculate δ(x) # how much better does algorithm A do than B on x
s =
for i =  to b do
for j =  to n do
# Draw a bootstrap sample x(i) of size n
Select a member of x at random and add it to x(i)
Calculate δ(x(i))
# how much better does algorithm A do than B on x(i)
s←s +  if δ(x(i)) ≥ δ(x)
p-value(x) ≈ s
# on what % of the b samples did algorithm A beat expectations?
return p-value(x)
# if very few did, our observed δ is probably not accidental
Figure .
A version of the paired bootstrap algorithm after Berg-Kirkpatrick et al. ().
The full algorithm for the bootstrap is shown in Fig. .. It is given a test set x, a
number of samples b, and counts the percentage of the b bootstrap test sets in which
δ(x∗(i)) > δ(x). This percentage then acts as a one-sided empirical p-value
Avoiding Harms in Classiﬁcation
It is important to avoid harms that may result from classiﬁers, harms that exist both
for naive Bayes classiﬁers and for the other classiﬁcation algorithms we introduce
in later chapters.
One class of harms is representational harms (Crawford , Blodgett et al.
representational
harms
), harms caused by a system that demeans a social group, for example by per-
petuating negative stereotypes about them. For example Kiritchenko and Moham-
mad () examined the performance of  sentiment analysis systems on pairs of
sentences that were identical except for containing either a common African Amer-
ican ﬁrst name (like Shaniqua) or a common European American ﬁrst name (like
Stephanie), chosen from the Caliskan et al. () study discussed in Chapter .
They found that most systems assigned lower sentiment and more negative emotion
to sentences with African American names, reﬂecting and perpetuating stereotypes
that associate African Americans with negative emotions (Popp et al., ).
In other tasks classiﬁers may lead to both representational harms and other
harms, such as censorship. For example the important text classiﬁcation task of
toxicity detection is the task of detecting hate speech, abuse, harassment, or other
toxicity
detection
kinds of toxic language. While the goal of such classiﬁers is to help reduce societal
harm, toxicity classiﬁers can themselves cause harms. For example, researchers have
shown that some widely used toxicity classiﬁers incorrectly ﬂag as being toxic sen-
tences that are non-toxic but simply mention minority identities like women (Park
et al., ), blind people (Hutchinson et al., ) or gay people (Dixon et al., ;
Dias Oliva et al., ), or simply use linguistic features characteristic of varieties
like African-American Vernacular English (Sap et al. , Davidson et al. ).
Such false positive errors, if employed by toxicity detection systems without human
oversight, could lead to the censoring of discourse by or about these groups.
These model problems can be caused by biases or other problems in the training

CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
data; in general, machine learning systems replicate and even amplify the biases
in their training data. But these problems can also be caused by the labels (for
example due to biases in the human labelers), by the resources used (like lexicons,
or model components like pretrained embeddings), or even by model architecture
(like what the model is trained to optimize). While the mitigation of these biases
(for example by carefully considering the training data sources) is an important area
of research, we currently don’t have general solutions. For this reason it’s important,
when introducing any NLP model, to study these kinds of factors and make them
clear. One way to do this is by releasing a model card (Mitchell et al., ) for
model card
each version of a model. A model card documents a machine learning model with
information like:
training algorithms and parameters
training data sources, motivation, and preprocessing
evaluation data sources, motivation, and preprocessing
intended use and users
model performance across different demographic or other groups and envi-
ronmental situations
Summary
This chapter introduced the naive Bayes model for classiﬁcation and applied it to
the text categorization task of sentiment analysis.
Many language processing tasks can be viewed as tasks of classiﬁcation.
Text categorization, in which an entire text is assigned a class from a ﬁnite set,
includes such tasks as sentiment analysis, spam detection, language identi-
ﬁcation, and authorship attribution.
Sentiment analysis classiﬁes a text as reﬂecting the positive or negative orien-
tation (sentiment) that a writer expresses toward some object.
Naive Bayes is a generative model that makes the bag-of-words assumption
(position doesn’t matter) and the conditional independence assumption (words
are conditionally independent of each other given the class)
Naive Bayes with binarized features seems to work better for many text clas-
siﬁcation tasks.
Classiﬁers are evaluated based on precision and recall.
Classiﬁers are trained using distinct training, dev, and test sets, including the
use of cross-validation in the training set.
Statistical signiﬁcance tests should be used to determine whether we can be
conﬁdent that one version of a classiﬁer is better than another.
Designers of classiﬁers should carefully consider harms that may be caused
by the model, including its training data and other components, and report
model characteristics in a model card.
Bibliographical and Historical Notes
Multinomial naive Bayes text classiﬁcation was proposed by Maron () at the
RAND Corporation for the task of assigning subject categories to journal abstracts.

BIBLIOGRAPHICAL AND HISTORICAL NOTES
His model introduced most of the features of the modern form presented here, ap-
proximating the classiﬁcation task with one-of categorization, and implementing
add-δ smoothing and information-based feature selection.
The conditional independence assumptions of naive Bayes and the idea of Bayes-
ian analysis of text seems to have arisen multiple times. The same year as Maron’s
paper, Minsky () proposed a naive Bayes classiﬁer for vision and other arti-
ﬁcial intelligence problems, and Bayesian techniques were also applied to the text
classiﬁcation task of authorship attribution by Mosteller and Wallace (). It had
long been known that Alexander Hamilton, John Jay, and James Madison wrote
the anonymously-published Federalist papers in – to persuade New York
to ratify the United States Constitution. Yet although some of the  essays were
clearly attributable to one author or another, the authorship of  were in dispute
between Hamilton and Madison. Mosteller and Wallace () trained a Bayesian
probabilistic model of the writing of Hamilton and another model on the writings
of Madison, then computed the maximum-likelihood author for each of the disputed
essays. Naive Bayes was ﬁrst applied to spam detection in Heckerman et al. ().
Metsis et al. (), Pang et al. (), and Wang and Manning () show
that using boolean attributes with multinomial naive Bayes works better than full
counts. Binary multinomial naive Bayes is sometimes confused with another variant
of naive Bayes that also uses a binary representation of whether a term occurs in
a document: Multivariate Bernoulli naive Bayes. The Bernoulli variant instead
estimates P(w|c) as the fraction of documents that contain a term, and includes a
probability for whether a term is not in a document. McCallum and Nigam ()
and Wang and Manning () show that the multivariate Bernoulli variant of naive
Bayes doesn’t work as well as the multinomial algorithm for sentiment or other text
tasks.
There are a variety of sources covering the many kinds of text classiﬁcation
tasks. For sentiment analysis see Pang and Lee (), and Liu and Zhang ().
Stamatatos () surveys authorship attribute algorithms. On language identiﬁca-
tion see Jauhiainen et al. (); Jaech et al. () is an important early neural
system. The task of newswire indexing was often used as a test case for text classi-
ﬁcation algorithms, based on the Reuters- collection of newswire articles.
See Manning et al. () and Aggarwal and Zhai () on text classiﬁcation;
classiﬁcation in general is covered in machine learning textbooks (Hastie et al. ,
Witten and Frank , Bishop , Murphy ).
Non-parametric methods for computing statistical signiﬁcance were used ﬁrst in
NLP in the MUC competition (Chinchor et al., ), and even earlier in speech
recognition (Gillick and Cox , Bisani and Ney ). Our description of the
bootstrap draws on the description in Berg-Kirkpatrick et al. (). Recent work
has focused on issues including multiple test sets and multiple metrics (Søgaard et al.
, Dror et al. ).
Feature selection is a method of removing features that are unlikely to generalize
well. Features are generally ranked by how informative they are about the classiﬁca-
tion decision. A very common metric, information gain, tells us how many bits of
information
gain
information the presence of the word gives us for guessing the class. Other feature
selection metrics include χ, pointwise mutual information, and GINI index; see
Yang and Pedersen () for a comparison and Guyon and Elisseeff () for an
introduction to feature selection.

CHAPTER
NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT
Exercises
Assume the following likelihoods for each word being part of a positive or
negative movie review, and equal prior probabilities for each class.
pos
neg
. .
always . .
like
. .
foreign . .
ﬁlms
. .
What class will Naive bayes assign to the sentence “I always like foreign
ﬁlms.”?
Given the following short movie reviews, each labeled with a genre, either
comedy or action:
. fun, couple, love, love
comedy
. fast, furious, shoot
action
. couple, ﬂy, fast, fun, fun
comedy
. furious, shoot, shoot, fun
action
. ﬂy, fast, shoot, love
action
and a new document D:
fast, couple, shoot, ﬂy
compute the most likely class for D. Assume a naive Bayes classiﬁer and use
add- smoothing for the likelihoods.
Train two models, multinomial naive Bayes and binarized naive Bayes, both
with add- smoothing, on the following document counts for key sentiment
words, with positive or negative class assigned as noted.
doc “good” “poor” “great” (class)
d.
pos
d.
pos
d.
neg
d.
neg
d.
neg
Use both naive Bayes models to assign a class (pos or neg) to this sentence:
A good, good plot and great characters, but poor acting.
Recall from page  that with naive Bayes text classiﬁcation, we simply ig-
nore (throw out) any word that never occurred in the training document. (We
don’t throw out words that appear in some classes but not others; that’s what
add-one smoothing is for.) Do the two models agree or disagree?

Logistic Regression
CHAPTER
“And how do you know that these ﬁne begonias are not of equal importance?”
Hercule Poirot, in Agatha Christie’s The Mysterious Affair at Styles
Detective stories are as littered with clues as texts are with words. Yet for the
poor reader it can be challenging to know how to weigh the author’s clues in order
to make the crucial classiﬁcation task: deciding whodunnit.
In this chapter we introduce an algorithm that is admirably suited for discovering
the link between features or cues and some particular outcome: logistic regression.
logistic
regression
Indeed, logistic regression is one of the most important analytic tools in the social
and natural sciences. In natural language processing, logistic regression is the base-
line supervised machine learning algorithm for classiﬁcation, and also has a very
close relationship with neural networks. As we will see in Chapter , a neural net-
work can be viewed as a series of logistic regression classiﬁers stacked on top of
each other. Thus the classiﬁcation and machine learning techniques introduced here
will play an important role throughout the book.
Logistic regression can be used to classify an observation into one of two classes
(like ‘positive sentiment’ and ‘negative sentiment’), or into one of many classes.
Because the mathematics for the two-class case is simpler, we’ll describe this special
case of logistic regression ﬁrst in the next few sections, and then brieﬂy summarize
the use of multinomial logistic regression for more than two classes in Section ..
We’ll introduce the mathematics of logistic regression in the next few sections.
But let’s begin with some high-level issues.
Generative and Discriminative Classiﬁers:
The most important difference be-
tween naive Bayes and logistic regression is that logistic regression is a discrimina-
tive classiﬁer while naive Bayes is a generative classiﬁer.
These are two very different frameworks for how
to build a machine learning model. Consider a visual
metaphor: imagine we’re trying to distinguish dog
images from cat images. A generative model would
have the goal of understanding what dogs look like
and what cats look like. You might literally ask such
a model to ‘generate’, i.e., draw, a dog. Given a test
image, the system then asks whether it’s the cat model or the dog model that better
ﬁts (is less surprised by) the image, and chooses that as its label.
A discriminative model, by contrast, is only try-
ing to learn to distinguish the classes (perhaps with-
out learning much about them). So maybe all the
dogs in the training data are wearing collars and the
cats aren’t. If that one feature neatly separates the
classes, the model is satisﬁed.
If you ask such a
model what it knows about cats all it can say is that
they don’t wear collars.

CHAPTER
LOGISTIC REGRESSION
More formally, recall that the naive Bayes assigns a class c to a document d not
by directly computing P(c|d) but by computing a likelihood and a prior
ˆc = argmax
c∈C
likelihood
z }| {
P(d|c)
prior
z}|{
P(c)
A generative model like naive Bayes makes use of this likelihood term, which
generative
model
expresses how to generate the features of a document if we knew it was of class c.
By contrast a discriminative model in this text categorization scenario attempts
discriminative
model
to directly compute P(c|d). Perhaps it will learn to assign a high weight to document
features that directly improve its ability to discriminate between possible classes,
even if it couldn’t generate an example of one of the classes.
Components of a probabilistic machine learning classiﬁer:
Like naive Bayes,
logistic regression is a probabilistic classiﬁer that makes use of supervised machine
learning. Machine learning classiﬁers require a training corpus of m input/output
pairs (x(i),y(i)). (We’ll use superscripts in parentheses to refer to individual instances
in the training set—for sentiment classiﬁcation each instance might be an individual
document to be classiﬁed.) A machine learning system for classiﬁcation then has
four components:
. A feature representation of the input. For each input observation x(i), this
will be a vector of features [x,x,...,xn]. We will generally refer to feature
i for input x(j) as x(j)
i , sometimes simpliﬁed as xi, but we will also see the
notation fi, fi(x), or, for multiclass classiﬁcation, fi(c,x).
. A classiﬁcation function that computes ˆy, the estimated class, via p(y|x). In
the next section we will introduce the sigmoid and softmax tools for classiﬁ-
cation.
. An objective function for learning, usually involving minimizing error on
training examples. We will introduce the cross-entropy loss function.
. An algorithm for optimizing the objective function. We introduce the stochas-
tic gradient descent algorithm.
Logistic regression has two phases:
training: We train the system (speciﬁcally the weights w and b) using stochastic
gradient descent and the cross-entropy loss.
test: Given a test example x we compute p(y|x) and return the higher probability
label y =  or y = .
The sigmoid function
The goal of binary logistic regression is to train a classiﬁer that can make a binary
decision about the class of a new input observation. Here we introduce the sigmoid
classiﬁer that will help us make this decision.
Consider a single input observation x, which we will represent by a vector of fea-
tures [x,x,...,xn] (we’ll show sample features in the next subsection). The classiﬁer
output y can be  (meaning the observation is a member of the class) or  (the ob-
servation is not a member of the class). We want to know the probability P(y = |x)
that this observation is a member of the class. So perhaps the decision is “positive

THE SIGMOID FUNCTION
sentiment” versus “negative sentiment”, the features represent counts of words in a
document, P(y = |x) is the probability that the document has positive sentiment,
and P(y = |x) is the probability that the document has negative sentiment.
Logistic regression solves this task by learning, from a training set, a vector of
weights and a bias term. Each weight wi is a real number, and is associated with one
of the input features xi. The weight wi represents how important that input feature
is to the classiﬁcation decision, and can be positive (providing evidence that the in-
stance being classiﬁed belongs in the positive class) or negative (providing evidence
that the instance being classiﬁed belongs in the negative class). Thus we might
expect in a sentiment task the word awesome to have a high positive weight, and
abysmal to have a very negative weight. The bias term, also called the intercept, is
bias term
intercept
another real number that’s added to the weighted inputs.
To make a decision on a test instance—after we’ve learned the weights in training—
the classiﬁer ﬁrst multiplies each xi by its weight wi, sums up the weighted features,
and adds the bias term b. The resulting single number z expresses the weighted sum
of the evidence for the class.
z =
+b
i=
wixi
In the rest of the book we’ll represent such sums using the dot product notation
dot product
from linear algebra. The dot product of two vectors a and b, written as a  b, is the
sum of the products of the corresponding elements of each vector. (Notice that we
represent vectors using the boldface notation b). Thus the following is an equivalent
formation to Eq. .:
z = w x+b
But note that nothing in Eq. . forces z to be a legal probability, that is, to lie
between  and . In fact, since weights are real-valued, the output might even be
negative; z ranges from −∞ to ∞.
Figure .
The sigmoid function σ(z) =
+e−z takes a real value and maps it to the range
(,). It is nearly linear around  but outlier values get squashed toward  or .
To create a probability, we’ll pass z through the sigmoid function, σ(z). The
sigmoid
sigmoid function (named because it looks like an s) is also called the logistic func-
tion, and gives logistic regression its name. The sigmoid has the following equation,
logistic
function
shown graphically in Fig. .:
σ(z) =
+e−z =
+exp(−z)
(For the rest of the book, we’ll use the notation exp(x) to mean ex.) The sigmoid
has a number of advantages; it takes a real-valued number and maps it into the range

CHAPTER
LOGISTIC REGRESSION
(,), which is just what we want for a probability. Because it is nearly linear around
but ﬂattens toward the ends, it tends to squash outlier values toward  or . And
it’s differentiable, which as we’ll see in Section . will be handy for learning.
We’re almost there. If we apply the sigmoid to the sum of the weighted features,
we get a number between  and . To make it a probability, we just need to make
sure that the two cases, p(y = ) and p(y = ), sum to . We can do this as follows:
P(y = ) = σ(w x+b)
+exp(−(w x+b))
P(y = ) = −σ(w x+b)
= −
+exp(−(w x+b))
exp(−(w x+b))
+exp(−(w x+b))
The sigmoid function has the property
−σ(x) = σ(−x)
so we could also have expressed P(y = ) as σ(−(w x+b)).
Finally, one terminological point. The input to the sigmoid function, the score
z = w  x + b from (.), is often called the logit. This is because the logit function
logit
is the inverse of the sigmoid. The logit function is the log of the odds ratio
−p:
logit(p) = σ−(p) = ln
− p
Using the term logit for z is a way of reminding us that by using the sigmoid to turn
z (which ranges from −∞ to ∞) into a probability, we are implicitly interpreting z as
not just any real-valued number, but as speciﬁcally a log odds.
Classiﬁcation with Logistic Regression
The sigmoid function from the prior section thus gives us a way to take an instance
x and compute the probability P(y = |x).
How do we make a decision about which class to apply to a test instance x? For
a given x, we say yes if the probability P(y = |x) is more than ., and no otherwise.
We call . the decision boundary:
decision
boundary
decision(x) =
if P(y = |x) > .
otherwise
Let’s have some examples of applying logistic regression as a classiﬁer for language
tasks.
Sentiment Classiﬁcation
Suppose we are doing binary sentiment classiﬁcation on movie review text, and
we would like to know whether to assign the sentiment class + or − to a review

CLASSIFICATION WITH LOGISTIC REGRESSION
document doc. We’ll represent each input observation by the  features x ...x of
the input shown in the following table; Fig. . shows the features in a sample mini
test document.
Var
Deﬁnition
Value in Fig. .
count(positive lexicon words ∈ doc)
count(negative lexicon words ∈ doc)
if “no” ∈ doc
otherwise
count(st and nd pronouns ∈ doc)
if “!” ∈ doc
otherwise
ln(word count of doc)
ln() = .
Let’s assume for the moment that we’ve already learned a real-valued weight for
x=
x=
It's hokey . There are virtually no surprises , and the writing is second-rate .
So why was it so enjoyable  ? For one thing , the cast is
great . Another nice touch is the music . I was overcome with the urge to get off
the couch and start dancing .  It sucked me in , and it'll do the same to you  .
x=
x=
x=
x=.
Figure .
A sample mini test document showing the extracted features in the vector x.
each of these features, and that the  weights corresponding to the  features are
[.,−.,−.,.,.,.], while b = .. (We’ll discuss in the next section how
the weights are learned.) The weight w, for example indicates how important a
feature the number of positive lexicon words (great, nice, enjoyable, etc.) is to
a positive sentiment decision, while w tells us the importance of negative lexicon
words. Note that w = . is positive, while w = −., meaning that negative words
are negatively associated with a positive sentiment decision, and are about twice as
important as positive words.
Given these  features and the input review x, P(+|x) and P(−|x) can be com-
puted using Eq. .:
p(+|x) = P(y = |x) = σ(w x+b)
= σ([.,−.,−.,.,.,.][,,,,,.]+.)
= σ(.)
= .
p(−|x) = P(y = |x) = −σ(w x+b)
= .
Other classiﬁcation tasks and features
Logistic regression is commonly applied to all sorts of NLP tasks, and any property
of the input can be a feature. Consider the task of period disambiguation: deciding
period
disambiguation

CHAPTER
LOGISTIC REGRESSION
if a period is the end of a sentence or part of a word, by classifying each period
into one of two classes EOS (end-of-sentence) and not-EOS. We might use features
like x below expressing that the current word is lower case (perhaps with a positive
weight), or that the current word is in our abbreviations dictionary (“Prof.”) (perhaps
with a negative weight). A feature can also express a quite complex combination of
properties. For example a period following an upper case word is likely to be an
EOS, but if the word itself is St. and the previous word is capitalized, then the
period is likely part of a shortening of the word street.
x =
if “Case(wi) = Lower”
otherwise
x =
if “wi ∈ AcronymDict”
otherwise
x =

if “wi = St. & Case(wi−) = Cap”
otherwise
Designing features:
Features are generally designed by examining the training
set with an eye to linguistic intuitions and the linguistic literature on the domain. A
careful error analysis on the training set or devset of an early version of a system
often provides insights into features.
For some tasks it is especially helpful to build complex features that are combi-
nations of more primitive features. We saw such a feature for period disambiguation
above, where a period on the word St. was less likely to be the end of the sentence
if the previous word was capitalized. For logistic regression and naive Bayes these
combination features or feature interactions have to be designed by hand.
feature
interactions
For many tasks (especially when feature values can reference speciﬁc words)
we’ll need large numbers of features. Often these are created automatically via fea-
ture templates, abstract speciﬁcations of features. For example a bigram template
feature
templates
for period disambiguation might create a feature for every pair of words that occurs
before a period in the training set. Thus the feature space is sparse, since we only
have to create a feature if that n-gram exists in that position in the training set. The
feature is generally created as a hash from the string descriptions. A user description
of a feature as, “bigram(American breakfast)” is hashed into a unique integer i that
becomes the feature number fi.
In order to avoid the extensive human effort of feature design, recent research in
NLP has focused on representation learning: ways to learn features automatically
in an unsupervised way from the input. We’ll introduce methods for representation
learning in Chapter  and Chapter .
Scaling input features:
When different input features have extremely different
ranges of values, it’s common to rescale them so they have comparable ranges. We
standardize input values by centering them to result in a zero mean and a standard
standardize
deviation of one (this transformation is sometimes called the z-score). That is, if µi
z-score
is the mean of the values of feature xi across the m observations in the input dataset,
and σi is the standard deviation of the values of features xi across the input dataset,
we can replace each feature xi by a new feature x′
i computed as follows:
µi =
j=
x(j)
σi =
j=
x( j)
− µi
x′
i = xi − µi
σi

CLASSIFICATION WITH LOGISTIC REGRESSION
Alternatively, we can normalize the input features values to lie between  and :
normalize
x′
i =
xi −min(xi)
max(xi)−min(xi)
Having input data with comparable range is useful when comparing values across
features. Data scaling is especially important in large neural networks, since it helps
speed up gradient descent.
Processing many examples at once
We’ve shown the equations for logistic regression for a single example. But in prac-
tice we’ll of course want to process an entire test set with many examples. Let’s
suppose we have a test set consisting of m test examples each of which we’d like
to classify. We’ll continue to use the notation from page , in which a superscript
value in parentheses refers to the example index in some set of data (either for train-
ing or for test). So in this case each test example x(i) has a feature vector x(i),
≤ i ≤ m. (As usual, we’ll represent vectors and matrices in bold.)
One way to compute each output value ˆy(i) is just to have a for-loop, and compute
each test example one at a time:
foreach
x(i) in input [x(),x(),...,x(m)]
y(i) = σ(w x(i) +b)
For the ﬁrst  test examples, then, we would be separately computing the pre-
dicted ˆy(i) as follows:
P(y() = |x()) = σ(w x() +b)
P(y() = |x()) = σ(w x() +b)
P(y() = |x()) = σ(w x() +b)
But it turns out that we can slightly modify our original equation Eq. . to do
this much more efﬁciently. We’ll use matrix arithmetic to assign a class to all the
examples with one matrix operation!
First, we’ll pack all the input feature vectors for each input x into a single input
matrix X, where each row i is a row vector consisting of the feature vector for in-
put example x(i) (i.e., the vector x(i)). Assuming each example has f features and
weights, X will therefore be a matrix of shape [m× f], as follows:
X =
x()
x()
... x()
x()
x()
... x()
x()
x()
... x()
Now if we introduce b as a vector of length m which consists of the scalar bias
term b repeated m times, b = [b,b,...,b], and ˆy = [ˆy(), ˆy()..., ˆy(m)] as the vector of
outputs (one scalar ˆy(i) for each input x(i) and its feature vector x(i)), and represent
the weight vector w as a column vector, we can compute all the outputs with a single
matrix multiplication and one addition:
y = Xw +b

CHAPTER
LOGISTIC REGRESSION
You should convince yourself that Eq. . computes the same thing as our for-loop
in Eq. .. For example ˆy(), the ﬁrst entry of the output vector y, will correctly be:
ˆy() = [x()
,x()
,...,x()
f ][w,w,...,w f ]+b
Note that we had to reorder X and w from the order they appeared in in Eq. . to
make the multiplications come out properly. Here is Eq. . again with the shapes
shown:
y = X
(m×)
(m× f)(f ×) (m×)
Modern compilers and compute hardware can compute this matrix operation
very efﬁciently, making the computation much faster, which becomes important
when training or testing on very large datasets.
Choosing a classiﬁer
Logistic regression has a number of advantages over naive Bayes. Naive Bayes has
overly strong conditional independence assumptions. Consider two features which
are strongly correlated; in fact, imagine that we just add the same feature f twice.
Naive Bayes will treat both copies of f as if they were separate, multiplying them
both in, overestimating the evidence. By contrast, logistic regression is much more
robust to correlated features; if two features f and f are perfectly correlated, re-
gression will simply assign part of the weight to w and part to w. Thus when
there are many correlated features, logistic regression will assign a more accurate
probability than naive Bayes. So logistic regression generally works better on larger
documents or datasets and is a common default.
Despite the less accurate probabilities, naive Bayes still often makes the correct
classiﬁcation decision. Furthermore, naive Bayes can work extremely well (some-
times even better than logistic regression) on very small datasets (Ng and Jordan,
) or short documents (Wang and Manning, ). Furthermore, naive Bayes is
easy to implement and very fast to train (there’s no optimization step). So it’s still a
reasonable approach to use in some situations.
Multinomial logistic regression
Sometimes we need more than two classes. Perhaps we might want to do -way
sentiment classiﬁcation (positive, negative, or neutral). Or we could be assigning
some of the labels we will introduce in Chapter , like the part of speech of a word
(choosing from , , or even  different parts of speech), or the named entity
type of a phrase (choosing from tags like person, location, organization).
In such cases we use multinomial logistic regression, also called softmax re-
multinomial
logistic
regression
gression (in older NLP literature you will sometimes see the name maxent classi-
ﬁer). In multinomial logistic regression we want to label each observation with a
class k from a set of K classes, under the stipulation that only one of these classes is
the correct one (sometimes called hard classiﬁcation; an observation can not be in
multiple classes). Let’s use the following representation: the output y for each input
x will be a vector of length K. If class c is the correct class, we’ll set yc = , and
set all the other elements of y to be , i.e., yc =  and yj =  ∀ j ̸= c. A vector like

MULTINOMIAL LOGISTIC REGRESSION
this y, with one value= and the rest , is called a one-hot vector. The job of the
classiﬁer is to produce an estimate vector ˆy. For each class k, the value ˆyk will be
the classiﬁer’s estimate of the probability p(yk = |x).
Softmax
The multinomial logistic classiﬁer uses a generalization of the sigmoid, called the
softmax function, to compute p(yk = |x). The softmax function takes a vector
softmax
z = [z,z,...,zK] of K arbitrary values and maps them to a probability distribution,
with each value in the range [,], and all the values summing to . Like the sigmoid,
it is an exponential function.
For a vector z of dimensionality K, the softmax is deﬁned as:
softmax(zi) =
exp(zi)
PK
j= exp(z j)
≤ i ≤ K
The softmax of an input vector z = [z,z,...,zK] is thus a vector itself:
softmax(z) =
exp(z)
PK
i= exp(zi)
exp(z)
PK
i= exp(zi)
exp(zK)
PK
i= exp(zi)
The denominator PK
i= exp(zi) is used to normalize all the values into probabilities.
Thus for example given a vector:
z = [.,.,−.,.,.,−.]
the resulting (rounded) softmax(z) is
Like the sigmoid, the softmax has the property of squashing values toward  or .
Thus if one of the inputs is larger than the others, it will tend to push its probability
toward , and suppress the probabilities of the smaller inputs.
Finally, note that, just as for the sigmoid, we refer to z, the vector of scores that
is the input to the softmax, as logits (see (.).
Applying softmax in logistic regression
When we apply softmax for logistic regression, the input will (just as for the sig-
moid) be the dot product between a weight vector w and an input vector x (plus a
bias). But now we’ll need separate weight vectors wk and bias bk for each of the K
classes. The probability of each of our output classes ˆyk can thus be computed as:
p(yk = |x) =
exp(wk x+bk)
j=
exp(w j x+bj)
The form of Eq. . makes it seem that we would compute each output sep-
arately. Instead, it’s more common to set up the equation for more efﬁcient com-
putation by modern vector processing hardware. We’ll do this by representing the
set of K weight vectors as a weight matrix W and a bias vector b. Each row k of

CHAPTER
LOGISTIC REGRESSION
W corresponds to the vector of weights wk. W thus has shape [K × f], for K the
number of output classes and f the number of input features. The bias vector b has
one value for each of the K output classes. If we represent the weights in this way,
we can compute ˆy, the vector of output probabilities for each of the K classes, by a
single elegant equation:
ˆy = softmax(Wx+b)
If you work out the matrix arithmetic, you can see that the estimated score of
the ﬁrst output class ˆy (before we take the softmax) will correctly turn out to be
w x+b.
Fig. . shows an intuition of the role of the weight vector versus weight matrix
in the computation of the output class probabilities for binary versus multinomial
logistic regression.
Binary Logistic Regression
p(+) = - p(-)
y^
Output
sigmoid
[scalar]
Weight vector
[⨉f]
xf
[f ⨉]
Input feature
vector
wordcount
positive lexicon
words =
count of
“no” =
dessert   was    great
Input words
Multinomial Logistic Regression
p(+)
p(-)
p(neut)
These f red weights
Output
softmax
[K⨉]
are a row of W
corresponding
to weight vector w,
Weight
matrix
[K⨉f]
(= weights for class )
xf
[f⨉]
Input feature
vector
wordcount
positive lexicon
count of
“no” =
words =
dessert   was    great
Input words
Figure .
Binary versus multinomial logistic regression. Binary logistic regression uses a
single weight vector w, and has a scalar output ˆy. In multinomial logistic regression we have
K separate weight vectors corresponding to the K classes, all packed into a single weight
matrix W, and a vector output ˆy.

LEARNING IN LOGISTIC REGRESSION
Features in Multinomial Logistic Regression
Features in multinomial logistic regression act like features in binary logistic regres-
sion, with the difference mentioned above that we’ll need separate weight vectors
and biases for each of the K classes. Recall our binary exclamation point feature x
from page :
x =
if “!” ∈ doc
otherwise
In binary classiﬁcation a positive weight w on a feature inﬂuences the classiﬁer
toward y =  (positive sentiment) and a negative weight inﬂuences it toward y =
(negative sentiment) with the absolute value indicating how important the feature
is. For multinomial logistic regression, by contrast, with separate weights for each
class, a feature can be evidence for or against each individual class.
In -way multiclass sentiment classiﬁcation, for example, we must assign each
document one of the  classes +, −, or  (neutral). Now a feature related to excla-
mation marks might have a negative weight for  documents, and a positive weight
for + or − documents:
Feature
Deﬁnition
w,+ w,− w,
f(x)
if “!” ∈ doc
otherwise
Because these feature weights are dependent both on the input text and the output
class, we sometimes make this dependence explicit and represent the features them-
selves as f(x,y): a function of both the input and the class. Using such a notation
f(x) above could be represented as three features f(x,+), f(x,−), and f(x,),
each of which has a single weight. We’ll use this kind of notation in our description
of the CRF in Chapter .
Learning in Logistic Regression
How are the parameters of the model, the weights w and bias b, learned? Logistic
regression is an instance of supervised classiﬁcation in which we know the correct
label y (either  or ) for each observation x. What the system produces via Eq. .
is ˆy, the system’s estimate of the true y. We want to learn parameters (meaning w
and b) that make ˆy for each training observation as close as possible to the true y.
This requires two components that we foreshadowed in the introduction to the
chapter. The ﬁrst is a metric for how close the current label (ˆy) is to the true gold
label y. Rather than measure similarity, we usually talk about the opposite of this:
the distance between the system output and the gold output, and we call this distance
the loss function or the cost function. In the next section we’ll introduce the loss
loss
function that is commonly used for logistic regression and also for neural networks,
the cross-entropy loss.
The second thing we need is an optimization algorithm for iteratively updating
the weights so as to minimize this loss function. The standard algorithm for this is
gradient descent; we’ll introduce the stochastic gradient descent algorithm in the
following section.

CHAPTER
LOGISTIC REGRESSION
We’ll describe these algorithms for the simpler case of binary logistic regres-
sion in the next two sections, and then turn to multinomial logistic regression in
Section ..
The cross-entropy loss function
We need a loss function that expresses, for an observation x, how close the classiﬁer
output (ˆy = σ(w x+b)) is to the correct output (y, which is  or ). We’ll call this:
L(ˆy,y) = How much ˆy differs from the true y
We do this via a loss function that prefers the correct class labels of the train-
ing examples to be more likely. This is called conditional maximum likelihood
estimation: we choose the parameters w,b that maximize the log probability of
the true y labels in the training data given the observations x. The resulting loss
function is the negative log likelihood loss, generally called the cross-entropy loss.
cross-entropy
loss
Let’s derive this loss function, applied to a single observation x. We’d like to
learn weights that maximize the probability of the correct label p(y|x). Since there
are only two discrete outcomes ( or ), this is a Bernoulli distribution, and we can
express the probability p(y|x) that our classiﬁer produces for one observation as the
following (keeping in mind that if y = , Eq. . simpliﬁes to ˆy; if y = , Eq. .
simpliﬁes to − ˆy):
p(y|x) = ˆyy (− ˆy)−y
Now we take the log of both sides. This will turn out to be handy mathematically,
and doesn’t hurt us; whatever values maximize a probability will also maximize the
log of the probability:
log p(y|x) = log
ˆyy (− ˆy)−y
= ylog ˆy+(−y)log(− ˆy)
Eq. . describes a log likelihood that should be maximized. In order to turn this
into a loss function (something that we need to minimize), we’ll just ﬂip the sign on
Eq. .. The result is the cross-entropy loss LCE:
LCE(ˆy,y) = −log p(y|x) = −[ylog ˆy+(−y)log(− ˆy)]
Finally, we can plug in the deﬁnition of ˆy = σ(w x+b):
LCE(ˆy,y) = −[ylogσ(w x+b)+(−y)log(−σ(w x+b))]
Let’s see if this loss function does the right thing for our example from Fig. .. We
want the loss to be smaller if the model’s estimate is close to correct, and bigger if
the model is confused. So ﬁrst let’s suppose the correct gold label for the sentiment
example in Fig. . is positive, i.e., y = . In this case our model is doing well, since
from Eq. . it indeed gave the example a higher probability of being positive (.)
than negative (.). If we plug σ(w x+b) = . and y =  into Eq. ., the right
side of the equation drops out, leading to the following loss (we’ll use log to mean

GRADIENT DESCENT
natural log when the base is not speciﬁed):
LCE(ˆy,y) =
−[ylogσ(w x+b)+(−y)log(−σ(w x+b))]
−[logσ(w x+b)]
−log(.)
By contrast, let’s pretend instead that the example in Fig. . was actually negative,
i.e., y =  (perhaps the reviewer went on to say “But bottom line, the movie is
terrible! I beg you not to see it!”). In this case our model is confused and we’d want
the loss to be higher. Now if we plug y =  and −σ(w x+b) = . from Eq. .
into Eq. ., the left side of the equation drops out:
LCE(ˆy,y) =
−[ylogσ(w x+b)+(−y)log(−σ(w x+b))]
−[log(−σ(w x+b))]
−log(.)
Sure enough, the loss for the ﬁrst classiﬁer (.) is less than the loss for the second
classiﬁer (.).
Why does minimizing this negative log probability do what we want? A perfect
classiﬁer would assign probability  to the correct outcome (y =  or y = ) and
probability  to the incorrect outcome. That means if y equals , the higher ˆy is (the
closer it is to ), the better the classiﬁer; the lower ˆy is (the closer it is to ), the
worse the classiﬁer. If y equals , instead, the higher − ˆy is (closer to ), the better
the classiﬁer. The negative log of ˆy (if the true y equals ) or  − ˆy (if the true y
equals ) is a convenient loss metric since it goes from  (negative log of , no loss)
to inﬁnity (negative log of , inﬁnite loss). This loss function also ensures that as
the probability of the correct answer is maximized, the probability of the incorrect
answer is minimized; since the two sum to one, any increase in the probability of the
correct answer is coming at the expense of the incorrect answer. It’s called the cross-
entropy loss, because Eq. . is also the formula for the cross-entropy between the
true probability distribution y and our estimated distribution ˆy.
Now we know what we want to minimize; in the next section, we’ll see how to
ﬁnd the minimum.
Gradient Descent
Our goal with gradient descent is to ﬁnd the optimal weights: minimize the loss
function we’ve deﬁned for the model. In Eq. . below, we’ll explicitly represent
the fact that the loss function L is parameterized by the weights, which we’ll refer
to in machine learning in general as θ (in the case of logistic regression θ = w,b).
So the goal is to ﬁnd the set of weights which minimizes the loss function, averaged
over all examples:
ˆθ = argmin
i=
LCE( f(x(i);θ),y(i))
How shall we ﬁnd the minimum of this (or any) loss function? Gradient descent is a
method that ﬁnds a minimum of a function by ﬁguring out in which direction (in the

CHAPTER
LOGISTIC REGRESSION
space of the parameters θ) the function’s slope is rising the most steeply, and moving
in the opposite direction. The intuition is that if you are hiking in a canyon and trying
to descend most quickly down to the river at the bottom, you might look around
yourself  degrees, ﬁnd the direction where the ground is sloping the steepest,
and walk downhill in that direction.
For logistic regression, this loss function is conveniently convex. A convex func-
convex
tion has at most one minimum; there are no local minima to get stuck in, so gradient
descent starting from any point is guaranteed to ﬁnd the minimum. (By contrast,
the loss for multi-layer neural networks is non-convex, and gradient descent may
get stuck in local minima for neural network training and never ﬁnd the global opti-
mum.)
Although the algorithm (and the concept of gradient) are designed for direction
vectors, let’s ﬁrst consider a visualization of the case where the parameter of our
system is just a single scalar w, shown in Fig. ..
Given a random initialization of w at some value w, and assuming the loss
function L happened to have the shape in Fig. ., we need the algorithm to tell us
whether at the next iteration we should move left (making w smaller than w) or
right (making w bigger than w) to reach the minimum.
Loss
one step
of gradient
slope of loss at w
descent
is negative
wmin
(goal)
Figure .
The ﬁrst step in iteratively ﬁnding the minimum of this loss function, by moving
w in the reverse direction from the slope of the function. Since the slope is negative, we need
to move w in a positive direction, to the right. Here superscripts are used for learning steps,
so w means the initial value of w (which is ), w the value at the second step, and so on.
The gradient descent algorithm answers this question by ﬁnding the gradient
gradient
of the loss function at the current point and moving in the opposite direction. The
gradient of a function of many variables is a vector pointing in the direction of the
greatest increase in a function. The gradient is a multi-variable generalization of the
slope, so for a function of one variable like the one in Fig. ., we can informally
think of the gradient as the slope. The dotted line in Fig. . shows the slope of this
hypothetical loss function at point w = w. You can see that the slope of this dotted
line is negative. Thus to ﬁnd the minimum, gradient descent tells us to go in the
opposite direction: moving w in a positive direction.
The magnitude of the amount to move in gradient descent is the value of the
slope
dwL(f(x;w),y) weighted by a learning rate η. A higher (faster) learning
learning rate
rate means that we should move w more on each step. The change we make in our
parameter is the learning rate times the gradient (or the slope, in our single-variable

GRADIENT DESCENT
example):
dwL( f(x;w),y)
wt+ = wt −η d
Now let’s extend the intuition from a function of one scalar variable w to many
variables, because we don’t just want to move left or right, we want to know where
in the N-dimensional space (of the N parameters that make up θ) we should move.
The gradient is just such a vector; it expresses the directional components of the
sharpest slope along each of those N dimensions. If we’re just imagining two weight
dimensions (say for one weight w and one bias b), the gradient might be a vector with
two orthogonal components, each of which tells us how much the ground slopes in
the w dimension and in the b dimension. Fig. . shows a visualization of the value
of a -dimensional gradient vector taken at the red point.
In an actual logistic regression, the parameter vector w is much longer than  or
, since the input feature vector x can be quite long, and we need a weight wi for
each xi. For each dimension/variable wi in w (plus the bias b), the gradient will have
a component that tells us the slope with respect to that variable. In each dimension
wi, we express the slope as a partial derivative
∂wi of the loss function. Essentially
we’re asking: “How much would a small change in that variable wi inﬂuence the
total loss function L?”
Formally, then, the gradient of a multi-variable function f is a vector in which
each component expresses the partial derivative of f with respect to one of the vari-
ables. We’ll use the inverted Greek delta symbol ∇ to refer to the gradient, and
represent ˆy as f(x;θ) to make the dependence on θ more obvious:
∂w L(f(x;θ),y)
∇L( f(x;θ),y) =
∂w L(f(x;θ),y)
∂wn L(f(x;θ),y)
∂bL(f(x;θ),y)
The ﬁnal equation for updating θ based on the gradient is thus
θt+ = θt −η∇L( f(x;θ),y)
Cost(w,b)
Figure .
Visualization of the gradient vector at the red point in two dimensions w and
b, showing a red arrow in the x-y plane pointing in the direction we will go to look for the
minimum: the opposite direction of the gradient (recall that the gradient points in the direction
of increase not decrease).

CHAPTER
LOGISTIC REGRESSION
The Gradient for Logistic Regression
In order to update θ, we need a deﬁnition for the gradient ∇L( f(x;θ),y). Recall that
for logistic regression, the cross-entropy loss function is:
LCE(ˆy,y) = −[ylogσ(w x+b)+(−y)log(−σ(w x+b))]
It turns out that the derivative of this function for one observation vector x is Eq. .
(the interested reader can see Section . for the derivation of this equation):
∂LCE(ˆy,y)
∂w j
= [σ(w x+b)−y]xj
= (ˆy−y)xj
You’ll also sometimes see this equation in the equivalent form:
∂LCE(ˆy,y)
∂w j
= −(y− ˆy)xj
Note in these equations that the gradient with respect to a single weight w j rep-
resents a very intuitive value: the difference between the true y and our estimated
ˆy = σ(w  x + b) for that observation, multiplied by the corresponding input value
x j.
The Stochastic Gradient Descent Algorithm
Stochastic gradient descent is an online algorithm that minimizes the loss function
by computing its gradient after each training example, and nudging θ in the right
direction (the opposite direction of the gradient). (An “online algorithm” is one that
processes its input example by example, rather than waiting until it sees the entire
input.) Fig. . shows the algorithm.
The learning rate η is a hyperparameter that must be adjusted. If it’s too high,
hyperparameter
the learner will take steps that are too large, overshooting the minimum of the loss
function. If it’s too low, the learner will take steps that are too small, and take too
long to get to the minimum. It is common to start with a higher learning rate and then
slowly decrease it, so that it is a function of the iteration k of training; the notation
ηk can be used to mean the value of the learning rate at iteration k.
We’ll discuss hyperparameters in more detail in Chapter , but in short, they are
a special kind of parameter for any machine learning model. Unlike regular param-
eters of a model (weights like w and b), which are learned by the algorithm from
the training set, hyperparameters are special parameters chosen by the algorithm
designer that affect how the algorithm works.
Working through an example
Let’s walk through a single step of the gradient descent algorithm. We’ll use a
simpliﬁed version of the example in Fig. . as it sees a single observation x, whose
correct value is y =  (this is a positive review), and with a feature vector x = [x,x]
consisting of these two features:
x =
(count of positive lexicon words)
x =
(count of negative lexicon words)

GRADIENT DESCENT
function STOCHASTIC GRADIENT DESCENT(L(), f(), x, y) returns θ
# where: L is the loss function
f is a function parameterized by θ
x is the set of training inputs x(), x(),..., x(m)
y is the set of training outputs (labels) y(), y(),..., y(m)
θ ←
repeat til done
# see caption
For each training tuple (x(i), y(i)) (in random order)
. Optional (for reporting):
# How are we doing on this tuple?
Compute ˆy(i) =
f(x(i);θ)
# What is our estimated output ˆy?
Compute the loss L(ˆy(i),y(i)) # How far off is ˆy(i) from the true output y(i)?
. g←∇θL( f(x(i);θ),y(i))
# How should we move θ to maximize loss?
. θ ←θ − η g
# Go the other way instead
return θ
Figure .
The stochastic gradient descent algorithm. Step  (computing the loss) is used
mainly to report how well we are doing on the current tuple; we don’t need to compute the
loss in order to compute the gradient. The algorithm can terminate when it converges (or
when the gradient norm < ϵ), or when progress halts (for example when the loss starts going
up on a held-out set).
Let’s assume the initial weights and bias in θ  are all set to , and the initial learning
rate η is .:
w = w = b =
η = .
The single update step requires that we compute the gradient, multiplied by the
learning rate
θt+ = θt −η∇θL(f(x(i);θ),y(i))
In our mini example there are three parameters, so the gradient vector has  dimen-
sions, for w, w, and b. We can compute the ﬁrst gradient as follows:
∂LCE(ˆy,y)
∂w
∂LCE(ˆy,y)
∇w,bL =
∂w
∂LCE(ˆy,y)
∂b
(σ(w x+b)−y)x
(σ(w x+b)−y)x
σ(w x+b)−y
 =
(σ()−)x
(σ()−)x
σ()−
 =
−.x
−.x
 =
 =
Now that we have a gradient, we compute the new parameter vector θ  by moving
θ  in the opposite direction from the gradient:
θ  =
−η
 =
So after one step of gradient descent, the weights have shifted to be: w = .,
w = ., and b = ..
Note that this observation x happened to be a positive example. We would expect
that after seeing more negative examples with high counts of negative words, that
the weight w would shift to have a negative value.

CHAPTER
LOGISTIC REGRESSION
Mini-batch training
Stochastic gradient descent is called stochastic because it chooses a single random
example at a time, moving the weights so as to improve performance on that single
example. That can result in very choppy movements, so it’s common to compute the
gradient over batches of training instances rather than a single instance.
For example in batch training we compute the gradient over the entire dataset.
batch training
By seeing so many examples, batch training offers a superb estimate of which di-
rection to move the weights, at the cost of spending a lot of time processing every
single example in the training set to compute this perfect direction.
A compromise is mini-batch training: we train on a group of m examples (per-
mini-batch
haps , or ) that is less than the whole dataset. (If m is the size of the dataset,
then we are doing batch gradient descent; if m = , we are back to doing stochas-
tic gradient descent.) Mini-batch training also has the advantage of computational
efﬁciency. The mini-batches can easily be vectorized, choosing the size of the mini-
batch based on the computational resources. This allows us to process all the exam-
ples in one mini-batch in parallel and then accumulate the loss, something that’s not
possible with individual or batch training.
We just need to deﬁne mini-batch versions of the cross-entropy loss function
we deﬁned in Section . and the gradient in Section ... Let’s extend the cross-
entropy loss for one example from Eq. . to mini-batches of size m. We’ll continue
to use the notation that x(i) and y(i) mean the ith training features and training label,
respectively. We make the assumption that the training examples are independent:
log p(training labels) = log
i=
p(y(i)|x(i))
i=
log p(y(i)|x(i))
= −
i=
LCE(ˆy(i),y(i))
Now the cost function for the mini-batch of m examples is the average loss for each
example:
Cost(ˆy,y) =
i=
LCE(ˆy(i),y(i))
= −
i=
y(i) logσ(w x(i) +b)+(−y(i))log

−σ(w x(i) +b)

The mini-batch gradient is the average of the individual gradients from Eq. .:
∂Cost(ˆy,y)
∂w j
i=
σ(w x(i) +b)−y(i)i
x(i)
Instead of using the sum notation, we can more efﬁciently compute the gradient
in its matrix form, following the vectorization we saw on page , where we have
a matrix X of size [m × f] representing the m inputs in the batch, and a vector y of
size [m×] representing the correct outputs:

REGULARIZATION
∂Cost(ˆy,y)
∂w
m (ˆy −y)⊺ X
m (σ(Xw +b)−y)⊺ X
Regularization
Numquam ponenda est pluralitas sine necessitate
‘Plurality should never be proposed unless needed’
William of Occam
There is a problem with learning weights that make the model perfectly match the
training data. If a feature is perfectly predictive of the outcome because it happens
to only occur in one class, it will be assigned a very high weight. The weights for
features will attempt to perfectly ﬁt details of the training set, in fact too perfectly,
modeling noisy factors that just accidentally correlate with the class. This problem is
called overﬁtting. A good model should be able to generalize well from the training
overﬁtting
generalize
data to the unseen test set, but a model that overﬁts will have poor generalization.
To avoid overﬁtting, a new regularization term R(θ) is added to the objective
regularization
function in Eq. ., resulting in the following objective for a batch of m exam-
ples (slightly rewritten from Eq. . to be maximizing log probability rather than
minimizing loss, and removing the
m term which doesn’t affect the argmax):
ˆθ = argmax
i=
logP(y(i)|x(i))−αR(θ)
The new regularization term R(θ) is used to penalize large weights. Thus a setting
of the weights that matches the training data perfectly— but uses many weights with
high values to do so—will be penalized more than a setting that matches the data a
little less well, but does so using smaller weights. There are two common ways to
compute this regularization term R(θ). L regularization is a quadratic function of
regularization
the weight values, named because it uses the (square of the) L norm of the weight
values. The L norm, ||θ||, is the same as the Euclidean distance of the vector θ
from the origin. If θ consists of n weights, then:
R(θ) = ||θ||
j=
The L regularized objective function becomes:
−α
ˆθ = argmax
j=
i=
logP(y(i)|x(i))
" m
L regularization is a linear function of the weight values, named after the L norm
regularization
||W||, the sum of the absolute values of the weights, or Manhattan distance (the

CHAPTER
LOGISTIC REGRESSION
Manhattan distance is the distance you’d have to walk between two points in a city
with a street grid like New York):
R(θ) = ||θ|| =
i=
|θi|
The L regularized objective function becomes:
−α
ˆθ = argmax
j=
|θj|
i=
logP(y(i)|x(i))
" m
These kinds of regularization come from statistics, where L regularization is called
lasso regression (Tibshirani, ) and L regularization is called ridge regression,
lasso
ridge
and both are commonly used in language processing. L regularization is easier to
optimize because of its simple derivative (the derivative of θ  is just θ), while
L regularization is more complex (the derivative of |θ| is non-continuous at zero).
But while L prefers weight vectors with many small weights, L prefers sparse
solutions with some larger weights but many more weights set to zero. Thus L
regularization leads to much sparser weight vectors, that is, far fewer features.
Both L and L regularization have Bayesian interpretations as constraints on
the prior of how weights should look. L regularization can be viewed as a Laplace
prior on the weights. L regularization corresponds to assuming that weights are
distributed according to a Gaussian distribution with mean µ = . In a Gaussian
or normal distribution, the further away a value is from the mean, the lower its
probability (scaled by the variance σ). By using a Gaussian prior on the weights, we
are saying that weights prefer to have the value . A Gaussian for a weight θj is
−(θj − µj)

πσ
exp
If we multiply each weight by a Gaussian prior on the weight, we are thus maximiz-
ing the following constraint:
−(θj − µj)
ˆθ = argmax

i=
P(y(i)|x(i))×
j=
πσ
exp
which in log space, with µ = , and assuming σ = , corresponds to
ˆθ = argmax
i=
logP(y(i)|x(i))−α
j=
which is in the same form as Eq. ..
Learning in Multinomial Logistic Regression
The loss function for multinomial logistic regression generalizes the loss function
for binary logistic regression from  to K classes. Recall that that the cross-entropy
loss for binary logistic regression (repeated from Eq. .) is:
LCE(ˆy,y) = −log p(y|x) = −[ylog ˆy+(−y)log(− ˆy)]

LEARNING IN MULTINOMIAL LOGISTIC REGRESSION
The loss function for multinomial logistic regression generalizes the two terms in
Eq. . (one that is non-zero when y =  and one that is non-zero when y = ) to
K terms. As we mentioned above, for multinomial regression we’ll represent both y
and ˆy as vectors. The true label y is a vector with K elements, each corresponding
to a class, with yc =  if the correct class is c, with all other elements of y being .
And our classiﬁer will produce an estimate vector with K elements ˆy, each element
ˆyk of which represents the estimated probability p(yk = |x).
The loss function for a single example x, generalizing from binary logistic re-
gression, is the sum of the logs of the K output classes, each weighted by their
probability yk (Eq. .). This turns out to be just the negative log probability of the
correct class c (Eq. .):
LCE(ˆy,y) = −
k=
yk log ˆyk
= −log ˆyc,
(where c is the correct class)
= −log ˆp(yc = |x)
(where c is the correct class)
= −log
exp(wc x+bc)
PK
j= exp(wj x+bj)
(c is the correct class)
How did we get from Eq. . to Eq. .? Because only one class (let’s call it c) is
the correct one, the vector y takes the value  only for this value of k, i.e., has yc =
and yj =  ∀ j ̸= c. That means the terms in the sum in Eq. . will all be  except
for the term corresponding to the true class c. Hence the cross-entropy loss is simply
the log of the output probability corresponding to the correct class, and we therefore
also call Eq. . the negative log likelihood loss.
negative log
likelihood loss
Of course for gradient descent we don’t need the loss, we need its gradient. The
gradient for a single example turns out to be very similar to the gradient for binary
logistic regression, (ˆy−y)x, that we saw in Eq. .. Let’s consider one piece of the
gradient, the derivative for a single weight. For each class k, the weight of the ith
element of input x is wk,i. What is the partial derivative of the loss with respect to
wk,i? This derivative turns out to be just the difference between the true value for the
class k (which is either  or ) and the probability the classiﬁer outputs for class k,
weighted by the value of the input xi corresponding to the ith element of the weight
vector for class k:
∂LCE
∂wk,i
= −(yk − ˆyk)xi
= −(yk − p(yk = |x))xi
xi
= −

yk −
exp(wk x+bk)
PK
j= exp(wj x+bj)
We’ll return to this case of the gradient for softmax regression when we introduce
neural networks in Chapter , and at that time we’ll also discuss the derivation of
this gradient in equations Eq. .–Eq. ..

CHAPTER
LOGISTIC REGRESSION
Interpreting models
Often we want to know more than just the correct classiﬁcation of an observation.
We want to know why the classiﬁer made the decision it did. That is, we want our
decision to be interpretable. Interpretability can be hard to deﬁne strictly, but the
interpretable
core idea is that as humans we should know why our algorithms reach the conclu-
sions they do. Because the features to logistic regression are often human-designed,
one way to understand a classiﬁer’s decision is to understand the role each feature
plays in the decision. Logistic regression can be combined with statistical tests (the
likelihood ratio test, or the Wald test); investigating whether a particular feature is
signiﬁcant by one of these tests, or inspecting its magnitude (how large is the weight
w associated with the feature?) can help us interpret why the classiﬁer made the
decision it makes. This is enormously important for building transparent models.
Furthermore, in addition to its use as a classiﬁer, logistic regression in NLP and
many other ﬁelds is widely used as an analytic tool for testing hypotheses about the
effect of various explanatory variables (features). In text classiﬁcation, perhaps we
want to know if logically negative words (no, not, never) are more likely to be asso-
ciated with negative sentiment, or if negative reviews of movies are more likely to
discuss the cinematography. However, in doing so it’s necessary to control for po-
tential confounds: other factors that might inﬂuence sentiment (the movie genre, the
year it was made, perhaps the length of the review in words). Or we might be study-
ing the relationship between NLP-extracted linguistic features and non-linguistic
outcomes (hospital readmissions, political outcomes, or product sales), but need to
control for confounds (the age of the patient, the county of voting, the brand of the
product). In such cases, logistic regression allows us to test whether some feature is
associated with some outcome above and beyond the effect of other features.
Advanced: Deriving the Gradient Equation
In this section we give the derivation of the gradient of the cross-entropy loss func-
tion LCE for logistic regression. Let’s start with some quick calculus refreshers.
First, the derivative of ln(x):
dx ln(x) =
Second, the (very elegant) derivative of the sigmoid:
dσ(z)
dz
= σ(z)(−σ(z))
Finally, the chain rule of derivatives. Suppose we are computing the derivative
chain rule
of a composite function f(x) = u(v(x)). The derivative of f(x) is the derivative of
u(x) with respect to v(x) times the derivative of v(x) with respect to x:
d f
dx = du
dx
dv  dv
First, we want to know the derivative of the loss function with respect to a single
weight w j (we’ll need to compute it for each weight, and for the bias):

SUMMARY
∂LCE
∂w j
∂w j
−[ylogσ(w x+b)+(−y)log(−σ(w x+b))]
∂wj
ylogσ(w x+b)+ ∂
= −
∂w j
(−y)log[−σ(w x+b)]

Next, using the chain rule, and relying on the derivative of log:
∂LCE
∂wj
= −
∂w j
σ(w x+b)−
−y
∂w j
−σ(w x+b)
σ(w x+b)
−σ(w x+b)
Rearranging terms:
∂wj
σ(w x+b)
∂LCE
∂w j
= −

σ(w x+b) −
−y
−σ(w x+b)
And now plugging in the derivative of the sigmoid, and using the chain rule one
more time, we end up with Eq. .:
∂w j
∂LCE
∂wj
= −

y−σ(w x+b)

σ(w x+b)[−σ(w x+b)]∂(w x+b)
σ(w x+b)[−σ(w x+b)]
= −

y−σ(w x+b)

σ(w x+b)[−σ(w x+b)]xj
σ(w x+b)[−σ(w x+b)]
= −[y−σ(w x+b)]xj
= [σ(w x+b)−y]x j
Summary
This chapter introduced the logistic regression model of classiﬁcation.
Logistic regression is a supervised machine learning classiﬁer that extracts
real-valued features from the input, multiplies each by a weight, sums them,
and passes the sum through a sigmoid function to generate a probability. A
threshold is used to make a decision.
Logistic regression can be used with two classes (e.g., positive and negative
sentiment) or with multiple classes (multinomial logistic regression, for ex-
ample for n-ary text classiﬁcation, part-of-speech labeling, etc.).
Multinomial logistic regression uses the softmax function to compute proba-
bilities.
The weights (vector w and bias b) are learned from a labeled training set via a
loss function, such as the cross-entropy loss, that must be minimized.
Minimizing this loss function is a convex optimization problem, and iterative
algorithms like gradient descent are used to ﬁnd the optimal weights.
Regularization is used to avoid overﬁtting.
Logistic regression is also one of the most useful analytic tools, because of its
ability to transparently study the importance of individual features.

CHAPTER
LOGISTIC REGRESSION
Bibliographical and Historical Notes
Logistic regression was developed in the ﬁeld of statistics, where it was used for
the analysis of binary data by the s, and was particularly common in medicine
(Cox, ). Starting in the late s it became widely used in linguistics as one
of the formal foundations of the study of linguistic variation (Sankoff and Labov,
Nonetheless, logistic regression didn’t become common in natural language pro-
cessing until the s, when it seems to have appeared simultaneously from two
directions. The ﬁrst source was the neighboring ﬁelds of information retrieval and
speech processing, both of which had made use of regression, and both of which
lent many other statistical techniques to NLP. Indeed a very early use of logistic
regression for document routing was one of the ﬁrst NLP applications to use (LSI)
embeddings as word representations (Sch¨utze et al., ).
At the same time in the early s logistic regression was developed and ap-
plied to NLP at IBM Research under the name maximum entropy modeling or
maximum
entropy
maxent (Berger et al., ), seemingly independent of the statistical literature. Un-
der that name it was applied to language modeling (Rosenfeld, ), part-of-speech
tagging (Ratnaparkhi, ), parsing (Ratnaparkhi, ), coreference resolution
(Kehler, b), and text classiﬁcation (Nigam et al., ).
More on classiﬁcation can be found in machine learning textbooks (Hastie et al.
, Witten and Frank , Bishop , Murphy ).
Exercises

Vector Semantics and
Embeddings
CHAPTER
荃者所以在鱼，得鱼而忘荃 Nets are for ﬁsh;
Once you get the ﬁsh, you can forget the net.
言者所以在意，得意而忘言 Words are for meaning;
Once you get the meaning, you can forget the words
庄子(Zhuangzi), Chapter
The asphalt that Los Angeles is famous for occurs mainly on its freeways. But
in the middle of the city is another patch of asphalt, the La Brea tar pits, and this
asphalt preserves millions of fossil bones from the last of the Ice Ages of the Pleis-
tocene Epoch. One of these fossils is the Smilodon, or saber-toothed tiger, instantly
recognizable by its long canines. Five million years ago or so, a completely different
saber-tooth tiger called Thylacosmilus lived
in Argentina and other parts of South Amer-
ica. Thylacosmilus was a marsupial whereas
Smilodon was a placental mammal, but Thy-
lacosmilus had the same long upper canines
and, like Smilodon, had a protective bone
ﬂange on the lower jaw.
The similarity of
these two mammals is one of many examples
of parallel or convergent evolution, in which particular contexts or environments
lead to the evolution of very similar structures in different species (Gould, ).
The role of context is also important in the similarity of a less biological kind
of organism: the word. Words that occur in similar contexts tend to have similar
meanings. This link between similarity in how words are distributed and similarity
in what they mean is called the distributional hypothesis. The hypothesis was
distributional
hypothesis
ﬁrst formulated in the s by linguists like Joos (), Harris (), and Firth
(), who noticed that words which are synonyms (like oculist and eye-doctor)
tended to occur in the same environment (e.g., near words like eye or examined)
with the amount of meaning difference between two words “corresponding roughly
to the amount of difference in their environments” (Harris, , ).
In this chapter we introduce vector semantics, which instantiates this linguistic
vector
semantics
hypothesis by learning representations of the meaning of words, called embeddings,
embeddings
directly from their distributions in texts. These representations are used in every nat-
ural language processing application that makes use of meaning, and the static em-
beddings we introduce here underlie the more powerful dynamic or contextualized
embeddings like BERT that we will see in Chapter .
These word representations are also the ﬁrst example in this book of repre-
sentation learning, automatically learning useful representations of the input text.
representation
learning
Finding such self-supervised ways to learn representations of the input, instead of
creating representations by hand via feature engineering, is an important focus of
NLP research (Bengio et al., ).

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
Lexical Semantics
Let’s begin by introducing some basic principles of word meaning. How should
we represent the meaning of a word? In the n-gram models of Chapter , and in
classical NLP applications, our only representation of a word is as a string of letters,
or an index in a vocabulary list. This representation is not that different from a
tradition in philosophy, perhaps you’ve seen it in introductory logic classes, in which
the meaning of words is represented by just spelling the word with small capital
letters; representing the meaning of “dog” as DOG, and “cat” as CAT, or by using an
apostrophe (DOG’).
Representing the meaning of a word by capitalizing it is a pretty unsatisfactory
model. You might have seen a version of a joke due originally to semanticist Barbara
Partee (Carlson, ):
Q: What’s the meaning of life?
A: LIFE’
Surely we can do better than this! After all, we’ll want a model of word meaning
to do all sorts of things for us. It should tell us that some words have similar mean-
ings (cat is similar to dog), others are antonyms (cold is the opposite of hot), some
have positive connotations (happy) while others have negative connotations (sad). It
should represent the fact that the meanings of buy, sell, and pay offer differing per-
spectives on the same underlying purchasing event. (If I buy something from you,
you’ve probably sold it to me, and I likely paid you.) More generally, a model of
word meaning should allow us to draw inferences to address meaning-related tasks
like question-answering or dialogue.
In this section we summarize some of these desiderata, drawing on results in the
linguistic study of word meaning, which is called lexical semantics; we’ll return to
lexical
semantics
and expand on this list in Chapter  and Chapter .
Lemmas and Senses
Let’s start by looking at how one word (we’ll choose mouse)
might be deﬁned in a dictionary (simpliﬁed from the online dictionary WordNet):
mouse (N)
any of numerous small rodents...
a hand-operated device that controls a cursor...
Here the form mouse is the lemma, also called the citation form. The form
lemma
citation form
mouse would also be the lemma for the word mice; dictionaries don’t have separate
deﬁnitions for inﬂected forms like mice. Similarly sing is the lemma for sing, sang,
sung. In many languages the inﬁnitive form is used as the lemma for the verb, so
Spanish dormir “to sleep” is the lemma for duermes “you sleep”. The speciﬁc forms
sung or carpets or sing or duermes are called wordforms.
wordform
As the example above shows, each lemma can have multiple meanings; the
lemma mouse can refer to the rodent or the cursor control device. We call each
of these aspects of the meaning of mouse a word sense. The fact that lemmas can
be polysemous (have multiple senses) can make interpretation difﬁcult (is someone
who types “mouse info” into a search engine looking for a pet or a tool?). Chap-
ter  and Chapter  will discuss the problem of polysemy, and introduce word
sense disambiguation, the task of determining which sense of a word is being used
in a particular context.
Synonymy
One important component of word meaning is the relationship be-
tween word senses. For example when one word has a sense whose meaning is

LEXICAL SEMANTICS
identical to a sense of another word, or nearly identical, we say the two senses of
those two words are synonyms. Synonyms include such pairs as
synonym
couch/sofa vomit/throw up ﬁlbert/hazelnut car/automobile
A more formal deﬁnition of synonymy (between words rather than senses) is that
two words are synonymous if they are substitutable for one another in any sentence
without changing the truth conditions of the sentence, the situations in which the
sentence would be true.
While substitutions between some pairs of words like car / automobile or wa-
ter / HO are truth preserving, the words are still not identical in meaning. Indeed,
probably no two words are absolutely identical in meaning. One of the fundamental
tenets of semantics, called the principle of contrast (Girard , Br´eal , Clark
principle of
contrast
), states that a difference in linguistic form is always associated with some dif-
ference in meaning. For example, the word HO is used in scientiﬁc contexts and
would be inappropriate in a hiking guide—water would be more appropriate— and
this genre difference is part of the meaning of the word. In practice, the word syn-
onym is therefore used to describe a relationship of approximate or rough synonymy.
Word Similarity
While words don’t have many synonyms, most words do have
lots of similar words. Cat is not a synonym of dog, but cats and dogs are certainly
similar words. In moving from synonymy to similarity, it will be useful to shift from
talking about relations between word senses (like synonymy) to relations between
words (like similarity). Dealing with words avoids having to commit to a particular
representation of word senses, which will turn out to simplify our task.
The notion of word similarity is very useful in larger semantic tasks. Knowing
similarity
how similar two words are can help in computing how similar the meaning of two
phrases or sentences are, a very important component of tasks like question answer-
ing, paraphrasing, and summarization. One way of getting values for word similarity
is to ask humans to judge how similar one word is to another. A number of datasets
have resulted from such experiments. For example the SimLex- dataset (Hill
et al., ) gives values on a scale from  to , like the examples below, which
range from near-synonyms (vanish, disappear) to pairs that scarcely seem to have
anything in common (hole, agreement):
vanish
disappear
belief
impression .
muscle bone
modest ﬂexible
hole
agreement
Word Relatedness
The meaning of two words can be related in ways other than
similarity. One such class of connections is called word relatedness (Budanitsky
relatedness
and Hirst, ), also traditionally called word association in psychology.
association
Consider the meanings of the words coffee and cup. Coffee is not similar to cup;
they share practically no features (coffee is a plant or a beverage, while a cup is a
manufactured object with a particular shape). But coffee and cup are clearly related;
they are associated by co-participating in an everyday event (the event of drinking
coffee out of a cup). Similarly scalpel and surgeon are not similar but are related
eventively (a surgeon tends to make use of a scalpel).
One common kind of relatedness between words is if they belong to the same
semantic ﬁeld. A semantic ﬁeld is a set of words which cover a particular semantic
semantic ﬁeld
domain and bear structured relations with each other. For example, words might be

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
related by being in the semantic ﬁeld of hospitals (surgeon, scalpel, nurse, anes-
thetic, hospital), restaurants (waiter, menu, plate, food, chef), or houses (door, roof,
kitchen, family, bed). Semantic ﬁelds are also related to topic models, like Latent
topic models
Dirichlet Allocation, LDA, which apply unsupervised learning on large sets of texts
to induce sets of associated words from text. Semantic ﬁelds and topic models are
very useful tools for discovering topical structure in documents.
In Chapter  we’ll introduce more relations between senses like hypernymy or
IS-A, antonymy (opposites) and meronymy (part-whole relations).
Semantic Frames and Roles
Closely related to semantic ﬁelds is the idea of a
semantic frame. A semantic frame is a set of words that denote perspectives or
semantic frame
participants in a particular type of event. A commercial transaction, for example,
is a kind of event in which one entity trades money to another entity in return for
some good or service, after which the good changes hands or perhaps the service is
performed. This event can be encoded lexically by using verbs like buy (the event
from the perspective of the buyer), sell (from the perspective of the seller), pay
(focusing on the monetary aspect), or nouns like buyer. Frames have semantic roles
(like buyer, seller, goods, money), and words in a sentence can take on these roles.
Knowing that buy and sell have this relation makes it possible for a system to
know that a sentence like Sam bought the book from Ling could be paraphrased as
Ling sold the book to Sam, and that Sam has the role of the buyer in the frame and
Ling the seller. Being able to recognize such paraphrases is important for question
answering, and can help in shifting perspective for machine translation.
Connotation
Finally, words have affective meanings or connotations. The word
connotations
connotation has different meanings in different ﬁelds, but here we use it to mean the
aspects of a word’s meaning that are related to a writer or reader’s emotions, senti-
ment, opinions, or evaluations. For example some words have positive connotations
(wonderful) while others have negative connotations (dreary). Even words whose
meanings are similar in other ways can vary in connotation; consider the difference
in connotations between fake, knockoff, forgery, on the one hand, and copy, replica,
reproduction on the other, or innocent (positive connotation) and naive (negative
connotation). Some words describe positive evaluation (great, love) and others neg-
ative evaluation (terrible, hate). Positive or negative evaluation language is called
sentiment, as we saw in Chapter , and word sentiment plays a role in important
sentiment
tasks like sentiment analysis, stance detection, and applications of NLP to the lan-
guage of politics and consumer reviews.
Early work on affective meaning (Osgood et al., ) found that words varied
along three important dimensions of affective meaning:
valence: the pleasantness of the stimulus
arousal: the intensity of emotion provoked by the stimulus
dominance: the degree of control exerted by the stimulus
Thus words like happy or satisﬁed are high on valence, while unhappy or an-
noyed are low on valence. Excited is high on arousal, while calm is low on arousal.
Controlling is high on dominance, while awed or inﬂuenced are low on dominance.
Each word is thus represented by three numbers, corresponding to its value on each
of the three dimensions:

VECTOR SEMANTICS
Valence Arousal Dominance
courageous .
music
heartbreak
cub
Osgood et al. () noticed that in using these  numbers to represent the
meaning of a word, the model was representing each word as a point in a three-
dimensional space, a vector whose three dimensions corresponded to the word’s
rating on the three scales. This revolutionary idea that word meaning could be rep-
resented as a point in space (e.g., that part of the meaning of heartbreak can be
represented as the point [.,.,.]) was the ﬁrst expression of the vector se-
mantics models that we introduce next.
Vector Semantics
Vector semantics is the standard way to represent word meaning in NLP, helping
vector
semantics
us model many of the aspects of word meaning we saw in the previous section. The
roots of the model lie in the s when two big ideas converged: Osgood’s
idea mentioned above to use a point in three-dimensional space to represent the
connotation of a word, and the proposal by linguists like Joos (), Harris (),
and Firth () to deﬁne the meaning of a word by its distribution in language
use, meaning its neighboring words or grammatical environments. Their idea was
that two words that occur in very similar distributions (whose neighboring words are
similar) have similar meanings.
For example, suppose you didn’t know the meaning of the word ongchoi (a re-
cent borrowing from Cantonese) but you see it in the following contexts:
(.) Ongchoi is delicious sauteed with garlic.
(.) Ongchoi is superb over rice.
(.) ...ongchoi leaves with salty sauces...
And suppose that you had seen many of these context words in other contexts:
(.) ...spinach sauteed with garlic over rice...
(.) ...chard stems and leaves are delicious...
(.) ...collard greens and other salty leafy greens
The fact that ongchoi occurs with words like rice and garlic and delicious and
salty, as do words like spinach, chard, and collard greens might suggest that ongchoi
is a leafy green similar to these other leafy greens. We can do the same thing
computationally by just counting words in the context of ongchoi.
The idea of vector semantics is to represent a word as a point in a multidimen-
sional semantic space that is derived (in ways we’ll see) from the distributions of
word neighbors. Vectors for representing words are called embeddings (although
embeddings
the term is sometimes more strictly applied only to dense vectors like wordvec
(Section .), rather than sparse tf-idf or PPMI vectors (Section .-Section .)).
The word “embedding” derives from its mathematical sense as a mapping from one
space or structure to another, although the meaning has shifted; see the end of the
chapter.
It’s in fact Ipomoea aquatica, a relative of morning glory sometimes called water spinach in English.

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
not good
bad
dislike
worst
by
to
’s
that
incredibly bad
now
are
worse
you
than
with
is
very good
incredibly good
fantastic
wonderful
amazing
terriﬁc
nice
good
Figure .
A two-dimensional (t-SNE) projection of embeddings for some words and
phrases, showing that words with similar meanings are nearby in space. The original -
dimensional embeddings were trained for sentiment analysis. Simpliﬁed from Li et al. ()
with colors added for explanation.
Fig. . shows a visualization of embeddings learned for sentiment analysis,
showing the location of selected words projected down from -dimensional space
into a two dimensional space. Notice the distinct regions containing positive words,
negative words, and neutral function words.
The ﬁne-grained model of word similarity of vector semantics offers enormous
power to NLP applications. NLP applications like the sentiment classiﬁers of Chap-
ter  or Chapter  depend on the same words appearing in the training and test sets.
But by representing words as embeddings, classiﬁers can assign sentiment as long as
it sees some words with similar meanings. And as we’ll see, vector semantic models
can be learned automatically from text without supervision.
In this chapter we’ll introduce the two most commonly used models. In the tf-idf
model, an important baseline, the meaning of a word is deﬁned by a simple function
of the counts of nearby words. We will see that this method results in very long
vectors that are sparse, i.e. mostly zeros (since most words simply never occur in
the context of others). We’ll introduce the wordvec model family for construct-
ing short, dense vectors that have useful semantic properties. We’ll also introduce
the cosine, the standard way to use embeddings to compute semantic similarity, be-
tween two words, two sentences, or two documents, an important tool in practical
applications like question answering, summarization, or automatic essay grading.
Words and Vectors
“The most important attributes of a vector in -space are {Location, Location, Location}”
Randall Munroe, https://xkcd.com//
Vector or distributional models of meaning are generally based on a co-occurrence
matrix, a way of representing how often words co-occur. We’ll look at two popular
matrices: the term-document matrix and the term-term matrix.
Vectors and documents
In a term-document matrix, each row represents a word in the vocabulary and each
term-document
matrix
column represents a document from some collection of documents. Fig. . shows a
small selection from a term-document matrix showing the occurrence of four words
in four plays by Shakespeare. Each cell in this matrix represents the number of times

WORDS AND VECTORS
a particular word (deﬁned by the row) occurs in a particular document (deﬁned by
the column). Thus fool appeared  times in Twelfth Night.
As You Like It
Twelfth Night
Julius Caesar
Henry V
battle
good
fool
wit
Figure .
The term-document matrix for four words in four Shakespeare plays. Each cell
contains the number of times the (row) word occurs in the (column) document.
The term-document matrix of Fig. . was ﬁrst deﬁned as part of the vector
space model of information retrieval (Salton, ). In this model, a document is
vector space
model
represented as a count vector, a column in Fig. ..
To review some basic linear algebra, a vector is, at heart, just a list or array of
vector
numbers. So As You Like It is represented as the list [,,,] (the ﬁrst column
vector in Fig. .) and Julius Caesar is represented as the list [,,,] (the third
column vector). A vector space is a collection of vectors, characterized by their
vector space
dimension. In the example in Fig. ., the document vectors are of dimension ,
dimension
just so they ﬁt on the page; in real term-document matrices, the vectors representing
each document would have dimensionality |V|, the vocabulary size.
The ordering of the numbers in a vector space indicates different dimensions on
which documents vary. Thus the ﬁrst dimension for both these vectors corresponds
to the number of times the word battle occurs, and we can compare each dimension,
noting for example that the vectors for As You Like It and Twelfth Night have similar
values ( and , respectively) for the ﬁrst dimension.
As You Like It
Twelfth Night
Julius Caesar
Henry V
battle
good
fool
wit
Figure .
The term-document matrix for four words in four Shakespeare plays. The red
boxes show that each document is represented as a column vector of length four.
We can think of the vector for a document as a point in |V|-dimensional space;
thus the documents in Fig. . are points in -dimensional space. Since -dimensional
spaces are hard to visualize, Fig. . shows a visualization in two dimensions; we’ve
arbitrarily chosen the dimensions corresponding to the words battle and fool.
Term-document matrices were originally deﬁned as a means of ﬁnding similar
documents for the task of document information retrieval. Two documents that are
similar will tend to have similar words, and if two documents have similar words
their column vectors will tend to be similar. The vectors for the comedies As You
Like It [,,,] and Twelfth Night [,,,] look a lot more like each other
(more fools and wit than battles) than they look like Julius Caesar [,,,] or
Henry V [,,,]. This is clear with the raw numbers; in the ﬁrst dimension
(battle) the comedies have low numbers and the others have high numbers, and we
can see it visually in Fig. .; we’ll see very shortly how to quantify this intuition
more formally.
A real term-document matrix, of course, wouldn’t just have  rows and columns,
let alone . More generally, the term-document matrix has |V| rows (one for each
word type in the vocabulary) and D columns (one for each document in the collec-

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
Henry V [,]
Julius Caesar [,]
battle
Twelfth Night [,]
As You Like It [,]
fool
Figure .
A spatial visualization of the document vectors for the four Shakespeare play
documents, showing just two of the dimensions, corresponding to the words battle and fool.
The comedies have high values for the fool dimension and low values for the battle dimension.
tion); as we’ll see, vocabulary sizes are generally in the tens of thousands, and the
number of documents can be enormous (think about all the pages on the web).
Information retrieval (IR) is the task of ﬁnding the document d from the D
information
retrieval
documents in some collection that best matches a query q. For IR we’ll therefore also
represent a query by a vector, also of length |V|, and we’ll need a way to compare
two vectors to ﬁnd how similar they are. (Doing IR will also require efﬁcient ways
to store and manipulate these vectors by making use of the convenient fact that these
vectors are sparse, i.e., mostly zeros).
Later in the chapter we’ll introduce some of the components of this vector com-
parison process: the tf-idf term weighting, and the cosine similarity metric.
Words as vectors: document dimensions
We’ve seen that documents can be represented as vectors in a vector space. But
vector semantics can also be used to represent the meaning of words. We do this
by associating each word with a word vector— a row vector rather than a column
row vector
vector, hence with different dimensions, as shown in Fig. .. The four dimensions
of the vector for fool, [,,,], correspond to the four Shakespeare plays. Word
counts in the same four dimensions are used to form the vectors for the other
words: wit, [,,,]; battle, [,,,]; and good [,,,].
As You Like It
Twelfth Night
Julius Caesar
Henry V
battle
good
fool
wit
Figure .
The term-document matrix for four words in four Shakespeare plays. The red
boxes show that each word is represented as a row vector of length four.
For documents, we saw that similar documents had similar vectors, because sim-
ilar documents tend to have similar words. This same principle applies to words:
similar words have similar vectors because they tend to occur in similar documents.
The term-document matrix thus lets us represent the meaning of a word by the doc-
uments it tends to occur in.

WORDS AND VECTORS
Words as vectors: word dimensions
An alternative to using the term-document matrix to represent words as vectors of
document counts, is to use the term-term matrix, also called the word-word ma-
trix or the term-context matrix, in which the columns are labeled by words rather
word-word
matrix
than documents. This matrix is thus of dimensionality |V|×|V| and each cell records
the number of times the row (target) word and the column (context) word co-occur
in some context in some training corpus. The context could be the document, in
which case the cell represents the number of times the two words appear in the same
document. It is most common, however, to use smaller contexts, generally a win-
dow around the word, for example of  words to the left and  words to the right,
in which case the cell represents the number of times (in some training corpus) the
column word occurs in such a ± word window around the row word. Here are four
examples of words in their windows:
is traditionally followed by cherry
pie, a traditional dessert
often mixed, such as strawberry
rhubarb pie. Apple pie
computer peripherals and personal digital
assistants. These devices usually
a computer. This includes information available on the internet
If we then take every occurrence of each word (say strawberry) and count the
context words around it, we get a word-word co-occurrence matrix. Fig. . shows a
simpliﬁed subset of the word-word co-occurrence matrix for these four words com-
puted from the Wikipedia corpus (Davies, ).
aardvark
computer
data
result
pie
sugar
cherry
strawberry
digital
information
Figure .
Co-occurrence vectors for four words in the Wikipedia corpus, showing six of
the dimensions (hand-picked for pedagogical purposes). The vector for digital is outlined in
red. Note that a real vector would have vastly more dimensions and thus be much sparser.
Note in Fig. . that the two words cherry and strawberry are more similar to
each other (both pie and sugar tend to occur in their window) than they are to other
words like digital; conversely, digital and information are more similar to each other
than, say, to strawberry. Fig. . shows a spatial visualization.
information
digital
computer

data
Figure .
A spatial visualization of word vectors for digital and information, showing just
two of the dimensions, corresponding to the words data and computer.
Note that |V|, the dimensionality of the vector, is generally the size of the vo-
cabulary, often between , and , words (using the most frequent words

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
in the training corpus; keeping words after about the most frequent , or so is
generally not helpful). Since most of these numbers are zero these are sparse vector
representations; there are efﬁcient algorithms for storing and computing with sparse
matrices.
Now that we have some intuitions, let’s move on to examine the details of com-
puting word similarity. Afterwards we’ll discuss methods for weighting cells.
Cosine for measuring similarity
To measure similarity between two target words v and w, we need a metric that
takes two vectors (of the same dimensionality, either both with words as dimensions,
hence of length |V|, or both with documents as dimensions, of length |D|) and gives
a measure of their similarity. By far the most common similarity metric is the cosine
of the angle between the vectors.
The cosine—like most measures for vector similarity used in NLP—is based on
the dot product operator from linear algebra, also called the inner product:
dot product
inner product
dot product(v,w) = v w =
i=
viwi = vw +vw +...+vNwN
The dot product acts as a similarity metric because it will tend to be high just when
the two vectors have large values in the same dimensions. Alternatively, vectors that
have zeros in different dimensions—orthogonal vectors—will have a dot product of
, representing their strong dissimilarity.
This raw dot product, however, has a problem as a similarity metric: it favors
long vectors. The vector length is deﬁned as
vector length
|v| =
i=
The dot product is higher if a vector is longer, with higher values in each dimension.
More frequent words have longer vectors, since they tend to co-occur with more
words and have higher co-occurrence values with each of them. The raw dot product
thus will be higher for frequent words. But this is a problem; we’d like a similarity
metric that tells us how similar two words are regardless of their frequency.
We modify the dot product to normalize for the vector length by dividing the
dot product by the lengths of each of the two vectors. This normalized dot product
turns out to be the same as the cosine of the angle between the two vectors, following
from the deﬁnition of the dot product between two vectors a and b:
ab = |a||b|cosθ
ab
|a||b| = cosθ
The cosine similarity metric between two vectors v and w thus can be computed as:
cosine

TF-IDF: WEIGHING TERMS IN THE VECTOR
i=
viwi
cosine(v,w) = v w
|v||w| =
i=
i=
For some applications we pre-normalize each vector, by dividing it by its length,
creating a unit vector of length . Thus we could compute a unit vector from a by
unit vector
dividing it by |a|. For unit vectors, the dot product is the same as the cosine.
The cosine value ranges from  for vectors pointing in the same direction, through
for orthogonal vectors, to - for vectors pointing in opposite directions. But since
raw frequency values are non-negative, the cosine for these vectors ranges from –.
Let’s see how the cosine computes which of the words cherry or digital is closer
in meaning to information, just using raw counts from the following shortened table:
pie
data computer
cherry
digital
information
cos(cherry,information) =
+ +√
+ + = .
cos(digital,information) =
+ +√
+ + = .
The model decides that information is way closer to digital than it is to cherry, a
result that seems sensible. Fig. . shows a visualization.
cherry
digital
information
Dimension : ‘pie’
Dimension : ‘computer’
Figure .
A (rough) graphical demonstration of cosine similarity, showing vectors for
three words (cherry, digital, and information) in the two dimensional space deﬁned by counts
of the words computer and pie nearby. The ﬁgure doesn’t show the cosine, but it highlights the
angles; note that the angle between digital and information is smaller than the angle between
cherry and information. When two vectors are more similar, the cosine is larger but the angle
is smaller; the cosine has its maximum () when the angle between two vectors is smallest
(◦); the cosine of all other angles is less than .
TF-IDF: Weighing terms in the vector
The co-occurrence matrices above represent each cell by frequencies, either of words
with documents (Fig. .), or words with other words (Fig. .). But raw frequency

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
is not the best measure of association between words. Raw frequency is very skewed
and not very discriminative. If we want to know what kinds of contexts are shared
by cherry and strawberry but not by digital and information, we’re not going to get
good discrimination from words like the, it, or they, which occur frequently with
all sorts of words and aren’t informative about any particular word. We saw this
also in Fig. . for the Shakespeare corpus; the dimension for the word good is not
very discriminative between plays; good is simply a frequent word and has roughly
equivalent high frequencies in each of the plays.
It’s a bit of a paradox. Words that occur nearby frequently (maybe pie nearby
cherry) are more important than words that only appear once or twice. Yet words
that are too frequent—ubiquitous, like the or good— are unimportant. How can we
balance these two conﬂicting constraints?
There are two common solutions to this problem: in this section we’ll describe
the tf-idf weighting, usually used when the dimensions are documents. In the next
we introduce the PPMI algorithm (usually used when the dimensions are words).
The tf-idf weighting (the ‘-’ here is a hyphen, not a minus sign) is the product
of two terms, each term capturing one of these two intuitions:
The ﬁrst is the term frequency (Luhn, ): the frequency of the word t in the
term frequency
document d. We can just use the raw count as the term frequency:
tft,d = count(t,d)
More commonly we squash the raw frequency a bit, by using the log of the fre-
quency instead. The intuition is that a word appearing  times in a document
doesn’t make that word  times more likely to be relevant to the meaning of the
document. We also need to do something special with counts of , since we can’t
take the log of .
tft,d =
+log count(t,d)
if count(t,d) >
otherwise
If we use log weighting, terms which occur  times in a document would have tf = ,
times in a document tf =  + log() =  +  = ,  times in a document tf =
+log() = ,  times tf = +log() = ,  times tf = , and so on.
The second factor in tf-idf is used to give a higher weight to words that occur
only in a few documents. Terms that are limited to a few documents are useful
for discriminating those documents from the rest of the collection; terms that occur
frequently across the entire collection aren’t as helpful. The document frequency
document
frequency
dft of a term t is the number of documents it occurs in. Document frequency is
not the same as the collection frequency of a term, which is the total number of
times the word appears in the whole collection in any document. Consider in the
collection of Shakespeare’s  plays the two words Romeo and action. The words
have identical collection frequencies (they both occur  times in all the plays) but
very different document frequencies, since Romeo only occurs in a single play. If
our goal is to ﬁnd documents about the romantic tribulations of Romeo, the word
Romeo should be highly weighted, but not action:
Collection Frequency Document Frequency
Romeo
action
We can also use this alternative formulation, which we have used in earlier editions:
tft,d =
log(count(t,d)+)

TF-IDF: WEIGHING TERMS IN THE VECTOR
We emphasize discriminative words like Romeo via the inverse document fre-
quency or idf term weight (Sparck Jones, ). The idf is deﬁned using the frac-
idf
tion N/dft, where N is the total number of documents in the collection, and dft is
the number of documents in which term t occurs. The fewer documents in which a
term occurs, the higher this weight. The lowest weight of  is assigned to terms that
occur in all the documents. It’s usually clear what counts as a document: in Shake-
speare we would use a play; when processing a collection of encyclopedia articles
like Wikipedia, the document is a Wikipedia page; in processing newspaper articles,
the document is a single article. Occasionally your corpus might not have appropri-
ate document divisions and you might need to break up the corpus into documents
yourself for the purposes of computing idf.
Because of the large number of documents in many collections, this measure
too is usually squashed with a log function. The resulting deﬁnition for inverse
document frequency (idf) is thus
idft = log
dft

Here are some idf values for some words in the Shakespeare corpus, ranging from
extremely informative words which occur in only one play like Romeo, to those that
occur in a few like salad or Falstaff, to those which are very common like fool or so
common as to be completely non-discriminative since they occur in all  plays like
good or sweet.
Word
df
idf
Romeo
salad
Falstaff
forest
battle
wit
fool
good
sweet
The tf-idf weighted value wt,d for word t in document d thus combines term
tf-idf
frequency tft,d (deﬁned either by Eq. . or by Eq. .) with idf from Eq. .:
wt,d = tft,d ×idft
Fig. . applies tf-idf weighting to the Shakespeare term-document matrix in Fig. .,
using the tf equation Eq. .. Note that the tf-idf values for the dimension corre-
sponding to the word good have now all become ; since this word appears in every
document, the tf-idf weighting leads it to be ignored. Similarly, the word fool, which
appears in  out of the  plays, has a much lower weight.
The tf-idf weighting is the way for weighting co-occurrence matrices in infor-
mation retrieval, but also plays a role in many other aspects of natural language
processing. It’s also a great baseline, the simple thing to try ﬁrst. We’ll look at other
weightings like PPMI (Positive Pointwise Mutual Information) in Section ..
Sweet was one of Shakespeare’s favorite adjectives, a fact probably related to the increased use of
sugar in European recipes around the turn of the th century (Jurafsky, , p. ).

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
As You Like It
Twelfth Night
Julius Caesar
Henry V
battle
good
fool
wit
Figure .
A tf-idf weighted term-document matrix for four words in four Shakespeare
plays, using the counts in Fig. .. For example the . value for wit in As You Like It is
the product of tf =  + log() = . and idf = .. Note that the idf weighting has
eliminated the importance of the ubiquitous word good and vastly reduced the impact of the
almost-ubiquitous word fool.
Pointwise Mutual Information (PMI)
An alternative weighting function to tf-idf, PPMI (positive pointwise mutual infor-
mation), is used for term-term-matrices, when the vector dimensions correspond to
words rather than documents. PPMI draws on the intuition that the best way to weigh
the association between two words is to ask how much more the two words co-occur
in our corpus than we would have a priori expected them to appear by chance.
Pointwise mutual information (Fano, ) is one of the most important con-
pointwise
mutual
information
cepts in NLP. It is a measure of how often two events x and y occur, compared with
what we would expect if they were independent:
I(x,y) = log
P(x,y)
P(x)P(y)
The pointwise mutual information between a target word w and a context word
c (Church and Hanks , Church and Hanks ) is then deﬁned as:
PMI(w,c) = log
P(w,c)
P(w)P(c)
The numerator tells us how often we observed the two words together (assuming
we compute probability by using the MLE). The denominator tells us how often
we would expect the two words to co-occur assuming they each occurred indepen-
dently; recall that the probability of two independent events both occurring is just
the product of the probabilities of the two events. Thus, the ratio gives us an esti-
mate of how much more the two words co-occur than we expect by chance. PMI is
a useful tool whenever we need to ﬁnd words that are strongly associated.
PMI values range from negative to positive inﬁnity. But negative PMI values
(which imply things are co-occurring less often than we would expect by chance)
tend to be unreliable unless our corpora are enormous.
To distinguish whether
two words whose individual probability is each − occur together less often than
chance, we would need to be certain that the probability of the two occurring to-
gether is signiﬁcantly less than −, and this kind of granularity would require an
enormous corpus. Furthermore it’s not clear whether it’s even possible to evaluate
such scores of ‘unrelatedness’ with human judgments. For this reason it is more
PMI is based on the mutual information between two random variables X and Y, deﬁned as:
P(x,y)log
P(x,y)
P(x)P(y)
I(X,Y) =
In a confusion of terminology, Fano used the phrase mutual information to refer to what we now call
pointwise mutual information and the phrase expectation of the mutual information for what we now call
mutual information

POINTWISE MUTUAL INFORMATION (PMI)
common to use Positive PMI (called PPMI) which replaces all negative PMI values
PPMI
with zero (Church and Hanks , Dagan et al. , Niwa and Nitta ):
PPMI(w,c) = max(log
P(w,c)
P(w)P(c),)
More formally, let’s assume we have a co-occurrence matrix F with W rows (words)
and C columns (contexts), where fij gives the number of times word wi occurs with
context cj. This can be turned into a PPMI matrix where PPMIij gives the PPMI
value of word wi with context cj (which we can also express as PPMI(wi,cj) or
PPMI(w = i,c = j)) as follows:
pij =
fij
PW
i=
PC
j= fi j , pi∗ =
PC
j= fi j
PW
i=
PC
j= fi j , p∗ j =
PW
i= fi j
PW
i=
PC
j= fi j
PPMIij = max(log
pij
pi∗p∗j
Let’s see some PPMI calculations. We’ll use Fig. ., which repeats Fig. . plus
all the count marginals, and let’s pretend for ease of calculation that these are the
only words/contexts that matter.
computer
data
result
pie
sugar
count(w)
cherry
strawberry
digital
information
count(context)
Figure .
Co-occurrence counts for four words in  contexts in the Wikipedia corpus,
together with the marginals, pretending for the purpose of this calculation that no other word-
s/contexts matter.
Thus for example we could compute PPMI(information,data), assuming we pre-
tended that Fig. . encompassed all the relevant word contexts/dimensions, as fol-
lows:
P(w=information, c=data) =
= .
P(w=information) =
= .
P(c=data) =
= .
PPMI(information,data) = log(./(.∗.)) = .
Fig. . shows the joint probabilities computed from the counts in Fig. ., and
Fig. . shows the PPMI values. Not surprisingly, cherry and strawberry are highly
associated with both pie and sugar, and data is mildly associated with information.
PMI has the problem of being biased toward infrequent events; very rare words
tend to have very high PMI values. One way to reduce this bias toward low frequency
Positive PMI also cleanly solves the problem of what to do with zero counts, using  to replace the
−∞ from log().

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
p(w,context)
p(w)
computer
data
result
pie
sugar
p(w)
cherry
strawberry
digital
information
p(context)
Figure .
Replacing the counts in Fig. . with joint probabilities, showing the marginals
in the right column and the bottom row.
computer
data
result
pie
sugar
cherry
strawberry
digital
information
Figure .
The PPMI matrix showing the association between words and context words,
computed from the counts in Fig. .. Note that most of the  PPMI values are ones that had
a negative PMI; for example PMI(cherry,computer) = -., meaning that cherry and computer
co-occur on Wikipedia less often than we would expect by chance, and with PPMI we replace
negative values by zero.
events is to slightly change the computation for P(c), using a different function Pα(c)
that raises the probability of the context word to the power of α:
PPMIα(w,c) = max(log
P(w,c)
P(w)Pα(c),)
Pα(c) =
count(c)α
c count(c)α
Levy et al. () found that a setting of α = . improved performance of
embeddings on a wide range of tasks (drawing on a similar weighting used for skip-
grams described below in Eq. .). This works because raising the count to α =
. increases the probability assigned to rare contexts, and hence lowers their PMI
(Pα(c) > P(c) when c is rare).
Another possible solution is Laplace smoothing: Before computing PMI, a small
constant k (values of .- are common) is added to each of the counts, shrinking
(discounting) all the non-zero values. The larger the k, the more the non-zero counts
are discounted.
Applications of the tf-idf or PPMI vector models
In summary, the vector semantics model we’ve described so far represents a target
word as a vector with dimensions corresponding either to the documents in a large
collection (the term-document matrix) or to the counts of words in some neighboring
window (the term-term matrix). The values in each dimension are counts, weighted
by tf-idf (for term-document matrices) or PPMI (for term-term matrices), and the
vectors are sparse (since most values are zero).
The model computes the similarity between two words x and y by taking the
cosine of their tf-idf or PPMI vectors; high cosine, high similarity. This entire model

WORDVEC
is sometimes referred to as the tf-idf model or the PPMI model, after the weighting
function.
The tf-idf model of meaning is often used for document functions like deciding
if two documents are similar. We represent a document by taking the vectors of
all the words in the document, and computing the centroid of all those vectors.
centroid
The centroid is the multidimensional version of the mean; the centroid of a set of
vectors is a single vector that has the minimum sum of squared distances to each of
the vectors in the set. Given k word vectors w,w,...,wk, the centroid document
vector d is:
document
vector
d = w +w +...+wk
Given two documents, we can then compute their document vectors d and d, and
estimate the similarity between the two documents by cos(d,d). Document sim-
ilarity is also useful for all sorts of applications; information retrieval, plagiarism
detection, news recommender systems, and even for digital humanities tasks like
comparing different versions of a text to see which are similar to each other.
Either the PPMI model or the tf-idf model can be used to compute word simi-
larity, for tasks like ﬁnding word paraphrases, tracking changes in word meaning, or
automatically discovering meanings of words in different corpora. For example, we
can ﬁnd the  most similar words to any target word w by computing the cosines
between w and each of the V − other words, sorting, and looking at the top .
Wordvec
In the previous sections we saw how to represent a word as a sparse, long vector with
dimensions corresponding to words in the vocabulary or documents in a collection.
We now introduce a more powerful word representation: embeddings, short dense
vectors. Unlike the vectors we’ve seen so far, embeddings are short, with number
of dimensions d ranging from -, rather than the much larger vocabulary size
|V| or number of documents D we’ve seen. These d dimensions don’t have a clear
interpretation. And the vectors are dense: instead of vector entries being sparse,
mostly-zero counts or functions of counts, the values will be real-valued numbers
that can be negative.
It turns out that dense vectors work better in every NLP task than sparse vectors.
While we don’t completely understand all the reasons for this, we have some intu-
itions. Representing words as -dimensional dense vectors requires our classiﬁers
to learn far fewer weights than if we represented words as ,-dimensional vec-
tors, and the smaller parameter space possibly helps with generalization and avoid-
ing overﬁtting. Dense vectors may also do a better job of capturing synonymy.
For example, in a sparse vector representation, dimensions for synonyms like car
and automobile dimension are distinct and unrelated; sparse vectors may thus fail
to capture the similarity between a word with car as a neighbor and a word with
automobile as a neighbor.
In this section we introduce one method for computing embeddings: skip-gram
skip-gram
with negative sampling, sometimes called SGNS. The skip-gram algorithm is one
SGNS
of two algorithms in a software package called wordvec, and so sometimes the
wordvec
algorithm is loosely referred to as wordvec (Mikolov et al. a, Mikolov et al.
b). The wordvec methods are fast, efﬁcient to train, and easily available on-

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
line with code and pretrained embeddings. Wordvec embeddings are static em-
beddings, meaning that the method learns one ﬁxed embedding for each word in the
static
embeddings
vocabulary. In Chapter  we’ll introduce methods for learning dynamic contextual
embeddings like the popular family of BERT representations, in which the vector
for each word is different in different contexts.
The intuition of wordvec is that instead of counting how often each word w oc-
curs near, say, apricot, we’ll instead train a classiﬁer on a binary prediction task: “Is
word w likely to show up near apricot?” We don’t actually care about this prediction
task; instead we’ll take the learned classiﬁer weights as the word embeddings.
The revolutionary intuition here is that we can just use running text as implicitly
supervised training data for such a classiﬁer; a word c that occurs near the target
word apricot acts as gold ‘correct answer’ to the question “Is word c likely to show
up near apricot?” This method, often called self-supervision, avoids the need for
self-supervision
any sort of hand-labeled supervision signal. This idea was ﬁrst proposed in the task
of neural language modeling, when Bengio et al. () and Collobert et al. ()
showed that a neural language model (a neural network that learned to predict the
next word from prior words) could just use the next word in running text as its
supervision signal, and could be used to learn an embedding representation for each
word as part of doing this prediction task.
We’ll see how to do neural networks in the next chapter, but wordvec is a
much simpler model than the neural network language model, in two ways. First,
wordvec simpliﬁes the task (making it binary classiﬁcation instead of word pre-
diction). Second, wordvec simpliﬁes the architecture (training a logistic regression
classiﬁer instead of a multi-layer neural network with hidden layers that demand
more sophisticated training algorithms). The intuition of skip-gram is:
. Treat the target word and a neighboring context word as positive examples.
. Randomly sample other words in the lexicon to get negative samples.
. Use logistic regression to train a classiﬁer to distinguish those two cases.
. Use the learned weights as the embeddings.
The classiﬁer
Let’s start by thinking about the classiﬁcation task, and then turn to how to train.
Imagine a sentence like the following, with a target word apricot, and assume we’re
using a window of ± context words:
... lemon,
a [tablespoon of apricot jam,
a] pinch ...
Our goal is to train a classiﬁer such that, given a tuple (w,c) of a target word
w paired with a candidate context word c (for example (apricot, jam), or perhaps
(apricot, aardvark)) it will return the probability that c is a real context word (true
for jam, false for aardvark):
P(+|w,c)
The probability that word c is not a real context word for w is just  minus
Eq. .:
P(−|w,c) = −P(+|w,c)
How does the classiﬁer compute the probability P? The intuition of the skip-
gram model is to base this probability on embedding similarity: a word is likely to

WORDVEC
occur near the target if its embedding vector is similar to the target embedding. To
compute similarity between these dense embeddings, we rely on the intuition that
two vectors are similar if they have a high dot product (after all, cosine is just a
normalized dot product). In other words:
Similarity(w,c) ≈ cw
The dot product c  w is not a probability, it’s just a number ranging from −∞ to ∞
(since the elements in wordvec embeddings can be negative, the dot product can be
negative). To turn the dot product into a probability, we’ll use the logistic or sigmoid
function σ(x), the fundamental core of logistic regression:
σ(x) =
+exp(−x)
We model the probability that word c is a real context word for target word w as:
P(+|w,c) = σ(cw) =
+exp(−cw)
The sigmoid function returns a number between  and , but to make it a probability
we’ll also need the total probability of the two possible events (c is a context word,
and c isn’t a context word) to sum to . We thus estimate the probability that word c
is not a real context word for w as:
P(−|w,c) = −P(+|w,c)
= σ(−cw) =
+exp(cw)
Equation . gives us the probability for one word, but there are many context
words in the window. Skip-gram makes the simplifying assumption that all context
words are independent, allowing us to just multiply their probabilities:
P(+|w,c:L) =
i=
σ(ci w)
logP(+|w,c:L) =
i=
logσ(ci w)
In summary, skip-gram trains a probabilistic classiﬁer that, given a test target word
w and its context window of L words c:L, assigns a probability based on how similar
this context window is to the target word. The probability is based on applying the
logistic (sigmoid) function to the dot product of the embeddings of the target word
with each context word. To compute this probability, we just need embeddings for
each target word and context word in the vocabulary.
Fig. . shows the intuition of the parameters we’ll need. Skip-gram actually
stores two embeddings for each word, one for the word as a target, and one for the
word considered as context. Thus the parameters we need to learn are two matrices
W and C, each containing an embedding for every one of the |V| words in the
vocabulary V. Let’s now turn to learning these embeddings (which is the real goal
of training this classiﬁer in the ﬁrst place).
In principle the target matrix and the context matrix could use different vocabularies, but we’ll simplify
by assuming one shared vocabulary V.

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
..d
aardvark
apricot
target words
|V|
zebra
& =
aardvark
|V|+
apricot
context & noise
words
zebra
Figure .
The embeddings learned by the skipgram model. The algorithm stores two
embeddings for each word, the target embedding (sometimes called the input embedding)
and the context embedding (sometimes called the output embedding). The parameter θ that
the algorithm learns is thus a matrix of |V| vectors, each of dimension d, formed by concate-
nating two matrices, the target embeddings W and the context+noise embeddings C.
Learning skip-gram embeddings
The learning algorithm for skip-gram embeddings takes as input a corpus of text,
and a chosen vocabulary size N. It begins by assigning a random embedding vector
for each of the N vocabulary words, and then proceeds to iteratively shift the em-
bedding of each word w to be more like the embeddings of words that occur nearby
in texts, and less like the embeddings of words that don’t occur nearby. Let’s start
by considering a single piece of training data:
... lemon,
a [tablespoon of apricot jam,
a] pinch ...
This example has a target word w (apricot), and  context words in the L = ±
window, resulting in  positive training instances (on the left below):
positive examples +
cpos
negative examples -
cneg
cneg
apricot aardvark apricot seven
apricot my
apricot forever
apricot where
apricot dear
apricot coaxial
apricot if
apricot tablespoon
apricot of
apricot jam
apricot a
For training a binary classiﬁer we also need negative examples. In fact skip-
gram with negative sampling (SGNS) uses more negative examples than positive
examples (with the ratio between them set by a parameter k). So for each of these
(w,cpos) training instances we’ll create k negative samples, each consisting of the
target w plus a ‘noise word’ cneg. A noise word is a random word from the lexicon,
constrained not to be the target word w. The right above shows the setting where
k = , so we’ll have  negative examples in the negative training set − for each
positive example w,cpos.
The noise words are chosen according to their weighted unigram frequency
pα(w), where α is a weight. If we were sampling according to unweighted fre-
quency p(w), it would mean that with unigram probability p(“the”) we would choose
the word the as a noise word, with unigram probability p(“aardvark”) we would
choose aardvark, and so on. But in practice it is common to set α = ., i.e. use the

WORDVEC
weighting p
(w):
Pα(w) =
count(w)α
w′ count(w′)α
Setting α = . gives better performance because it gives rare noise words slightly
higher probability: for rare words, Pα(w) > P(w). To illustrate this intuition, it
might help to work out the probabilities for an example with two events, P(a) = .
and P(b) = .:
Pα(a) =
.. +.. = .
Pα(b) =
.. +.. = .
Given the set of positive and negative training instances, and an initial set of embed-
dings, the goal of the learning algorithm is to adjust those embeddings to
Maximize the similarity of the target word, context word pairs (w,cpos) drawn
from the positive examples
Minimize the similarity of the (w,cneg) pairs from the negative examples.
If we consider one word/context pair (w,cpos) with its k noise words cneg...cnegk,
we can express these two goals as the following loss function L to be minimized
(hence the −); here the ﬁrst term expresses that we want the classiﬁer to assign the
real context word cpos a high probability of being a neighbor, and the second term
expresses that we want to assign each of the noise words cnegi a high probability of
being a non-neighbor, all multiplied because we assume independence:
LCE = −log
P(+|w,cpos)
i=
P(−|w,cnegi)
kY
= −
logP(+|w,cpos)+
i=
logP(−|w,cnegi)
= −
logP(+|w,cpos)+
i=
log
−P(+|w,cnegi)
= −
logσ(cpos w)+
i=
logσ(−cnegi w)
That is, we want to maximize the dot product of the word with the actual context
words, and minimize the dot products of the word with the k negative sampled non-
neighbor words.
We minimize this loss function using stochastic gradient descent.
Fig. .
shows the intuition of one step of learning.
To get the gradient, we need to take the derivative of Eq. . with respect to
the different embeddings. It turns out the derivatives are the following (we leave the

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
aardvark
move apricot and jam closer,
increasing cpos z w
apricot
“…apricot jam…”
zebra
aardvark
move apricot and matrix apart
decreasing cneg z w
jam
cpos
matrix
cneg
k=
Tolstoy
move apricot and Tolstoy apart
cneg
decreasing cneg z w
zebra
Figure .
Intuition of one step of gradient descent. The skip-gram model tries to shift
embeddings so the target embeddings (here for apricot) are closer to (have a higher dot prod-
uct with) context embeddings for nearby words (here jam) and further from (lower dot product
with) context embeddings for noise words that don’t occur nearby (here Tolstoy and matrix).
proof as an exercise at the end of the chapter):
∂LCE
∂cpos
= [σ(cpos w)−]w
∂LCE
∂cneg
= [σ(cneg w)]w
∂LCE
∂w
= [σ(cpos w)−]cpos +
i=
[σ(cnegi w)]cnegi
The update equations going from time step t to t +  in stochastic gradient descent
are thus:
ct+
pos
= ct
pos −η[σ(ct
pos wt)−]wt
ct+
neg = ct
neg −η[σ(ct
neg wt)]wt
wt+ = wt −η
[σ(ct
pos wt)−]ct
pos +
i=
[σ(ct
negi wt)]ct
negi
Just as in logistic regression, then, the learning algorithm starts with randomly ini-
tialized W and C matrices, and then walks through the training corpus using gradient
descent to move W and C so as to minimize the loss in Eq. . by making the up-
dates in (Eq. .)-(Eq. .).
Recall that the skip-gram model learns two separate embeddings for each word i:
the target embedding wi and the context embedding ci, stored in two matrices, the
target
embedding
context
embedding
target matrix W and the context matrix C. It’s common to just add them together,
representing word i with the vector wi +ci. Alternatively we can throw away the C
matrix and just represent each word i by the vector wi.
As with the simple count-based methods like tf-idf, the context window size L
affects the performance of skip-gram embeddings, and experiments often tune the
parameter L on a devset.

VISUALIZING EMBEDDINGS
Other kinds of static embeddings
There are many kinds of static embeddings. An extension of wordvec, fasttext
fasttext
(Bojanowski et al., ), addresses a problem with wordvec as we have presented
it so far: it has no good way to deal with unknown words—words that appear in
a test corpus but were unseen in the training corpus. A related problem is word
sparsity, such as in languages with rich morphology, where some of the many forms
for each noun and verb may only occur rarely. Fasttext deals with these problems
by using subword models, representing each word as itself plus a bag of constituent
n-grams, with special boundary symbols < and > added to each word. For example,
with n =  the word where would be represented by the sequence <where> plus the
character n-grams:
<wh, whe, her, ere, re>
Rohde, Gonnerman, Plaut
Modeling Word Meaning Using Lexical Co-Occurrence
Then a skipgram embedding is learned for each constituent n-gram, and the word
where is represented by the sum of all of the embeddings of its constituent n-grams.
Unknown words can then be presented only by the sum of the constituent n-grams.
A fasttext open-source library, including pretrained embeddings for  languages,
is available at https://fasttext.cc.
Another very widely used static embedding model is GloVe (Pennington et al.,
RUSSIA
FRANCE
CHINA
EUROPE
ASIA
WRIST
AFRICA
ANKLE
AMERICA
ARM
BRAZIL
SHOULDER
FINGER
EYE
HAND
FACE
MOSCOW
EAR
TOE
LEG
FOOT
HAWAII
TOOTH
NOSE
HEAD
TOKYO
), short for Global Vectors, because the model is based on capturing global
corpus statistics. GloVe is based on ratios of probabilities from the word-word co-
occurrence matrix, combining the intuitions of count-based models like PPMI while
also capturing the linear structures used by methods like wordvec.
It turns out that dense embeddings like wordvec actually have an elegant math-
ematical relationship with sparse embeddings like PPMI, in which wordvec can be
seen as implicitly optimizing a shifted version of a PPMI matrix (Levy and Gold-
berg, c).
MONTREAL
CHICAGO
ATLANTA
MOUSE
DOG
CAT
Visualizing Embeddings
TURTLE
NASHVILLE
PUPPY
LION
COW
KITTEN
OYSTER
BULL
“I see well in many dimensions as long as the dimensions are around two.”
The late economist Martin Shubik
Figure : Multidimensional scaling for three noun classes.
Visualizing embeddings is an important goal in helping understand, apply, and
improve these models of word meaning. But how can we visualize a (for example)
-dimensional vector?
WRIST
ANKLE
SHOULDER
ARM
LEG
HAND
FOOT
HEAD
NOSE
FINGER
TOE
FACE
EAR
EYE
TOOTH
DOG
CAT
PUPPY
KITTEN
COW
MOUSE
TURTLE
OYSTER
LION
BULL
CHICAGO
ATLANTA
MONTREAL
NASHVILLE
TOKYO
CHINA
The simplest way to visualize the meaning of a word
w embedded in a space is to list the most similar words to
w by sorting the vectors for all words in the vocabulary by
their cosine with the vector for w. For example the  closest
words to frog using a particular embeddings computed with
the GloVe algorithm are: frogs, toad, litoria, leptodactyli-
dae, rana, lizard, and eleutherodactylus (Pennington et al.,
Yet another visualization method is to use a clustering
algorithm to show a hierarchical representation of which
words are similar to others in the embedding space. The
uncaptioned ﬁgure on the left uses hierarchical clustering
of some embedding vectors for nouns as a visualization
RUSSIA
AFRICA
ASIA
EUROPE
AMERICA
BRAZIL
MOSCOW
FRANCE
HAWAII
Figure : Hierarchical clustering for three noun classes using distances based on vector correlations.

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
method (Rohde et al., ).
Probably the most common visualization method, how-
ever, is to project the  dimensions of a word down into
dimensions. Fig. . showed one such visualization, as does
Fig. ., using a projection method called t-SNE (van der
Maaten and Hinton, ).
Semantic properties of embeddings
In this section we brieﬂy summarize some of the semantic properties of embeddings
that have been studied.
Different types of similarity or association:
One parameter of vector semantic
models that is relevant to both sparse tf-idf vectors and dense wordvec vectors is
the size of the context window used to collect counts. This is generally between
and  words on each side of the target word (for a total context of - words).
The choice depends on the goals of the representation. Shorter context windows
tend to lead to representations that are a bit more syntactic, since the information is
coming from immediately nearby words. When the vectors are computed from short
context windows, the most similar words to a target word w tend to be semantically
similar words with the same parts of speech. When vectors are computed from long
context windows, the highest cosine words to a target word w tend to be words that
are topically related but not similar.
For example Levy and Goldberg (a) showed that using skip-gram with a
window of ±, the most similar words to the word Hogwarts (from the Harry Potter
series) were names of other ﬁctional schools: Sunnydale (from Buffy the Vampire
Slayer) or Evernight (from a vampire series). With a window of ±, the most similar
words to Hogwarts were other words topically related to the Harry Potter series:
Dumbledore, Malfoy, and half-blood.
It’s also often useful to distinguish two kinds of similarity or association between
words (Sch¨utze and Pedersen, ). Two words have ﬁrst-order co-occurrence
ﬁrst-order
co-occurrence
(sometimes called syntagmatic association) if they are typically nearby each other.
Thus wrote is a ﬁrst-order associate of book or poem. Two words have second-order
co-occurrence (sometimes called paradigmatic association) if they have similar
second-order
co-occurrence
neighbors. Thus wrote is a second-order associate of words like said or remarked.
Analogy/Relational Similarity:
Another semantic property of embeddings is their
ability to capture relational meanings. In an important early vector space model of
cognition, Rumelhart and Abrahamson () proposed the parallelogram model
parallelogram
model
for solving simple analogy problems of the form a is to b as a* is to what?. In
such problems, a system is given a problem like apple:tree::grape:?, i.e., apple is
to tree as grape is to
, and must ﬁll in the word vine. In the parallelogram
model, illustrated in Fig. ., the vector from the word apple to the word tree (=
#   »
tree− #       »
apple) is added to the vector for grape (#        »
grape); the nearest word to that point
is returned.
In early work with sparse embeddings, scholars showed that sparse vector mod-
els of meaning could solve such analogy problems (Turney and Littman, ),
but the parallelogram method received more modern attention because of its suc-
cess with wordvec or GloVe vectors (Mikolov et al. c, Levy and Goldberg
b, Pennington et al. ). For example, the result of the expression #     »
king −

SEMANTIC PROPERTIES OF EMBEDDINGS
tree
apple
vine
grape
Figure .
The parallelogram model for analogy problems (Rumelhart and Abrahamson,
): the location of #     »
vine can be found by subtracting #       »
apple from #   »
tree and adding #       »
grape.
#     »
man + #            »
woman is a vector close to #         »
queen. Similarly, #      »
Paris − #           »
France + #     »
Italy results
in a vector that is close to #         »
Rome. The embedding model thus seems to be extract-
ing representations of relations like MALE-FEMALE, or CAPITAL-CITY-OF, or even
COMPARATIVE/SUPERLATIVE, as shown in Fig. . from GloVe.
(a)
(b)
Figure .
Relational properties of the GloVe vector space, shown by projecting vectors onto two dimen-
sions. (a) #     »
king − #     »
man + #            »
woman is close to #        »
queen. (b) offsets seem to capture comparative and superlative
morphology (Pennington et al., ).
For a a : b :: a∗ : b∗ problem, meaning the algorithm is given vectors a, b, and
a∗ and must ﬁnd b∗, the parallelogram method is thus:
ˆb∗ = argmin
distance(x,b−a+a∗)
with some distance function, such as Euclidean distance.
There are some caveats. For example, the closest value returned by the paral-
lelogram algorithm in wordvec or GloVe embedding spaces is usually not in fact
b* but one of the  input words or their morphological variants (i.e., cherry:red ::
potato:x returns potato or potatoes instead of brown), so these must be explicitly
excluded. Furthermore while embedding spaces perform well if the task involves
frequent words, small distances, and certain relations (like relating countries with
their capitals or verbs/nouns with their inﬂected forms), the parallelogram method
with embeddings doesn’t work as well for other relations (Linzen , Gladkova
et al. , Schluter , Ethayarajh et al. a), and indeed Peterson et al. ()
argue that the parallelogram method is in general too simple to model the human
cognitive process of forming analogies of this kind.

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
Embeddings and Historical Semantics
Embeddings can also be a useful tool for studying how meaning changes over time,
by computing multiple embedding spaces, each from texts written in a particular
time period. For example Fig. . shows a visualization of changes in meaning in
English words over the last two centuries, computed by building separate embed-
ding spaces for each decade from historical corpora like Google n-grams (Lin et al.,
b) and the Corpus of Historical American English (Davies, ).
CHAPTER . DYNAMIC SOCIAL REPRESENTATIONS OF WORD MEANING
Figure .: Two-dimensional visualization of semantic change in English using SGNS
vectors (see Section . for the visualization algorithm). A, The word gay shifted
from meaning “cheerful” or “frolicsome” to referring to homosexuality. A, In the early
th century broadcast referred to “casting out seeds”; with the rise of television and
radio its meaning shifted to “transmitting signals”. C, Awful underwent a process of
pejoration, as it shifted from meaning “full of awe” to meaning “terrible or appalling”
Figure .
A t-SNE visualization of the semantic change of  words in English using
wordvec vectors. The modern sense of each word, and the grey context words, are com-
puted from the most recent (modern) time-point embedding space. Earlier points are com-
puted from earlier historical embedding spaces. The visualizations show the changes in the
word gay from meanings related to “cheerful” or “frolicsome” to referring to homosexuality,
the development of the modern “transmission” sense of broadcast from its original sense of
sowing seeds, and the pejoration of the word awful as it shifted from meaning “full of awe”
to meaning “terrible or appalling” (Hamilton et al., b).
that adverbials (e.g., actually) have a general tendency to undergo subjectiﬁcation
where they shift from objective statements about the world (e.g., “Sorry, the car is
Bias and Embeddings
actually broken”) to subjective statements (e.g., “I can’t believe he actually did that”,
indicating surprise/disbelief).
Computational linguistic studies
There are also a number of recent works analyzing semantic change using computational
methods. [] use latent semantic analysis to analyze how word meanings broaden
and narrow over time. [] use raw co-occurrence vectors to perform a number of
historical case-studies on semantic change, and [] perform a similar set of small-
scale case-studies using temporal topic models. [] construct point-wise mutual
In addition to their ability to learn word meaning from text, embeddings, alas,
also reproduce the implicit biases and stereotypes that were latent in the text. As
the prior section just showed, embeddings can roughly model relational similar-
ity: ‘queen’ as the closest word to ‘king’ - ‘man’ + ‘woman’ implies the analogy
man:woman::king:queen. But these same embedding analogies also exhibit gender
stereotypes. For example Bolukbasi et al. () ﬁnd that the closest occupation
to ‘computer programmer’ - ‘man’ + ‘woman’ in wordvec embeddings trained on
news text is ‘homemaker’, and that the embeddings similarly suggest the analogy
‘father’ is to ‘doctor’ as ‘mother’ is to ‘nurse’. This could result in what Crawford
() and Blodgett et al. () call an allocational harm, when a system allo-
allocational
harm
information-based embeddings and found that semantic changes uncovered by their
method had reasonable agreement with human judgments. [] and [] use “neural”
word-embedding methods to detect linguistic change points. Finally, [] analyze
historical co-occurrences to test whether synonyms tend to change in similar ways.
cates resources (jobs or credit) unfairly to different groups. For example algorithms
that use embeddings as part of a search for hiring potential programmers or doctors
might thus incorrectly downweight documents with women’s names.
It turns out that embeddings don’t just reﬂect the statistics of their input, but also
amplify bias; gendered terms become more gendered in embedding space than they
bias
ampliﬁcation
were in the input text statistics (Zhao et al. , Ethayarajh et al. b, Jia et al.
), and biases are more exaggerated than in actual labor employment statistics
(Garg et al., ).
Embeddings also encode the implicit associations that are a property of human
reasoning. The Implicit Association Test (Greenwald et al., ) measures peo-

EVALUATING VECTOR MODELS
ple’s associations between concepts (like ‘ﬂowers’ or ‘insects’) and attributes (like
‘pleasantness’ and ‘unpleasantness’) by measuring differences in the latency with
which they label words in the various categories. Using such methods, people
in the United States have been shown to associate African-American names with
unpleasant words (more than European-American names), male names more with
mathematics and female names with the arts, and old people’s names with unpleas-
ant words (Greenwald et al. , Nosek et al. a, Nosek et al. b). Caliskan
et al. () replicated all these ﬁndings of implicit associations using GloVe vectors
and cosine similarity instead of human latencies. For example African-American
names like ‘Leroy’ and ‘Shaniqua’ had a higher GloVe cosine with unpleasant words
while European-American names (‘Brad’, ‘Greg’, ‘Courtney’) had a higher cosine
with pleasant words. These problems with embeddings are an example of a repre-
sentational harm (Crawford , Blodgett et al. ), which is a harm caused by
representational
harm
a system demeaning or even ignoring some social groups. Any embedding-aware al-
gorithm that made use of word sentiment could thus exacerbate bias against African
Americans.
Recent research focuses on ways to try to remove these kinds of biases, for
example by developing a transformation of the embedding space that removes gen-
der stereotypes but preserves deﬁnitional gender (Bolukbasi et al. , Zhao et al.
) or changing the training procedure (Zhao et al., b). However, although
these sorts of debiasing may reduce bias in embeddings, they do not eliminate it
debiasing
(Gonen and Goldberg, ), and this remains an open problem.
Historical embeddings are also being used to measure biases in the past. Garg
et al. () used embeddings from historical texts to measure the association be-
tween embeddings for occupations and embeddings for names of various ethnici-
ties or genders (for example the relative cosine similarity of women’s names versus
men’s to occupation words like ‘librarian’ or ‘carpenter’) across the th century.
They found that the cosines correlate with the empirical historical percentages of
women or ethnic groups in those occupations. Historical embeddings also repli-
cated old surveys of ethnic stereotypes; the tendency of experimental participants in
to associate adjectives like ‘industrious’ or ‘superstitious’ with, e.g., Chinese
ethnicity, correlates with the cosine between Chinese last names and those adjectives
using embeddings trained on s text. They also were able to document historical
gender biases, such as the fact that embeddings for adjectives related to competence
(‘smart’, ‘wise’, ‘thoughtful’, ‘resourceful’) had a higher cosine with male than fe-
male words, and showed that this bias has been slowly decreasing since . We
return in later chapters to this question about the role of bias in natural language
processing.
Evaluating Vector Models
The most important evaluation metric for vector models is extrinsic evaluation on
tasks, i.e., using vectors in an NLP task and seeing whether this improves perfor-
mance over some other model.
Roughly speaking, if humans associate ‘ﬂowers’ with ‘pleasantness’ and ‘insects’ with ‘unpleasant-
ness’, when they are instructed to push a green button for ‘ﬂowers’ (daisy, iris, lilac) and ‘pleasant words’
(love, laughter, pleasure) and a red button for ‘insects’ (ﬂea, spider, mosquito) and ‘unpleasant words’
(abuse, hatred, ugly) they are faster than in an incongruous condition where they push a red button for
‘ﬂowers’ and ‘unpleasant words’ and a green button for ‘insects’ and ‘pleasant words’.

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
Nonetheless it is useful to have intrinsic evaluations. The most common metric
is to test their performance on similarity, computing the correlation between an
algorithm’s word similarity scores and word similarity ratings assigned by humans.
WordSim- (Finkelstein et al., ) is a commonly used set of ratings from
to  for  noun pairs; for example (plane, car) had an average score of ..
SimLex- (Hill et al., ) is a more difﬁcult dataset that quantiﬁes similarity
(cup, mug) rather than relatedness (cup, coffee), and including both concrete and
abstract adjective, noun and verb pairs. The TOEFL dataset is a set of  questions,
each consisting of a target word with  additional word choices; the task is to choose
which is the correct synonym, as in the example: Levied is closest in meaning to:
imposed, believed, requested, correlated (Landauer and Dumais, ). All of these
datasets present words without context.
Slightly more realistic are intrinsic similarity tasks that include context. The
Stanford Contextual Word Similarity (SCWS) dataset (Huang et al., ) and the
Word-in-Context (WiC) dataset (Pilehvar and Camacho-Collados, ) offer richer
evaluation scenarios. SCWS gives human judgments on , pairs of words in their
sentential context, while WiC gives target words in two sentential contexts that are
either in the same or different senses; see Chapter . The semantic textual similarity
task (Agirre et al. , Agirre et al. ) evaluates the performance of sentence-
level similarity algorithms, consisting of a set of pairs of sentences, each pair with
human-labeled similarity scores.
Another task used for evaluation is the analogy task, discussed on page ,
where the system has to solve problems of the form a is to b as a* is to b*, given a, b,
and a* and having to ﬁnd b* (Turney and Littman, ). A number of sets of tuples
have been created for this task, (Mikolov et al. a, Mikolov et al. c, Glad-
kova et al. ), covering morphology (city:cities::child:children), lexicographic
relations (leg:table::spout:teapot) and encyclopedia relations (Beijing:China::Dublin:Ireland),
some drawing from the SemEval- Task  dataset of  different relations (Jur-
gens et al., ).
All embedding algorithms suffer from inherent variability. For example because
of randomness in the initialization and the random negative sampling, algorithms
like wordvec may produce different results even from the same dataset, and in-
dividual documents in a collection may strongly impact the resulting embeddings
(Tian et al. , Hellrich and Hahn , Antoniak and Mimno ). When em-
beddings are used to study word associations in particular corpora, therefore, it is
best practice to train multiple embeddings with bootstrap sampling over documents
and average the results (Antoniak and Mimno, ).
Summary
In vector semantics, a word is modeled as a vector—a point in high-dimensional
space, also called an embedding. In this chapter we focus on static embed-
dings, where each word is mapped to a ﬁxed embedding.
Vector semantic models fall into two classes: sparse and dense. In sparse
models each dimension corresponds to a word in the vocabulary V and cells
are functions of co-occurrence counts. The term-document matrix has a
row for each word (term) in the vocabulary and a column for each document.
The word-context or term-term matrix has a row for each (target) word in

BIBLIOGRAPHICAL AND HISTORICAL NOTES
the vocabulary and a column for each context term in the vocabulary. Two
sparse weightings are common: the tf-idf weighting which weights each cell
by its term frequency and inverse document frequency, and PPMI (point-
wise positive mutual information), which is most common for word-context
matrices.
Dense vector models have dimensionality –. Wordvec algorithms
like skip-gram are a popular way to compute dense embeddings. Skip-gram
trains a logistic regression classiﬁer to compute the probability that two words
are ‘likely to occur nearby in text’. This probability is computed from the dot
product between the embeddings for the two words.
Skip-gram uses stochastic gradient descent to train the classiﬁer, by learning
embeddings that have a high dot product with embeddings of words that occur
nearby and a low dot product with noise words.
Other important embedding algorithms include GloVe, a method based on
ratios of word co-occurrence probabilities.
Whether using sparse or dense vectors, word and document similarities are
computed by some function of the dot product between vectors. The cosine
of two vectors—a normalized dot product—is the most popular such metric.
Bibliographical and Historical Notes
The idea of vector semantics arose out of research in the s in three distinct
ﬁelds: linguistics, psychology, and computer science, each of which contributed a
fundamental aspect of the model.
The idea that meaning is related to the distribution of words in context was
widespread in linguistic theory of the s, among distributionalists like Zellig
Harris, Martin Joos, and J. R. Firth, and semioticians like Thomas Sebeok. As Joos
() put it,
the linguist’s “meaning” of a morpheme. . . is by deﬁnition the set of conditional
probabilities of its occurrence in context with all other morphemes.
The idea that the meaning of a word might be modeled as a point in a multi-
dimensional semantic space came from psychologists like Charles E. Osgood, who
had been studying how people responded to the meaning of words by assigning val-
ues along scales like happy/sad or hard/soft. Osgood et al. () proposed that the
meaning of a word in general could be modeled as a point in a multidimensional
Euclidean space, and that the similarity of meaning between two words could be
modeled as the distance between these points in the space.
A ﬁnal intellectual source in the s and early s was the ﬁeld then called
mechanical indexing, now known as information retrieval. In what became known
mechanical
indexing
as the vector space model for information retrieval (Salton , Sparck Jones
), researchers demonstrated new ways to deﬁne the meaning of words in terms
of vectors (Switzer, ), and reﬁned methods for word similarity based on mea-
sures of statistical association between words like mutual information (Giuliano,
) and idf (Sparck Jones, ), and showed that the meaning of documents
could be represented in the same vector spaces used for words. Around the same
time, (Cordier, ) showed that factor analysis of word association probabilities
could be used to form dense vector representations of words.

CHAPTER
VECTOR SEMANTICS AND EMBEDDINGS
Some of the philosophical underpinning of the distributional way of thinking
came from the late writings of the philosopher Wittgenstein, who was skeptical of
the possibility of building a completely formal theory of meaning deﬁnitions for
each word, suggesting instead that “the meaning of a word is its use in the language”
(Wittgenstein, , PI ). That is, instead of using some logical language to deﬁne
each word, or drawing on denotations or truth values, Wittgenstein’s idea is that we
should deﬁne a word by how it is used by people in speaking and understanding in
their day-to-day interactions, thus preﬁguring the movement toward embodied and
experiential models in linguistics and NLP (Glenberg and Robertson , Lake and
Murphy , Bisk et al. , Bender and Koller ).
More distantly related is the idea of deﬁning words by a vector of discrete fea-
tures, which has roots at least as far back as Descartes and Leibniz (Wierzbicka ,
Wierzbicka ). By the middle of the th century, beginning with the work of
Hjelmslev (Hjelmslev, ) (originally ) and ﬂeshed out in early models of
generative grammar (Katz and Fodor, ), the idea arose of representing mean-
ing with semantic features, symbols that represent some sort of primitive meaning.
semantic
feature
For example words like hen, rooster, or chick, have something in common (they all
describe chickens) and something different (their age and sex), representable as:
hen
+female, +chicken, +adult
rooster -female, +chicken, +adult
chick
+chicken, -adult
The dimensions used by vector models of meaning to deﬁne words, however, are
only abstractly related to this idea of a small ﬁxed number of hand-built dimensions.
Nonetheless, there has been some attempt to show that certain dimensions of em-
bedding models do contribute some speciﬁc compositional aspect of meaning like
these early semantic features.
The use of dense vectors to model word meaning, and indeed the term embed-
ding, grew out of the latent semantic indexing (LSI) model (Deerwester et al.,
) recast as LSA (latent semantic analysis) (Deerwester et al., ). In LSA
singular value decomposition—SVD— is applied to a term-document matrix (each
SVD
cell weighted by log frequency and normalized by entropy), and then the ﬁrst
dimensions are used as the LSA embedding. Singular Value Decomposition (SVD)
is a method for ﬁnding the most important dimensions of a data set, those dimen-
sions along which the data varies the most. LSA was then quickly widely applied:
as a cognitive model Landauer and Dumais (), and for tasks like spell check-
ing (Jones and Martin, ), language modeling (Bellegarda , Coccaro and
Jurafsky , Bellegarda ) morphology induction (Schone and Jurafsky ,
Schone and Jurafsky b), multiword expressions (MWEs) (Schone and Juraf-
sky, a), and essay grading (Rehder et al., ). Related models were simul-
taneously developed and applied to word sense disambiguation by Sch¨utze (b).
LSA also led to the earliest use of embeddings to represent words in a probabilis-
tic classiﬁer, in the logistic regression document router of Sch¨utze et al. ().
The idea of SVD on the term-term matrix (rather than the term-document matrix)
as a model of meaning for NLP was proposed soon after LSA by Sch¨utze (b).
Sch¨utze applied the low-rank (-dimensional) embeddings produced by SVD to the
task of word sense disambiguation, analyzed the resulting semantic space, and also
suggested possible techniques like dropping high-order dimensions. See Sch¨utze
A number of alternative matrix models followed on from the early SVD work,
including Probabilistic Latent Semantic Indexing (PLSI) (Hofmann, ), Latent

EXERCISES
Dirichlet Allocation (LDA) (Blei et al., ), and Non-negative Matrix Factoriza-
tion (NMF) (Lee and Seung, ).
The LSA community seems to have ﬁrst used the word “embedding” in Landauer
et al. (), in a variant of its mathematical meaning as a mapping from one space
or mathematical structure to another. In LSA, the word embedding seems to have
described the mapping from the space of sparse count vectors to the latent space of
SVD dense vectors. Although the word thus originally meant the mapping from one
space to another, it has metonymically shifted to mean the resulting dense vector in
the latent space, and it is in this sense that we currently use the word.
By the next decade, Bengio et al. () and Bengio et al. () showed that
neural language models could also be used to develop embeddings as part of the task
of word prediction. Collobert and Weston (), Collobert and Weston (), and
Collobert et al. () then demonstrated that embeddings could be used to represent
word meanings for a number of NLP tasks. Turian et al. () compared the value
of different kinds of embeddings for different NLP tasks. Mikolov et al. ()
showed that recurrent neural nets could be used as language models. The idea of
simplifying the hidden layer of these neural net language models to create the skip-
gram (and also CBOW) algorithms was proposed by Mikolov et al. (a). The
negative sampling training algorithm was proposed in Mikolov et al. (b). There
are numerous surveys of static embeddings and their parameterizations (Bullinaria
and Levy , Bullinaria and Levy , Lapesa and Evert , Kiela and Clark
, Levy et al. ).
See Manning et al. () for a deeper understanding of the role of vectors in in-
formation retrieval, including how to compare queries with documents, more details
on tf-idf, and issues of scaling to very large datasets. See Kim () for a clear and
comprehensive tutorial on wordvec. Cruse () is a useful introductory linguistic
text on lexical semantics.
Exercises

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
Neural Networks and Neural
Language Models
CHAPTER
“[M]achines of this character can behave in a very complicated manner when
the number of units is large.”
Alan Turing () “Intelligent Machines”, page
Neural networks are a fundamental computational tool for language process-
ing, and a very old one. They are called neural because their origins lie in the
McCulloch-Pitts neuron (McCulloch and Pitts, ), a simpliﬁed model of the
biological neuron as a kind of computing element that could be described in terms
of propositional logic. But the modern use in language processing no longer draws
on these early biological inspirations.
Instead, a modern neural network is a network of small computing units, each
of which takes a vector of input values and produces a single output value. In this
chapter we introduce the neural net applied to classiﬁcation. The architecture we
introduce is called a feedforward network because the computation proceeds iter-
feedforward
atively from one layer of units to the next. The use of modern neural nets is often
called deep learning, because modern networks are often deep (have many layers).
deep learning
Neural networks share much of the same mathematics as logistic regression. But
neural networks are a more powerful classiﬁer than logistic regression, and indeed a
minimal neural network (technically one with a single ‘hidden layer’) can be shown
to learn any function.
Neural net classiﬁers are different from logistic regression in another way. With
logistic regression, we applied the regression classiﬁer to many different tasks by
developing many rich kinds of feature templates based on domain knowledge. When
working with neural networks, it is more common to avoid most uses of rich hand-
derived features, instead building neural networks that take raw words as inputs
and learn to induce features as part of the process of learning to classify. We saw
examples of this kind of representation learning for embeddings in Chapter . Nets
that are very deep are particularly good at representation learning. For that reason
deep neural nets are the right tool for tasks that offer sufﬁcient data to learn features
automatically.
In this chapter we’ll introduce feedforward networks as classiﬁers, and also ap-
ply them to the simple task of language modeling: assigning probabilities to word
sequences and predicting upcoming words. In subsequent chapters we’ll introduce
many other aspects of neural models, such as recurrent neural networks (Chap-
ter ), the Transformer (Chapter ), and masked language modeling (Chapter ).

UNITS
Units
The building block of a neural network is a single computational unit. A unit takes
a set of real valued numbers as input, performs some computation on them, and
produces an output.
At its heart, a neural unit is taking a weighted sum of its inputs, with one addi-
tional term in the sum called a bias term. Given a set of inputs x...xn, a unit has
bias term
wixi
a set of corresponding weights w...wn and a bias b, so the weighted sum z can be
represented as:
z = b+
Often it’s more convenient to express this weighted sum using vector notation; recall
from linear algebra that a vector is, at heart, just a list or array of numbers. Thus
vector
we’ll talk about z in terms of a weight vector w, a scalar bias b, and an input vector
x, and we’ll replace the sum with the convenient dot product:
z = w x+b
As deﬁned in Eq. ., z is just a real valued number.
Finally, instead of using z, a linear function of x, as the output, neural units
apply a non-linear function f to z. We will refer to the output of this function as
the activation value for the unit, a. Since we are just modeling a single unit, the
activation
activation for the node is in fact the ﬁnal output of the network, which we’ll generally
call y. So the value y is deﬁned as:
y = a = f(z)
We’ll discuss three popular non-linear functions f() below (the sigmoid, the tanh,
and the rectiﬁed linear unit or ReLU) but it’s pedagogically convenient to start with
the sigmoid function since we saw it in Chapter :
sigmoid
y = σ(z) =
+e−z
The sigmoid (shown in Fig. .) has a number of advantages; it maps the output
into the range (,), which is useful in squashing outliers toward  or . And it’s
differentiable, which as we saw in Section . will be handy for learning.
Figure .
The sigmoid function takes a real value and maps it to the range (,). It is
nearly linear around  but outlier values get squashed toward  or .
Substituting Eq. . into Eq. . gives us the output of a neural unit:
y = σ(w x+b) =
+exp(−(w x+b))

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
Fig. . shows a ﬁnal schematic of a basic neural unit. In this example the unit
takes  input values x,x, and x, and computes a weighted sum, multiplying each
value by a weight (w, w, and w, respectively), adds them to a bias term b, and then
passes the resulting sum through a sigmoid function to result in a number between
and .
Figure .
A neural unit, taking  inputs x, x, and x (and a bias b that we represent as a
weight for an input clamped at +) and producing an output y. We include some convenient
intermediate variables: the output of the summation, z, and the output of the sigmoid, a. In
this case the output of the unit y is the same as a, but in deeper networks we’ll reserve y to
mean the ﬁnal output of the entire network, leaving a as the activation of an individual node.
Let’s walk through an example just to get an intuition. Let’s suppose we have a
unit with the following weight vector and bias:
w = [.,.,.]
b = .
What would this unit do with the following input vector:
x = [.,.,.]
The resulting output y would be:
y = σ(w x+b) =
+e−. = .
+e−(wx+b) =
+e−(.∗.+.∗.+.∗.+.) =
In practice, the sigmoid is not commonly used as an activation function. A function
that is very similar but almost always better is the tanh function shown in Fig. .a;
tanh
tanh is a variant of the sigmoid that ranges from - to +:
y = tanh(z) = ez −e−z
ez +e−z
The simplest activation function, and perhaps the most commonly used, is the rec-
tiﬁed linear unit, also called the ReLU, shown in Fig. .b. It’s just the same as z
ReLU
when z is positive, and  otherwise:
y = ReLU(z) = max(z,)
These activation functions have different properties that make them useful for differ-
ent language applications or network architectures. For example, the tanh function
has the nice properties of being smoothly differentiable and mapping outlier values
toward the mean. The rectiﬁer function, on the other hand, has nice properties that

THE XOR PROBLEM
(a)
(b)
Figure .
The tanh and ReLU activation functions.
result from it being very close to linear. In the sigmoid or tanh functions, very high
values of z result in values of y that are saturated, i.e., extremely close to , and have
saturated
derivatives very close to . Zero derivatives cause problems for learning, because as
we’ll see in Section ., we’ll train networks by propagating an error signal back-
wards, multiplying gradients (partial derivatives) from each layer of the network;
gradients that are almost  cause the error signal to get smaller and smaller until it is
too small to be used for training, a problem called the vanishing gradient problem.
vanishing
gradient
Rectiﬁers don’t have this problem, since the derivative of ReLU for high values of z
is  rather than very close to .
The XOR problem
Early in the history of neural networks it was realized that the power of neural net-
works, as with the real neurons that inspired them, comes from combining these
units into larger networks.
One of the most clever demonstrations of the need for multi-layer networks was
the proof by Minsky and Papert () that a single neural unit cannot compute
some very simple functions of its input. Consider the task of computing elementary
logical functions of two inputs, like AND, OR, and XOR. As a reminder, here are
the truth tables for those functions:
AND
OR
XOR
x x y
x x y
x x y
This example was ﬁrst shown for the perceptron, which is a very simple neural
perceptron
unit that has a binary output and does not have a non-linear activation function. The
output y of a perceptron is  or , and is computed as follows (using the same weight
w, input x, and bias b as in Eq. .):
y =
, if w x+b ≤
, if w x+b >

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
It’s very easy to build a perceptron that can compute the logical AND and OR
functions of its binary inputs; Fig. . shows the necessary weights.
(a)
(b)
Figure .
The weights w and bias b for perceptrons for computing logical functions. The
inputs are shown as x and x and the bias as a special node with value + which is multiplied
with the bias weight b. (a) logical AND, with weights w =  and w =  and bias weight
b = −. (b) logical OR, with weights w =  and w =  and bias weight b = . These
weights/biases are just one from an inﬁnite number of possible sets of weights and biases that
would implement the functions.
It turns out, however, that it’s not possible to build a perceptron to compute
logical XOR! (It’s worth spending a moment to give it a try!)
The intuition behind this important result relies on understanding that a percep-
tron is a linear classiﬁer. For a two-dimensional input x and x, the perceptron
equation, wx +wx +b =  is the equation of a line. (We can see this by putting
it in the standard linear format: x = (−w/w)x + (−b/w).) This line acts as a
decision boundary in two-dimensional space in which the output  is assigned to all
decision
boundary
inputs lying on one side of the line, and the output  to all input points lying on the
other side of the line. If we had more than  inputs, the decision boundary becomes
a hyperplane instead of a line, but the idea is the same, separating the space into two
categories.
Fig. . shows the possible logical inputs (, , , and ) and the line drawn
by one possible set of parameters for an AND and an OR classiﬁer. Notice that there
is simply no way to draw a line that separates the positive cases of XOR ( and )
from the negative cases ( and ). We say that XOR is not a linearly separable
linearly
separable
function. Of course we could draw a boundary with a curve, or some other function,
but not a single line.
The solution: neural networks
While the XOR function cannot be calculated by a single perceptron, it can be cal-
culated by a layered network of perceptron units. Rather than see this with networks
of simple perceptrons, however, let’s see how to compute XOR using two layers of
ReLU-based units following Goodfellow et al. (). Fig. . shows a ﬁgure with
the input being processed by two layers of neural units. The middle layer (called
h) has two units, and the output layer (called y) has one unit. A set of weights and
biases are shown that allows the network to correctly compute the XOR function.
Let’s walk through what happens with the input x = [, ]. If we multiply each
input value by the appropriate weight, sum, and then add the bias b, we get the vector
[, -], and we then apply the rectiﬁed linear transformation to give the output of the
h layer as [, ]. Now we once again multiply by the weights, sum, and add the
bias ( in this case) resulting in the value . The reader should work through the
computation of the remaining  possible input pairs to see that the resulting y values
are  for the inputs [, ] and [, ] and  for [, ] and [, ].

THE XOR PROBLEM
a)  x AND x
b)  x OR x
c)  x XOR x
Figure .
The functions AND, OR, and XOR, represented with input x on the x-axis and input x on the
y-axis. Filled circles represent perceptron outputs of , and white circles perceptron outputs of . There is no
way to draw a line that correctly separates the two categories for XOR. Figure styled after Russell and Norvig
Figure .
XOR solution after Goodfellow et al. (). There are three ReLU units, in
two layers; we’ve called them h, h (h for “hidden layer”) and y. As before, the numbers
on the arrows represent the weights w for each unit, and we represent the bias b as a weight
on a unit clamped to +, with the bias weights/units in gray.
It’s also instructive to look at the intermediate results, the outputs of the two
hidden nodes h and h. We showed in the previous paragraph that the h vector for
the inputs x = [, ] was [, ]. Fig. .b shows the values of the h layer for all
inputs. Notice that hidden representations of the two input points x = [, ] and
x = [, ] (the two cases with XOR output = ) are merged to the single point h =
[, ]. The merger makes it easy to linearly separate the positive and negative cases
of XOR. In other words, we can view the hidden layer of the network as forming a
representation of the input.
In this example we just stipulated the weights in Fig. .. But for real examples
the weights for neural networks are learned automatically using the error backprop-
agation algorithm to be introduced in Section .. That means the hidden layers will
learn to form useful representations. This intuition, that neural networks can auto-
matically learn useful representations of the input, is one of their key advantages,
and one that we will return to again and again in later chapters.

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
a) The original x space
b) The new (linearly separable) h space
Figure .
The hidden layer forming a new representation of the input. (b) shows the
representation of the hidden layer, h, compared to the original input representation x in (a).
Notice that the input point [, ] has been collapsed with the input point [, ], making it
possible to linearly separate the positive and negative cases of XOR. After Goodfellow et al.
Feedforward Neural Networks
Let’s now walk through a slightly more formal presentation of the simplest kind of
neural network, the feedforward network. A feedforward network is a multilayer
feedforward
network
network in which the units are connected with no cycles; the outputs from units in
each layer are passed to units in the next higher layer, and no outputs are passed
back to lower layers. (In Chapter  we’ll introduce networks with cycles, called
recurrent neural networks.)
For historical reasons multilayer networks, especially feedforward networks, are
sometimes called multi-layer perceptrons (or MLPs); this is a technical misnomer,
multi-layer
perceptrons
MLP
since the units in modern multilayer networks aren’t perceptrons (perceptrons are
purely linear, but modern networks are made up of units with non-linearities like
sigmoids), but at some point the name stuck.
Simple feedforward networks have three kinds of nodes: input units, hidden
units, and output units.
Fig. . shows a picture. The input layer x is a vector of simple scalar values just
as we saw in Fig. ..
The core of the neural network is the hidden layer h formed of hidden units hi,
hidden layer
each of which is a neural unit as described in Section ., taking a weighted sum of
its inputs and then applying a non-linearity. In the standard architecture, each layer
is fully-connected, meaning that each unit in each layer takes as input the outputs
fully-connected
from all the units in the previous layer, and there is a link between every pair of units
from two adjacent layers. Thus each hidden unit sums over all the input units.
Recall that a single hidden unit has as parameters a weight vector and a bias. We
represent the parameters for the entire hidden layer by combining the weight vector
and bias for each unit i into a single weight matrix W and a single bias vector b for
the whole layer (see Fig. .). Each element W ji of the weight matrix W represents
the weight of the connection from the ith input unit xi to the jth hidden unit hj.
The advantage of using a single matrix W for the weights of the entire layer is
that now the hidden layer computation for a feedforward network can be done very
efﬁciently with simple matrix operations. In fact, the computation only has three

FEEDFORWARD NEURAL NETWORKS
xn
hn
yn
input layer
hidden layer
output layer
Figure .
A simple -layer feedforward network, with one hidden layer, one output layer,
and one input layer (the input layer is usually not counted when enumerating layers).
steps: multiplying the weight matrix by the input vector x, adding the bias vector b,
and applying the activation function g (such as the sigmoid, tanh, or ReLU activation
function deﬁned above).
The output of the hidden layer, the vector h, is thus the following (for this exam-
ple we’ll use the sigmoid function σ as our activation function):
h = σ(Wx+b)
Notice that we’re applying the σ function here to a vector, while in Eq. . it was
applied to a scalar. We’re thus allowing σ(), and indeed any activation function
g(), to apply to a vector element-wise, so g[z,z,z] = [g(z),g(z),g(z)].
Let’s introduce some constants to represent the dimensionalities of these vectors
and matrices. We’ll refer to the input layer as layer  of the network, and have n
represent the number of inputs, so x is a vector of real numbers of dimension n,
or more formally x ∈ Rn, a column vector of dimensionality [n,]. Let’s call the
hidden layer layer  and the output layer layer . The hidden layer has dimensional-
ity n, so h ∈ Rn and also b ∈ Rn (since each hidden unit can take a different bias
value). And the weight matrix W has dimensionality W ∈ Rn×n, i.e. [n,n].
Take a moment to convince yourself that the matrix multiplication in Eq. . will
compute the value of each h j as σ
 Pn
i= W jixi +b j
As we saw in Section ., the resulting value h (for hidden but also for hypoth-
esis) forms a representation of the input. The role of the output layer is to take
this new representation h and compute a ﬁnal output. This output could be a real-
valued number, but in many cases the goal of the network is to make some sort of
classiﬁcation decision, and so we will focus on the case of classiﬁcation.
If we are doing a binary task like sentiment classiﬁcation, we might have a sin-
gle output node, and its scalar value y is the probability of positive versus negative
sentiment. If we are doing multinomial classiﬁcation, such as assigning a part-of-
speech tag, we might have one output node for each potential part-of-speech, whose
output value is the probability of that part-of-speech, and the values of all the output
nodes must sum to one. The output layer is thus a vector y that gives a probability
distribution across the output nodes.
Let’s see how this happens. Like the hidden layer, the output layer has a weight
matrix (let’s call it U), but some models don’t include a bias vector b in the output

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
layer, so we’ll simplify by eliminating the bias vector in this example. The weight
matrix is multiplied by its input vector (h) to produce the intermediate output z:
z = Uh
There are n output nodes, so z ∈ Rn, weight matrix U has dimensionality U ∈
Rn×n, and element Ui j is the weight from unit j in the hidden layer to unit i in the
output layer.
However, z can’t be the output of the classiﬁer, since it’s a vector of real-valued
numbers, while what we need for classiﬁcation is a vector of probabilities. There is
a convenient function for normalizing a vector of real values, by which we mean
normalizing
converting it to a vector that encodes a probability distribution (all the numbers lie
between  and  and sum to ): the softmax function that we saw on page  of
softmax
Chapter . More generally for any vector z of dimensionality d, the softmax is
deﬁned as:
softmax(zi) =
exp(zi)
Pd
j= exp(z j)
≤ i ≤ d
Thus for example given a vector
z = [.,.,−.,.,.,−.],
the softmax function will normalize it to a probability distribution (shown rounded):
softmax(z) = [.,.,.,.,.,.]
You may recall that we used softmax to create a probability distribution from a
vector of real-valued numbers (computed from summing weights times features) in
the multinomial version of logistic regression in Chapter .
That means we can think of a neural network classiﬁer with one hidden layer
as building a vector h which is a hidden layer representation of the input, and then
running standard multinomial logistic regression on the features that the network
develops in h. By contrast, in Chapter  the features were mainly designed by hand
via feature templates. So a neural network is like multinomial logistic regression,
but (a) with many layers, since a deep neural network is like layer after layer of lo-
gistic regression classiﬁers; (b) with those intermediate layers having many possible
activation functions (tanh, ReLU, sigmoid) instead of just sigmoid (although we’ll
continue to use σ for convenience to mean any activation function); (c) rather than
forming the features by feature templates, the prior layers of the network induce the
feature representations themselves.
Here are the ﬁnal equations for a feedforward network with a single hidden layer,
which takes an input vector x, outputs a probability distribution y, and is parameter-
ized by weight matrices W and U and a bias vector b:
h = σ(Wx+b)
z = Uh
y = softmax(z)
And just to remember the shapes of all our variables, x ∈ Rn, h ∈ Rn, b ∈ Rn,
W ∈ Rn×n, U ∈ Rn×n, and the output vector y ∈ Rn. We’ll call this network a -
layer network (we traditionally don’t count the input layer when numbering layers,
but do count the output layer). So by this terminology logistic regression is a -layer
network.

FEEDFORWARD NEURAL NETWORKS
More details on feedforward networks
Let’s now set up some notation to make it easier to talk about deeper networks of
depth more than . We’ll use superscripts in square brackets to mean layer num-
bers, starting at  for the input layer. So W[] will mean the weight matrix for the
(ﬁrst) hidden layer, and b[] will mean the bias vector for the (ﬁrst) hidden layer. n j
will mean the number of units at layer j. We’ll use g() to stand for the activation
function, which will tend to be ReLU or tanh for intermediate layers and softmax
for output layers. We’ll use a[i] to mean the output from layer i, and z[i] to mean the
combination of weights and biases W[i]a[i−] + b[i]. The th layer is for inputs, so
we’ll refer to the inputs x more generally as a[].
Thus we can re-represent our -layer net from Eq. . as follows:
z[] = W[]a[] +b[]
a[] = g[](z[])
z[] = W[]a[] +b[]
a[] = g[](z[])
ˆy = a[]
Note that with this notation, the equations for the computation done at each layer are
the same. The algorithm for computing the forward step in an n-layer feedforward
network, given the input vector a[] is thus simply:
for i in ,...,n
z[i] = W[i] a[i−] + b[i]
a[i] = g[i](z[i])
ˆy = a[n]
The activation functions g() are generally different at the ﬁnal layer. Thus g[]
might be softmax for multinomial classiﬁcation or sigmoid for binary classiﬁcation,
while ReLU or tanh might be the activation function g() at the internal layers.
It’s often useful to have a name for the ﬁnal set of activations right before the ﬁnal
softmax. So however many layers we have, we’ll generally call the unnormalized
values in the ﬁnal vector z[n], the vector of scores right before the ﬁnal softmax, the
logits (see (.).
logits
The need for non-linear activation functions
One of the reasons we use non-
linear activation functions for each layer in a neural network is that if we did not, the
resulting network is exactly equivalent to a single-layer network. Let’s see why this
is true. Imagine the ﬁrst two layers of such a network of purely linear layers:
z[] = W[]x+b[]
z[] = W[]z[] +b[]
We can rewrite the function that the network is computing as:
z[] = W[]z[] +b[]
= W[](W[]x+b[])+b[]
= W[]W[]x+W[]b[] +b[]
= W′x+b′
This generalizes to any number of layers. So without non-linear activation functions,
a multilayer network is just a notational variant of a single layer network with a

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
different set of weights, and we lose all the representational power of multilayer
networks.
Replacing the bias unit
In describing networks, we will often use a slightly sim-
pliﬁed notation that represents exactly the same function without referring to an ex-
plicit bias node b. Instead, we add a dummy node a to each layer whose value will
always be . Thus layer , the input layer, will have a dummy node a[]
= , layer
will have a[]
= , and so on. This dummy node still has an associated weight, and
that weight represents the bias value b. For example instead of an equation like
h = σ(Wx+b)
we’ll use:
h = σ(Wx)
But now instead of our vector x having n values: x = x,...,xn, it will have n +
values, with a new th dummy value x = : x = x,...,xn. And instead of
computing each h j as follows:
h j = σ
i=
Wji xi +b j
we’ll instead use:
h j = σ
i=
Wji xi
where the value Wj replaces what had been b j. Fig. . shows a visualization.
x=
xn
hn
hn
yn
yn
xn
(a)
(b)
Figure .
Replacing the bias node (shown in a) with x (b).
We’ll continue showing the bias as b when we go over the learning algorithm
in Section ., but then we’ll switch to this simpliﬁed notation without explicit bias
terms for the rest of the book.

FEEDFORWARD NETWORKS FOR NLP: CLASSIFICATION
Feedforward networks for NLP: Classiﬁcation
Let’s see how to apply feedforward networks to NLP tasks! In this section we’ll
look at classiﬁcation tasks like sentiment analysis; in the next section we’ll introduce
neural language modeling.
Let’s begin with a simple -layer sentiment classiﬁer. You might imagine taking
our logistic regression classiﬁer from Chapter , which corresponds to a -layer net-
work, and just adding a hidden layer. The input element xi could be scalar features
like those in Fig. ., e.g., x = count(words ∈ doc), x = count(positive lexicon
words ∈ doc), x =  if “no” ∈ doc, and so on. And the output layer ˆy could have
two nodes (one each for positive and negative), or  nodes (positive, negative, neu-
tral), in which case ˆy would be the estimated probability of positive sentiment, ˆy
the probability of negative and ˆy the probability of neutral. The resulting equations
would be just what we saw above for a -layer network (as always, we’ll continue
to use the σ to stand for any non-linearity, whether sigmoid, ReLU or other).
x = [x,x,...xN]
(each xi is a hand-designed feature)
h = σ(Wx+b)
z = Uh
ˆy = softmax(z)
Fig. . shows a sketch of this architecture. As we mentioned earlier, adding this
hidden layer to our logistic regression classiﬁer allows the network to represent the
non-linear interactions between features. This alone might give us a better sentiment
classiﬁer.
wordcount
dessert
p(+)
positive lexicon
was
p(-)
words =
p(neut)
count of “no”
great
hdh
Input words
[n⨉]
[dh⨉n]
[dh⨉]
[⨉dh]
Hidden layer
Output layer
Input layer
n= features
softmax
Figure .
Feedforward network sentiment analysis using traditional hand-built features
of the input text.
Most applications of neural networks for NLP do something different, however.
Instead of using hand-built human-engineered features as the input to our classiﬁer,
we draw on deep learning’s ability to learn features from the data by representing
words as embeddings, like the wordvec or GloVe embeddings we saw in Chapter .
There are various ways to represent an input for classiﬁcation. One simple baseline
is to apply some sort of pooling function to the embeddings of all the words in the
pooling

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
input. For example, for a text with n input words/tokens w,...,wn, we can turn the
n embeddings e(w),...,e(wn) (each of dimensionality d) into a single embedding
also of dimensionality d by just summing the embeddings, or by taking their mean
(summing and then dividing by n):
xmean =
i=
e(wi)
There are many other options, like taking the element-wise max. The element-wise
max of a set of n vectors is a new vector whose kth element is the max of the kth
elements of all the n vectors. Here are the equations for this classiﬁer assuming
mean pooling; the architecture is sketched in Fig. .:
x = mean(e(w),e(w),...,e(wn))
h = σ(Wx+b)
z = Uh
ˆy = softmax(z)
embedding for
“dessert”
p(+)
dessert
pooling
embedding for
was
“was”
p(-)
embedding for
p(neut)
great
“great”
hdh
Input words
[d⨉]
[dh⨉d]
[dh⨉]
[⨉dh]
Hidden layer
Output layer
softmax
Input layer
pooled
embedding
Figure .
Feedforward network sentiment analysis using a pooled embedding of the in-
put words.
While Eq. . shows how to classify a single example x, in practice we want
to efﬁciently classify an entire test set of m examples. We do this by vectoring the
process, just as we saw with logistic regression; instead of using for-loops to go
through each example, we’ll use matrix multiplication to do the entire computation
of an entire test set at once. First, we pack all the input feature vectors for each input
x into a single input matrix X, with each row i a row vector consisting of the pooled
embedding for input example x(i) (i.e., the vector x(i)). If the dimensionality of our
pooled input embedding is d, X will be a matrix of shape [m×d].
We will then need to slightly modify Eq. .. X is of shape [m×d] and W is of
shape [dh ×d], so we’ll have to reorder how we multiply X and W and transpose W
so they correctly multiply to yield a matrix H of shape [m × dh]. The bias vector b
from Eq. . of shape [×dh] will now have to be replicated into a matrix of shape
[m×dh]. We’ll need to similarly reorder the next step and transpose U. Finally, our
output matrix ˆY will be of shape [m × ] (or more generally [m × do], where do is

TRAINING NEURAL NETS
the number of output classes), with each row i of our output matrix ˆY consisting of
the output vector ˆy(i).‘ Here are the ﬁnal equations for computing the output class
distribution for an entire test set:
H = σ(XW⊺ +b)
Z = HU⊺
ˆY = softmax(Z)
The idea of using wordvec or GloVe embeddings as our input representation—
and more generally the idea of relying on another algorithm to have already learned
an embedding representation for our input words—is called pretraining. Using
pretraining
pretrained embedding representations, whether simple static word embeddings like
wordvec or the much more powerful contextual embeddings we’ll introduce in
Chapter , is one of the central ideas of deep learning. (It’s also possible, how-
ever, to train the word embeddings as part of an NLP task; we’ll talk about how to
do this in Section . in the context of the neural language modeling task.)
Training Neural Nets
A feedforward neural net is an instance of supervised machine learning in which we
know the correct output y for each observation x. What the system produces, via
Eq. ., is ˆy, the system’s estimate of the true y. The goal of the training procedure
is to learn parameters W[i] and b[i] for each layer i that make ˆy for each training
observation as close as possible to the true y.
In general, we do all this by drawing on the methods we introduced in Chapter
for logistic regression, so the reader should be comfortable with that chapter before
proceeding.
First, we’ll need a loss function that models the distance between the system
output and the gold output, and it’s common to use the loss function used for logistic
regression, the cross-entropy loss.
Second, to ﬁnd the parameters that minimize this loss function, we’ll use the
gradient descent optimization algorithm introduced in Chapter .
Third, gradient descent requires knowing the gradient of the loss function, the
vector that contains the partial derivative of the loss function with respect to each
of the parameters. In logistic regression, for each observation we could directly
compute the derivative of the loss function with respect to an individual w or b. But
for neural networks, with millions of parameters in many layers, it’s much harder to
see how to compute the partial derivative of some weight in layer  when the loss
is attached to some much later layer. How do we partial out the loss over all those
intermediate layers? The answer is the algorithm called error backpropagation or
backward differentiation.
Loss function
The cross-entropy loss that is used in neural networks is the same one we saw for
cross-entropy
loss
logistic regression. If the neural network is being used as a binary classiﬁer, with
the sigmoid at the ﬁnal layer, the loss function is the same logistic regression loss
we saw in Eq. .:
LCE(ˆy,y) = −log p(y|x) = −[ylog ˆy+(−y)log(− ˆy)]

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
If we are using the network to classify into  or more classes, the loss function is
exactly the same as the loss for multinomial regression that we saw in Chapter  on
page . Let’s brieﬂy summarize the explanation here for convenience. First, when
we have more than  classes we’ll need to represent both y and ˆy as vectors. Let’s
assume we’re doing hard classiﬁcation, where only one class is the correct one.
The true label y is then a vector with K elements, each corresponding to a class,
with yc =  if the correct class is c, with all other elements of y being . Recall that
a vector like this, with one value equal to  and the rest , is called a one-hot vector.
And our classiﬁer will produce an estimate vector with K elements ˆy, each element
ˆyk of which represents the estimated probability p(yk = |x).
The loss function for a single example x is the negative sum of the logs of the K
output classes, each weighted by their probability yk:
LCE(ˆy,y) = −
k=
yk log ˆyk
We can simplify this equation further; let’s ﬁrst rewrite the equation using the func-
tion {} which evaluates to  if the condition in the brackets is true and to  oth-
erwise. This makes it more obvious that the terms in the sum in Eq. . will be
except for the term corresponding to the true class for which yk = :
LCE(ˆy,y) = −
k=
{yk = }log ˆyk
In other words, the cross-entropy loss is simply the negative log of the output proba-
bility corresponding to the correct class, and we therefore also call this the negative
log likelihood loss:
negative log
likelihood loss
LCE(ˆy,y) = −log ˆyc
(where c is the correct class)
Plugging in the softmax formula from Eq. ., and with K the number of classes:
LCE(ˆy,y) = −log
exp(zc)
PK
j= exp(z j)
(where c is the correct class)
Computing the Gradient
How do we compute the gradient of this loss function? Computing the gradient
requires the partial derivative of the loss function with respect to each parameter.
For a network with one weight layer and sigmoid output (which is what logistic
regression is), we could simply use the derivative of the loss that we used for logistic
regression in Eq. . (and derived in Section .):
∂LCE(ˆy,y)
∂wj
= (ˆy−y)x j
= (σ(w x+b)−y)xj
Or for a network with one weight layer and softmax output (=multinomial logistic
regression), we could use the derivative of the softmax loss from Eq. ., shown

TRAINING NEURAL NETS
for a particular weight wk and input xi
∂LCE(ˆy,y)
∂wk,i
= −(yk − ˆyk)xi
= −(yk − p(yk = |x))xi
xi
= −

yk −
exp(wk x+bk)
PK
j= exp(wj x+b j)
But these derivatives only give correct updates for one weight layer: the last one!
For deep networks, computing the gradients for each weight is much more complex,
since we are computing the derivative with respect to weight parameters that appear
all the way back in the very early layers of the network, even though the loss is
computed only at the very end of the network.
The solution to computing this gradient is an algorithm called error backprop-
agation or backprop (Rumelhart et al., ). While backprop was invented spe-
error back-
propagation
cially for neural networks, it turns out to be the same as a more general procedure
called backward differentiation, which depends on the notion of computation
graphs. Let’s see how that works in the next subsection.
Computation Graphs
A computation graph is a representation of the process of computing a mathematical
expression, in which the computation is broken down into separate operations, each
of which is modeled as a node in a graph.
Consider computing the function L(a,b,c) = c(a+b). If we make each of the
component addition and multiplication operations explicit, and add names (d and e)
for the intermediate outputs, the resulting series of computations is:
d = ∗b
e = a+d
L = c∗e
We can now represent this as a graph, with nodes for each operation, and di-
rected edges showing the outputs from each operation as the inputs to the next, as
in Fig. .. The simplest use of computation graphs is to compute the value of
the function with some given inputs. In the ﬁgure, we’ve assumed the inputs a = ,
b = , c = −, and we’ve shown the result of the forward pass to compute the re-
sult L(,,−) = −. In the forward pass of a computation graph, we apply each
operation left to right, passing the outputs of each computation as the input to the
next node.
Backward differentiation on computation graphs
The importance of the computation graph comes from the backward pass, which
is used to compute the derivatives that we’ll need for the weight update. In this
example our goal is to compute the derivative of the output function L with respect
to each of the input variables, i.e., ∂L
∂a, ∂L
∂b, and ∂L
∂c . The derivative ∂L
∂a tells us how
much a small change in a affects L.
Backwards differentiation makes use of the chain rule in calculus, so let’s re-
chain rule
mind ourselves of that. Suppose we are computing the derivative of a composite

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
forward pass
a=
e=
e=a+d
d=
b=
L=-
d = b
L=ce
c=-
Figure .
Computation graph for the function L(a,b,c) = c(a+b), with values for input
nodes a = , b = , c = −, showing the forward pass computation of L.
function f(x) = u(v(x)). The derivative of f(x) is the derivative of u(x) with respect
to v(x) times the derivative of v(x) with respect to x:
d f
dx = du
dx
dv  dv
The chain rule extends to more than two functions. If computing the derivative of a
composite function f(x) = u(v(w(x))), the derivative of f(x) is:
d f
dx = du
dx
dv  dv
dw  dw
The intuition of backward differentiation is to pass gradients back from the ﬁnal
node to all the nodes in the graph. Fig. . shows part of the backward computation
at one node e. Each node takes an upstream gradient that is passed in from its parent
node to the right, and for each of its inputs computes a local gradient (the gradient
of its output with respect to its input), and uses the chain rule to multiply these two
to compute a downstream gradient to be passed on to the next earlier node.
∂L
∂e
∂e
∂d
∂L
∂d
∂L
= ∂e
∂e
∂d
local
upstream
gradient
downstream
gradient
gradient
Figure .
Each node (like e here) takes an upstream gradient, multiplies it by the local
gradient (the gradient of its output with respect to its input), and uses the chain rule to compute
a downstream gradient to be passed on to a prior node. A node may have multiple local
gradients if it has multiple inputs.
Let’s now compute the  derivatives we need. Since in the computation graph
L = ce, we can directly compute the derivative ∂L
∂c :
∂L
∂c = e
For the other two, we’ll need to use the chain rule:
∂L
∂a = ∂L
∂e
∂e
∂a
∂L
∂b = ∂L
∂e
∂e
∂d
∂d
∂b

TRAINING NEURAL NETS
Eq. . and Eq. . thus require ﬁve intermediate derivatives: ∂L
∂a, ∂e
∂e , ∂L
∂c , ∂e
∂d , and
∂d
∂b, which are as follows (making use of the fact that the derivative of a sum is the
sum of the derivatives):
L = ce :
∂L
∂e = c, ∂L
∂c = e
e = a+d :
∂e
∂a = , ∂e
∂d =
d = b :
∂d
∂b =
In the backward pass, we compute each of these partials along each edge of the
graph from right to left, using the chain rule just as we did above. Thus we begin by
computing the downstream gradients from node L, which are ∂L
∂e and ∂L
∂c . For node e,
we then multiply this upstream gradient ∂L
∂e by the local gradient (the gradient of the
output with respect to the input), ∂e
∂d to get the output we send back to node d: ∂L
∂d .
And so on, until we have annotated the graph all the way to all the input variables.
The forward pass conveniently already will have computed the values of the forward
intermediate variables we need (like d and e) to compute these derivatives. Fig. .
shows the backward pass.
a=
∂L
∂a
∂e =-
∂a
∂L
∂e
e=d+a
e=
d=
b=
∂e =
∂a
∂e =
∂d
L=-
∂L =-
∂e
d = b
L=ce
∂L
∂d
∂e =-
∂d
∂L
∂e
∂d =
∂b
∂L
∂b
∂d =-
∂b
∂L
∂d
c=-
∂L =-
∂e
∂L =
∂c
backward pass
∂L=
∂c
Figure .
Computation graph for the function L(a,b,c) = c(a+b), showing the backward pass computa-
tion of ∂L
∂a , ∂L
∂b , and ∂L
∂c .
Backward differentiation for a neural network
Of course computation graphs for real neural networks are much more complex.
Fig. . shows a sample computation graph for a -layer neural network with n =
, n = , and n = , assuming binary classiﬁcation and hence using a sigmoid
output unit for simplicity. The function that the computation graph is computing is:
z[] = W[]x+b[]
a[] = ReLU(z[])
z[] = W[]a[] +b[]
a[] = σ(z[])
ˆy = a[]

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
For the backward pass we’ll also need to compute the loss L. The loss function
for binary sigmoid output from Eq. . is
LCE(ˆy,y) = −[ylog ˆy+(−y)log(− ˆy)]
Our output ˆy = a[], so we can rephrase this as
LCE(a[],y) = −
yloga[] +(−y)log(−a[])
w[]
w[]
z[] =
a[] =
ReLU
b[]
z[] =
L (a[],y)
w[]
a[] = σ

w[]
w[]
z[] =
a[] =
ReLU
w[]
b[]
b[]
Figure .
Sample computation graph for a simple -layer neural net (=  hidden layer) with two input units
and  hidden units. We’ve adjusted the notation a bit to avoid long equations in the nodes by just mentioning
the function that is being computed, and the resulting variable name. Thus the * to the right of node w[]
means
that w[]
is to be multiplied by x, and the node z[] = + means that the value of z[] is computed by summing
the three nodes that feed into it (the two products, and the bias term b[]
i ).
The weights that need updating (those for which we need to know the partial
derivative of the loss function) are shown in teal. In order to do the backward pass,
we’ll need to know the derivatives of all the functions in the graph. We already saw
in Section . the derivative of the sigmoid σ:
dσ(z)
dz
= σ(z)(−σ(z))
We’ll also need the derivatives of each of the other activation functions. The
derivative of tanh is:
d tanh(z)
dz
= −tanh(z)
The derivative of the ReLU is
d ReLU(z)
dz
for z <
for z ≥
We’ll give the start of the computation, computing the derivative of the loss
function L with respect to z, or ∂L
∂z (and leaving the rest of the computation as an
exercise for the reader). By the chain rule:
∂L
∂z = ∂L
∂z
∂a[]
∂a[]

TRAINING NEURAL NETS
So let’s ﬁrst compute
∂L
∂a[] , taking the derivative of Eq. ., repeated here:
LCE(a[],y) = −
yloga[] +(−y)log(−a[])
y∂ log(a[])
+(−y)∂ log(−a[])
∂L
∂a[] = −
∂a[]
∂a[]

a[]

+(−y)
= −

−a[] (−)

a[] + y−
= −
−a[]
Next, by the derivative of the sigmoid:
∂a[]
∂z
= a[](−a[])
Finally, we can use the chain rule:
∂z
∂L
∂z
∂L
∂a[]
∂a[]
a[] + y−
= −

a[](−a[])
−a[]
= a[] −y
Continuing the backward computation of the gradients (next by passing the gra-
dients over b[]
and the two product nodes, and so on, back to all the teal nodes), is
left as an exercise for the reader.
More details on learning
Optimization in neural networks is a non-convex optimization problem, more com-
plex than for logistic regression, and for that and other reasons there are many best
practices for successful learning.
For logistic regression we can initialize gradient descent with all the weights and
biases having the value . In neural networks, by contrast, we need to initialize the
weights with small random numbers. It’s also helpful to normalize the input values
to have  mean and unit variance.
Various forms of regularization are used to prevent overﬁtting. One of the most
important is dropout: randomly dropping some units and their connections from
dropout
the network during training (Hinton et al. , Srivastava et al. ). Tuning
of hyperparameters is also important. The parameters of a neural network are the
hyperparameter
weights W and biases b; those are learned by gradient descent. The hyperparameters
are things that are chosen by the algorithm designer; optimal values are tuned on a
devset rather than by gradient descent learning on the training set. Hyperparameters
include the learning rate η, the mini-batch size, the model architecture (the number
of layers, the number of hidden nodes per layer, the choice of activation functions),
how to regularize, and so on. Gradient descent itself also has many architectural
variants such as Adam (Kingma and Ba, ).
Finally, most modern neural networks are built using computation graph for-
malisms that make it easy and natural to do gradient computation and parallelization

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
on vector-based GPUs (Graphic Processing Units). PyTorch (Paszke et al., )
and TensorFlow (Abadi et al., ) are two of the most popular. The interested
reader should consult a neural network textbook for further details; some sugges-
tions are at the end of the chapter.
Feedforward Neural Language Modeling
As our second application of feedforward networks, let’s consider language mod-
eling: predicting upcoming words from prior words. Neural language modeling—
based on the transformer architecture that we will see in Chapter —is the algo-
rithm the underlies all of modern NLP. In this section and the next we’ll introduce a
simpler version of neural language models for feedforward networks, an algorithm
ﬁrst introduced by Bengio et al. (). The feedforward language model introduces
many of the important concepts of neural language modeling, concepts we’ll return
to as we describe more powerful models inChapter  and Chapter .
Neural language models have many advantages over the n-gram language mod-
els of Chapter . Compared to n-gram models, neural language models can handle
much longer histories, can generalize better over contexts of similar words, and are
more accurate at word-prediction. On the other hand, neural net language models
are much more complex, are slower and need more energy to train, and are less inter-
pretable than n-gram models, so for some smaller tasks an n-gram language model
is still the right tool.
A feedforward neural language model (LM) is a feedforward network that takes
as input at time t a representation of some number of previous words (wt−,wt−,
etc.) and outputs a probability distribution over possible next words. Thus—like the
n-gram LM—the feedforward neural LM approximates the probability of a word
given the entire prior context P(wt|w:t−) by approximating based on the N −
previous words:
P(wt|w,...,wt−) ≈ P(wt|wt−N+,...,wt−)
In the following examples we’ll use a -gram example, so we’ll show a neural net to
estimate the probability P(wt = i|wt−,wt−,wt−).
Neural language models represent words in this prior context by their embed-
dings, rather than just by their word identity as used in n-gram language models.
Using embeddings allows neural language models to generalize better to unseen
data. For example, suppose we’ve seen this sentence in training:
I have to make sure that the cat gets fed.
but have never seen the words “gets fed” after the word “dog”. Our test set has the
preﬁx “I forgot to make sure that the dog gets”. What’s the next word? An n-gram
language model will predict “fed” after “that the cat gets”, but not after “that the dog
gets”. But a neural LM, knowing that “cat” and “dog” have similar embeddings, will
be able to generalize from the “cat” context to assign a high enough probability to
“fed” even after seeing “dog”.
Forward inference in the neural language model
Let’s walk through forward inference or decoding for neural language models.
forward
inference
Forward inference is the task, given an input, of running a forward pass on the

FEEDFORWARD NEURAL LANGUAGE MODELING
network to produce a probability distribution over possible outputs, in this case next
words.
We ﬁrst represent each of the N previous words as a one-hot vector of length
|V|, i.e., with one dimension for each word in the vocabulary. A one-hot vector is
one-hot vector
a vector that has one element equal to —in the dimension corresponding to that
word’s index in the vocabulary— while all the other elements are set to zero. Thus
in a one-hot representation for the word “toothpaste”, supposing it is V, i.e., index
in the vocabulary, x = , and xi =  ∀i ̸= , as shown here:
[       ...    ]
... |V|
The feedforward neural language model (sketched in Fig. .) has a moving
window that can see N words into the past. We’ll let N equal , so the  words
wt−, wt−, and wt− are each represented as a one-hot vector. We then multiply
these one-hot vectors by the embedding matrix E. The embedding weight matrix E
has a column for each word, each a column vector of d dimensions, and hence has
dimensionality d ×|V|. Multiplying by a one-hot vector that has only one non-zero
element xi =  simply selects out the relevant column vector for word i, resulting in
the embedding for word i, as shown in Fig. ..
|V|
|V|
Figure .
Selecting the embedding vector for word V by multiplying the embedding
matrix E with a one-hot vector with a  in index .
The  resulting embedding vectors are concatenated to produce e, the embedding
layer. This is followed by a hidden layer and an output layer whose softmax produces
a probability distribution over words. For example y, the value of output node ,
is the probability of the next word wt being V, the vocabulary word with index
(which is the word ‘ﬁsh’ in our example).
Here’s the algorithm in detail for our mini example:
. Select three embeddings from E: Given the three previous words, we look
up their indices, create  one-hot vectors, and then multiply each by the em-
bedding matrix E. Consider wt−. The one-hot vector for ‘for’ (index ) is
multiplied by the embedding matrix E, to give the ﬁrst part of the ﬁrst hidden
layer, the embedding layer. Since each column of the input matrix E is an
embedding
layer
embedding for a word, and the input is a one-hot column vector xi for word
Vi, the embedding layer for input w will be Exi = ei, the embedding for word
i. We now concatenate the three embeddings for the three context words to
produce the embedding layer e.
. Multiply by W: We multiply by W (and add b) and pass through the ReLU
(or other) activation function to get the hidden layer h.
. Multiply by U: h is now multiplied by U
. Apply softmax: After the softmax, each node i in the output layer estimates
the probability P(wt = i|wt−,wt−,wt−)

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
p(aardvark|…)
and
thanks
|V|
wt-
p(do|…)
for
all
p(fish|…)
wt-
|V|
the
wt-
hdh
wt
p(zebra|…)
y|V|
|V|
d⨉
d⨉|V|
dh⨉d
dh⨉
|V|⨉dh
|V|⨉
|V|⨉
embedding
output layer
input layer
layer
hidden
layer
softmax
one-hot
vectors
Figure .
Forward inference in a feedforward neural language model. At each timestep
t the network computes a d-dimensional embedding for each context word (by multiplying a
one-hot vector by the embedding matrix E), and concatenates the  resulting embeddings to
get the embedding layer e. The embedding vector e is multiplied by a weight matrix W and
then an activation function is applied element-wise to produce the hidden layer h, which is
then multiplied by another weight matrix U. Finally, a softmax output layer predicts at each
node i the probability that the next word wt will be vocabulary word Vi.
In summary, the equations for a neural language model with a window size of ,
given one-hot input vectors for each input context word, are:
e = [Ext−;Ext−;Ext−]
h = σ(We+b)
z = Uh
ˆy = softmax(z)
Note that we formed the embedding layer e by concatenating the  embeddings
for the three context vectors; we’ll often use semicolons to mean concatenation of
vectors.
Training the neural language model
The high-level intuition of training neural language models, whether the simple
feedforward language models we describe here or the more powerful transformer
language models of Chapter , is the idea of self-training or self-supervision that
self-training
we saw in Chapter  for learning word representations. In self-training for language
modeling, we take a corpus of text as training material and at each time step t ask
the model to predict the next word. At ﬁrst it will do poorly at this task, but since

TRAINING THE NEURAL LANGUAGE MODEL
in each case we know the correct answer (it’s the next word in the corpus!) we can
easily train it to be better at predicting the correct next word. We call such a model
self-supervised because we don’t have to add any special gold labels to the data;
the natural sequence of words is its own supervision! We simply train the model to
minimize the error in predicting the true next word in the training sequence.
In practice, training the model means setting the parameters θ = E,W,U,b. For
some tasks, it’s ok to freeze the embedding layer E with initial wordvec values.
freeze
Freezing means we use wordvec or some other pretraining algorithm to compute
the initial embedding matrix E, and then hold it constant while we only modify W,
U, and b, i.e., we don’t update E during language model training. However, often
we’d like to learn the embeddings simultaneously with training the network. This is
useful when the task the network is designed for (like sentiment classiﬁcation, trans-
lation, or parsing) places strong constraints on what makes a good representation for
words.
Let’s see how to train the entire model including E, i.e. to set all the parameters
θ = E,W,U,b. We’ll do this via gradient descent (Fig. .), using error backprop-
agation on the computation graph to compute the gradient. Training thus not only
sets the weights W and U of the network, but also as we’re predicting upcoming
words, we’re learning the embeddings E for each word that best predict upcoming
words.
L = −log P(fish | for, all, the)
wt=fish
p(aardvark|…)
and
thanks
|V|
wt-
p(do|…)
for
all
p(fish|…)
wt-
|V|
the
wt-
hdh
fish
wt
p(zebra|…)
y|V|
|V|
d⨉
d⨉|V|
dh⨉d
dh⨉
|V|⨉dh
|V|⨉
|V|⨉
embedding
output layer
input layer
layer
hidden
layer
softmax
one-hot
vectors
Figure .
Learning all the way back to embeddings. Again, the embedding matrix E is
shared among the  context words.
Fig. . shows the set up for a window size of N= context words. The input x
consists of  one-hot vectors, fully connected to the embedding layer via  instanti-
ations of the embedding matrix E. We don’t want to learn separate weight matrices
for mapping each of the  previous words to the projection layer. We want one single
embedding dictionary E that’s shared among these three. That’s because over time,
many different words will appear as wt− or wt−, and we’d like to just represent

CHAPTER
NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
each word with one vector, whichever context position it appears in. Recall that the
embedding weight matrix E has a column for each word, each a column vector of d
dimensions, and hence has dimensionality d ×|V|.
Generally training proceeds by taking as input a very long text, concatenating all
the sentences, starting with random weights, and then iteratively moving through the
text predicting each word wt. At each word wt, we use the cross-entropy (negative
log likelihood) loss. Recall that the general form for this (repeated from Eq. .)
is:
LCE(ˆy,y) = −log ˆyi,
(where i is the correct class)
For language modeling, the classes are the words in the vocabulary, so ˆyi here means
the probability that the model assigns to the correct next word wt:
LCE = −log p(wt|wt−,...,wt−n+)
The parameter update for stochastic gradient descent for this loss from step s to s+
is then:
θ s+ = θ s −η ∂ [−log p(wt|wt−,...,wt−n+)]
∂θ
This gradient can be computed in any standard neural network framework which
will then backpropagate through θ = E,W,U,b.
Training the parameters to minimize loss will result both in an algorithm for
language modeling (a word predictor) but also a new set of embeddings E that can
be used as word representations for other tasks.
Summary
Neural networks are built out of neural units, originally inspired by biological
neurons but now simply an abstract computational device.
Each neural unit multiplies input values by a weight vector, adds a bias, and
then applies a non-linear activation function like sigmoid, tanh, or rectiﬁed
linear unit.
In a fully-connected, feedforward network, each unit in layer i is connected
to each unit in layer i+, and there are no cycles.
The power of neural networks comes from the ability of early layers to learn
representations that can be utilized by later layers in the network.
Neural networks are trained by optimization algorithms like gradient de-
scent.
Error backpropagation, backward differentiation on a computation graph,
is used to compute the gradients of the loss function for a network.
Neural language models use a neural network as a probabilistic classiﬁer, to
compute the probability of the next word given the previous n words.
Neural language models can use pretrained embeddings, or can learn embed-
dings from scratch in the process of language modeling.

BIBLIOGRAPHICAL AND HISTORICAL NOTES
Bibliographical and Historical Notes
The origins of neural networks lie in the s McCulloch-Pitts neuron (McCul-
loch and Pitts, ), a simpliﬁed model of the biological neuron as a kind of com-
puting element that could be described in terms of propositional logic. By the late
s and early s, a number of labs (including Frank Rosenblatt at Cornell and
Bernard Widrow at Stanford) developed research into neural networks; this phase
saw the development of the perceptron (Rosenblatt, ), and the transformation
of the threshold into a bias, a notation we still use (Widrow and Hoff, ).
The ﬁeld of neural networks declined after it was shown that a single perceptron
unit was unable to model functions as simple as XOR (Minsky and Papert, ).
While some small amount of work continued during the next two decades, a major
revival for the ﬁeld didn’t come until the s, when practical tools for building
deeper networks like error backpropagation became widespread (Rumelhart et al.,
). During the s a wide variety of neural network and related architec-
tures were developed, particularly for applications in psychology and cognitive sci-
ence (Rumelhart and McClelland b, McClelland and Elman , Rumelhart
and McClelland a, Elman ), for which the term connectionist or paral-
connectionist
lel distributed processing was often used (Feldman and Ballard , Smolensky
). Many of the principles and techniques developed in this period are foun-
dational to modern work, including the ideas of distributed representations (Hinton,
), recurrent networks (Elman, ), and the use of tensors for compositionality
(Smolensky, ).
By the s larger neural networks began to be applied to many practical lan-
guage processing tasks as well, like handwriting recognition (LeCun et al. ) and
speech recognition (Morgan and Bourlard ). By the early s, improvements
in computer hardware and advances in optimization and training techniques made it
possible to train even larger and deeper networks, leading to the modern term deep
learning (Hinton et al. , Bengio et al. ). We cover more related history in
Chapter  and Chapter .
There are a number of excellent books on the subject. Goldberg () has
superb coverage of neural networks for natural language processing. For neural
networks in general see Goodfellow et al. () and Nielsen ().

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
Sequence Labeling for Parts of
Speech and Named Entities
CHAPTER
To each word a warbling note
A Midsummer Night’s Dream, V.I
Dionysius Thrax of Alexandria (c.  B.C.), or perhaps someone else (it was a long
time ago), wrote a grammatical sketch of Greek (a “techn¯e”) that summarized the
linguistic knowledge of his day. This work is the source of an astonishing proportion
of modern linguistic vocabulary, including the words syntax, diphthong, clitic, and
analogy. Also included are a description of eight parts of speech: noun, verb,
parts of speech
pronoun, preposition, adverb, conjunction, participle, and article. Although earlier
scholars (including Aristotle as well as the Stoics) had their own lists of parts of
speech, it was Thrax’s set of eight that became the basis for descriptions of European
languages for the next  years. (All the way to the Schoolhouse Rock educational
television shows of our childhood, which had songs about  parts of speech, like the
late great Bob Dorough’s Conjunction Junction.) The durability of parts of speech
through two millennia speaks to their centrality in models of human language.
Proper names are another important and anciently studied linguistic category.
While parts of speech are generally assigned to individual words or morphemes, a
proper name is often an entire multiword phrase, like the name “Marie Curie”, the
location “New York City”, or the organization “Stanford University”. We’ll use the
term named entity for, roughly speaking, anything that can be referred to with a
named entity
proper name: a person, a location, an organization, although as we’ll see the term is
commonly extended to include things that aren’t entities per se.
Parts of speech (also known as POS) and named entities are useful clues to
POS
sentence structure and meaning. Knowing whether a word is a noun or a verb tells us
about likely neighboring words (nouns in English are preceded by determiners and
adjectives, verbs by nouns) and syntactic structure (verbs have dependency links to
nouns), making part-of-speech tagging a key aspect of parsing. Knowing if a named
entity like Washington is a name of a person, a place, or a university is important to
many natural language processing tasks like question answering, stance detection,
or information extraction.
In this chapter we’ll introduce the task of part-of-speech tagging, taking a se-
quence of words and assigning each word a part of speech like NOUN or VERB, and
the task of named entity recognition (NER), assigning words or phrases tags like
PERSON, LOCATION, or ORGANIZATION.
Such tasks in which we assign, to each word xi in an input word sequence, a
label yi, so that the output sequence Y has the same length as the input sequence X
are called sequence labeling tasks. We’ll introduce classic sequence labeling algo-
sequence
labeling
rithms, one generative— the Hidden Markov Model (HMM)—and one discriminative—
the Conditional Random Field (CRF). In following chapters we’ll introduce modern
sequence labelers based on RNNs and Transformers.

(MOSTLY) ENGLISH WORD CLASSES
(Mostly) English Word Classes
Until now we have been using part-of-speech terms like noun and verb rather freely.
In this section we give more complete deﬁnitions. While word classes do have
semantic tendencies—adjectives, for example, often describe properties and nouns
people— parts of speech are deﬁned instead based on their grammatical relationship
with neighboring words or the morphological properties about their afﬁxes.
Tag
Description
Example
ADJ
Adjective: noun modiﬁers describing properties
red, young, awesome
ADV
Adverb: verb modiﬁers of time, place, manner
very, slowly, home, yesterday
NOUN
words for persons, places, things, etc.
algorithm, cat, mango, beauty
VERB
words for actions and processes
draw, provide, go
Open Class
PROPN Proper noun: name of a person, organization, place, etc..
Regina, IBM, Colorado
INTJ
Interjection: exclamation, greeting, yes/no response, etc.
oh, um, yes, hello
ADP
Adposition (Preposition/Postposition):
marks a noun’s
spacial, temporal, or other relation
in, on, by, under
AUX
Auxiliary: helping verb marking tense, aspect, mood, etc.,
can, may, should, are
CCONJ Coordinating Conjunction: joins two phrases/clauses
and, or, but
DET
Determiner: marks noun phrase properties
a, an, the, this
NUM
Numeral
one, two, , :, hundred
PART
Particle: a function word that must be associated with an-
other word
’s, not, (inﬁnitive) to
Closed Class Words
PRON
Pronoun: a shorthand for referring to an entity or event
she, who, I, others
SCONJ
Subordinating Conjunction: joins a main clause with a
subordinate clause such as a sentential complement
whether, because
PUNCT Punctuation
˙, , ()
SYM
Symbols like $ or emoji
$, %
Other
Other
asdf, qwfg
Figure .
The  parts of speech in the Universal Dependencies tagset (de Marneffe et al., ). Features
can be added to make ﬁner-grained distinctions (with properties like number, case, deﬁniteness, and so on).
Parts of speech fall into two broad categories: closed class and open class.
closed class
open class
Closed classes are those with relatively ﬁxed membership, such as prepositions—
new prepositions are rarely coined. By contrast, nouns and verbs are open classes—
new nouns and verbs like iPhone or to fax are continually being created or borrowed.
Closed class words are generally function words like of, it, and, or you, which tend
function word
to be very short, occur frequently, and often have structuring uses in grammar.
Four major open classes occur in the languages of the world: nouns (including
proper nouns), verbs, adjectives, and adverbs, as well as the smaller open class of
interjections. English has all ﬁve, although not every language does.
Nouns are words for people, places, or things, but include others as well. Com-
noun
mon nouns include concrete terms like cat and mango, abstractions like algorithm
common noun
and beauty, and verb-like terms like pacing as in His pacing to and fro became quite
annoying. Nouns in English can occur with determiners (a goat, this bandwidth)
take possessives (IBM’s annual revenue), and may occur in the plural (goats, abaci).
Many languages, including English, divide common nouns into count nouns and
count noun
mass nouns. Count nouns can occur in the singular and plural (goat/goats, rela-
mass noun
tionship/relationships) and can be counted (one goat, two goats). Mass nouns are
used when something is conceptualized as a homogeneous group. So snow, salt, and
communism are not counted (i.e., *two snows or *two communisms). Proper nouns,
proper noun
like Regina, Colorado, and IBM, are names of speciﬁc persons or entities.

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
Verbs refer to actions and processes, including main verbs like draw, provide,
verb
and go. English verbs have inﬂections (non-third-person-singular (eat), third-person-
singular (eats), progressive (eating), past participle (eaten)). While many scholars
believe that all human languages have the categories of noun and verb, others have
argued that some languages, such as Riau Indonesian and Tongan, don’t even make
this distinction (Broschart ; Evans ; Gil ) .
Adjectives often describe properties or qualities of nouns, like color (white,
adjective
black), age (old, young), and value (good, bad), but there are languages without
adjectives. In Korean, for example, the words corresponding to English adjectives
act as a subclass of verbs, so what is in English an adjective “beautiful” acts in
Korean like a verb meaning “to be beautiful”.
Adverbs are a hodge-podge. All the italicized words in this example are adverbs:
adverb
Actually, I ran home extremely quickly yesterday
Adverbs generally modify something (often verbs, hence the name “adverb”, but
also other adverbs and entire verb phrases). Directional adverbs or locative ad-
locative
verbs (home, here, downhill) specify the direction or location of some action; degree
degree
adverbs (extremely, very, somewhat) specify the extent of some action, process, or
property; manner adverbs (slowly, slinkily, delicately) describe the manner of some
manner
action or process; and temporal adverbs describe the time that some action or event
temporal
took place (yesterday, Monday).
Interjections (oh, hey, alas, uh, um) are a smaller open class that also includes
interjection
greetings (hello, goodbye) and question responses (yes, no, uh-huh).
English adpositions occur before nouns, hence are called prepositions. They can
preposition
indicate spatial or temporal relations, whether literal (on it, before then, by the house)
or metaphorical (on time, with gusto, beside herself), and relations like marking the
agent in Hamlet was written by Shakespeare.
A particle resembles a preposition or an adverb and is used in combination with
particle
a verb. Particles often have extended meanings that aren’t quite the same as the
prepositions they resemble, as in the particle over in she turned the paper over. A
verb and a particle acting as a single unit is called a phrasal verb. The meaning
phrasal verb
of phrasal verbs is often non-compositional—not predictable from the individual
meanings of the verb and the particle. Thus, turn down means ‘reject’, rule out
‘eliminate’, and go on ‘continue’.
Determiners like this and that (this chapter, that page) can mark the start of an
determiner
English noun phrase. Articles like a, an, and the, are a type of determiner that mark
article
discourse properties of the noun and are quite frequent; the is the most common
word in written English, with a and an right behind.
Conjunctions join two phrases, clauses, or sentences. Coordinating conjunc-
conjunction
tions like and, or, and but join two elements of equal status. Subordinating conjunc-
tions are used when one of the elements has some embedded status. For example,
the subordinating conjunction that in “I thought that you might like some milk” links
the main clause I thought with the subordinate clause you might like some milk. This
clause is called subordinate because this entire clause is the “content” of the main
verb thought. Subordinating conjunctions like that which link a verb to its argument
in this way are also called complementizers.
complementizer
Pronouns act as a shorthand for referring to an entity or event. Personal pro-
pronoun
nouns refer to persons or entities (you, she, I, it, me, etc.). Possessive pronouns are
forms of personal pronouns that indicate either actual possession or more often just
an abstract relation between the person and some object (my, your, his, her, its, one’s,
our, their). Wh-pronouns (what, who, whom, whoever) are used in certain question
wh

PART-OF-SPEECH TAGGING
forms, or act as complementizers (Frida, who married Diego...).
Auxiliary verbs mark semantic features of a main verb such as its tense, whether
auxiliary
it is completed (aspect), whether it is negated (polarity), and whether an action is
necessary, possible, suggested, or desired (mood). English auxiliaries include the
copula verb be, the two verbs do and have, forms, as well as modal verbs used to
copula
modal
mark the mood associated with the event depicted by the main verb: can indicates
ability or possibility, may permission or possibility, must necessity.
An English-speciﬁc tagset, the -tag Penn Treebank tagset (Marcus et al., ),
shown in Fig. ., has been used to label many syntactically annotated corpora like
the Penn Treebank corpora, so is worth knowing about.
Tag Description
Example
Tag
Description
Example
Tag
Description
Example
CC
coord. conj.
and, but, or NNP
proper noun, sing. IBM
TO
inﬁnitive to
to
CD cardinal number
one, two
NNPS proper noun, plu.
Carolinas UH
interjection
ah, oops
DT
determiner
a, the
NNS
noun, plural
llamas
VB
verb base
eat
EX
existential ‘there’
there
PDT
predeterminer
all, both
VBD verb past tense
ate
FW foreign word
mea culpa
POS
possessive ending ’s
VBG verb gerund
eating
IN
preposition/
subordin-conj
of, in, by
PRP
personal pronoun
I, you, he
VBN verb past partici-
ple
eaten
JJ
adjective
yellow
PRP$
possess. pronoun
your
VBP
verb non-sg-pr
eat
JJR comparative adj
bigger
RB
adverb
quickly
VBZ
verb sg pres
eats
JJS
superlative adj
wildest
RBR
comparative adv
faster
WDT wh-determ.
which, that
LS
list item marker
, , One
RBS
superlatv. adv
fastest
WP
wh-pronoun
what, who
MD modal
can, should RP
particle
up, off
WP$
wh-possess.
whose
NN sing or mass noun llama
SYM
symbol
+, %, &
WRB wh-adverb
how, where
Figure .
Penn Treebank part-of-speech tags.
Below we show some examples with each word tagged according to both the UD
and Penn tagsets. Notice that the Penn tagset distinguishes tense and participles on
verbs, and has a special tag for the existential there construction in English. Note that
since London Journal of Medicine is a proper noun, both tagsets mark its component
nouns as PROPN/NNP, including journal and medicine, which might otherwise be
labeled as common nouns (NOUN/NN).
(.) There/PRO/EX are/VERB/VBP /NUM/CD children/NOUN/NNS
there/ADV/RB ./PUNC/.
(.) Preliminary/ADJ/JJ ﬁndings/NOUN/NNS were/AUX/VBD reported/VERB/VBN
in/ADP/IN today/NOUN/NN ’s/PART/POS London/PROPN/NNP
Journal/PROPN/NNP of/ADP/IN Medicine/PROPN/NNP
Part-of-Speech Tagging
Part-of-speech tagging is the process of assigning a part-of-speech to each word in
part-of-speech
tagging
a text. The input is a sequence x,x,...,xn of (tokenized) words and a tagset, and
the output is a sequence y,y,...,yn of tags, each output yi corresponding exactly to
one input xi, as shown in the intuition in Fig. ..
Tagging is a disambiguation task; words are ambiguous —have more than one
ambiguous
possible part-of-speech—and the goal is to ﬁnd the correct tag for the situation.
For example, book can be a verb (book that ﬂight) or a noun (hand me that book).
That can be a determiner (Does that ﬂight serve dinner) or a complementizer (I

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
NOUN
AUX
VERB
DET
NOUN
Part of Speech Tagger
Janet
back
the
bill
will
Figure .
The task of part-of-speech tagging: mapping from input words x,x,...,xn to
output POS tags y,y,...,yn .
thought that your ﬂight was earlier). The goal of POS-tagging is to resolve these
ambiguity
resolution
ambiguities, choosing the proper tag for the context.
The accuracy of part-of-speech tagging algorithms (the percentage of test set
accuracy
tags that match human gold labels) is extremely high. One study found accuracies
over % across  languages from the Universal Dependency (UD) treebank (Wu
and Dredze, ). Accuracies on various English treebanks are also % (no matter
the algorithm; HMMs, CRFs, BERT perform similarly). This % number is also
about the human performance on this task, at least for English (Manning, ).
Types:
WSJ
Brown
Unambiguous ( tag)
, (%)
, (%)
Ambiguous
(+ tags)
, (%)
, (%)
Tokens:
Unambiguous ( tag)
, (%) , (%)
Ambiguous
(+ tags)
, (%) , (%)
Figure .
Tag ambiguity in the Brown and WSJ corpora (Treebank- -tag tagset).
We’ll introduce algorithms for the task in the next few sections, but ﬁrst let’s
explore the task. Exactly how hard is it? Fig. . shows that most word types
(-%) are unambiguous (Janet is always NNP, hesitantly is always RB). But the
ambiguous words, though accounting for only -% of the vocabulary, are very
common, and -% of word tokens in running text are ambiguous. Particularly
ambiguous common words include that, back, down, put and set; here are some
examples of the  different parts of speech for the word back:
earnings growth took a back/JJ seat
a small building in the back/NN
a clear majority of senators back/VBP the bill
Dave began to back/VB toward the door
enable the country to buy back/RP debt
I was twenty-one back/RB then
Nonetheless, many words are easy to disambiguate, because their different tags
aren’t equally likely. For example, a can be a determiner or the letter a, but the
determiner sense is much more likely.
This idea suggests a useful baseline: given an ambiguous word, choose the tag
which is most frequent in the training corpus. This is a key concept:
Most Frequent Class Baseline: Always compare a classiﬁer against a baseline at
least as good as the most frequent class baseline (assigning each token to the class
it occurred in most often in the training set).

NAMED ENTITIES AND NAMED ENTITY TAGGING
The most-frequent-tag baseline has an accuracy of about %. The baseline
thus differs from the state-of-the-art and human ceiling (%) by only %.
Named Entities and Named Entity Tagging
Part of speech tagging can tell us that words like Janet, Stanford University, and
Colorado are all proper nouns; being a proper noun is a grammatical property of
these words. But viewed from a semantic perspective, these proper nouns refer to
different kinds of entities: Janet is a person, Stanford University is an organization,
and Colorado is a location.
A named entity is, roughly speaking, anything that can be referred to with a
named entity
proper name: a person, a location, an organization. The task of named entity recog-
nition (NER) is to ﬁnd spans of text that constitute proper names and tag the type of
named entity
recognition
NER
the entity. Four entity tags are most common: PER (person), LOC (location), ORG
(organization), or GPE (geo-political entity). However, the term named entity is
commonly extended to include things that aren’t entities per se, including dates,
times, and other kinds of temporal expressions, and even numerical expressions like
prices. Here’s an example of the output of an NER tagger:
Citing high fuel prices, [ORG United Airlines] said [TIME Friday] it
has increased fares by [MONEY $] per round trip on ﬂights to some
cities also served by lower-cost carriers. [ORG American Airlines], a
unit of [ORG AMR Corp.], immediately matched the move, spokesman
[PER Tim Wagner] said. [ORG United], a unit of [ORG UAL Corp.],
said the increase took effect [TIME Thursday] and applies to most
routes where it competes against discount carriers, such as [LOC Chicago]
to [LOC Dallas] and [LOC Denver] to [LOC San Francisco].
The text contains  mentions of named entities including  organizations,  loca-
tions,  times,  person, and  mention of money. Figure . shows typical generic
named entity types. Many applications will also need to use speciﬁc entity types like
proteins, genes, commercial products, or works of art.
Type
Tag Sample Categories
Example sentences
People
PER people, characters
Turing is a giant of computer science.
Organization
ORG companies, sports teams
The IPCC warned about the cyclone.
Location
LOC regions, mountains, seas
Mt. Sanitas is in Sunshine Canyon.
Geo-Political Entity
GPE countries, states
Palo Alto is raising the fees for parking.
Figure .
A list of generic named entity types with the kinds of entities they refer to.
Named entity tagging is a useful ﬁrst step in lots of natural language processing
tasks. In sentiment analysis we might want to know a consumer’s sentiment toward a
particular entity. Entities are a useful ﬁrst stage in question answering, or for linking
text to information in structured knowledge sources like Wikipedia. And named
entity tagging is also central to tasks involving building semantic representations,
like extracting events and the relationship between participants.
Unlike part-of-speech tagging, where there is no segmentation problem since
each word gets one tag, the task of named entity recognition is to ﬁnd and label
spans of text, and is difﬁcult partly because of the ambiguity of segmentation; we
In English, on the WSJ corpus, tested on sections -.

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
need to decide what’s an entity and what isn’t, and where the boundaries are. Indeed,
most words in a text will not be named entities. Another difﬁculty is caused by type
ambiguity. The mention JFK can refer to a person, the airport in New York, or any
number of schools, bridges, and streets around the United States. Some examples of
this kind of cross-type confusion are given in Figure ..
[PER Washington] was born into slavery on the farm of James Burroughs.
[ORG Washington] went up  games to  in the four-game series.
Blair arrived in [LOC Washington] for what may well be his last state visit.
In June, [GPE Washington] passed a primary seatbelt law.
Figure .
Examples of type ambiguities in the use of the name Washington.
The standard approach to sequence labeling for a span-recognition problem like
NER is BIO tagging (Ramshaw and Marcus, ). This is a method that allows us
to treat NER like a word-by-word sequence labeling task, via tags that capture both
the boundary and the named entity type. Consider the following sentence:
[PER Jane Villanueva ] of [ORG United] , a unit of [ORG United Airlines
Holding] , said the fare applies to the [LOC Chicago ] route.
Figure . shows the same excerpt represented with BIO tagging, as well as
BIO
variants called IO tagging and BIOES tagging. In BIO tagging we label any token
that begins a span of interest with the label B, tokens that occur inside a span are
tagged with an I, and any tokens outside of any span of interest are labeled O. While
there is only one O tag, we’ll have distinct B and I tags for each named entity class.
The number of tags is thus n+ tags, where n is the number of entity types. BIO
tagging can represent exactly the same information as the bracketed notation, but has
the advantage that we can represent the task in the same simple sequence modeling
way as part-of-speech tagging: assigning a single label yi to each input word xi:
Words
IO Label
BIO Label
BIOES Label
Jane
I-PER
B-PER
B-PER
Villanueva
I-PER
I-PER
E-PER
of
United
I-ORG
B-ORG
B-ORG
Airlines
I-ORG
I-ORG
I-ORG
Holding
I-ORG
I-ORG
E-ORG
discussed
the
Chicago
I-LOC
B-LOC
S-LOC
route
Figure .
NER as a sequence model, showing IO, BIO, and BIOES taggings.
We’ve also shown two variant tagging schemes: IO tagging, which loses some
information by eliminating the B tag, and BIOES tagging, which adds an end tag
E for the end of a span, and a span tag S for a span consisting of only one word.
A sequence labeler (HMM, CRF, RNN, Transformer, etc.) is trained to label each
token in a text with tags that indicate the presence (or absence) of particular kinds
of named entities.

HMM PART-OF-SPEECH TAGGING
HMM Part-of-Speech Tagging
In this section we introduce our ﬁrst sequence labeling algorithm, the Hidden Markov
Model, and show how to apply it to part-of-speech tagging. Recall that a sequence
labeler is a model whose job is to assign a label to each unit in a sequence, thus
mapping a sequence of observations to a sequence of labels of the same length.
The HMM is a classic model that introduces many of the key concepts of sequence
modeling that we will see again in more modern models.
An HMM is a probabilistic sequence model: given a sequence of units (words,
letters, morphemes, sentences, whatever), it computes a probability distribution over
possible sequences of labels and chooses the best label sequence.
Markov Chains
The HMM is based on augmenting the Markov chain. A Markov chain is a model
Markov chain
that tells us something about the probabilities of sequences of random variables,
states, each of which can take on values from some set. These sets can be words, or
tags, or symbols representing anything, for example the weather. A Markov chain
makes a very strong assumption that if we want to predict the future in the sequence,
all that matters is the current state. All the states before the current state have no im-
pact on the future except via the current state. It’s as if to predict tomorrow’s weather
you could examine today’s weather but you weren’t allowed to look at yesterday’s
weather.
are
COLD
charming
uniformly
WARM
HOT
(a)
(b)
Figure .
A Markov chain for weather (a) and one for words (b), showing states and
transitions. A start distribution π is required; setting π = [., ., .] for (a) would mean a
probability . of starting in state  (cold), probability . of starting in state  (hot), etc.
More formally, consider a sequence of state variables q,q,...,qi. A Markov
model embodies the Markov assumption on the probabilities of this sequence: that
Markov
assumption
when predicting the future, the past doesn’t matter, only the present.
Markov Assumption:
P(qi = a|q...qi−) = P(qi = a|qi−)
Figure .a shows a Markov chain for assigning a probability to a sequence of
weather events, for which the vocabulary consists of HOT, COLD, and WARM. The
states are represented as nodes in the graph, and the transitions, with their probabil-
ities, as edges. The transitions are probabilities: the values of arcs leaving a given
state must sum to . Figure .b shows a Markov chain for assigning a probability to
a sequence of words w...wt. This Markov chain should be familiar; in fact, it repre-
sents a bigram language model, with each edge expressing the probability p(wi|w j)!
Given the two models in Fig. ., we can assign a probability to any sequence from
our vocabulary.

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
Formally, a Markov chain is speciﬁed by the following components:
Q = qq ...qN
a set of N states
A = aa ...aN ...aNN
a transition probability matrix A, each aij represent-
ing the probability of moving from state i to state j, s.t.
Pn
j= aij =  ∀i
π = π,π,...,πN
an initial probability distribution over states. πi is the
probability that the Markov chain will start in state i.
Some states j may have πj = , meaning that they cannot
be initial states. Also, Pn
i= πi =
Before you go on, use the sample probabilities in Fig. .a (with π = [.,.,.])
to compute the probability of each of the following sequences:
(.) hot hot hot hot
(.) cold hot cold hot
What does the difference in these probabilities tell you about a real-world weather
fact encoded in Fig. .a?
The Hidden Markov Model
A Markov chain is useful when we need to compute a probability for a sequence
of observable events. In many cases, however, the events we are interested in are
hidden: we don’t observe them directly. For example we don’t normally observe
hidden
part-of-speech tags in a text. Rather, we see words, and must infer the tags from the
word sequence. We call the tags hidden because they are not observed.
A hidden Markov model (HMM) allows us to talk about both observed events
hidden Markov
model
(like words that we see in the input) and hidden events (like part-of-speech tags) that
we think of as causal factors in our probabilistic model. An HMM is speciﬁed by
the following components:
Q = qq ...qN
a set of N states
A = a ...ai j ...aNN a transition probability matrix A, each aij representing the probability
of moving from state i to state j, s.t. PN
j= aij =  ∀i
B = bi(ot)
a sequence of observation likelihoods, also called emission probabili-
ties, each expressing the probability of an observation ot (drawn from a
vocabulary V = v,v,...,vV) being generated from a state qi
π = π,π,...,πN
an initial probability distribution over states. πi is the probability that
the Markov chain will start in state i. Some states j may have πj = ,
meaning that they cannot be initial states. Also, Pn
i= πi =
The HMM is given as input O = oo ...oT: a sequence of T observations, each
one drawn from the vocabulary V.
A ﬁrst-order hidden Markov model instantiates two simplifying assumptions.
First, as with a ﬁrst-order Markov chain, the probability of a particular state depends
only on the previous state:
Markov Assumption:
P(qi|q,...,qi−) = P(qi|qi−)
Second, the probability of an output observation oi depends only on the state that
produced the observation qi and not on any other states or any other observations:
Output Independence: P(oi|q,...qi,...,qT,o,...,oi,...,oT) = P(oi|qi)

HMM PART-OF-SPEECH TAGGING
The components of an HMM tagger
Let’s start by looking at the pieces of an HMM tagger, and then we’ll see how to use
it to tag. An HMM has two components, the A and B probabilities.
The A matrix contains the tag transition probabilities P(ti|ti−) which represent
the probability of a tag occurring given the previous tag. For example, modal verbs
like will are very likely to be followed by a verb in the base form, a VB, like race, so
we expect this probability to be high. We compute the maximum likelihood estimate
of this transition probability by counting, out of the times we see the ﬁrst tag in a
labeled corpus, how often the ﬁrst tag is followed by the second:
P(ti|ti−) = C(ti−,ti)
C(ti−)
In the WSJ corpus, for example, MD occurs  times of which it is followed
by VB , for an MLE estimate of
C(MD)
P(VB|MD) = C(MD,VB)
= .
Let’s walk through an example, seeing how these probabilities are estimated and
used in a sample tagging task, before we return to the algorithm for decoding.
In HMM tagging, the probabilities are estimated by counting on a tagged training
corpus. For this example we’ll use the tagged WSJ corpus.
The B emission probabilities, P(wi|ti), represent the probability, given a tag (say
MD), that it will be associated with a given word (say will). The MLE of the emis-
sion probability is
P(wi|ti) = C(ti,wi)
C(ti)
Of the  occurrences of MD in the WSJ corpus, it is associated with will
times:
C(MD)
P(will|MD) = C(MD,will)
= .
We saw this kind of Bayesian modeling in Chapter ; recall that this likelihood
term is not asking “which is the most likely tag for the word will?” That would be
the posterior P(MD|will). Instead, P(will|MD) answers the slightly counterintuitive
question “If we were going to generate a MD, how likely is it that this modal would
be will?”
The A transition probabilities, and B observation likelihoods of the HMM are
illustrated in Fig. . for three states in an HMM part-of-speech tagger; the full
tagger would have one state for each tag.
HMM tagging as decoding
For any model, such as an HMM, that contains hidden variables, the task of deter-
mining the hidden variables sequence corresponding to the sequence of observations
is called decoding. More formally,
decoding
Decoding: Given as input an HMM λ = (A,B) and a sequence of ob-
servations O = o,o,...,oT, ﬁnd the most probable sequence of states
Q = qqq ...qT.

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
MD
P("aardvark" | MD)
P(“will” | MD)
P("the" | MD)
P(“back” | MD)
P("zebra" | MD)
NN
VB
P("aardvark" | NN)
P(“will” | NN)
P("the" | NN)
P(“back” | NN)
P("zebra" | NN)
P("aardvark" | VB)
P(“will” | VB)
P("the" | VB)
P(“back” | VB)
P("zebra" | VB)
Figure .
An illustration of the two parts of an HMM representation: the A transition
probabilities used to compute the prior probability, and the B observation likelihoods that are
associated with each state, one likelihood for each possible observation word.
For part-of-speech tagging, the goal of HMM decoding is to choose the tag
sequence t ...tn that is most probable given the observation sequence of n words
w ...wn:
ˆt:n = argmax
t... tn
P(t ...tn|w ...wn)
The way we’ll do this in the HMM is to use Bayes’ rule to instead compute:
P(w ...wn|t ...tn)P(t ...tn)
P(w ...wn)
ˆt:n = argmax
t... tn
Furthermore, we simplify Eq. . by dropping the denominator P(wn
ˆt:n = argmax
t... tn
P(w ...wn|t ...tn)P(t ...tn)
HMM taggers make two further simplifying assumptions. The ﬁrst is that the
probability of a word appearing depends only on its own tag and is independent of
neighboring words and tags:
P(w ...wn|t ...tn) ≈
i=
P(wi|ti)
The second assumption, the bigram assumption, is that the probability of a tag is
dependent only on the previous tag, rather than the entire tag sequence;
P(t ...tn) ≈
i=
P(ti|ti−)
Plugging the simplifying assumptions from Eq. . and Eq. . into Eq. .
results in the following equation for the most probable tag sequence from a bigram
tagger:
ˆt:n = argmax
t... tn
P(t ...tn|w ...wn) ≈ argmax
t... tn
i=
emission
z }| {
P(wi|ti)
transition
P(ti|ti−)
The two parts of Eq. . correspond neatly to the B emission probability and A
transition probability that we just deﬁned above!

HMM PART-OF-SPEECH TAGGING
The Viterbi Algorithm
The decoding algorithm for HMMs is the Viterbi algorithm shown in Fig. ..
Viterbi
algorithm
As an instance of dynamic programming, Viterbi resembles the dynamic program-
ming minimum edit distance algorithm of Chapter .
function VITERBI(observations of len T,state-graph of len N) returns best-path, path-prob
create a path probability matrix viterbi[N,T]
for each state s from  to N do
; initialization step
viterbi[s,]←πs ∗ bs(o)
backpointer[s,]←
for each time step t from  to T do
; recursion step
for each state s from  to N do
viterbi[s,t]←
max
s′= viterbi[s′,t −] ∗ as′,s ∗ bs(ot)
backpointer[s,t]←
argmax
s′=
viterbi[s′,t −] ∗ as′,s ∗ bs(ot)
bestpathprob←
max
s=
viterbi[s,T]
; termination step
bestpathpointer←
argmax
s=
viterbi[s,T]
; termination step
bestpath←the path starting at state bestpathpointer, that follows backpointer[] to states back in time
return bestpath, bestpathprob
Figure .
Viterbi algorithm for ﬁnding the optimal sequence of tags. Given an observation sequence and
an HMM λ = (A,B), the algorithm returns the state path through the HMM that assigns maximum likelihood
to the observation sequence.
The Viterbi algorithm ﬁrst sets up a probability matrix or lattice, with one col-
umn for each observation ot and one row for each state in the state graph. Each col-
umn thus has a cell for each state qi in the single combined automaton. Figure .
shows an intuition of this lattice for the sentence Janet will back the bill.
Each cell of the lattice, vt( j), represents the probability that the HMM is in state
j after seeing the ﬁrst t observations and passing through the most probable state
sequence q,...,qt−, given the HMM λ. The value of each cell vt( j) is computed
by recursively taking the most probable path that could lead us to this cell. Formally,
each cell expresses the probability
vt( j) =
max
q,...,qt− P(q...qt−,o,o ...ot,qt = j|λ)
We represent the most probable path by taking the maximum over all possible
previous state sequences
max
q,...,qt−. Like other dynamic programming algorithms,
Viterbi ﬁlls each cell recursively. Given that we had already computed the probabil-
ity of being in every state at time t −, we compute the Viterbi probability by taking
the most probable of the extensions of the paths that lead to the current cell. For a
given state qj at time t, the value vt(j) is computed as
vt( j) =
max
i= vt−(i) aij bj(ot)
The three factors that are multiplied in Eq. . for extending the previous paths to
compute the Viterbi probability at time t are

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
DT
DT
DT
DT
DT
RB
RB
RB
RB
RB
NN
NN
NN
NN
NN
JJ
JJ
JJ
JJ
JJ
VB
VB
VB
VB
VB
MD
MD
MD
MD
MD
NNP
NNP
NNP
NNP
NNP
Janet
will
back
the
bill
Figure .
A sketch of the lattice for Janet will back the bill, showing the possible tags (qi)
for each word and highlighting the path corresponding to the correct tag sequence through the
hidden states. States (parts of speech) which have a zero probability of generating a particular
word according to the B matrix (such as the probability that a determiner DT will be realized
as Janet) are greyed out.
vt−(i)
the previous Viterbi path probability from the previous time step
ai j
the transition probability from previous state qi to current state qj
bj(ot)
the state observation likelihood of the observation symbol ot given
the current state j
Working through an example
Let’s tag the sentence Janet will back the bill; the goal is the correct series of tags
(see also Fig. .):
(.) Janet/NNP will/MD back/VB the/DT bill/NN
NNP
MD
VB
JJ
NN
RB
DT
<s>
. . . . .
NNP
. . . . .
MD
. . . . .
VB
. . . . .
JJ
. . . . .
NN
. . . . .
RB
. . . . .
DT
. . . . .
Figure .
The A transition probabilities P(ti|ti−) computed from the WSJ corpus with-
out smoothing. Rows are labeled with the conditioning event; thus P(VB|MD) is ..
Let the HMM be deﬁned by the two tables in Fig. . and Fig. .. Figure .
lists the ai j probabilities for transitioning between the hidden states (part-of-speech
tags). Figure . expresses the bi(ot) probabilities, the observation likelihoods of
words given tags. This table is (slightly simpliﬁed) from counts in the WSJ corpus.
So the word Janet only appears as an NNP, back has  possible parts of speech, and

HMM PART-OF-SPEECH TAGGING
Janet
will
back
the
bill
NNP
MD
VB
. .
JJ
NN
. .
RB
DT
Figure .
Observation likelihoods B computed from the WSJ corpus without smoothing,
simpliﬁed slightly.
the word the can appear as a determiner or as an NNP (in titles like “Somewhere
Over the Rainbow” all words are tagged as NNP).
v()
v()
DT
v()=
v()
v()
max * .
RB
* P(RB|NN)
v()=
v()=
v()
* P(NN|NN)
NN
max * .
= .
max * .
v()= .
v()=
v()
JJ
max * .
P(JJ |start) =
v()=
v()=
v()=
max * .
VB
. x
* P(MD|JJ)
max * .
P(VB|start)
=     .e-
= .
*  P(MD|VB)
v() =
v()=
max * . =
P(MD|start)
MD
. x  =
.e-
* P(MD|MD)
= .
v() =
v()
.* .
NNP
P(NNP|start)
*  P(MD|NNP)
.e-
= .
= .
.*.  =
backtrace
start
start
start
start
start
backtrace
Janet
bill
will
back
the
Figure .
The ﬁrst few entries in the individual state columns for the Viterbi algorithm. Each cell keeps
the probability of the best path so far and a pointer to the previous cell along that path. We have only ﬁlled out
columns  and ; to avoid clutter most cells with value  are left empty. The rest is left as an exercise for the
reader. After the cells are ﬁlled in, backtracing from the end state, we should be able to reconstruct the correct
state sequence NNP MD VB DT NN.
Figure . shows a ﬂeshed-out version of the sketch we saw in Fig. ., the
Viterbi lattice for computing the best hidden state sequence for the observation se-
quence Janet will back the bill.
There are N =  state columns. We begin in column  (for the word Janet) by
setting the Viterbi value in each cell to the product of the π transition probability
(the start probability for that state i, which we get from the <s> entry of Fig. .),

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
and the observation likelihood of the word Janet given the tag for that cell. Most of
the cells in the column are zero since the word Janet cannot be any of those tags.
The reader should ﬁnd this in Fig. ..
Next, each cell in the will column gets updated. For each state, we compute the
value viterbi[s,t] by taking the maximum over the extensions of all the paths from
the previous column that lead to the current cell according to Eq. .. We have
shown the values for the MD, VB, and NN cells. Each cell gets the max of the
values from the previous column, multiplied by the appropriate transition probabil-
ity; as it happens in this case, most of them are zero from the previous column. The
remaining value is multiplied by the relevant observation probability, and the (triv-
ial) max is taken. In this case the ﬁnal value, .e-, comes from the NNP state at
the previous column. The reader should ﬁll in the rest of the lattice in Fig. . and
backtrace to see whether or not the Viterbi algorithm returns the gold state sequence
NNP MD VB DT NN.
Conditional Random Fields (CRFs)
While the HMM is a useful and powerful model, it turns out that HMMs need a
number of augmentations to achieve high accuracy. For example, in POS tagging
as in other tasks, we often run into unknown words: proper names and acronyms
unknown
words
are created very often, and even new common nouns and verbs enter the language
at a surprising rate. It would be great to have ways to add arbitrary features to
help with this, perhaps based on capitalization or morphology (words starting with
capital letters are likely to be proper nouns, words ending with -ed tend to be past
tense (VBD or VBN), etc.) Or knowing the previous or following words might be a
useful feature (if the previous word is the, the current tag is unlikely to be a verb).
Although we could try to hack the HMM to ﬁnd ways to incorporate some of
these, in general it’s hard for generative models like HMMs to add arbitrary features
directly into the model in a clean way. We’ve already seen a model for combining
arbitrary features in a principled way: log-linear models like the logistic regression
model of Chapter ! But logistic regression isn’t a sequence model; it assigns a class
to a single observation.
Luckily, there is a discriminative sequence model based on log-linear models:
the conditional random ﬁeld (CRF). We’ll describe here the linear chain CRF,
CRF
the version of the CRF most commonly used for language processing, and the one
whose conditioning closely matches the HMM.
Assuming we have a sequence of input words X = x...xn and want to compute
a sequence of output tags Y = y...yn. In an HMM to compute the best tag sequence
that maximizes P(Y|X) we rely on Bayes’ rule and the likelihood P(X|Y):
ˆY = argmax
p(Y|X)
= argmax
p(X|Y)p(Y)
= argmax
p(yi|yi−)
p(xi|yi)
In a CRF, by contrast, we compute the posterior p(Y|X) directly, training the CRF

CONDITIONAL RANDOM FIELDS (CRFS)
to discriminate among the possible tag sequences:
ˆY = argmax
Y∈Y
P(Y|X)
However, the CRF does not compute a probability for each tag at each time step. In-
stead, at each time step the CRF computes log-linear functions over a set of relevant
features, and these local features are aggregated and normalized to produce a global
probability for the whole sequence.
Let’s introduce the CRF more formally, again using X and Y as the input and
output sequences. A CRF is a log-linear model that assigns a probability to an
entire output (tag) sequence Y, out of all possible sequences Y, given the entire input
(word) sequence X. We can think of a CRF as like a giant sequential version of
the multinomial logistic regression algorithm we saw for text categorization. Recall
that we introduced the feature function f in regular multinomial logistic regression
for text categorization as a function of a tuple: the input text x and a single class y
(page ). In a CRF, we’re dealing with a sequence, so the function F maps an entire
input sequence X and an entire output sequence Y to a feature vector. Let’s assume
we have K features, with a weight wk for each feature Fk:
exp
k=
wkFk(X,Y)
p(Y|X) =
k=
wkFk(X,Y ′)
Y ′∈Y
exp
It’s common to also describe the same equation by pulling out the denominator into
a function Z(X):
Z(X)exp
p(Y|X) =
k=
wkFk(X,Y)
k=
wkFk(X,Y ′)
Y ′∈Y
exp
Z(X) =
We’ll call these K functions Fk(X,Y) global features, since each one is a property
of the entire input sequence X and output sequence Y. We compute them by decom-
posing into a sum of local features for each position i in Y:
Fk(X,Y) =
i=
fk(yi−,yi,X,i)
Each of these local features fk in a linear-chain CRF is allowed to make use of the
current output token yi, the previous output token yi−, the entire input string X (or
any subpart of it), and the current position i. This constraint to only depend on
the current and previous output tokens yi and yi− are what characterizes a linear
chain CRF. As we will see, this limitation makes it possible to use versions of the
linear chain
CRF
efﬁcient Viterbi and Forward-Backwards algorithms from the HMM. A general CRF,
by contrast, allows a feature to make use of any output token, and are thus necessary
for tasks in which the decision depend on distant output tokens, like yi−. General
CRFs require more complex inference, and are less commonly used for language
processing.

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
Features in a CRF POS Tagger
Let’s look at some of these features in detail, since the reason to use a discriminative
sequence model is that it’s easier to incorporate a lot of features.
Again, in a linear-chain CRF, each local feature fk at position i can depend on
any information from: (yi−,yi,X,i). So some legal features representing common
situations might be the following:
{xi = the, yi = DET}
{yi = PROPN, xi+ = Street, yi− = NUM}
{yi = VERB, yi− = AUX}
For simplicity, we’ll assume all CRF features take on the value  or . Above, we
explicitly use the notation {x} to mean “ if x is true, and  otherwise”. From now
on, we’ll leave off the  when we deﬁne features, but you can assume each feature
has it there implicitly.
Although the idea of what features to use is done by the system designer by hand,
the speciﬁc features are automatically populated by using feature templates as we
feature
templates
brieﬂy mentioned in Chapter . Here are some templates that only use information
from (yi−,yi,X,i):
⟨yi,xi⟩,⟨yi,yi−⟩,⟨yi,xi−,xi+⟩
These templates automatically populate the set of features from every instance in
the training and test set. Thus for our example Janet/NNP will/MD back/VB the/DT
bill/NN, when xi is the word back, the following features would be generated and
have the value  (we’ve assigned them arbitrary feature numbers):
f: yi = VB and xi = back
f: yi = VB and yi− = MD
f: yi = VB and xi− = will and xi+ = bill
It’s also important to have features that help with unknown words. One of the
most important is word shape features, which represent the abstract letter pattern
word shape
of the word by mapping lower-case letters to ‘x’, upper-case to ‘X’, numbers to
’d’, and retaining punctuation. Thus for example I.M.F. would map to X.X.X. and
DC- would map to XXdd-dd. A second class of shorter word shape features is
also used. In these features consecutive character types are removed, so words in all
caps map to X, words with initial-caps map to Xx, DC- would be mapped to
Xd-d but I.M.F would still map to X.X.X. Preﬁx and sufﬁx features are also useful.
In summary, here are some sample feature templates that help with unknown words:
xi contains a particular preﬁx (perhaps from all preﬁxes of length ≤ )
xi contains a particular sufﬁx (perhaps from all sufﬁxes of length ≤ )
xi’s word shape
xi’s short word shape
For example the word well-dressed might generate the following non-zero val-
ued feature values:
Because in HMMs all computation is based on the two probabilities P(tag|tag) and P(word|tag), if
we want to include some source of knowledge into the tagging process, we must ﬁnd a way to encode
the knowledge into one of these two probabilities. Each time we add a feature we have to do a lot of
complicated conditioning which gets harder and harder as we have more and more such features.

CONDITIONAL RANDOM FIELDS (CRFS)
preﬁx(xi) = w
preﬁx(xi) = we
sufﬁx(xi) = ed
sufﬁx(xi) = d
word-shape(xi) = xxxx-xxxxxxx
short-word-shape(xi) = x-x
The known-word templates are computed for every word seen in the training
set; the unknown word features can also be computed for all words in training, or
only on training words whose frequency is below some threshold. The result of the
known-word templates and word-signature features is a very large set of features.
Generally a feature cutoff is used in which features are thrown out if they have count
<  in the training set.
Remember that in a CRF we don’t learn weights for each of these local features
fk. Instead, we ﬁrst sum the values of each local feature (for example feature f)
over the entire sentence, to create each global feature (for example F). It is those
global features that will then be multiplied by weight w. Thus for training and
inference there is always a ﬁxed set of K features with K weights, even though the
length of each sentence is different.
Features for CRF Named Entity Recognizers
A CRF for NER makes use of very similar features to a POS tagger, as shown in
Figure ..
identity of wi, identity of neighboring words
embeddings for wi, embeddings for neighboring words
part of speech of wi, part of speech of neighboring words
presence of wi in a gazetteer
wi contains a particular preﬁx (from all preﬁxes of length ≤ )
wi contains a particular sufﬁx (from all sufﬁxes of length ≤ )
word shape of wi, word shape of neighboring words
short word shape of wi, short word shape of neighboring words
gazetteer features
Figure .
Typical features for a feature-based NER system.
One feature that is especially useful for locations is a gazetteer, a list of place
gazetteer
names, often providing millions of entries for locations with detailed geographical
and political information. This can be implemented as a binary feature indicating a
phrase appears in the list. Other related resources like name-lists, for example from
the United States Census Bureau, can be used, as can other entity dictionaries like
lists of corporations or products, although they may not be as helpful as a gazetteer
(Mikheev et al., ).
The sample named entity token L’Occitane would generate the following non-
zero valued feature values (assuming that L’Occitane is neither in the gazetteer nor
the census).
www.geonames.org
www.census.gov

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
preﬁx(xi) = L
sufﬁx(xi) = tane
preﬁx(xi) = L’
sufﬁx(xi) = ane
preﬁx(xi) = L’O
sufﬁx(xi) = ne
preﬁx(xi) = L’Oc
sufﬁx(xi) = e
word-shape(xi) = X’Xxxxxxxx
short-word-shape(xi) = X’Xx
Figure . illustrates the result of adding part-of-speech tags and some shape
information to our earlier example.
Words
POS
Short shape
Gazetteer
BIO Label
Jane
NNP
Xx
B-PER
Villanueva
NNP
Xx
I-PER
of
IN
United
NNP
Xx
B-ORG
Airlines
NNP
Xx
I-ORG
Holding
NNP
Xx
I-ORG
discussed
VBD
the
DT
Chicago
NNP
Xx
B-LOC
route
NN
Figure .
Some NER features for a sample sentence, assuming that Chicago and Vil-
lanueva are listed as locations in a gazetteer. We assume features only take on the values  or
, so the ﬁrst POS feature, for example, would be represented as {POS = NNP}.
Inference and Training for CRFs
How do we ﬁnd the best tag sequence ˆY for a given input X? We start with Eq. .:
ˆY = argmax
Y∈Y
P(Y|X)
Z(X)exp
k=
wkFk(X,Y)
= argmax
Y∈Y
i=
fk(yi−,yi,X,i)
k=
wk
= argmax
Y∈Y
exp
i=
fk(yi−,yi,X,i)
k=
wk
= argmax
Y∈Y
i=
k=
wk fk(yi−,yi,X,i)
= argmax
Y∈Y
We can ignore the exp function and the denominator Z(X), as we do above, because
exp doesn’t change the argmax, and the denominator Z(X) is constant for a given
observation sequence X.
How should we decode to ﬁnd this optimal tag sequence ˆy? Just as with HMMs,
we’ll turn to the Viterbi algorithm, which works because, like the HMM, the linear-
chain CRF depends at each timestep on only one previous output token yi−.
Concretely, this involves ﬁlling an N×T array with the appropriate values, main-
taining backpointers as we proceed. As with HMM Viterbi, when the table is ﬁlled,
we simply follow pointers back from the maximum value in the ﬁnal column to
retrieve the desired set of labels.

EVALUATION OF NAMED ENTITY RECOGNITION
The requisite changes from HMM Viterbi have to do only with how we ﬁll each
cell. Recall from Eq. . that the recursive step of the Viterbi equation computes
the Viterbi value of time t for state j as
vt( j) =
max
i=
vt−(i)aij bj(ot);  ≤ j ≤ N, < t ≤ T
which is the HMM implementation of
vt( j) =
max
i=
vt−(i) P(sj|si) P(ot|s j)  ≤ j ≤ N, < t ≤ T
The CRF requires only a slight change to this latter formula, replacing the a and b
prior and likelihood probabilities with the CRF features:
vt( j) =
max
i=
vt−(i)
k=
wk fk(yt−,yt,X,t)  ≤ j ≤ N, < t ≤ T
Learning in CRFs relies on the same supervised learning algorithms we presented
for logistic regression. Given a sequence of observations, feature functions, and cor-
responding outputs, we use stochastic gradient descent to train the weights to maxi-
mize the log-likelihood of the training corpus. The local nature of linear-chain CRFs
means that the forward-backward algorithm introduced for HMMs in Appendix A
can be extended to a CRF version that will efﬁciently compute the necessary deriva-
tives. As with logistic regression, L or L regularization is important.
Evaluation of Named Entity Recognition
Part-of-speech taggers are evaluated by the standard metric of accuracy. Named
entity recognizers are evaluated by recall, precision, and F measure. Recall that
recall is the ratio of the number of correctly labeled responses to the total that should
have been labeled; precision is the ratio of the number of correctly labeled responses
to the total labeled; and F-measure is the harmonic mean of the two.
To know if the difference between the F scores of two NER systems is a signif-
icant difference, we use the paired bootstrap test, or the similar randomization test
(Section .).
For named entity tagging, the entity rather than the word is the unit of response.
Thus in the example in Fig. ., the two entities Jane Villanueva and United Air-
lines Holding and the non-entity discussed would each count as a single response.
The fact that named entity tagging has a segmentation component which is not
present in tasks like text categorization or part-of-speech tagging causes some prob-
lems with evaluation. For example, a system that labeled Jane but not Jane Vil-
lanueva as a person would cause two errors, a false positive for O and a false nega-
tive for I-PER. In addition, using entities as the unit of response but words as the unit
of training means that there is a mismatch between the training and test conditions.
Further Details
In this section we summarize a few remaining details of the data and models for
part-of-speech tagging and NER, beginning with data. Since the algorithms we have

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
presented are supervised, having labeled data is essential for training and testing. A
wide variety of datasets exist for part-of-speech tagging and/or NER. The Universal
Dependencies (UD) dataset (de Marneffe et al., ) has POS tagged corpora in
over a hundred languages, as do the Penn Treebanks in English, Chinese, and Arabic.
OntoNotes has corpora labeled for named entities in English, Chinese, and Arabic
(Hovy et al., ). Named entity tagged corpora are also available in particular
domains, such as for biomedical (Bada et al., ) and literary text (Bamman et al.,
Rule-based Methods
While machine learned (neural or CRF) sequence models are the norm in academic
research, commercial approaches to NER are often based on pragmatic combina-
tions of lists and rules, with some smaller amount of supervised machine learning
(Chiticariu et al., ). For example in the IBM System T architecture, a user
speciﬁes declarative constraints for tagging tasks in a formal query language that
includes regular expressions, dictionaries, semantic constraints, and other operators,
which the system compiles into an efﬁcient extractor (Chiticariu et al., ).
One common approach is to make repeated rule-based passes over a text, starting
with rules with very high precision but low recall, and, in subsequent stages, using
machine learning methods that take the output of the ﬁrst pass into account (an
approach ﬁrst worked out for coreference (Lee et al., a)):
. First, use high-precision rules to tag unambiguous entity mentions.
. Then, search for substring matches of the previously detected names.
. Use application-speciﬁc name lists to ﬁnd likely domain-speciﬁc mentions.
. Finally, apply supervised sequence labeling techniques that use tags from pre-
vious stages as additional features.
Rule-based methods were also the earliest methods for part-of-speech tagging.
Rule-based taggers like the English Constraint Grammar system (Karlsson et al.
, Voutilainen ) use a two-stage formalism invented in the s and s:
() a morphological analyzer with tens of thousands of word stem entries returns all
parts of speech for a word, then () a large set of thousands of constraints are applied
to the input sentence to rule out parts of speech inconsistent with the context.
POS Tagging for Morphologically Rich Languages
Augmentations to tagging algorithms become necessary when dealing with lan-
guages with rich morphology like Czech, Hungarian and Turkish.
These productive word-formation processes result in a large vocabulary for these
languages: a , word token corpus of Hungarian has more than twice as many
word types as a similarly sized corpus of English (Oravecz and Dienes, ), while
a  million word token corpus of Turkish contains four times as many word types
as a similarly sized English corpus (Hakkani-T¨ur et al., ). Large vocabular-
ies mean many unknown words, and these unknown words cause signiﬁcant per-
formance degradations in a wide variety of languages (including Czech, Slovene,
Estonian, and Romanian) (Hajiˇc, ).
Highly inﬂectional languages also have much more information than English
coded in word morphology, like case (nominative, accusative, genitive) or gender
(masculine, feminine). Because this information is important for tasks like pars-
ing and coreference resolution, part-of-speech taggers for morphologically rich lan-

SUMMARY
guages need to label words with case and gender information. Tagsets for morpho-
logically rich languages are therefore sequences of morphological tags rather than a
single primitive tag. Here’s a Turkish example, in which the word izin has three pos-
sible morphological/part-of-speech tags and meanings (Hakkani-T¨ur et al., ):
. Yerdeki izin temizlenmesi gerek.
iz + Noun+Asg+Pnon+Gen
The trace on the ﬂoor should be cleaned.
. ¨Uzerinde parmak izin kalmis¸.
iz + Noun+Asg+Psg+Nom
Your ﬁnger print is left on (it).
. Ic¸eri girmek ic¸in izin alman gerekiyor.
izin + Noun+Asg+Pnon+Nom
You need permission to enter.
Using a morphological parse sequence like Noun+Asg+Pnon+Gen as the part-
of-speech tag greatly increases the number of parts of speech, and so tagsets can
be  to  times larger than the – tags we have seen for English. With such
large tagsets, each word needs to be morphologically analyzed to generate the list
of possible morphological tag sequences (part-of-speech tags) for the word. The
role of the tagger is then to disambiguate among these tags. This method also helps
with unknown words since morphological parsers can accept unknown stems and
still segment the afﬁxes properly.
Summary
This chapter introduced parts of speech and named entities, and the tasks of part-
of-speech tagging and named entity recognition:
Languages generally have a small set of closed class words that are highly
frequent, ambiguous, and act as function words, and open-class words like
nouns, verbs, adjectives. Various part-of-speech tagsets exist, of between
and  tags.
Part-of-speech tagging is the process of assigning a part-of-speech label to
each of a sequence of words.
Named entities are words for proper nouns referring mainly to people, places,
and organizations, but extended to many other types that aren’t strictly entities
or even proper nouns.
Two common approaches to sequence modeling are a generative approach,
HMM tagging, and a discriminative approach, CRF tagging. We will see a
neural approach in following chapters.
The probabilities in HMM taggers are estimated by maximum likelihood es-
timation on tag-labeled training corpora. The Viterbi algorithm is used for
decoding, ﬁnding the most likely tag sequence
Conditional Random Fields or CRF taggers train a log-linear model that can
choose the best tag sequence given an observation sequence, based on features
that condition on the output tag, the prior output tag, the entire input sequence,
and the current timestep. They use the Viterbi algorithm for inference, to
choose the best sequence of tags, and a version of the Forward-Backward
algorithm (see Appendix A) for training,

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
Bibliographical and Historical Notes
What is probably the earliest part-of-speech tagger was part of the parser in Zellig
Harris’s Transformations and Discourse Analysis Project (TDAP), implemented be-
tween June  and July  at the University of Pennsylvania (Harris, ),
although earlier systems had used part-of-speech dictionaries. TDAP used  hand-
written rules for part-of-speech disambiguation; the use of part-of-speech tag se-
quences and the relative frequency of tags for a word preﬁgures modern algorithms.
The parser was implemented essentially as a cascade of ﬁnite-state transducers; see
Joshi and Hopely () and Karttunen () for a reimplementation.
The Computational Grammar Coder (CGC) of Klein and Simmons () had
three components: a lexicon, a morphological analyzer, and a context disambigua-
tor. The small -word lexicon listed only function words and other irregular
words. The morphological analyzer used inﬂectional and derivational sufﬁxes to as-
sign part-of-speech classes. These were run over words to produce candidate parts
of speech which were then disambiguated by a set of  context rules by relying on
surrounding islands of unambiguous words. For example, one rule said that between
an ARTICLE and a VERB, the only allowable sequences were ADJ-NOUN, NOUN-
ADVERB, or NOUN-NOUN. The TAGGIT tagger (Greene and Rubin, ) used
the same architecture as Klein and Simmons (), with a bigger dictionary and
more tags (). TAGGIT was applied to the Brown corpus and, according to Francis
and Kuˇcera (, p. ), accurately tagged % of the corpus; the remainder of the
Brown corpus was then tagged by hand. All these early algorithms were based on
a two-stage architecture in which a dictionary was ﬁrst used to assign each word a
set of potential parts of speech, and then lists of handwritten disambiguation rules
winnowed the set down to a single part of speech per word.
Probabilities were used in tagging by Stolz et al. () and a complete proba-
bilistic tagger with Viterbi decoding was sketched by Bahl and Mercer (). The
Lancaster-Oslo/Bergen (LOB) corpus, a British English equivalent of the Brown cor-
pus, was tagged in the early ’s with the CLAWS tagger (Marshall ; Mar-
shall ; Garside ), a probabilistic algorithm that approximated a simpliﬁed
HMM tagger. The algorithm used tag bigram probabilities, but instead of storing the
word likelihood of each tag, the algorithm marked tags either as rare (P(tag|word) <
.) infrequent (P(tag|word) < .) or normally frequent (P(tag|word) > .).
DeRose () developed a quasi-HMM algorithm, including the use of dy-
namic programming, although computing P(t|w)P(w) instead of P(w|t)P(w). The
same year, the probabilistic PARTS tagger of Church ,  was probably the
ﬁrst implemented HMM tagger, described correctly in Church (), although
Church () also described the computation incorrectly as P(t|w)P(w) instead
of P(w|t)P(w). Church (p.c.) explained that he had simpliﬁed for pedagogical pur-
poses because using the probability P(t|w) made the idea seem more understandable
as “storing a lexicon in an almost standard form”.
Later taggers explicitly introduced the use of the hidden Markov model (Kupiec
; Weischedel et al. ; Sch¨utze and Singer ). Merialdo () showed
that fully unsupervised EM didn’t work well for the tagging task and that reliance
on hand-labeled data was important. Charniak et al. () showed the importance
of the most frequent tag baseline; the .% number we give above was from Abney
et al. (). See Brants () for HMM tagger implementation details, includ-
ing the extension to trigram contexts, and the use of sophisticated unknown word
features; its performance is still close to state of the art taggers.

EXERCISES
Log-linear models for POS tagging were introduced by Ratnaparkhi (),
who introduced a system called MXPOST which implemented a maximum entropy
Markov model (MEMM), a slightly simpler version of a CRF. Around the same
time, sequence labelers were applied to the task of named entity tagging, ﬁrst with
HMMs (Bikel et al., ) and MEMMs (McCallum et al., ), and then once
CRFs were developed (Lafferty et al. ), they were also applied to NER (Mc-
Callum and Li, ). A wide exploration of features followed (Zhou et al., ).
Neural approaches to NER mainly follow from the pioneering results of Collobert
et al. (), who applied a CRF on top of a convolutional net. BiLSTMs with word
and character-based embeddings as input followed shortly and became a standard
neural algorithm for NER (Huang et al. , Ma and Hovy , Lample et al.
) followed by the more recent use of Transformers and BERT.
The idea of using letter sufﬁxes for unknown words is quite old; the early Klein
and Simmons () system checked all ﬁnal letter sufﬁxes of lengths -. The un-
known word features described on page  come mainly from Ratnaparkhi (),
with augmentations from Toutanova et al. () and Manning ().
State of the art POS taggers use neural algorithms, either bidirectional RNNs or
Transformers like BERT; see Chapter  and Chapter . HMM (Brants ; Thede
and Harper ) and CRF tagger accuracies are likely just a tad lower.
Manning () investigates the remaining .% of errors in a high-performing
tagger (Toutanova et al., ). He suggests that a third or half of these remaining
errors are due to errors or inconsistencies in the training data, a third might be solv-
able with richer linguistic models, and for the remainder the task is underspeciﬁed
or unclear.
Supervised tagging relies heavily on in-domain training data hand-labeled by
experts. Ways to relax this assumption include unsupervised algorithms for cluster-
ing words into part-of-speech-like classes, summarized in Christodoulopoulos et al.
(), and ways to combine labeled and unlabeled data, for example by co-training
(Clark et al. ; Søgaard ).
See Householder () for historical notes on parts of speech, and Sampson
() and Garside et al. () on the provenance of the Brown and other tagsets.
Exercises
Find one tagging error in each of the following sentences that are tagged with
the Penn Treebank tagset:
. I/PRP need/VBP a/DT ﬂight/NN from/IN Atlanta/NN
. Does/VBZ this/DT ﬂight/NN serve/VB dinner/NNS
. I/PRP have/VB a/DT friend/NN living/VBG in/IN Denver/NNP
. Can/VBP you/PRP list/VB the/DT nonstop/JJ afternoon/NN ﬂights/NNS
Use the Penn Treebank tagset to tag each word in the following sentences
from Damon Runyon’s short stories. You may ignore punctuation. Some of
these are quite difﬁcult; do your best.
. It is a nice night.
. This crap game is over a garage in Fifty-second Street...
. ...Nobody ever takes the newspapers she sells ...
. He is a tall, skinny guy with a long, sad, mean-looking kisser, and a
mournful voice.

CHAPTER
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
. ...I am sitting in Mindy’s restaurant putting on the geﬁllte ﬁsh, which is
a dish I am very fond of, ...
. When a guy and a doll get to taking peeks back and forth at each other,
why there you are indeed.
Now compare your tags from the previous exercise with one or two friend’s
answers. On which words did you disagree the most? Why?
Implement the “most likely tag” baseline. Find a POS-tagged training set,
and use it to compute for each word the tag that maximizes p(t|w). You will
need to implement a simple tokenizer to deal with sentence boundaries. Start
by assuming that all unknown words are NN and compute your error rate on
known and unknown words. Now write at least ﬁve rules to do a better job of
tagging unknown words, and show the difference in error rates.
Build a bigram HMM tagger. You will need a part-of-speech-tagged corpus.
First split the corpus into a training set and test set. From the labeled training
set, train the transition and observation probabilities of the HMM tagger di-
rectly on the hand-tagged data. Then implement the Viterbi algorithm so you
can decode a test sentence. Now run your algorithm on the test set. Report its
error rate and compare its performance to the most frequent tag baseline.
Do an error analysis of your tagger. Build a confusion matrix and investigate
the most frequent errors. Propose some features for improving the perfor-
mance of your tagger on these errors.
Develop a set of regular expressions to recognize the character shape features
described on page .
The BIO and other labeling schemes given in this chapter aren’t the only
possible one. For example, the B tag can be reserved only for those situations
where an ambiguity exists between adjacent entities. Propose a new set of
BIO tags for use with your NER system. Experiment with it and compare its
performance with the schemes presented in this chapter.
Names of works of art (books, movies, video games, etc.) are quite different
from the kinds of named entities we’ve discussed in this chapter. Collect a
list of names of works of art from a particular category from a Web-based
source (e.g., gutenberg.org, amazon.com, imdb.com, etc.). Analyze your list
and give examples of ways that the names in it are likely to be problematic for
the techniques described in this chapter.
. Develop an NER system speciﬁc to the category of names that you collected in
the last exercise. Evaluate your system on a collection of text likely to contain
instances of these named entities.

RNNs and LSTMs
CHAPTER
Time will explain.
Jane Austen, Persuasion
Language is an inherently temporal phenomenon. Spoken language is a sequence of
acoustic events over time, and we comprehend and produce both spoken and written
language as a continuous input stream. The temporal nature of language is reﬂected
in the metaphors we use; we talk of the ﬂow of conversations, news feeds, and twitter
streams, all of which emphasize that language is a sequence that unfolds in time.
This temporal nature is reﬂected in some language processing algorithms. For
example, the Viterbi algorithm we introduced for HMM part-of-speech tagging pro-
ceeds through the input a word at a time, carrying forward information gleaned along
the way. Yet other machine learning approaches, like those we’ve studied for senti-
ment analysis or other text classiﬁcation tasks don’t have this temporal nature – they
assume simultaneous access to all aspects of their input.
The feedforward networks of Chapter  also assumed simultaneous access, al-
though they also had a simple model for time. Recall that we applied feedforward
networks to language modeling by having them look only at a ﬁxed-size window
of words, and then sliding this window over the input, making independent predic-
tions along the way. This sliding-window approach is also used in the transformer
architecture we will introduce in Chapter .
This chapter introduces a deep learning architecture that offers an alternative
way of representing time: recurrent neural networks (RNNs), and their variants like
LSTMs. RNNs have a mechanism that deals directly with the sequential nature of
language, allowing them to handle the temporal nature of language without the use of
arbitrary ﬁxed-sized windows. The recurrent network offers a new way to represent
the prior context, in its recurrent connections, allowing the model’s decision to
depend on information from hundreds of words in the past. We’ll see how to apply
the model to the task of language modeling, to sequence modeling tasks like part-
of-speech tagging, and to text classiﬁcation tasks like sentiment analysis.
Recurrent Neural Networks
A recurrent neural network (RNN) is any network that contains a cycle within its
network connections, meaning that the value of some unit is directly, or indirectly,
dependent on its own earlier outputs as an input. While powerful, such networks
are difﬁcult to reason about and to train. However, within the general class of recur-
rent networks there are constrained architectures that have proven to be extremely
effective when applied to language. In this section, we consider a class of recurrent
networks referred to as Elman Networks (Elman, ) or simple recurrent net-
Elman
Networks

CHAPTER
RNNS AND LSTMS
works. These networks are useful in their own right and serve as the basis for more
complex approaches like the Long Short-Term Memory (LSTM) networks discussed
later in this chapter. In this chapter when we use the term RNN we’ll be referring to
these simpler more constrained networks (although you will often see the term RNN
to mean any net with recurrent properties including LSTMs).
xt
ht
yt
Figure .
Simple recurrent neural network after Elman (). The hidden layer includes
a recurrent connection as part of its input. That is, the activation value of the hidden layer
depends on the current input as well as the activation value of the hidden layer from the
previous time step.
Fig. . illustrates the structure of an RNN. As with ordinary feedforward net-
works, an input vector representing the current input, xt, is multiplied by a weight
matrix and then passed through a non-linear activation function to compute the val-
ues for a layer of hidden units. This hidden layer is then used to calculate a cor-
responding output, yt. In a departure from our earlier window-based approach, se-
quences are processed by presenting one item at a time to the network. We’ll use
subscripts to represent time, thus xt will mean the input vector x at time t. The key
difference from a feedforward network lies in the recurrent link shown in the ﬁgure
with the dashed line. This link augments the input to the computation at the hidden
layer with the value of the hidden layer from the preceding point in time.
The hidden layer from the previous time step provides a form of memory, or
context, that encodes earlier processing and informs the decisions to be made at
later points in time. Critically, this approach does not impose a ﬁxed-length limit
on this prior context; the context embodied in the previous hidden layer can include
information extending back to the beginning of the sequence.
Adding this temporal dimension makes RNNs appear to be more complex than
non-recurrent architectures. But in reality, they’re not all that different. Given an
input vector and the values for the hidden layer from the previous time step, we’re
still performing the standard feedforward calculation introduced in Chapter . To
see this, consider Fig. . which clariﬁes the nature of the recurrence and how it
factors into the computation at the hidden layer. The most signiﬁcant change lies in
the new set of weights, U, that connect the hidden layer from the previous time step
to the current hidden layer. These weights determine how the network makes use of
past context in calculating the output for the current input. As with the other weights
in the network, these connections are trained via backpropagation.
Inference in RNNs
Forward inference (mapping a sequence of inputs to a sequence of outputs) in an
RNN is nearly identical to what we’ve already seen with feedforward networks. To
compute an output yt for an input xt, we need the activation value for the hidden
layer ht. To calculate this, we multiply the input xt with the weight matrix W, and
the hidden layer from the previous time step ht− with the weight matrix U. We
add these values together and pass them through a suitable activation function, g,
to arrive at the activation value for the current hidden layer, ht. Once we have the

RECURRENT NEURAL NETWORKS
yt
ht
ht-
xt
Figure .
Simple recurrent neural network illustrated as a feedforward network.
values for the hidden layer, we proceed with the usual computation to generate the
output vector.
ht = g(Uht− +Wxt)
yt = f(Vht)
It’s worthwhile here to be careful about specifying the dimensions of the input, hid-
den and output layers, as well as the weight matrices to make sure these calculations
are correct. Let’s refer to the input, hidden and output layer dimensions as din, dh,
and dout respectively. Given this, our three parameter matrices are: W ∈ Rdh×din,
U ∈ Rdh×dh, and V ∈ Rdout×dh.
In the commonly encountered case of soft classiﬁcation, computing yt consists
of a softmax computation that provides a probability distribution over the possible
output classes.
yt = softmax(Vht)
The fact that the computation at time t requires the value of the hidden layer from
time t − mandates an incremental inference algorithm that proceeds from the start
of the sequence to the end as illustrated in Fig. .. The sequential nature of simple
recurrent networks can also be seen by unrolling the network in time as is shown in
Fig. .. In this ﬁgure, the various layers of units are copied for each time step to
illustrate that they will have differing values over time. However, the various weight
matrices are shared across time.
function FORWARDRNN(x,network) returns output sequence y
h ←
for i← to LENGTH(x) do
hi ←g(Uhi− + Wxi)
yi ← f(Vhi)
return y
Figure .
Forward inference in a simple recurrent network. The matrices U, V and W are
shared across time, while new values for h and y are calculated with each time step.

CHAPTER
RNNS AND LSTMS
Figure .
A simple recurrent neural network shown unrolled in time. Network layers are recalculated for
each time step, while the weights U, V and W are shared across all time steps.
Training
As with feedforward networks, we’ll use a training set, a loss function, and back-
propagation to obtain the gradients needed to adjust the weights in these recurrent
networks. As shown in Fig. ., we now have  sets of weights to update: W, the
weights from the input layer to the hidden layer, U, the weights from the previous
hidden layer to the current hidden layer, and ﬁnally V, the weights from the hidden
layer to the output layer.
Fig. . highlights two considerations that we didn’t have to worry about with
backpropagation in feedforward networks. First, to compute the loss function for
the output at time t we need the hidden layer from time t − . Second, the hidden
layer at time t inﬂuences both the output at time t and the hidden layer at time t +
(and hence the output and loss at t +). It follows from this that to assess the error
accruing to ht, we’ll need to know its inﬂuence on both the current output as well as
the ones that follow.
Tailoring the backpropagation algorithm to this situation leads to a two-pass al-
gorithm for training the weights in RNNs. In the ﬁrst pass, we perform forward
inference, computing ht, yt, accumulating the loss at each step in time, saving the
value of the hidden layer at each step for use at the next time step. In the second
phase, we process the sequence in reverse, computing the required gradients as we
go, computing and saving the error term for use in the hidden layer for each step
backward in time. This general approach is commonly referred to as backpropaga-
tion through time (Werbos , Rumelhart et al. , Werbos ).
backpropaga-
tion through
time
Fortunately, with modern computational frameworks and adequate computing
resources, there is no need for a specialized approach to training RNNs. As illus-
trated in Fig. ., explicitly unrolling a recurrent network into a feedforward com-
putational graph eliminates any explicit recurrences, allowing the network weights
to be trained directly. In such an approach, we provide a template that speciﬁes the
basic structure of the network, including all the necessary parameters for the input,

RNNS AS LANGUAGE MODELS
output, and hidden layers, the weight matrices, as well as the activation and output
functions to be used. Then, when presented with a speciﬁc input sequence, we can
generate an unrolled feedforward network speciﬁc to that input, and use that graph
to perform forward inference or training via ordinary backpropagation.
For applications that involve much longer input sequences, such as speech recog-
nition, character-level processing, or streaming continuous inputs, unrolling an en-
tire input sequence may not be feasible. In these cases, we can unroll the input into
manageable ﬁxed-length segments and treat each segment as a distinct training item.
RNNs as Language Models
Let’s see how to apply RNNs to the language modeling task. Recall from Chapter
that language models predict the next word in a sequence given some preceding
context. For example, if the preceding context is “Thanks for all the” and we want
to know how likely the next word is “ﬁsh” we would compute:
P(ﬁsh|Thanks for all the)
Language models give us the ability to assign such a conditional probability to every
possible next word, giving us a distribution over the entire vocabulary. We can also
assign probabilities to entire sequences by combining these conditional probabilities
with the chain rule:
P(w:n) =
i=
P(wi|w<i)
The n-gram language models of Chapter  compute the probability of a word given
counts of its occurrence with the n− prior words. The context is thus of size n−.
For the feedforward language models of Chapter , the context is the window size.
RNN language models (Mikolov et al., ) process the input sequence one
word at a time, attempting to predict the next word from the current word and the
previous hidden state. RNNs thus don’t have the limited context problem that n-gram
models have, or the ﬁxed context that feedforward language models have, since the
hidden state can in principle represent information about all of the preceding words
all the way back to the beginning of the sequence. Fig. . sketches this difference
between a FFN language model and an RNN language model, showing that the
RNN language model uses ht−, the hidden state from the previous time step, as a
representation of the past context.
Forward Inference in an RNN language model
Forward inference in a recurrent language model proceeds exactly as described in
Section ... The input sequence X = [x;...;xt;...;xN] consists of a series of words
each represented as a one-hot vector of size |V|×, and the output prediction, y, is a
vector representing a probability distribution over the vocabulary. At each step, the
model uses the word embedding matrix E to retrieve the embedding for the current
word, and then combines it with the hidden layer from the previous step to compute a
new hidden layer. This hidden layer is then used to generate an output layer which is
passed through a softmax layer to generate a probability distribution over the entire

CHAPTER
RNNS AND LSTMS
yt
yt
a)
b)
ht
ht
ht-
xt-
xt-
xt
xt
Figure .
Simpliﬁed sketch of (a) a feedforward neural language model versus (b) an
RNN language model moving through a text.
vocabulary. That is, at time t:
et = Ext
ht = g(Uht− +Wet)
yt = softmax(Vht)
The vector resulting from Vh can be thought of as a set of scores over the vocabulary
given the evidence provided in h. Passing these scores through the softmax normal-
izes the scores into a probability distribution. The probability that a particular word
l in the vocabulary is the next word is represented by yt[k], the kth component of yt:
P(wt+ = k|w,...,wt) = yt[k]
The probability of an entire sequence is just the product of the probabilities of each
item in the sequence, where we’ll use yi[wi] to mean the probability of the true word
wi at time step i.
P(w:n) =
i=
P(wi|w:i−)
i=
yi[wi]
Training an RNN language model
To train an RNN as a language model, we use the same self-supervision (or self-
self-supervision
training) algorithm we saw in Section .: we take a corpus of text as training
material and at each time step t ask the model to predict the next word. We call
such a model self-supervised because we don’t have to add any special gold labels
to the data; the natural sequence of words is its own supervision! We simply train
the model to minimize the error in predicting the true next word in the training
sequence, using cross-entropy as the loss function. Recall that the cross-entropy
loss measures the difference between a predicted probability distribution and the
correct distribution.
w∈V
yt[w]log ˆyt[w]
LCE = −
In the case of language modeling, the correct distribution yt comes from knowing the
next word. This is represented as a one-hot vector corresponding to the vocabulary

RNNS AS LANGUAGE MODELS
long
and
thanks
for
Next word
all
Loss
Softmax over
Vocabulary
Vh
RNN
Input
Embeddings
So
long
and
thanks
for
Figure .
Training RNNs as language models.
where the entry for the actual next word is , and all the other entries are . Thus,
the cross-entropy loss for language modeling is determined by the probability the
model assigns to the correct next word. So at time t the CE loss is the negative log
probability the model assigns to the next word in the training sequence.
LCE( ˆyt,yt) = −log ˆyt[wt+]
Thus at each word position t of the input, the model takes as input the correct se-
quence of tokens w:t, and uses them to compute a probability distribution over
possible next words so as to compute the model’s loss for the next token wt+. Then
we move to the next word, we ignore what the model predicted for the next word
and instead use the correct sequence of tokens w:t+ to estimate the probability of
token wt+. This idea that we always give the model the correct history sequence to
predict the next word (rather than feeding the model its best case from the previous
time step) is called teacher forcing.
teacher forcing
The weights in the network are adjusted to minimize the average CE loss over
the training sequence via gradient descent. Fig. . illustrates this training regimen.
Weight Tying
Careful readers may have noticed that the input embedding matrix E and the ﬁnal
layer matrix V, which feeds the output softmax, are quite similar. The columns of E
represent the word embeddings for each word in the vocabulary learned during the
training process with the goal that words that have similar meaning and function will
have similar embeddings. And, since the length of these embeddings corresponds to
the size of the hidden layer dh, the shape of the embedding matrix E is dh ×|V|.
The ﬁnal layer matrix V provides a way to score the likelihood of each word in
the vocabulary given the evidence present in the ﬁnal hidden layer of the network
through the calculation of Vh. This results in dimensionality |V| × dh. That is, the
rows of V provide a second set of learned word embeddings that capture relevant
aspects of word meaning. This leads to an obvious question – is it even necessary
to have both? Weight tying is a method that dispenses with this redundancy and
weight typing
simply uses a single set of embeddings at the input and softmax layers. That is, we

CHAPTER
RNNS AND LSTMS
dispense with V and use E in both the start and end of the computation.
et = Ext
ht = g(Uht− +Wet)
yt = softmax(E⊺ht)
In addition to providing improved model perplexity, this approach signiﬁcantly re-
duces the number of parameters required for the model.
RNNs for other NLP tasks
Now that we’ve seen the basic RNN architecture, let’s consider how to apply it to
three types of NLP tasks: sequence classiﬁcation tasks like sentiment analysis and
topic classiﬁcation, sequence labeling tasks like part-of-speech tagging, and text
generation tasks, including with a new architecture called the encoder-decoder.
Sequence Labeling
In sequence labeling, the network’s task is to assign a label chosen from a small
ﬁxed set of labels to each element of a sequence, like the part-of-speech tagging and
named entity recognition tasks from Chapter . In an RNN approach to sequence
labeling, inputs are word embeddings and the outputs are tag probabilities generated
by a softmax layer over the given tagset, as illustrated in Fig. ..
NN
DT
VB
MD
NNP
Argmax
Softmax over
tags
Vh
RNN
Layer(s)
Embeddings
Words
Janet
will
back
the
bill
Figure .
Part-of-speech tagging as sequence labeling with a simple RNN. Pre-trained
word embeddings serve as inputs and a softmax layer provides a probability distribution over
the part-of-speech tags as output at each time step.
In this ﬁgure, the inputs at each time step are pretrained word embeddings cor-
responding to the input tokens. The RNN block is an abstraction that represents
an unrolled simple recurrent network consisting of an input layer, hidden layer, and
output layer at each time step, as well as the shared U, V and W weight matrices
that comprise the network. The outputs of the network at each time step represent
the distribution over the POS tagset generated by a softmax layer.

RNNS FOR OTHER NLP TASKS
To generate a sequence of tags for a given input, we run forward inference over
the input sequence and select the most likely tag from the softmax at each step. Since
we’re using a softmax layer to generate the probability distribution over the output
tagset at each time step, we will again employ the cross-entropy loss during training.
RNNs for Sequence Classiﬁcation
Another use of RNNs is to classify entire sequences rather than the tokens within
them. This is the set of tasks commonly called text classiﬁcation, like sentiment
analysis or spam detection, in which we classify a text into two or three classes
(like positive or negative), as well as classiﬁcation tasks with a large number of
categories, like document-level topic classiﬁcation, or message routing for customer
service applications.
To apply RNNs in this setting, we pass the text to be classiﬁed through the RNN
a word at a time generating a new hidden layer at each time step. We can then take
the hidden layer for the last token of the text, hn, to constitute a compressed repre-
sentation of the entire sequence. We can pass this representation hn to a feedforward
network that chooses a class via a softmax over the possible classes. Fig. . illus-
trates this approach.
Softmax
FFN
hn
RNN
xn
Figure .
Sequence classiﬁcation using a simple RNN combined with a feedforward net-
work. The ﬁnal hidden state from the RNN is used as the input to a feedforward network that
performs the classiﬁcation.
Note that in this approach we don’t need intermediate outputs for the words in
the sequence preceding the last element. Therefore, there are no loss terms associ-
ated with those elements. Instead, the loss function used to train the weights in the
network is based entirely on the ﬁnal text classiﬁcation task. The output from the
softmax output from the feedforward classiﬁer together with a cross-entropy loss
drives the training. The error signal from the classiﬁcation is backpropagated all the
way through the weights in the feedforward classiﬁer through, to its input, and then
through to the three sets of weights in the RNN as described earlier in Section ...
The training regimen that uses the loss from a downstream application to adjust the
weights all the way through the network is referred to as end-to-end training.
end-to-end
training
Another option, instead of using just the last token hn to represent the whole
sequence, is to use some sort of pooling function of all the hidden states hi for each
pooling
word i in the sequence. For example, we can create a representation that pools all

CHAPTER
RNNS AND LSTMS
the n hidden states by taking their element-wise mean:
hmean =
i=
hi
Or we can take the element-wise max; the element-wise max of a set of n vectors is
a new vector whose kth element is the max of the kth elements of all the n vectors.
Generation with RNN-Based Language Models
RNN-based language models can also be used to generate text. Text generation is
of enormous practical importance, part of tasks like question answering, machine
translation, text summarization, grammar correction, story generation, and conver-
sational dialogue; any task where a system needs to produce text, conditioned on
some other text. This use of a language model to generate text is one of the areas
in which the impact of neural language models on NLP has been the largest. Text
generation, along with image generation and code generation, constitute a new area
of AI that is often called generative AI.
Recall back in Chapter  we saw how to generate text from an n-gram language
model by adapting a sampling technique suggested at about the same time by Claude
Shannon (Shannon, ) and the psychologists George Miller and Jennifer Self-
ridge (Miller and Selfridge, ). We ﬁrst randomly sample a word to begin a
sequence based on its suitability as the start of a sequence. We then continue to
sample words conditioned on our previous choices until we reach a pre-determined
length, or an end of sequence token is generated.
Today, this approach of using a language model to incrementally generate words
by repeatedly sampling the next word conditioned on our previous choices is called
autoregressive generation or causal LM generation. The procedure is basically
autoregressive
generation
the same as that described on page , but adapted to a neural context:
Sample a word in the output from the softmax distribution that results from
using the beginning of sentence marker, <s>, as the ﬁrst input.
Use the word embedding for that ﬁrst word as the input to the network at the
next time step, and then sample the next word in the same fashion.
Continue generating until the end of sentence marker, </s>, is sampled or a
ﬁxed length limit is reached.
Technically an autoregressive model is a model that predicts a value at time t based
on a linear function of the previous values at times t −, t −, and so on. Although
language models are not linear (since they have many layers of non-linearities), we
loosely refer to this generation technique as autoregressive generation since the
word generated at each time step is conditioned on the word selected by the network
from the previous step. Fig. . illustrates this approach. In this ﬁgure, the details of
the RNN’s hidden layers and recurrent connections are hidden within the blue block.
This simple architecture underlies state-of-the-art approaches to applications
such as machine translation, summarization, and question answering. The key to
these approaches is to prime the generation component with an appropriate context.
That is, instead of simply using <s> to get things started we can provide a richer
task-appropriate context; for translation the context is the sentence in the source
language; for summarization it’s the long text we want to summarize.

STACKED AND BIDIRECTIONAL RNN ARCHITECTURES
Sampled Word
So
long
and
Softmax
RNN
Embedding
<s>
So
long
and
Input Word
Figure .
Autoregressive generation with an RNN-based neural language model.
Stacked and Bidirectional RNN architectures
Recurrent networks are quite ﬂexible. By combining the feedforward nature of un-
rolled computational graphs with vectors as common inputs and outputs, complex
networks can be treated as modules that can be combined in creative ways. This
section introduces two of the more common network architectures used in language
processing with RNNs.
Stacked RNNs
In our examples thus far, the inputs to our RNNs have consisted of sequences of
word or character embeddings (vectors) and the outputs have been vectors useful for
predicting words, tags or sequence labels. However, nothing prevents us from using
the entire sequence of outputs from one RNN as an input sequence to another one.
Stacked RNNs consist of multiple networks where the output of one layer serves as
Stacked RNNs
the input to a subsequent layer, as shown in Fig. ..
yn
RNN
RNN
RNN
xn
Figure .
Stacked recurrent networks. The output of a lower level serves as the input to
higher levels with the output of the last network serving as the ﬁnal output.

CHAPTER
RNNS AND LSTMS
Stacked RNNs generally outperform single-layer networks. One reason for this
success seems to be that the network induces representations at differing levels of
abstraction across layers. Just as the early stages of the human visual system detect
edges that are then used for ﬁnding larger regions and shapes, the initial layers of
stacked networks can induce representations that serve as useful abstractions for
further layers—representations that might prove difﬁcult to induce in a single RNN.
The optimal number of stacked RNNs is speciﬁc to each application and to each
training set. However, as the number of stacks is increased the training costs rise
quickly.
Bidirectional RNNs
The RNN uses information from the left (prior) context to make its predictions at
time t. But in many applications we have access to the entire input sequence; in
those cases we would like to use words from the context to the right of t. One way
to do this is to run two separate RNNs, one left-to-right, and one right-to-left, and
concatenate their representations.
In the left-to-right RNNs we’ve discussed so far, the hidden state at a given time
t represents everything the network knows about the sequence up to that point. The
state is a function of the inputs x,...,xt and represents the context of the network to
the left of the current time.
h f
t = RNNforward(x,...,xt)
This new notation h f
t simply corresponds to the normal hidden state at time t, repre-
senting everything the network has gleaned from the sequence so far.
To take advantage of context to the right of the current input, we can train an
RNN on a reversed input sequence. With this approach, the hidden state at time t
represents information about the sequence to the right of the current input:
hb
t = RNNbackward(xt,... xn)
Here, the hidden state hb
t represents all the information we have discerned about the
sequence from t to the end of the sequence.
A bidirectional RNN (Schuster and Paliwal, ) combines two independent
bidirectional
RNN
RNNs, one where the input is processed from the start to the end, and the other from
the end to the start. We then concatenate the two representations computed by the
networks into a single vector that captures both the left and right contexts of an input
at each point in time. Here we use either the semicolon ”;” or the equivalent symbol
⊕ to mean vector concatenation:
ht = [h f
t ; hb
t]
= h f
t ⊕hb
Fig. . illustrates such a bidirectional network that concatenates the outputs of
the forward and backward pass. Other simple ways to combine the forward and
backward contexts include element-wise addition or multiplication. The output at
each step in time thus captures information to the left and to the right of the current
input. In sequence labeling applications, these concatenated outputs can serve as the
basis for a local labeling decision.
Bidirectional RNNs have also proven to be quite effective for sequence classiﬁ-
cation. Recall from Fig. . that for sequence classiﬁcation we used the ﬁnal hidden

STACKED AND BIDIRECTIONAL RNN ARCHITECTURES
yn
concatenated
outputs
RNN
RNN
xn
Figure .
A bidirectional RNN. Separate models are trained in the forward and backward
directions, with the output of each model at each time point concatenated to represent the
bidirectional state at that time point.
state of the RNN as the input to a subsequent feedforward classiﬁer. A difﬁculty
with this approach is that the ﬁnal state naturally reﬂects more information about
the end of the sentence than its beginning. Bidirectional RNNs provide a simple
solution to this problem; as shown in Fig. ., we simply combine the ﬁnal hidden
states from the forward and backward passes (for example by concatenation) and
use that as input for follow-on processing.
Softmax
FFN
hn
RNN
RNN
hn
xn
Figure .
A bidirectional RNN for sequence classiﬁcation. The ﬁnal hidden units from
the forward and backward passes are combined to represent the entire sequence. This com-
bined representation serves as input to the subsequent classiﬁer.

CHAPTER
RNNS AND LSTMS
The LSTM
In practice, it is quite difﬁcult to train RNNs for tasks that require a network to make
use of information distant from the current point of processing. Despite having ac-
cess to the entire preceding sequence, the information encoded in hidden states tends
to be fairly local, more relevant to the most recent parts of the input sequence and
recent decisions. Yet distant information is critical to many language applications.
Consider the following example in the context of language modeling.
(.) The ﬂights the airline was canceling were full.
Assigning a high probability to was following airline is straightforward since airline
provides a strong local context for the singular agreement. However, assigning an
appropriate probability to were is quite difﬁcult, not only because the plural ﬂights
is quite distant, but also because the singular noun airline is closer in the intervening
context. Ideally, a network should be able to retain the distant information about
plural ﬂights until it is needed, while still processing the intermediate parts of the
sequence correctly.
One reason for the inability of RNNs to carry forward critical information is that
the hidden layers, and, by extension, the weights that determine the values in the hid-
den layer, are being asked to perform two tasks simultaneously: provide information
useful for the current decision, and updating and carrying forward information re-
quired for future decisions.
A second difﬁculty with training RNNs arises from the need to backpropagate
the error signal back through time. Recall from Section .. that the hidden layer at
time t contributes to the loss at the next time step since it takes part in that calcula-
tion. As a result, during the backward pass of training, the hidden layers are subject
to repeated multiplications, as determined by the length of the sequence. A frequent
result of this process is that the gradients are eventually driven to zero, a situation
called the vanishing gradients problem.
vanishing
gradients
To address these issues, more complex network architectures have been designed
to explicitly manage the task of maintaining relevant context over time, by enabling
the network to learn to forget information that is no longer needed and to remember
information required for decisions still to come.
The most commonly used such extension to RNNs is the long short-term mem-
ory (LSTM) network (Hochreiter and Schmidhuber, ). LSTMs divide the con-
long short-term
memory
text management problem into two subproblems: removing information no longer
needed from the context, and adding information likely to be needed for later de-
cision making. The key to solving both problems is to learn how to manage this
context rather than hard-coding a strategy into the architecture. LSTMs accomplish
this by ﬁrst adding an explicit context layer to the architecture (in addition to the
usual recurrent hidden layer), and through the use of specialized neural units that
make use of gates to control the ﬂow of information into and out of the units that
comprise the network layers. These gates are implemented through the use of addi-
tional weights that operate sequentially on the input, and previous hidden layer, and
previous context layers.
The gates in an LSTM share a common design pattern; each consists of a feed-
forward layer, followed by a sigmoid activation function, followed by a pointwise
multiplication with the layer being gated. The choice of the sigmoid as the activation
function arises from its tendency to push its outputs to either  or . Combining this
with a pointwise multiplication has an effect similar to that of a binary mask. Values

THE LSTM
in the layer being gated that align with values near  in the mask are passed through
nearly unchanged; values corresponding to lower values are essentially erased.
The ﬁrst gate we’ll consider is the forget gate. The purpose of this gate is
forget gate
to delete information from the context that is no longer needed. The forget gate
computes a weighted sum of the previous state’s hidden layer and the current in-
put and passes that through a sigmoid. This mask is then multiplied element-wise
by the context vector to remove the information from context that is no longer re-
quired. Element-wise multiplication of two vectors (represented by the operator ⊙,
and sometimes called the Hadamard product) is the vector of the same dimension
as the two input vectors, where each element i is the product of element i in the two
input vectors:
ft = σ(U f ht− +W f xt)
kt = ct− ⊙ft
The next task is to compute the actual information we need to extract from the previ-
ous hidden state and current inputs—the same basic computation we’ve been using
for all our recurrent networks.
gt = tanh(Ught− +Wgxt)
Next, we generate the mask for the add gate to select the information to add to the
add gate
current context.
it = σ(Uiht− +Wixt)
jt = gt ⊙it
Next, we add this to the modiﬁed context vector to get our new context vector.
ct = jt +kt
The ﬁnal gate we’ll use is the output gate which is used to decide what informa-
output gate
tion is required for the current hidden state (as opposed to what information needs
to be preserved for future decisions).
ot = σ(Uoht− +Woxt)
ht = ot ⊙tanh(ct)
Fig. . illustrates the complete computation for a single LSTM unit. Given the
appropriate weights for the various gates, an LSTM accepts as input the context
layer, and hidden layer from the previous time step, along with the current input
vector. It then generates updated context and hidden vectors as output.
It is the hidden state, ht, that provides the output for the LSTM at each time step.
This output can be used as the input to subsequent layers in a stacked RNN, or at the
ﬁnal layer of a network ht can be used to provide the ﬁnal output of the LSTM.
Gated Units, Layers and Networks
The neural units used in LSTMs are obviously much more complex than those used
in basic feedforward networks. Fortunately, this complexity is encapsulated within
the basic processing units, allowing us to maintain modularity and to easily exper-
iment with different architectures. To see this, consider Fig. . which illustrates
the inputs and outputs associated with each kind of unit.

CHAPTER
RNNS AND LSTMS
ct-
ct-
ct
ct
ht-
ht-
tanh
tanh
ht
ht
xt
xt
LSTM
Figure .
A single LSTM unit displayed as a computation graph. The inputs to each unit consists of the
current input, x, the previous hidden state, ht−, and the previous context, ct−. The outputs are a new hidden
state, ht and an updated context, ct.
ht
ht
ct
LSTM
Unit
xt
xt
ht-
ct-
ht-
(b)
(a)
(c)
Figure .
Basic neural units used in feedforward, simple recurrent networks (SRN), and
long short-term memory (LSTM).
At the far left, (a) is the basic feedforward unit where a single set of weights and
a single activation function determine its output, and when arranged in a layer there
are no connections among the units in the layer. Next, (b) represents the unit in a
simple recurrent network. Now there are two inputs and an additional set of weights
to go with it. However, there is still a single activation function and output.
The increased complexity of the LSTM units is encapsulated within the unit
itself. The only additional external complexity for the LSTM over the basic recurrent
unit (b) is the presence of the additional context vector as an input and output.
This modularity is key to the power and widespread applicability of LSTM units.
LSTM units (or other varieties, like GRUs) can be substituted into any of the network
architectures described in Section .. And, as with simple RNNs, multi-layered
networks making use of gated units can be unrolled into deep feedforward networks
and trained in the usual fashion with backpropagation. In practice, therefore, LSTMs
rather than RNNs have become the standard unit for any modern system that makes
use of recurrent networks.

SUMMARY: COMMON RNN NLP ARCHITECTURES
Summary: Common RNN NLP Architectures
We’ve now introduced the RNN, seen advanced components like stacking multiple
layers and using the LSTM version, and seen how the RNN can be applied to various
tasks. Let’s take a moment to summarize the architectures for these applications.
Fig. . shows the three architectures we’ve discussed so far: sequence la-
beling, sequence classiﬁcation, and language modeling. In sequence labeling (for
example for part of speech tagging), we train a model to produce a label for each
input word or token. In sequence classiﬁcation, for example for sentiment analysis,
we ignore the output for each token, and only take the value from the end of the
sequence (and similarly the model’s training signal comes from backpropagation
from that last token). In language modeling, we train the model to predict the next
word at each token step. In the next section we’ll introduce a fourth architecture, the
encoder-decoder.
yn
RNN
RNN
xn
xn
a) sequence labeling
b) sequence classification
ym
Decoder RNN
xt
Context
RNN
Encoder RNN
xt-
xn
c) language modeling
d) encoder-decoder
Figure .
Four architectures for NLP tasks. In sequence labeling (POS or named entity tagging) we map
each input token xi to an output token yi. In sequence classiﬁcation we map the entire input sequence to a single
class. In language modeling we output the next token conditioned on previous tokens. In the encoder model we
have two separate RNN models, one of which maps from an input sequence x to an intermediate representation
we call the context, and a second of which maps from the context to an output sequence y.
The Encoder-Decoder Model with RNNs
In this section we introduce a new model, the encoder-decoder model, which is used
when we are taking an input sequence and translating it to an output sequence that is
of a different length than the input, and doesn’t align with it in a word-to-word way.
Recall that in the sequence labeling task, we have two sequences, but they are the

CHAPTER
RNNS AND LSTMS
same length (for example in part-of-speech tagging each token gets an associated
tag), each input is associated with a speciﬁc output, and the labeling for that output
takes mostly local information. Thus deciding whether a word is a verb or a noun,
we look mostly at the word and the neighboring words.
By contrast, encoder-decoder models are used especially for tasks like machine
translation, where the input sequence and output sequence can have different lengths
and the mapping between a token in the input and a token in the output can be very
indirect (in some languages the verb appears at the beginning of the sentence; in
other languages at the end). We’ll introduce machine translation in detail in Chap-
ter , but for now we’ll just point out that the mapping for a sentence in English to
a sentence in Tagalog or Yoruba can have very different numbers of words, and the
words can be in a very different order.
Encoder-decoder networks, sometimes called sequence-to-sequence networks,
encoder-
decoder
are models capable of generating contextually appropriate, arbitrary length, output
sequences given an input sequence. Encoder-decoder networks have been applied
to a very wide range of applications including summarization, question answering,
and dialogue, but they are particularly popular for machine translation.
The key idea underlying these networks is the use of an encoder network that
takes an input sequence and creates a contextualized representation of it, often called
the context. This representation is then passed to a decoder which generates a task-
speciﬁc output sequence. Fig. . illustrates the architecture.
ym
Decoder
Context
Encoder
xn
Figure .
The encoder-decoder architecture. The context is a function of the hidden
representations of the input, and may be used by the decoder in a variety of ways.
Encoder-decoder networks consist of three conceptual components:
. An encoder that accepts an input sequence, x:n, and generates a correspond-
ing sequence of contextualized representations, h:n. LSTMs, convolutional
networks, and transformers can all be employed as encoders.
. A context vector, c, which is a function of h:n, and conveys the essence of
the input to the decoder.
. A decoder, which accepts c as input and generates an arbitrary length se-
quence of hidden states h:m, from which a corresponding sequence of output
states y:m, can be obtained. Just as with encoders, decoders can be realized
by any kind of sequence architecture.
In this section we’ll describe an encoder-decoder network based on a pair of
RNNs, but we’ll see in Chapter  how to apply them to transformers as well. We’ll
build up the equations for encoder-decoder models by starting with the conditional
RNN language model p(y), the probability of a sequence y.
Recall that in any language model, we can break down the probability as follows:
p(y) = p(y)p(y|y)p(y|y,y)... p(ym|y,...,ym−)

THE ENCODER-DECODER MODEL WITH RNNS
In RNN language modeling, at a particular time t, we pass the preﬁx of t −
tokens through the language model, using forward inference to produce a sequence
of hidden states, ending with the hidden state corresponding to the last word of
the preﬁx. We then use the ﬁnal hidden state of the preﬁx as our starting point to
generate the next token.
More formally, if g is an activation function like tanh or ReLU, a function of
the input at time t and the hidden state at time t − , and f is a softmax over the
set of possible vocabulary items, then at time t the output yt and hidden state ht are
computed as:
ht = g(ht−,xt)
yt = f(ht)
We only have to make one slight change to turn this language model with au-
toregressive generation into an encoder-decoder model that is a translation model
that can translate from a source text in one language to a target text in a second:
add a sentence separation marker at the end of the source text, and then simply
sentence
separation
concatenate the target text.
Let’s use <s> for our sentence separator token, and let’s think about translating
an English source text (“the green witch arrived”), to a Spanish sentence (“lleg´o
la bruja verde” (which can be glossed word-by-word as ‘arrived the witch green’).
We could also illustrate encoder-decoder models with a question-answer pair, or a
text-summarization pair.
Let’s use x to refer to the source text (in this case in English) plus the separator
token <s>, and y to refer to the target text y (in this case in Spanish). Then an
encoder-decoder model computes the probability p(y|x) as follows:
p(y|x) = p(y|x)p(y|y,x)p(y|y,y,x)... p(ym|y,...,ym−,x)
Fig. . shows the setup for a simpliﬁed version of the encoder-decoder model
(we’ll see the full model, which requires the new concept of attention, in the next
section).
Target Text
llegó
la
bruja
verde
</s>
softmax
(output of source is ignored)
hn
hidden
layer(s)
embedding
layer
the
green
witch
arrived
<s>
llegó
la
bruja
verde
Separator
Source Text
Figure .
Translating a single sentence (inference time) in the basic RNN version of encoder-decoder ap-
proach to machine translation. Source and target sentences are concatenated with a separator token in between,
and the decoder uses context information from the encoder’s last hidden state.
Fig. . shows an English source text (“the green witch arrived”), a sentence
separator token (<s>, and a Spanish target text (“lleg´o la bruja verde”). To trans-

CHAPTER
RNNS AND LSTMS
late a source text, we run it through the network performing forward inference to
generate hidden states until we get to the end of the source. Then we begin autore-
gressive generation, asking for a word in the context of the hidden layer from the
end of the source input as well as the end-of-sentence marker. Subsequent words
are conditioned on the previous hidden state and the embedding for the last word
generated.
Let’s formalize and generalize this model a bit in Fig. .. (To help keep things
straight, we’ll use the superscripts e and d where needed to distinguish the hidden
states of the encoder and the decoder.) The elements of the network on the left
process the input sequence x and comprise the encoder. While our simpliﬁed ﬁgure
shows only a single network layer for the encoder, stacked architectures are the
norm, where the output states from the top layer of the stack are taken as the ﬁnal
representation, and the encoder consists of stacked biLSTMs where the hidden states
from top layers from the forward and backward passes are concatenated to provide
the contextualized representations for each time step.
Decoder
</s>
(output is ignored during encoding)
softmax
hd
hd
hd
hd
he
he
hd
he
n = c = hd
hn
he
hidden
layer(s)
embedding
layer
xn
<s>
ym
Encoder
Figure .
A more formal version of translating a sentence at inference time in the basic RNN-based
encoder-decoder architecture. The ﬁnal hidden state of the encoder RNN, hen, serves as the context for the
decoder in its role as hd
in the decoder RNN, and is also made available to each decoder hidden state.
The entire purpose of the encoder is to generate a contextualized representation
of the input. This representation is embodied in the ﬁnal hidden state of the encoder,
he
n. This representation, also called c for context, is then passed to the decoder.
The simplest version of the decoder network would takes this state and use it
just to initialize the ﬁrst hidden state of the decoder; the ﬁrst decoder RNN cell
would use c as its prior hidden state hd
. The decoder would then autoregressively
generates a sequence of outputs, an element at a time, until an end-of-sequence
marker is generated. Each hidden state is conditioned on the previous hidden state
and the output generated in the previous state.
As Fig. . shows, we do something more complex: we make the context vector
c available to more than just the ﬁrst decoder hidden state, to ensure that the inﬂuence
of the context vector, c, doesn’t wane as the output sequence is generated. We do
this by adding c as a parameter to the computation of the current hidden state. using
the following equation:
hd
t = g(ˆyt−,hd
t−,c)
Now we’re ready to see the full equations for this version of the decoder in the basic
encoder-decoder model, with context available at each decoding timestep. Recall

THE ENCODER-DECODER MODEL WITH RNNS
that g is a stand-in for some ﬂavor of RNN and ˆyt− is the embedding for the output
sampled from the softmax at the previous step:
c = he
hd
= c
hd
= g(ˆyt−,hd
t−,c)
zt = f(hd
t )
yt = softmax(zt)
Finally, as shown earlier, the output y at each time step consists of a softmax com-
putation over the set of possible outputs (the vocabulary, in the case of language
modeling or MT). We compute the most likely output at each time step by taking the
argmax over the softmax output:
ˆyt = argmaxw∈VP(w|y...yt−,x)
Training the Encoder-Decoder Model
Encoder-decoder architectures are trained end-to-end. Each training example is a
tuple of paired strings, a source and a target. Concatenated with a separator token,
these source-target pairs can now serve as training data.
For MT, the training data typically consists of sets of sentences and their transla-
tions. These can be drawn from standard datasets of aligned sentence pairs, as we’ll
discuss in Section ... Once we have a training set, the training itself proceeds
as with any RNN-based language model. The network is given the source text and
then starting with the separator token is trained autoregressively to predict the next
word, as shown in Fig. ..
Decoder
llegó
la
bruja
verde
</s>
gold
answers
L =
L =
L =
L =
L =
Total loss is the average
cross-entropy loss per
-log P(y)
-log P(y)
-log P(y)
-log P(y)
-log P(y)
per-word
loss
target word:
softmax
hidden
layer(s)
embedding
layer
the
green
witch
arrived
<s>
llegó
la
bruja
verde
Encoder
Figure .
Training the basic RNN encoder-decoder approach to machine translation. Note that in the
decoder we usually don’t propagate the model’s softmax outputs ˆyt, but use teacher forcing to force each input
to the correct gold value for training. We compute the softmax output distribution over ˆy in the decoder in order
to compute the loss at each token, which can then be averaged to compute a loss for the sentence.

CHAPTER
RNNS AND LSTMS
Note the differences between training (Fig. .) and inference (Fig. .) with
respect to the outputs at each time step. The decoder during inference uses its own
estimated output ˆyt as the input for the next time step xt+. Thus the decoder will
tend to deviate more and more from the gold target sentence as it keeps generating
more tokens. In training, therefore, it is more common to use teacher forcing in the
teacher forcing
decoder. Teacher forcing means that we force the system to use the gold target token
from training as the next input xt+, rather than allowing it to rely on the (possibly
erroneous) decoder output ˆyt. This speeds up training.
Attention
The simplicity of the encoder-decoder model is its clean separation of the encoder—
which builds a representation of the source text—from the decoder, which uses this
context to generate a target text. In the model as we’ve described it so far, this
context vector is hn, the hidden state of the last (nth) time step of the source text.
This ﬁnal hidden state is thus acting as a bottleneck: it must represent absolutely
everything about the meaning of the source text, since the only thing the decoder
knows about the source text is what’s in this context vector (Fig. .). Information
at the beginning of the sentence, especially for long sentences, may not be equally
well represented in the context vector.
bottleneck
Encoder
Decoder
bottleneck
Figure .
Requiring the context c to be only the encoder’s ﬁnal hidden state forces all the
information from the entire source sentence to pass through this representational bottleneck.
The attention mechanism is a solution to the bottleneck problem, a way of
attention
mechanism
allowing the decoder to get information from all the hidden states of the encoder,
not just the last hidden state.
In the attention mechanism, as in the vanilla encoder-decoder model, the context
vector c is a single vector that is a function of the hidden states of the encoder, that
is, c = f(he
...he
n). Because the number of hidden states varies with the size of
the input, we can’t use the entire set of encoder hidden state vectors directly as the
context for the decoder.
The idea of attention is instead to create the single ﬁxed-length vector c by taking
a weighted sum of all the encoder hidden states. The weights focus on (‘attend
to’) a particular part of the source text that is relevant for the token the decoder is
currently producing. Attention thus replaces the static context vector with one that
is dynamically derived from the encoder hidden states, different for each token in
decoding.
This context vector, ci, is generated anew with each decoding step i and takes
all of the encoder hidden states into account in its derivation. We then make this
context available during decoding by conditioning the computation of the current
decoder hidden state on it (along with the prior hidden state and the previous output
generated by the decoder), as we see in this equation (and Fig. .):
hd
= g(ˆyi−,hd
i−,ci)

ATTENTION
yi
hd
hd
hd
ci
Figure .
The attention mechanism allows each hidden state of the decoder to see a
different, dynamic, context, which is a function of all the encoder hidden states.
The ﬁrst step in computing ci is to compute how much to focus on each encoder
state, how relevant each encoder state is to the decoder state captured in hd
i−. We
capture relevance by computing— at each state i during decoding—a score(hd
i−,he
j)
for each encoder state j.
The simplest such score, called dot-product attention, implements relevance as
dot-product
attention
similarity: measuring how similar the decoder hidden state is to an encoder hidden
state, by computing the dot product between them:
score(hd
i−,he
j) = hd
i−  he
The score that results from this dot product is a scalar that reﬂects the degree of
similarity between the two vectors. The vector of these scores across all the encoder
hidden states gives us the relevance of each encoder state to the current step of the
decoder.
To make use of these scores, we’ll normalize them with a softmax to create a
vector of weights, αi j, that tells us the proportional relevance of each encoder hidden
state j to the prior hidden decoder state, hd
i−.
αij = softmax(score(hd
i−,he
j))
exp(score(hd
i−,he
j)
k exp(score(hd
i−,he
k))
Finally, given the distribution in α, we can compute a ﬁxed-length context vector for
the current decoder state by taking a weighted average over all the encoder hidden
states.
αij he
ci =
With this, we ﬁnally have a ﬁxed-length context vector that takes into account
information from the entire encoder state that is dynamically updated to reﬂect the
needs of the decoder at each step of decoding. Fig. . illustrates an encoder-
decoder network with attention, focusing on the computation of one context vector
ci.
It’s also possible to create more sophisticated scoring functions for attention
models. Instead of simple dot product attention, we can get a more powerful function
that computes the relevance of each encoder hidden state to the decoder hidden state
by parameterizing the score with its own set of weights, Ws.
score(hd
i−,he
j) = hd
t−Wshe
The weights Ws, which are then trained during normal end-to-end training, give the
network the ability to learn which aspects of similarity between the decoder and

CHAPTER
RNNS AND LSTMS
Decoder
↵ijhe
ci
yi
yi+
<latexit sha_base="TNdNmv/RIlrhPaLgQyjQLqyBA=">ACAnicdVDLSsNAFJUVvqCtxMgEVyHpIVdYLCvYBTQyTbSdvJgZiKUNzKcKOLWrDnzhpKjogQuHc+lnvmFEhTfNDytryudcLGtbzvlLRAnHpIkjFvGOjwRhNCRNSUjnZgTFPiMtPxReabwkXNAqvSQmboAGIeTjKSPAEUngjVIHsXiIvJSOpnBQzRNOLpmGaVbtqQdOwLbtkqYYpVoOWsjIUwQINTehFOAhJKzJAQXcuMpZsiLilmZFpwEkFihMdoQLqKhigwknLzhsVJsBxVaGEM/XRIoCISaBrzoDJIfiteJfndRPZPZSGcSJiOeL+gmDMoJZHrBHOcGSTRBmFNKRDxBGWKrWCuHrU/g/aZUMyzbKVVi/XwRxcgiNwAixQAVwCRqgCTCAw/gCTxrqjqKzltzmJmH/yAvYJSymYCA=</latexit>X
attention
weights
↵ij
<latexit sha_base="ysmGdpwrGrBnuSR+pgJXYdo=">AB/nicdVDJSgNBEOJWzbqHjyhgELYeJyQBLEvHiOYBbIMPTmTYCQhgC/oXDpTu+TdFkFHxQquiqpbcCYVQhGbmlZXUtvYNzajFoyTgWhTRLzWHRcLClnEWqpjtJILiOWYupjgrJuhGjRPaD/EwYjjWGnJMQ+CgedkNSaIgXqMKDOrWMWUQnNAFGpYtfsakUTZNtWGUFrYRXBAgHfOMUlDGinCsZRdCyWqnGhGOFUuilkiaYjPCQdjWNcEhlK/yetsJVKdnXWLYhFHhyCIACLFAFdXAFGqAJCMjAgCzaWiGK/zpyxmNkHPCfQICDpWK</latexit>PudPHWvGgHwtdkYIzftEhkMpxGrOOsAvnbmp/edU+bV+xqIkVTQiV+yqGKTQLDFBieJjTARTNKSYAFJkonVtAhfHhd
i−  he
hd
i-
he
he
he
hd
he
ci-
hidden
layer(s)
ci
xn
yi-
yi
Encoder
Figure .
A sketch of the encoder-decoder network with attention, focusing on the computation of ci. The
context value ci is one of the inputs to the computation of hd
i . It is computed by taking the weighted sum of all
the encoder hidden states, each weighted by their dot product with the prior decoder hidden state hd
i−.
encoder states are important to the current application. This bilinear model also
allows the encoder and decoder to use different dimensional vectors, whereas the
simple dot-product attention requires that the encoder and decoder hidden states
have the same dimensionality.
We’ll return to the concept of attention when we deﬁned the transformer archi-
tecture in Chapter , which is based on a slight modiﬁcation of attention called
self-attention.
Summary
This chapter has introduced the concepts of recurrent neural networks and how they
can be applied to language problems. Here’s a summary of the main points that we
covered:
In simple Recurrent Neural Networks sequences are processed one element at
a time, with the output of each neural unit at time t based both on the current
input at t and the hidden layer from time t −.
RNNs can be trained with a straightforward extension of the backpropagation
algorithm, known as backpropagation through time (BPTT).
Simple recurrent networks fail on long inputs because of problems like van-
ishing gradients; instead modern systems use more complex gated architec-
tures such as LSTMs that explicitly decide what to remember and forget in
their hidden and context layers.
Common language-based applications for RNNs include:
– Probabilistic language modeling: assigning a probability to a sequence,
or to the next element of a sequence given the preceding words.
– Auto-regressive generation using a trained language model.
– Sequence labeling like part-of-speech tagging, where each element of a
sequence is assigned a label.

BIBLIOGRAPHICAL AND HISTORICAL NOTES
– Sequence classiﬁcation, where an entire text is assigned to a category, as
in spam detection, sentiment analysis or topic classiﬁcation.
– Encoder-decoder architectures, where an input is mapped to an output
of different length and alignment.
Bibliographical and Historical Notes
Inﬂuential investigations of RNNs were conducted in the context of the Parallel Dis-
tributed Processing (PDP) group at UC San Diego in the ’s. Much of this work
was directed at human cognitive modeling rather than practical NLP applications
(Rumelhart and McClelland c, McClelland and Rumelhart ). Models using
recurrence at the hidden layer in a feedforward network (Elman networks) were in-
troduced by Elman (). Similar architectures were investigated by Jordan ()
with a recurrence from the output layer, and Mathis and Mozer () with the
addition of a recurrent context layer prior to the hidden layer. The possibility of
unrolling a recurrent network into an equivalent feedforward network is discussed
in (Rumelhart and McClelland, c).
In parallel with work in cognitive modeling, RNNs were investigated extensively
in the continuous domain in the signal processing and speech communities (Giles
et al. , Robinson et al. ). Schuster and Paliwal () introduced bidirec-
tional RNNs and described results on the TIMIT phoneme transcription task.
While theoretically interesting, the difﬁculty with training RNNs and manag-
ing context over long sequences impeded progress on practical applications. This
situation changed with the introduction of LSTMs in Hochreiter and Schmidhuber
() and Gers et al. (). Impressive performance gains were demonstrated
on tasks at the boundary of signal processing and language processing including
phoneme recognition (Graves and Schmidhuber, ), handwriting recognition
(Graves et al., ) and most signiﬁcantly speech recognition (Graves et al., ).
Interest in applying neural networks to practical NLP problems surged with the
work of Collobert and Weston () and Collobert et al. (). These efforts made
use of learned word embeddings, convolutional networks, and end-to-end training.
They demonstrated near state-of-the-art performance on a number of standard shared
tasks including part-of-speech tagging, chunking, named entity recognition and se-
mantic role labeling without the use of hand-engineered features.
Approaches that married LSTMs with pretrained collections of word-embeddings
based on wordvec (Mikolov et al., a) and GloVe (Pennington et al., )
quickly came to dominate many common tasks: part-of-speech tagging (Ling et al.,
), syntactic chunking (Søgaard and Goldberg, ), named entity recognition
(Chiu and Nichols, ; Ma and Hovy, ), opinion mining (Irsoy and Cardie,
), semantic role labeling (Zhou and Xu, a) and AMR parsing (Foland and
Martin, ). As with the earlier surge of progress involving statistical machine
learning, these advances were made possible by the availability of training data pro-
vided by CONLL, SemEval, and other shared tasks, as well as shared resources such
as Ontonotes (Pradhan et al., b), and PropBank (Palmer et al., ).
The modern neural encoder-decoder approach was pioneered by Kalchbrenner
and Blunsom (), who used a CNN encoder and an RNN decoder. Cho et al.
() (who coined the name “encoder-decoder”) and Sutskever et al. () then
showed how to use extended RNNs for both encoder and decoder. The idea that a

CHAPTER
RNNS AND LSTMS
generative decoder should take as input a soft weighting of the inputs, the central
idea of attention, was ﬁrst developed by Graves () in the context of handwriting
recognition. Bahdanau et al. () extended the idea, named it “attention” and
applied it to MT.

Transformers
and
Large Language Models
CHAPTER
“How much do we know at any time? Much more, or so I believe, than we
know we know.”
Agatha Christie, The Moving Finger
Fluent speakers of a language bring an enormous amount of knowledge to bear dur-
ing comprehension and production. This knowledge is embodied in many forms,
perhaps most obviously in the vocabulary, the rich representations we have of words
and their meanings and usage. This makes the vocabulary a useful lens to explore
the acquisition of knowledge from text, by both people and machines.
Estimates of the size of adult vocabularies vary widely both within and across
languages. For example, estimates of the vocabulary size of young adult speakers of
American English range from , to , depending on the resources used
to make the estimate and the deﬁnition of what it means to know a word. What
is agreed upon is that the vast majority of words that mature speakers use in their
day-to-day interactions are acquired early in life through spoken interactions with
care givers and peers, usually well before the start of formal schooling. This active
vocabulary is extremely limited compared to the size of the adult vocabulary (usually
on the order of  words for young speakers) and is quite stable, with very few
additional words learned via casual conversation beyond this early stage. Obviously,
this leaves a very large number of words to be acquired by other means.
A simple consequence of these facts is that children have to learn about  to
words a day, every single day, to arrive at observed vocabulary levels by the time
they are  years of age. And indeed empirical estimates of vocabulary growth in
late elementary through high school are consistent with this rate. How do children
achieve this rate of vocabulary growth? Most of this growth is not happening through
direct vocabulary instruction in school, which is not deployed at the rate that would
be required to result in sufﬁcient vocabulary growth.
The most likely explanation is that the bulk of this knowledge acquisition hap-
pens as a by-product of reading, as part of the rich processing and reasoning that we
perform when we read. Research into the average amount of time children spend
reading, and the lexical diversity of the texts they read, indicate that it is possible
to achieve the desired rate. But the mechanism behind this rate of learning must
be remarkable indeed, since at some points during learning the rate of vocabulary
growth exceeds the rate at which new words are appearing to the learner!
Many of these facts have motivated approaches to word learning based on the
distributional hypothesis, introduced in Chapter . This is the idea that something
about what we’re loosely calling word meanings can be learned even without any
grounding in the real world, solely based on the content of the texts we encounter
over our lives. This knowledge is based on the complex association of words with
the words they co-occur with (and with the words that those words occur with).
The crucial insight of the distributional hypothesis is that the knowledge that we
acquire through this process can be brought to bear long after its initial acquisition.

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
Of course, adding grounding from vision or from real-world interaction can help
build even more powerful models, but even text alone is remarkably useful.
In this chapter we formalize this idea of pretraining—learning knowledge about
pretraining
language and the world from vast amounts of text—and call the resulting pretrained
language models large language models. Large language models exhibit remark-
able performance on all sorts of natural language tasks because of the knowledge
they learn in pretraining, and they will play a role throughout the rest of this book.
They have been especially transformative for tasks where we need to produce text,
like summarization, machine translation, question answering, or chatbots.
The standard architecture for building large language models is the transformer.
transformer
We thus begin this chapter by introducing this architecture in detail. The transformer
makes use of a novel mechanism called self-attention, which developed out of the
idea of attention that was introduced for RNNs in Chapter . Self-attention can
be thought of a way to build contextual representations of a word’s meaning that
integrate information from surrounding words, helping the model learn how words
relate to each other over large spans of text.
We’ll then see how to apply the transformer to language modeling, in a setting of-
ten called causal or autoregressive language models, in which we iteratively predict
words left-to-right from earlier words. These language models, like the feedforward
and RNN language models we have already seen, are thus self-trained: given a large
corpus of text, we iteratively teach the model to guess the next word in the text from
the prior words. In addition to training, we’ll introduce algorithms for generating
texts, including important methods like greedy decoding, beam search, and sam-
pling. And we’ll talk about the components of popular large language models like
the GPT family.
Finally, we’ll see the great power of language models: almost any NLP task
can be modeled as word prediction, if we think about it in the right way. We’ll
work through an example of using large language models to solve one NLP task
of summarization (generating a short text that summarizes some larger document).
The use of a large language model to generate text is one of the areas in which the
impact of the last decade of neural algorithms for NLP has been the largest. Indeed,
text generation, along with image generation and code generation, constitute a new
area of AI that is often called generative AI.
We’ll save three more areas of large language models for the next three chapters;
Chapter  will introduce the bidirectional transformer encoder and the method of
masked language modeling, used for the popular BERT family of models. Chap-
ter  will introduce the most powerful way to interact with large language models:
prompting them to perform other NLP tasks by simply giving directions or instruc-
tions in natural language to a transformer that is pretrained on language modeling.
And Chapter  will introduce the use of the encoder-decoder architecture for trans-
formers in the context of machine translation.
The Transformer: A Self-Attention Network
In this section we introduce the architecture of the transformer, the algorithm that
transformer
underlies most modern NLP systems. When used for causal language modeling, the
input to a transformer is a sequence of words, and the output is a prediction for what
word comes next, as well as a sequence of contextual embedding that represents
the contextual meaning of each of the input words. Like the LSTMs of Chapter ,

THE TRANSFORMER: A SELF-ATTENTION NETWORK
transformers are a neural architecture that can handle distant information. But unlike
LSTMs, transformers are not based on recurrent connections (which can be hard to
parallelize), which means that transformers can be more efﬁcient to implement at
scale.
Transformers are made up of stacks of transformer blocks, each of which is a
multilayer network that maps sequences of input vectors (x,...,xn) to sequences of
output vectors (z,...,zn) of the same length. These blocks are made by combin-
ing simple linear layers, feedforward networks, and self-attention layers, the key
self-attention
innovation of transformers. Self-attention allows a network to directly extract and
use information from arbitrarily large contexts. We’ll start by describing how self-
attention works and then return to how it ﬁts into larger transformer blocks. Finally,
we’ll describe how to use the transformer block together with some input and output
mechanisms as a language model, to predict upcoming words from prior words in
the context.
Transformers: the intuition
The intuition of a transformer is that across a series of layers, we build up richer and
richer contextualized representations of the meanings of input words or tokens (we
will refer to the input as a sequence of words for convenience, although technically
the input is ﬁrst tokenized by an algorithm like BPE, so it is a series of tokens rather
than words). At each layer of a transformer, to compute the representation of a
word i we combine information from the representation of i at the previous layer
with information from the representations of the neighboring words. The goal is to
produce a contextualized representation for each word at each position. We can think
of these representations as a contextualized version of the static vectors we saw in
Chapter , which each represented the meaning of a word type. By contrast, our goal
in transformers is to produce a contextualized version, something that represents
what this word means in the particular context in which it occurs.
We thus need a mechanism that tells us how to weigh and combine the represen-
tations of the different words from the context at the prior level in order to compute
our representation at this layer. This mechanism must be able to look broadly in the
context, since words have rich linguistic relationships with words that can be many
sentences away. Even within the sentence, words have important linguistic relation-
ships with contextual words. Consider these examples, each exhibiting linguistic
relationships that we’ll discuss in more depth in later chapters:
(.) The keys to the cabinet are on the table.
(.) The chicken crossed the road because it wanted to get to the other side.
(.) I walked along the pond, and noticed that one of the trees along the bank
had fallen into the water after the storm.
In (.), the phrase The keys is the subject of the sentence, and in English and
many languages, must agree in grammatical number with the verb are; in this case
both are plural. In English we can’t use a singular verb like is with a plural sub-
ject like keys; we’ll discuss agreement more in Chapter . In (.), the pronoun
it corefers to the chicken; it’s the chicken that wants to get to the other side. We’ll
discuss coreference more in Chapter . In (.), the way we know that bank refers
to the side of a pond or river and not a ﬁnancial institution is from the context, in-
cluding words like pond and water. We’ll discuss word senses more in Chapter .
These helpful contextual words can be quite far way in the sentence or paragraph,

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
so we need a mechanism that can look broadly in the context to help compute rep-
resentations for words.
Self-attention is just such a mechanism: it allows us to look broadly in the con-
text and tells us how to integrate the representation from words in that context from
layer k − to build the representation for words in layer k.
Layer
animal
didn’t
cross
the
street
because
it
was
too
tired
The
self-attention distribution
Layer
The
cross
the
street
too
tired
animal
didn’t
because
it
was
Figure .
The self-attention weight distribution α that is part of the computation of the
representation for the word it at layer . In computing the representation for it, we attend
differently to the various words at layer , with darker shades indicating higher self-attention
values. Note that the transformer is attending highly to animal, a sensible result, since in this
example it corefers with the animal, and so we’d like the representation for it to draw on the
representation for animal. Figure simpliﬁed from (Uszkoreit, ).
Fig. . shows an schematic example simpliﬁed from a real transformer (Uszko-
reit, ). Here we want to compute a contextual representation for the word it, at
layer  of the transformer, and we’d like that representation to draw on the represen-
tations of all the prior words, from layer . The ﬁgure uses color to represent the
attention distribution over the contextual words: the word animal has a high atten-
tion weight, meaning that as we are computing the representation for it, we will draw
most heavily on the representation for animal. This will be useful for the model to
build a representation that has the correct meaning for it, which indeed is corefer-
ent here with the word animal. (We say that a pronoun like it is coreferent with a
noun like animal if they both refer to the same thing; we’ll return to coreference in
Chapter .)
Causal or backward-looking self-attention
The concept of context can be used in two ways in self-attention. In causal, or
backward looking self-attention, the context is any of the prior words. In general
bidirectional self-attention, the context can include future words. In this chapter
we focus on causal, backward looking self-attention; we’ll introduce bidirectional
self-attention in Chapter .
Fig. . thus illustrates the ﬂow of information in a single causal, or backward
looking, self-attention layer. As with the overall transformer, a self-attention layer
maps input sequences (x,...,xn) to output sequences of the same length (a,...,an).
When processing each item in the input, the model has access to all of the inputs
up to and including the one under consideration, but no access to information about
inputs beyond the current one. In addition, the computation performed for each item
is independent of all the other computations. The ﬁrst point ensures that we can use
this approach to create language models and use them for autoregressive generation,
and the second point means that we can easily parallelize both forward inference
and training of such models.

THE TRANSFORMER: A SELF-ATTENTION NETWORK
Self-Attention
Layer
Figure .
Information ﬂow in a causal (or masked) self-attention model. In processing
each element of the sequence, the model attends to all the inputs up to, and including, the
current one. Unlike RNNs, the computations at each time step are independent of all the
other steps and therefore can be performed in parallel.
Self-attention more formally
We’ve given the intuition of self-attention (as a way to compute representations of a
word at a given layer by integrating information from words at the previous layer)
and we’ve deﬁned context as all the prior words in the input. Let’s now introduce
the self-attention computation itself.
The core intuition of attention is the idea of comparing an item of interest to a
collection of other items in a way that reveals their relevance in the current context.
In the case of self-attention for language, the set of comparisons are to other words
(or tokens) within a given sequence. The result of these comparisons is then used to
compute an output sequence for the current input sequence. For example, returning
to Fig. ., the computation of a is based on a set of comparisons between the
input x and its preceding elements x and x, and to x itself.
How shall we compare words to other words? Since our representations for
words are vectors, we’ll make use of our old friend the dot product that we used
for computing word similarity in Chapter , and also played a role in attention in
Chapter . Let’s refer to the result of this comparison between words i and j as a
score (we’ll be updating this equation to add attention to the computation of this
score):
Verson :
score(xi,xj) = xi x j
The result of a dot product is a scalar value ranging from −∞ to ∞, the larger
the value the more similar the vectors that are being compared. Continuing with our
example, the ﬁrst step in computing y would be to compute three scores: x  x,
x x and x x. Then to make effective use of these scores, we’ll normalize them
with a softmax to create a vector of weights, αij, that indicates the proportional
relevance of each input to the input element i that is the current focus of attention.
αi j = softmax(score(xi,xj)) ∀ j ≤ i
exp(score(xi,xj))
Pi
k= exp(score(xi,xk))
∀j ≤ i
Of course, the softmax weight will likely be highest for the current focus element
i, since vecxi is very similar to itself, resulting in a high dot product. But other
context words may also be similar to i, and the softmax will also assign some weight
to those words.
Given the proportional scores in α, we generate an output value ai by summing

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
the inputs seen so far, each weighted by its α value.
j≤i
αijx j
ai =
The steps embodied in Equations . through . represent the core of an
attention-based approach: a set of comparisons to relevant items in some context,
a normalization of those scores to provide a probability distribution, followed by a
weighted sum using this distribution. The output a is the result of this straightfor-
ward computation over the inputs.
This kind of simple attention can be useful, and indeed we saw in Chapter
how to use this simple idea of attention for LSTM-based encoder-decoder models
for machine translation. But transformers allow us to create a more sophisticated
way of representing how words can contribute to the representation of longer inputs.
Consider the three different roles that each input embedding plays during the course
of the attention process.
As the current focus of attention when being compared to all of the other
preceding inputs. We’ll refer to this role as a query.
query
In its role as a preceding input being compared to the current focus of atten-
tion. We’ll refer to this role as a key.
key
And ﬁnally, as a value used to compute the output for the current focus of
value
attention.
To capture these three different roles, transformers introduce weight matrices
WQ, WK, and WV. These weights will be used to project each input vector xi into
a representation of its role as a key, query, or value.
qi = xiWQ; ki = xiWK; vi = xiWV
The inputs x and outputs y of transformers, as well as the intermediate vectors after
the various layers like the attention output vector a, all have the same dimensionality
× d. We’ll have a dimension dk for the key and query vectors, and a separate
dimension dv for the value vectors. In the original transformer work (Vaswani et al.,
), d was , dk and dv were both . The shapes of the transform matrices are
then WQ ∈ Rd×dk, WK ∈ Rd×dk, and WV ∈ Rd×dv.
Given these projections, the score between a current focus of attention, xi, and
an element in the preceding context, xj, consists of a dot product between its query
vector qi and the preceding element’s key vectors k j. This dot product has the right
shape since both the query and the key are of dimensionality  × dk. Let’s update
our previous comparison calculation to reﬂect this, replacing Eq. . with Eq. .:
Verson :
score(xi,x j) = qi k j
The ensuing softmax calculation resulting in αi, j remains the same, but the output
calculation for ai is now based on a weighted sum over the value vectors v.
j≤i
αijvj
ai =
Again, the softmax weight αij will likely be highest for the current focus element
i, and so the value for yi will be most inﬂuenced by vi. But the model will also pay
attention to other contextual words if they are similar to i, allowing their values to

THE TRANSFORMER: A SELF-ATTENTION NETWORK
Output of self-attention
. Sum the weighted
value vectors
. Weigh each value vector
. Turn into weights via softmax
dk
dk
dk
. Divide score by dk
. Compare x’s query with
the keys for x, x, and x
Wk
Wk
Wk
. Generate
Wq
Wq
Wq
key, query, value
Wv
Wv
Wv
vectors
Figure .
Calculating the value of a, the third element of a sequence using causal (left-
to-right) self-attention.
also inﬂuence the ﬁnal value of vj. Context words that are not similar to i will have
their values downweighted and won’t contribute to the ﬁnal value.
There is one ﬁnal part of the self-attention model. The result of a dot product
can be an arbitrarily large (positive or negative) value. Exponentiating large values
can lead to numerical issues and to an effective loss of gradients during training. To
avoid this, we scale down the result of the dot product, by dividing it by a factor
related to the size of the embeddings. A typical approach is to divide by the square
root of the dimensionality of the query and key vectors (dk), leading us to update
our scoring function one more time, replacing Eq. . and Eq. . with Eq. ..
Here’s a ﬁnal set of equations for computing self-attention for a single self-attention
output vector ai from a single input vector xi, illustrated in Fig. . for the case of
calculating the value of the third output a in a sequence.
qi = xiWQ;ki = xiWK;vi = xiWV
Final verson:
score(xi,xj) = qi k j
√dk
αij = softmax(score(xi,xj)) ∀j ≤ i
j≤i
αijvj
ai =
Parallelizing self-attention using a single matrix X
This description of the self-attention process has been from the perspective of com-
puting a single output at a single time step i. However, since each output, yi, is
computed independently, this entire process can be parallelized, taking advantage of

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
efﬁcient matrix multiplication routines by packing the input embeddings of the N
tokens of the input sequence into a single matrix X ∈ RN×d. That is, each row of X
is the embedding of one token of the input. Transformers for large language models
can have an input length N = , , or  tokens, so X has between K and
K rows, each of the dimensionality of the embedding d.
We then multiply X by the key, query, and value matrices (all of dimensionality
d ×d) to produce matrices Q ∈ RN×d, K ∈ RN×d, and V ∈ RN×d, containing all the
key, query, and value vectors:
Q = XWQ; K = XWK; V = XWV
Given these matrices we can compute all the requisite query-key comparisons simul-
taneously by multiplying Q and K⊺ in a single matrix multiplication (the product is
of shape N × N; Fig. . shows a visualization). Taking this one step further, we
can scale these scores, take the softmax, and then multiply the result by V resulting
in a matrix of shape N ×d: a vector embedding representation for each token in the
input. We’ve reduced the entire self-attention step for an entire sequence of N tokens
to the following computation:
√dk

A = SelfAttention(Q,K,V) = softmax
QK⊺
Masking out the future
The self-attention computation as we’ve described it has a problem: the calculation
in QK⊺ results in a score for each query value to every key value, including those that
follow the query. This is inappropriate in the setting of language modeling: guessing
the next word is pretty simple if you already know it! To ﬁx this, the elements in the
upper-triangular portion of the matrix are zeroed out (set to −∞), thus eliminating
any knowledge of words that follow in the sequence. Fig. . shows this masked
QK⊺ matrix. (we’ll see in Chapter  how to make use of words in the future for
tasks that need it).
qk
qk qk
qk qk qk
qk qk qk qk
qk qk qk qk qk
Figure .
The N × N QK⊺ matrix showing the qi  kj values, with the upper-triangle
portion of the comparisons matrix zeroed out (set to −∞, which the softmax will turn to
zero).
Fig. . also makes it clear that attention is quadratic in the length of the input,
since at each layer we need to compute dot products between each pair of tokens in
the input. This makes it expensive for the input to a transformer to consist of very
long documents (like entire novels). Nonetheless modern large language models
manage to use quite long contexts of up to  tokens.

MULTIHEAD ATTENTION
Multihead Attention
Transformers actually compute a more complex kind of attention than the single
self-attention calculation we’ve seen so far. This is because the different words in a
sentence can relate to each other in many different ways simultaneously. For exam-
ple, distinct syntactic, semantic, and discourse relationships can hold between verbs
and their arguments in a sentence. It would be difﬁcult for a single self-attention
model to learn to capture all of the different kinds of parallel relations among its in-
puts. Transformers address this issue with multihead self-attention layers. These
multihead
self-attention
layers
are sets of self-attention layers, called heads, that reside in parallel layers at the same
depth in a model, each with its own set of parameters. By using these distinct sets of
parameters, each head can learn different aspects of the relationships among inputs
at the same level of abstraction.
To implement this notion, each head, i, in a self-attention layer is provided with
its own set of key, query and value matrices: WK
i , WQ
i and WV
i . These are used
to project the inputs into separate key, value, and query embeddings separately for
each head, with the rest of the self-attention computation remaining unchanged.
In multi-head attention, as with self-attention, the model dimension d is still used
for the input and output, the key and query embeddings have dimensionality dk, and
the value embeddings are of dimensionality dv (again, in the original transformer
paper dk = dv = , h = , and d = ). Thus for each head i, we have weight
layers WQ
i ∈ Rd×dk, WK
i ∈ Rd×dk, and WV
i ∈ Rd×dv, and these get multiplied by
the inputs packed into X to produce Q ∈ RN×dk, K ∈ RN×dk, and V ∈ RN×dv. The
output of each of the h heads is of shape N ×dv, and so the output of the multi-head
layer with h heads consists of h matrices of shape N × dv. To make use of these
matrices in further processing, they are concatenated to produce a single output with
dimensionality N ×hdv. Finally, we use yet another linear projection WO ∈ Rhdv×d,
that reshape it to the original output dimension for each token. Multiplying the
concatenated N ×hdv matrix output by WO ∈ Rhdv×d yields the self-attention output
A of shape [N × d], suitable to be passed through residual connections and layer
norm.
Q = XWQ
i ; K = XWK
i ; V = XWV
headi = SelfAttention(Q,K,V)
A = MultiHeadAttention(X) = (head ⊕head...⊕headh)WO
Fig. . illustrates this approach with  self-attention heads. In general in trans-
formers, the multihead layer is used instead of a self-attention layer.
Transformer Blocks
The self-attention calculation lies at the core of what’s called a transformer block,
which, in addition to the self-attention layer, includes three other kinds of layers: ()
a feedforward layer, () residual connections, and () normalizing layers (colloqui-
ally called “layer norm”).
Fig. . illustrates a standard transformer block consisting of a single attention
layer followed by a position-wise feedforward layer with residual connections and
layer normalizations following each.

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
aN
[N x d]
Project from
WO  [hdv x d]
hdv to d
head output val
head output val
head output val
head output val
Concatenate
[N x dv]
[N x dv]
[N x dv]
[N x dv]
Outputs
[N x hdv]
WQ
Head
, WK
, WV
WQ
Multihead
Head
, WK
, WV
WQ
Head
, WK
, WV
Attention Layer
with h= heads
Head
WQ
, WK
, WV
[N x d]
xN
Figure .
Multihead self-attention: Each of the multihead self-attention layers is provided with its own
set of key, query and value weight matrices. The outputs from each of the layers are concatenated and then
projected to d, thus producing an output of the same size as the input so the attention can be followed by layer
norm and feedforward and layers can be stacked.
hn
Layer Normalize
z   z                                    z
Transformer
Block
Feedforward
Residual
connection
z   z                                    z
Layer Normalize
MultiHead Attention
Residual
connection
xn
Figure .
A transformer block showing all the layers.
Feedforward layer
The feedforward layer contains N position-wise networks, one
at each position. Each is a fully-connected -layer network, i.e., one hidden layer,
two weight matrices, as introduced in Chapter . The weights are the same for each
position, but the parameters are different from layer to layer. Unlike attention, the
feedforward networks are independent for each position and so can be computed in
parallel. It is common to make the dimensionality dff of the hidden layer of the
feedforward network be larger than the model dimensionality d. (For example in the
original transformer model, d =  and dff = .)
Residual connections
Residual connections are connections that pass informa-
tion from a lower layer to a higher layer without going through the intermediate

TRANSFORMER BLOCKS
layer. Allowing information from the activation going forward and the gradient go-
ing backwards to skip a layer improves learning and gives higher level layers direct
access to information from lower layers (He et al., ). Residual connections in
transformers are implemented simply by adding a layer’s input vector to its out-
put vector before passing it forward. In the transformer block shown in Fig. .,
residual connections are used with both the attention and feedforward sublayers.
Layer Norm
These summed vectors are then normalized using layer normaliza-
tion (Ba et al., ). Layer normalization (usually called layer norm) is one of
layer norm
many forms of normalization that can be used to improve training performance in
deep neural networks by keeping the values of a hidden layer in a range that facil-
itates gradient-based training. Layer norm is a variation of the standard score, or
z-score, from statistics applied to a single vector in a hidden layer. The input to
layer norm is a single vector, for a particular token position i, and the output is that
vector normalized. Thus layer norm takes as input a single vector of dimensionality
d and produces as output a single vector of dimensionality d. The ﬁrst step in layer
normalization is to calculate the mean, µ, and standard deviation, σ, over the ele-
ments of the vector to be normalized. Given a hidden layer with dimensionality dh,
these values are calculated as follows.
µ =
dh
i=
xi
dh
σ =
dh
i=
(xi − µ)
dh
Given these values, the vector components are normalized by subtracting the mean
from each and dividing by the standard deviation. The result of this computation is
a new vector with zero mean and a standard deviation of one.
ˆx = (x− µ)
Finally, in the standard implementation of layer normalization, two learnable param-
eters, γ and β, representing gain and offset values, are introduced.
LayerNorm = γ ˆx+β
Putting it all together
The function computed by a transformer block can be ex-
pressed as:
O = LayerNorm(X+SelfAttention(X))
H = LayerNorm(O+FFN(O))
Or we can break it down with one equation for each component computation, using
T (of shape [N × d]) to stand for transformer and superscripts to demarcate each
computation inside the block:
T = SelfAttention(X)
T = X+T
T = LayerNorm(T)
T = FFN(T)
T = T +T
H = LayerNorm(T)

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
Crucially, the input and output dimensions of transformer blocks are matched so
they can be stacked. Each token xi at the input to the block has dimensionality d,
and so the input X and output H are both of shape [N ×d].
Transformers for large language models stack many of these blocks, from
layers (used for the T or GPT--small language models) to  layers (used for
GPT- large), to even more for more recent models. We’ll come back to this issues
of stacking in a bit.
The Residual Stream view of the Transformer Block
The previous sections viewed the transformer block as applied to the entire N-token
input X of shape [N ×d], producing an output also of shape [N ×d].
While packing everything this way is a computationally efﬁcient way to imple-
ment the transformer block, it’s not always the most perspicuous way to understand
what the transformer is doing. It’s often clearer to instead visualize what is hap-
pening to an individual token vector xi in the input as it is processed through each
transformer block. After all, most of the components of the transformer are de-
signed to take a single vector of dimensionality d, corresponding to a single token,
and produce an output vector also of dimensionality d. For example, the feedfor-
ward layer takes a single d-dimensional vector and produces a single d-dimensional
vector. Over the N tokens in a batch, we simply use the identical feedforward layer
weights (W, W, b and b) for each token i. Similarly, the layer norm function takes
a single d-dimensional vector and produces a normalized d-dimensional version.
hi-
hi
hi+
Layer Norm
Feedforward
Layer Norm
MultiHead
Attention
xi-
xi+
xi
Figure .
The residual stream for token xi, showing how the input to the transformer
block xi is passed up through residual connections, the output of the feedforward and multi-
head attention layers are added in, and processed by layer norm, to produce the output of
this block, hi, which is used as the input to the next layer transformer block. Note that of all
the components, only the MultiHeadAttention component reads information from the other
residual streams in the context.
We can therefore talk about the processing of an individual token through all

THE RESIDUAL STREAM VIEW OF THE TRANSFORMER BLOCK
these layers as a stream of d-dimensional representations, called the residual stream
residual stream
and visualized in Fig. .. The input at the bottom of the stream is an embedding
for a token, which has dimensionality d. That initial embedding is passed up by the
residual connections and the outputs of feedforward and attention layers get added
into it. For each token i, at each block and layer we are passing up an embedding
of shape [ × d]. The residual layers are constantly copying information up from
earlier embeddings (hence the metaphor of ‘residual stream’), so we can think of the
other components as adding new views of this representation back into this constant
stream. Feedforward networks add in a different view of the earlier embedding.
Here are the equations for the transformer block, now viewed from this embed-
ding stream perspective.
= MultiHeadAttention(xi,[x, ,xN])
= t
i +xi
= LayerNorm(t
i )
= FFN(t
i ))
= t
i +t
hi = LayerNorm(t
i )
Notice that the only component that takes as input information from other tokens
(other residual streams) is multi-head attention, which (as we see from (.) looks
at all the neighboring tokens in the context. The output from attention, however,
is then added into to this token’s embedding stream. In fact, Elhage et al. ()
show that we can view attention heads as literally moving attention from the resid-
ual stream of a neighboring token into the current stream. The high-dimensional
embedding space at each position thus contains information about the current to-
ken and about neighboring tokens, albeit in different subspaces of the vector space.
Fig. . shows a visualization of this movement.
Token A
Token B
residual stream
residual stream
Figure .
An attention head can move information from token A’s residual stream into
token B’s residual stream.
Equation (.) and following are just just the equation for a single transformer
block, but the residual stream metaphor goes through all the transformer layers,
from the ﬁrst transformer blocks to the th, in a -layer transformer. At the earlier
transformer blocks, the residual stream is representing the current token. At the
highest transformer blocks, the residual stream is usual representing the following
token, since at the very end it’s being trained to predict the next token.
Pre-norm vs. post-norm architecture
There is an alternative form of the trans-
former architecture that is commonly used because it performs better in many cases.
In this prenorm transformer architecture, the layer norm happens in a slightly dif-
prenorm
transformer

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
ferent place: before the attention layer and before the feedforward layer, rather than
afterwards. Fig. . shows this architecture, with the equations below:
= LayerNorm(xi)
= t
i +xi
= MultiHeadAttention(t
i ,
, ,x
= LayerNorm(t
i )
= FFN(t
i ))
hi = t
i +t
hi-
hi
hi+
Feedforward
Layer Norm
MultiHead
Attention
Layer Norm
xi-
xi+
xi
Figure .
The architecture of the prenorm transformer block. Here the nature of the
residual stream, passing up information from the input, is even clearer.
The prenorm transformer has one extra requirement: at the very end of the last
(highest) transformer block, there is a single extra layer norm that is run on the last hi
of each token stream (just below the language model head layer that we will deﬁne
below).
The input: embeddings for token and position
Let’s talk about where the input X comes from. Given a sequence of N tokens (N is
the context length in tokens), the matrix X of shape [N × d] has an embedding for
embedding
each word in the context. The transformer does this by separately computing two
embeddings: an input token embedding, and an input positional embedding.
A token embedding, introduced in Chapter  and Chapter , is a vector of di-
mension d that will be our initial representation for the input token. (As we pass
vectors up through the transformer layers in the residual stream, this embedding
representation will change and grow, incorporating context and playing a different

THE INPUT: EMBEDDINGS FOR TOKEN AND POSITION
role depending on the kind of language model we are building.) The set of initial
embeddings are stored in the embedding matrix E, which has a row for each of the
|V| tokens in the vocabulary. Thus each each word is a row vector of d dimensions,
and E has shape [|V|×d].
Given an input token string like Thanks for all the we ﬁrst convert the tokens
into vocabulary indices (these were created when we ﬁrst tokenized the input using
BPE or SentencePiece). So the representation of thanks for all the might be w =
[,,,]. Next we use indexing to select the corresponding rows from
E, (row , row , row , row ).
Another way to think about selecting token embeddings from the embedding
matrix is to represent tokens as one-hot vectors of shape [ × |V|], i.e., with one
dimension for each word in the vocabulary. Recall that in a one-hot vector all the
one-hot vector
elements are  except one, the element whose dimension is the word’s index in the
vocabulary, which has value . So if the word “thanks” has index  in the vocabulary,
x = , and xi =  ∀i ̸= , as shown here:
[       ...    ]
... |V|
Multiplying by a one-hot vector that has only one non-zero element xi =  simply
selects out the relevant row vector for word i, resulting in the embedding for word i,
as depicted in Fig. ..
|V|
|V|
Figure .
Selecting the embedding vector for word V by multiplying the embedding
matrix E with a one-hot vector with a  in index .
We can extend this idea to represent the entire token sequence as a matrix of one-
hot vectors, one for each of the N positions in the transformer’s context window, as
shown in Fig. ..
|V|
|V|
Figure .
Selecting the embedding matrix for the input sequence of token ids W by
multiplying a one-hot matrix corresponding to W by the embedding matrix E.
These token embeddings are not position-dependent. To represent the position
of each token in the sequence, we combine these token embeddings with positional
embeddings speciﬁc to each position in an input sequence.
positional
embeddings
Where do we get these positional embeddings? The simplest method, called
absolute position, is to start with randomly initialized embeddings corresponding
absolute
position
to each possible input position up to some maximum length. For example, just as
we have an embedding for the word ﬁsh, we’ll have an embedding for the position .

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
As with word embeddings, these positional embeddings are learned along with other
parameters during training. We can store them in a matrix Epos of shape [timesN].
To produce an input embedding that captures positional information, we just add
the word embedding for each input to its corresponding positional embedding. The
individual token and position embeddings are both of size [×d], so their sum is also
[ × d], This new embedding serves as the input for further processing. Fig. .
shows the idea.
Transformer Block
X = Composite
Embeddings
(word + position)
Word
bill
the
will
back
Embeddings
Janet
Position
Embeddings
Janet
will
back
the
bill
Figure .
A simple way to model position: add an embedding of the absolute position
to the token embedding to produce a new embedding of the same dimenionality.
The ﬁnal representation of the input, the matrix X, is an [N ×d] matrix in which
each row i is the representation of the ith token in the input, computed by adding
E[id(i)]—the embedding of the id of the token that occurred at position i—, to P[i],
the positional embedding of position i.
A potential problem with the simple absolute position embedding approach is
that there will be plenty of training examples for the initial positions in our inputs
and correspondingly fewer at the outer length limits. These latter embeddings may
be poorly trained and may not generalize well during testing. An alternative ap-
proach to absolute positional embeddings is to choose a static function that maps
integer inputs to real-valued vectors in a way that captures the inherent relation-
ships among the positions. That is, it captures the fact that position  in an input is
more closely related to position  than it is to position . A combination of sine
and cosine functions with differing frequencies was used in the original transformer
work. Even more complex positional embedding methods exist, such as ones that
represent relative position instead of absolute position, often implemented in the
attention mechanism at each layer rather than being added once at the initial input.
The Language Modeling Head
The last component of the transformer we must introduce is the language modeling
head. When we apply pretrained transformer models to various tasks, we use the
language
modeling head
term head to mean the additional neural circuitry we add on top of the basic trans-
head
former architecture to enable that task. The language modeling head is the circuitry
we need to do language modeling.
Recall that language models, from the simple n-gram models of Chapter  through
the feedforward and RNN language models of Chapter  and Chapter , are word
predictors. Given a context of words, they assign a probability to each possible next

THE LANGUAGE MODELING HEAD
word. For example, if the preceding context is “Thanks for all the” and we want to
know how likely the next word is “ﬁsh” we would compute:
P(ﬁsh|Thanks for all the)
Language models give us the ability to assign such a conditional probability to every
possible next word, giving us a distribution over the entire vocabulary. The n-gram
language models of Chapter  compute the probability of a word given counts of
its occurrence with the n −  prior words. The context is thus of size n − . For
transformer language models, the context is the size of the transformer’s context
window, which can be quite large: up to  or even  tokens for large models.
The job of the language modeling head is to take the the output of the ﬁnal
transformer layer from the last token N and use it to predict the upcoming word at
position N + . Fig. . shows how to accomplish this task, taking the output of
the last token at the last layer (the d-dimensional output embedding of shape [×d])
and producing a probability distribution over words (from which we will choose one
to generate).
x |V|
Word probabilities
y|V|
Language Model Head
Softmax over vocabulary V
takes hL
x |V|
Logits
N and outputs a
u|V|
distribution over vocabulary V
Unembedding
d x |V|
Unembedding layer
layer = ET
hL
hL
hL
x d
Layer L
Transformer
Block
wN
Figure .
The language modeling head: the circuit at the top of a transformer that maps from the output
embedding for token N from the last transformer layer (hL
N) to a probability distribution over words in the
vocabulary V.
The ﬁrst module in Fig. . is a linear layer, whose job is to project from the
output hL
N, which represents the output token embedding at position N from the ﬁnal
block L, (hence of shape [×d]) to the logit vector, or score vector, that will have a
logit
single score for each of the |V| possible words in the vocabulary V. The logit vector
u is thus of dimensionality ×|V|.
This linear layer can be learned, but more commonly we tie this matrix to (the
transpose of) the embedding matrix E. Recall that in weight tying, we use the
weight tying
same weights for two different matrices in the model. Thus at the input stage of the
transformer the embedding matrix (of shape [|V|×d]) is used to map from a one-hot
vector over the vocabulary (of shape [ × |V|]) to an embedding (of shape [ × d]).
And then in the language model head, ET, the transpose of the embedding matrix (of
shape [d ×|V|]) is used to map back from an embedding (shape [×d]) to a vector
over the vocabulary (shape [×|V|]). In the learning process, E will be optimized to
be good at doing both of these mappings. We therefore sometimes call the transpose
ET the unembedding layer because it is performing this reverse mapping.
unembedding

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
A softmax layer turns the logits u into the probabilities y over the vocabulary.
u = hL
N ET
y = softmax(u)
We can use these probabilities to do things like help assign a probability to a
given text. But the most important usage to generate text, which we do by sampling
a word from these probabilities y. We might sample the highest probability word
(‘greedy’ decoding), or use another of the sampling methods we’ll introduce in Sec-
tion .. In either case, whatever entry yk we choose from the probability vector y,
we generate the word that has that index k.
Sample token to generate
at position N+
wN+
Token probabilities
y|V|
Language Model
Head
h h      …     hN
Layer Norm
Feedforward
Layer  L
Layer Norm
Multihead Self-Attention
h h      …     hN
Layer Norm
Feedforward
Layer
Layer Norm
Multihead Self-Attention
h h      …     hN
Layer Norm
Feedforward
Layer
Layer Norm
Multihead Self-Attention
x x      …      xN
E[w] E[w]  … E[wN]
P       P     …    PN
Add token + position embeddings
w w      …      wN
Input tokens
Figure .
A ﬁnal transformer decoder-only model, stacking post-norm transformer
blocks and mapping from a set of input tokens w to wN to a predicted next word wN+.
Fig. . shows the total stacked architecture. Note that the input to the ﬁrst
transformer block is represented as X, which is the N indexed word embeddings +
position embeddings, E[w]+P), but the input to all the other layers is the output H
from the layer just below the current one).
Now that we see all these transformer layers spread out on the page, we can point
out another useful feature of the unembedding layer: as a tool for interpretability of

LARGE LANGUAGE MODELS WITH TRANSFORMERS
the internals of the transformer that we call the logit lens (Nostalgebraist, ).
logit lens
We can take a vector from any layer of the transformer and, pretending that it is
the preﬁnal embedding, simply multiply it by the unembedding layer to get logits,
and compute a softmax to see the distribution over words that that vector might
be representing. This can be a useful window into the internal representations of
the model. Since the network wasn’t trained to make the internal representations
function in this way, the logit lens doesn’t always work perfectly, but this can still
be a useful trick.
Anyhow, the Fig. . thus sketches out the entire process of taking a series of
words w ...wN and using the model to predict the next word wN+.
A terminological note before we conclude: You will sometimes see a trans-
former used for this kind of unidirectional causal language model called a decoder-
only model. This is because this model constitutes roughly half of the encoder-
decoder-only
model
decoder model for transformers that we’ll see how to apply to machine translation
in Chapter . (Confusingly, the original introduction of the transformer had an
encoder-decoder architecture, and it was only later that the standard paradigm for
causal language model was deﬁned by using only the decoder part of this original
architecture).
In the next sections we’ll introduce what kind of tasks large language models can
be used for, discuss various generation methods for sampling possible next words,
and show how to train a transformer-based large language model. In the follow-
ing chapters we’ll expand on these ideas to introduce ﬁne-tuning, prompting, and
encoder-decoder architectures for transformer-based large language models.
Large Language Models with Transformers
We’ve now seen most of the components of a transformer for language modeling
(what remains is sampling and training, which we’ll get to in the following sec-
tions). Before we do that, we use this section to talk about why and how we apply
transformer-based large language models to NLP tasks.
All of these tasks are cases of conditional generation, the task of generating text
conditioned on an input piece of text, a prompt. The fact that transformers have such
long contexts ( or even  tokens) makes them very powerful for conditional
generation, because they can look back so far into the prompting text.
Consider the simple task of text completion, illustrated in Fig. .. Here a
language model is given a text preﬁx and is asked to generate a possible completion.
Note that as the generation process proceeds, the model has direct access to the
priming context as well as to all of its own subsequently generated outputs (at least
as much as ﬁts in the large context window).. This ability to incorporate the entirety
of the earlier context and generated outputs at each time step is the key to the power
of large language models built from transformers.
So why should we care about predicting upcoming words? The insight of large
language modeling is that many practical NLP tasks can be cast as word predic-
tion, and that a powerful-enough language model can solve them with a high degree
of accuracy. For example, we can cast sentiment analysis as language modeling by
giving a language model a context like:
The sentiment of the sentence “I like Jackie Chan” is:
and comparing the following conditional probability of the words “positive” and the

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
Completion Text
all
the
Sample from Softmax
linear layer
Transformer
Blocks
Input
Embeddings
So
long
and
thanks
for
all
the
Preﬁx Text
Figure .
Autoregressive text completion with transformer-based large language models.
word “negative” to see which is higher:
P(positive|The sentiment of the sentence “I like Jackie Chan” is:)
P(negative|The sentiment of the sentence “I like Jackie Chan” is:)
If the word “positive” is more probable, we say the sentiment of the sentence is
positive, otherwise we say the sentiment is negative.
We can also cast more complex tasks as word prediction. Consider the task
of answering simple questions, a task we return to in Chapter . In this task the
system is given some question and must give a textual answer. We can cast the task
of question answering as word prediction by giving a language model a question and
a token like A: suggesting that an answer should come next:
Q: Who wrote the book ‘‘The Origin of Species"?
A:
If we ask a language model to compute
P(w|Q: Who wrote the book “The Origin of Species”? A:)
and look at which words w have high probabilities, we might expect to see that
Charles is very likely, and then if we choose Charles and continue and ask
P(w|Q: Who wrote the book “The Origin of Species”? A: Charles)
we might now see that Darwin is the most probable word, and select it.
Conditional generation can even be used to accomplish tasks that must generate
longer responses. Consider the task of text summarization, which is to take a long
text
summarization
text, such as a full-length article, and produce an effective shorter summary of it.
We can cast summarization as language modeling by giving a large language model
a text, and follow the text by a token like tl;dr; this token is short for something
like ‘too long; don’t read’ and in recent years people often use this token, especially
in informal work emails, when they are going to give a short summary. We can
then do conditional generation: give the language model this preﬁx, and then ask

LARGE LANGUAGE MODELS WITH TRANSFORMERS
it to generate the following words, one by one, and take the entire response as a
summary. Fig. . shows an example of a text and a human-produced summary
from a widely-used summarization corpus consisting of CNN and Daily Mirror news
articles.
Original Article
The only thing crazier than a guy in snowbound Massachusetts boxing up the powdery white stuff
and offering it for sale online? People are actually buying it. For $, self-styled entrepreneur
Kyle Waring will ship you  pounds of Boston-area snow in an insulated Styrofoam box – enough
for  to  snowballs, he says.
But not if you live in New England or surrounding states. “We will not ship snow to any states
in the northeast!” says Waring’s website, ShipSnowYo.com. “We’re in the business of expunging
snow!”
His website and social media accounts claim to have ﬁlled more than  orders for snow – more
than  on Tuesday alone, his busiest day yet. With more than  total inches, Boston has set a
record this winter for the snowiest month in its history. Most residents see the huge piles of snow
choking their yards and sidewalks as a nuisance, but Waring saw an opportunity.
According to Boston.com, it all started a few weeks ago, when Waring and his wife were shov-
eling deep snow from their yard in Manchester-by-the-Sea, a coastal suburb north of Boston.
He joked about shipping the stuff to friends and family in warmer states, and an idea was born.
His business slogan: “Our nightmare is your dream!” At ﬁrst, ShipSnowYo sold snow packed
into empty .-ounce water bottles for $., but the snow usually melted before it reached its
destination...
Summary
Kyle Waring will ship you  pounds of Boston-area snow in an insulated Styrofoam box – enough
for  to  snowballs, he says. But not if you live in New England or surrounding states.
Figure .
Examples of articles and summaries from the CNN/Daily Mail corpus (Hermann et al., b),
(Nallapati et al., ).
If we take this full article and append the token tl;dr, we can use this as
the context to prime the generation process to produce a summary as illustrated
in Fig. .. Again, what makes transformers able to succeed at this task (as
compared, say, to the primitive n-gram language model) is that the ability of self-
attention to incorporate information from the large context windows means that
the model has access to the original article as well as to the newly generated text
throughout the process.
Which words do we generate at each step? One simple way to generate words
is to always generate the most likely word given the context. Generating the most
likely word given the context is called greedy decoding. A greedy algorithm is one
greedy
decoding
that make a choice that is locally optimal, whether or not it will turn out to have
been the best choice with hindsight. Thus in greedy decoding, at each time step in
generation, the output yt is chosen by computing the probability for each possible
outputs (every word in the vocabulary) and then choosing the highest probability
word (the argmax):
ˆwt = argmaxw∈V P(w|w<t)
In practice, however, we don’t use greedy decoding with large language models.
A major problem with greedy decoding is that because the words it chooses are (by
deﬁnition) extremely predictable, the resulting text is generic and often quite repeti-
tive. Indeed, greedy decoding is so predictable that it is deterministic; if the context

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
Generated Summary
Kyle
Waring
will
Waring
only
The
reached
its
destination
Kyle
will
tl;dr
Delimiter
Original Story
Figure .
Summarization with large language models using the tl;dr token and context-based autore-
gressive generation.
is identical, and the probabilistic model is the same, greedy decoding will always re-
sult in generating exactly the same string. We’ll see in Chapter  that an extension
to greedy decoding called beam search works well in tasks like machine translation,
which are very constrained in that we are always generating a text in one language
conditioned on a very speciﬁc text in another language. In most other tasks, how-
ever, people prefer text which has been generated by more sophisticated methods,
called sampling methods, that introduce a bit more diversity into the generations.
We’ll see how to do that in the next few sections.
Large Language Models: Generation by Sampling
The core of the generation process for large language models is the task of choosing
the single word to generate next based on the context and based on the probabilities
that the model assigns to possible words. This task of choosing a word to generate
based on the model’s probabilities is called decoding. Decoding from a language
decoding
model in a left-to-right manner (or right-to-left for languages like Arabic in which
we read from right to left), and thus repeatedly choosing the next word conditioned
on our previous choices is called autoregressive generation or causal LM genera-
autoregressive
generation
tion. (As we’ll see, alternatives like the masked language models of Chapter  are
non-causal because they can predict words based on both past and future words).
The most common method for decoding in large language models is sampling.
Recall from Chapter  that sampling from a model’s distribution over words means
sampling
to choose random words according to their probability assigned by the model. That
is, we iteratively choose a word to generate according to its probability in context
Technically an autoregressive model predicts a value at time t based on a linear function of the values
at times t −, t −, and so on. Although language models are not linear (since they have many layers of
non-linearities), we loosely refer to this generation technique as autoregressive since the word generated
at each time step is conditioned on the word selected by the network from the previous step.

LARGE LANGUAGE MODELS: GENERATION BY SAMPLING
as deﬁned by the model. Thus we are more likely to generate words that the model
thinks have a high probability in the context and less likely to generate words that
the model thinks have a low probability.
We saw back in Chapter  on page  how to generate text from a unigram lan-
guage model , by repeatedly randomly sampling words according to their probability
until we either reach a pre-determined length or select the end-of-sentence token. To
generate text from a trained transformer language model we’ll just generalize this
model a bit: at each step we’ll sample words according to their probability condi-
tioned on our previous choices, and we’ll use a transformer language model as the
probability model that tells us this probability.
We can formalize this algorithm for generating a sequence of wordsW = w,w,...,wN
until we hit the end-of-sequence token, using x ∼ p(x) to mean ‘choose x by sam-
pling from the distribution p(x):
i←
wi ∼ p(w)
while wi != EOS
i←i +
wi ∼ p(wi | w<i)
The algorithm above is called random sampling, and it turns out random sam-
random
sampling
pling doesn’t work well enough. The problem is that even though random sampling
is mostly going to generate sensible, high-probable words, there are many odd, low-
probability words in the tail of the distribution, and even though each one is low-
probability, if you add up all the rare words, they constitute a large enough portion
of the distribution that they get chosen often enough to result in generating weird
sentences. For this reason, instead of random sampling, we usually use sampling
methods that avoid generating the very unlikely words.
The sampling methods we introduce below each have parameters that enable
trading off two important factors in generation: quality and diversity. Methods
that emphasize the most probable words tend to produce generations that are rated
by people as more accurate, more coherent, and more factual, but also more boring
and more repetitive. Methods that give a bit more weight to the middle-probability
words tend to be more creative and more diverse, but less factual and more likely to
be incoherent or otherwise low-quality.
Top-k sampling
Top-k sampling is a simple generalization of greedy decoding. Instead of choosing
top-k sampling
the single most probable word to generate, we ﬁrst truncate the distribution to the
top k most likely words, renormalize to produce a legitimate probability distribution,
and then randomly sample from within these k words according to their renormalized
probabilities. More formally:
. Choose in advance a number of words k
. For each word in the vocabulary V, use the language model to compute the
likelihood of this word given the context p(wt|w<t)
. Sort the words by their likelihood, and throw away any word that is not one of
the top k most probable words.
. Renormalize the scores of the k words to be a legitimate probability distribu-
tion.

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
. Randomly sample a word from within these remaining k most-probable words
according to its probability.
When k = , top-k sampling is identical to greedy decoding. Setting k to a larger
number than  leads us to sometimes select a word which is not necessarily the most
probable, but is still probable enough, and whose choice results in generating more
diverse but still high-enough-quality text.
Nucleus or top-p sampling
One problem with top-k sampling is that k is ﬁxed, but the shape of the the probabil-
ity distribution over words differs in different contexts. If we set k = , sometimes
the top  words will be very likely and include most of the probability mass, but
other times the probability distribution will be ﬂatter and the top  words will only
include a small part of the probability mass.
An alternative, called top-p sampling or nucleus sampling (Holtzman et al.,
top-p sampling
), is to keep not the top k words, but the top p percent of the probability mass.
The goal is the same; to truncate the distribution to remove the very unlikely words.
But by measuring probability rather than the number of words, the hope is that the
measure will be more robust in very different contexts, dynamically increasing and
decreasing the pool of word candidates.
Given a distribution P(wt|w<t), the top-p vocabulary V (p) is the smallest set of
words such that
w∈V (p)
P(w|w<t) ≥ p.
Temperature sampling
In temperature sampling, we don’t truncate the distribution, but instead reshape
temperature
sampling
it. The intuition for temperature sampling comes from thermodynamics, where a
system at a high temperature is very ﬂexible and can explore many possible states,
while a system at a lower temperature is likely to explore a subset of lower energy
(better) states. In low-temperature sampling, we smoothly increase the probability
of the most probable words and decrease the probability of the rare words.
We implement this intuition by simply dividing the logit by a temperature param-
eter τ before we normalize it by passing it through the softmax. In low-temperature
sampling, τ ∈ (,]. Thus instead of computing the probability distribution over the
vocabulary directly from the logit as in the following (repeated from (.):
y = softmax(u)
we instead ﬁrst divide the logits by τ, computing the probability vector y as
y = softmax(u/τ)
Why does this work? When τ is close to  the distribution doesn’t change much.
But the lower τ is, the larger the scores being passed to the softmax (dividing by a
smaller fraction τ ≤  results in making each score larger). Recall that one of the
useful properties of a softmax is that it tends to push high values toward  and low
values toward . Thus when larger numbers are passed to a softmax the result is
a distribution with increased probabilities of the most high-probability words and
decreased probabilities of the low probability words, making the distribution more
greedy. As τ approaches  the probability of the most likely word approaches .

LARGE LANGUAGE MODELS: TRAINING TRANSFORMERS
Note, by the way, that there can be other situations where we may want to do
something quite different and ﬂatten the word probability distribution instead of
making it greedy. Temperature sampling can help with this situation too, in this case
high-temperature sampling, in which case we use τ > .
Large Language Models: Training Transformers
How do we teach a transformer to be a language model? What is the algorithm and
what data do we train on?
Self-supervised training algorithm
To train a transformer as a language model, we use the same self-supervision (or
self-supervision
self-training) algorithm we saw in Section ..: we take a corpus of text as training
material and at each time step t ask the model to predict the next word. We call such
a model self-supervised because we don’t have to add any special gold labels to
the data; the natural sequence of words is its own supervision! We simply train the
model to minimize the error in predicting the true next word in the training sequence,
using cross-entropy as the loss function.
Recall that the cross-entropy loss measures the difference between a predicted
probability distribution and the correct distribution.
w∈V
yt[w]log ˆyt[w]
LCE = −
In the case of language modeling, the correct distribution yt comes from knowing the
next word. This is represented as a one-hot vector corresponding to the vocabulary
where the entry for the actual next word is , and all the other entries are . Thus,
the cross-entropy loss for language modeling is determined by the probability the
model assigns to the correct next word. So at time t the CE loss in (.) can be
simpliﬁed as the negative log probability the model assigns to the next word in the
training sequence.
LCE( ˆyt,yt) = −log ˆyt[wt+]
Thus at each word position t of the input, the model takes as input the correct se-
quence of tokens w:t, and uses them to compute a probability distribution over
possible next words so as to compute the model’s loss for the next token wt+. Then
we move to the next word, we ignore what the model predicted for the next word
and instead use the correct sequence of tokens w:t+ to estimate the probability of
token wt+. This idea that we always give the model the correct history sequence to
predict the next word (rather than feeding the model its best case from the previous
time step) is called teacher forcing.
teacher forcing
Fig. . illustrates the general training approach. At each step, given all the
preceding words, the ﬁnal transformer layer produces an output distribution over
the entire vocabulary. During training, the probability assigned to the correct word
is used to calculate the cross-entropy loss for each item in the sequence. As with
RNNs, the loss for a training sequence is the average cross-entropy loss over the
entire sequence. The weights in the network are adjusted to minimize the average
CE loss over the training sequence via gradient descent.

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
long
and
thanks
for
Next word
all
Loss
Softmax over
Vocabulary
Linear Layer
Transformer
Block
Input
Embeddings
So
long
and
thanks
for
Figure .
Training a transformer as a language model.
Note the key difference between this ﬁgure and the earlier RNN-based version
shown in Fig. .. There the calculation of the outputs and the losses at each step
was inherently serial given the recurrence in the calculation of the hidden states.
With transformers, each training item can be processed in parallel since the output
for each element in the sequence is computed separately.
Large models are generally trained by ﬁlling the full context window (for ex-
ample  or  tokens for GPT or GPT) with text. If documents are shorter
than this, multiple documents are packed into the window with a special end-of-text
token between them. The batch size for gradient descent is usually quite large (the
largest GPT- model uses a batch size of . million tokens).
Training corpora for large language models
Large language models are mainly trained on text scraped from the web, augmented
by more carefully curated data. Because these training corpora are so large, they are
likely to contain many natural examples that can be helpful for NLP tasks, such as
question and answer pairs (for example from FAQ lists), translations of sentences
between various languages, documents together with their summaries, and so on.
Web text is usually taken from corpora of automatically-crawled web pages like
the common crawl, a series of snapshots of the entire web produced by the non-
common crawl
proﬁt Common Crawl (https://commoncrawl.org/) that each have billions of
webpages. Various cleanups of common crawl data exist, such as the Colossal Clean
Crawled Corpus (C; Raffel et al. ), a corpus of  billion tokens of English
that is ﬁltered in various ways (deduplicated, removing non-natural language like
code, sentences with offensive words from a blocklist). What is in this data? An
analysis suggests that in large part it’s patent text documents, Wikipedia, and news
sites (Dodge et al., ). Wikipedia plays a role in lots of language model training,
as do corpora of books. The GPT models, for example, are trained mostly on the
web ( billion tokens), some text from books ( billion tokens) and Wikipedia
( billion tokens).

POTENTIAL HARMS FROM LANGUAGE MODELS
Scaling laws
The performance of large language models has shown to be mainly determined by
factors: model size (the number of parameters not counting embeddings), dataset
size (the amount of training data), and the amount of computer used for training.
That is, we can improve a model by adding parameters (adding more layers or having
wider contexts or both), by training on more data, or by training for more iterations.
The relationships between these factors and performance are known as scaling
laws. Roughly speaking, the performance of a large language model (the loss) scales
scaling laws
as a power-law with each of these three properties of model training.
For example, Kaplan et al. () found the following three relationships for
loss L as a function of the number of non-embedding parameters N, the dataset size
D, and the compute budget C, for models training with limited parameters, dataset,
or compute budget, if in each case the other two properties are held constant:
αN
L(N) =
Nc
L(D) =
Dc
αD
L(C) =
Cc
αC
The number of (non-embedding) parameters N can be roughly computed as fol-
lows (ignoring biases, and with d as the input and output dimensionality of the
model, dattn as the self-attention layer size, and dff the size of the feedforward layer):
N ≈  d nlayer( dattn +dff)
≈  nlayer d
(assuming dattn = dff/ = d)
Thus GPT-, with n =  layers and dimensionality d = , has  ×  ×
≈  billion parameters.
The values of Nc, Dc, Cc, αN, αD, and αC depend on the exact transformer
architecture, tokenization, and vocabulary size, so rather than all the precise values,
scaling laws focus on the relationship with loss.
Scaling laws can be useful in deciding how to train a model to a particular per-
formance, for example by looking at early in the training curve, or performance with
smaller amounts of data, to predict what the loss would be if we were to add more
data or increase model size. Other aspects of scaling laws can also tell us how much
data we need to add when scaling up a model.
Potential Harms from Language Models
Large pretrained neural language models exhibit many of the potential harms dis-
cussed in Chapter  and Chapter . Many of these harms become realized when
pretrained language models are used for any downstream task, particularly those
For the initial experiment in Kaplan et al. () the precise values were αN = ., Nc = . ×
(parameters), αD = ., Dc = . × (tokens), αC = ., Cc = . × (petaﬂop-days).

CHAPTER
TRANSFORMERS AND LARGE LANGUAGE MODELS
involving text generation, whether question answering, machine translation, or in
assistive technologies like writing aids or web search query completion, or predic-
tive typing for email (Olteanu et al., ).
For example, language models are prone to saying things that are false, a prob-
lem called hallucination. Language models are trained to generate text that is pre-
hallucination
dictable and coherent, but the training algorithms we have seen so far don’t have any
way to enforce that the text that is generated is correct or true. This causes enormous
problems for any application where the facts matter!
A second source of harm is that language models can generate toxic language.
toxic language
Gehman et al. () show that even completely non-toxic prompts can lead large
language models to output hate speech and abuse their users. Language models also
generate stereotypes (Cheng et al., ) and negative attitudes (Brown et al., ;
Sheng et al., ) about many demographic groups.
One source of biases is the training data. Gehman et al. () shows that large
language model training datasets include toxic text scraped from banned sites. There
are other biases than toxicity: the training data is disproportionately generated by
authors from the US and from developed countries. Such biased population samples
likely skew the resulting generation toward the perspectives or topics of this group
alone. Furthermore, language models can amplify demographic and other biases in
training data, just as we saw for embedding models in Chapter .
Language models can also be used by malicious actors for generating text for
misinformation, phishing, or other socially harmful activities (Brown et al., ).
McGufﬁe and Newhouse () show how large language models generate text that
emulates online extremists, with the risk of amplifying extremist movements and
their attempt to radicalize and recruit.
Language models also present privacy issues since they can leak information
about their training data. It is thus possible for an adversary to extract training-data
text from a language model such as an individual person’s name, phone number,
and address (Henderson et al. , Carlini et al. ). This is a problem if large
language models are trained on private datasets such as electronic health records.
Related to privacy is the issue of copyright. Large language models are trained
on text that is copyrighted. In some countries, like the United States, the fair use
doctrine allows copyrighted content to be used to build language models, but possi-
bly not if they are used to generate text that competes with the market for the text
they are trained on.
Finding ways to mitigate all these harms is an important current research area in
NLP. At the very least, carefully analyzing the data used to pretrain large language
models is important as a way of understanding issues of toxicity, bias, privacy, and
fair use, making it extremely important that language models include datasheets
(page ) or model cards (page ) giving full replicable information on the cor-
pora used to train them. Open-source models can specify their exact training data.
Requirements that models are transparent in such ways is also in the process of being
incorporated into the regulations of various national governments.
Summary
This chapter has introduced the transformer, and how it can be applied to build large
language models. Here’s a summary of the main points that we covered:

BIBLIOGRAPHICAL AND HISTORICAL NOTES
Transformers are non-recurrent networks based on self-attention. A self-
attention layer maps input sequences to output sequences of the same length,
using attention heads that model how the surrounding words are relevant for
the processing of the current word.
A transformer block consists of a single attention layer followed by a feed-
forward layer with residual connections and layer normalizations following
each. Transformer blocks can be stacked to make deeper and more powerful
networks.
Language models can be built out of stacks of transformer blocks, with a linear
and softmax max layer at the top.
Transformer-based language models have a wide context window (as wide as
tokens for current models) allowing them to draw on enormous amounts
of context to predict upcoming words.
Many NLP tasks—such as question answering, summarization, sentiment,
and machine translation—can be cast as tasks of word prediction and hence
addressed with Large language models.
The choice of which word to generate in large language models is generally
done by using a sampling algorithm.
Because of their ability to be used in so many ways, language models also
have the potential to cause harms. Some harms include hallucinations, bias,
stereotypes, misinformation and propaganda, and violations of privacy and
copyright.
Bibliographical and Historical Notes
The transformer (Vaswani et al., ) was developed drawing on two lines of prior
research: self-attention and memory networks. Encoder-decoder attention, the
idea of using a soft weighting over the encodings of input words to inform a gen-
erative decoder (see Chapter ) was developed by Graves () in the context of
handwriting generation, and Bahdanau et al. () for MT. This idea was extended
to self-attention by dropping the need for separate encoding and decoding sequences
and instead seeing attention as a way of weighting the tokens in collecting informa-
tion passed from lower layers to higher layers (Ling et al., ; Cheng et al., ;
Liu et al., ). Other aspects of the transformer, including the terminology of key,
query, and value, came from memory networks, a mechanism for adding an ex-
ternal read-write memory to networks, by using an embedding of a query to match
keys representing content in an associative memory (Sukhbaatar et al., ; Weston
et al., ; Graves et al., ).
MORE HISTORY TBD IN NEXT DRAFT.

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
Fine-Tuning and Masked Lan-
guage Models
CHAPTER
Larvatus prodeo [Masked, I go forward]
Descartes
In the previous chapter we saw how to pretrain transformer language models,
and how these pretrained models can be used as a tool for many kinds of NLP tasks,
by casting the tasks as word prediction. The models we introduced in Chapter  to
do this task are causal or left-to-right transformer models.
In this chapter we’ll introduce a second paradigm for pretrained language mod-
els, called the bidirectional transformer encoder, trained via masked language
modeling, a method that allows the model to see entire texts at a time, including
masked
language
modeling
both the right and left context. We’ll introduce the most widely-used version of the
masked language modeling architecture, the BERT model (Devlin et al., ).
BERT
We’ll also introduce two important ideas that are often used with these masked
language models. The ﬁrst is the idea of ﬁne-tuning. Fine-tuning is the process
ﬁne-tuning
of taking the network learned by these pretrained models, and further training the
model, often via an added neural net classiﬁer that takes the top layer of the network
as input, to perform some downstream task like named entity tagging or question an-
swering or coreference. The intuition is that the pretraining phase learns a language
model that instantiates rich representations of word meaning, that thus enables the
model to more easily learn (‘be ﬁne-tuned to’) the requirements of a downstream
language understanding task. The pretrain-ﬁnetune paradigm is an instance of what
is called transfer learning in machine learning: the method of acquiring knowledge
transfer
learning
from one task or domain, and then applying it (transferring it) to solve a new task.
The second idea that we introduce in this chapter is the idea of contextual em-
beddings: representations for words in context. The methods of Chapter  like
wordvec or GloVe learned a single vector embedding for each unique word w in
the vocabulary. By contrast, with contextual embeddings, such as those learned by
masked language models like BERT, each word w will be represented by a different
vector each time it appears in a different context. While the causal language models
of Chapter  also use contextual embeddings, the embeddings created by masked
language models seem to function particularly well as representations.
Bidirectional Transformer Encoders
Let’s begin by introducing the bidirectional transformer encoder that underlies mod-
els like BERT and its descendants like RoBERTa (Liu et al., ) or SpanBERT
(Joshi et al., ). In Chapter  we explored causal (left-to-right) transformers
that can serve as the basis for powerful language models—models that can eas-
ily be applied to autoregressive generation problems such as contextual generation,
summarization and machine translation. However, when applied to sequence classi-
ﬁcation and labeling problems causal models have obvious shortcomings since they

BIDIRECTIONAL TRANSFORMER ENCODERS
are based on an incremental, left-to-right processing of their inputs. If we want to
assign the correct named-entity tag to each word in a sentence, or other sophisticated
linguistic labels like the parse tags we’ll introduce in later chapters, we’ll want to
be able to take into account information from the right context as we process each
element. Fig. .a, reproduced here from Chapter , illustrates the information
ﬂow in the purely left-to-right approach of Chapter . As can be seen, the hidden
state computation at each point in time is based solely on the current and earlier
elements of the input, ignoring potentially useful information located to the right of
each tagging decision.
a) A causal self-attention layer
b) A bidirectional self-attention layer
Figure .
(a) The causal, backward looking, transformer model we saw in Chapter . Each output is
computed independently of the others using only information seen earlier in the context. (b) Information ﬂow in
a bidirectional self-attention model. In processing each element of the sequence, the model attends to all inputs,
both before and after the current one.
Bidirectional encoders overcome this limitation by allowing the self-attention
mechanism to range over the entire input, as shown in Fig. .b.
Why bidirectional encoders? The causal models of Chapter  are generative
models, designed to easily generate the next token in a sequence. But the focus
of bidirectional encoders is instead on computing contextualized representations of
the input tokens.
Bidirectional encoders use self-attention to map sequences of
input embeddings (x,...,xn) to sequences of output embeddings the same length
(y,...,yn), where the output vectors have been contextualized using information
from the entire input sequence. These output embeddings are contextualized repre-
sentations of each input token that are generally useful across a range of downstream
applications. The models of Chapter  are sometimes called decoder-only; the
models of this chapter are sometimes called encoder-only, because they produce an
encoding for each input token but generally aren’t used to produce running text by
decoding/sampling.
The architecture for bidirectional models
Bidirectional models use the same self-attention mechanism as causal models. The
ﬁrst step is to generate a set of key, query and value embeddings for each element
of the input vector x through the use of learned weight matrices WQ, WK, and WV.
These weights project each input vector xi into its speciﬁc role as a key, query, or
value.
qi = WQxi; ki = WKxi; vi = WVxi
The output vector yi corresponding to each input element xi is a weighted sum of all

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
the input value vectors v, as follows:
yi =
j=
αijvj
The α weights are computed via a softmax over the comparison scores between
every element of an input sequence considered as a query and every other element
as a key, where the comparison scores are computed using dot products.
αij =
exp(scoreij)
Pn
k= exp(scoreik)
scoreij = qi k j
As with the models of Chapter , since each output vector, yi, is computed
independently, the processing of an entire sequence can be parallelized via matrix
operations. The ﬁrst step is to pack the input embeddings xi into a matrix X ∈ RN×dh.
That is, each row of X is the embedding of one token of the input. We then multiply
X by the key, query, and value weight matrices (all of dimensionality d × d) to
produce matrices Q ∈ RN×d, K ∈ RN×d, and V ∈ RN×d, containing all the key,
query, and value vectors in a single step.
Q = XWQ; K = XWK; V = XWV
Given these matrices we can compute all the requisite query-key comparisons si-
multaneously by multiplying Q and K⊺ in a single operation. Fig. . illustrates
the result of this operation for an input with length .
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
qk
Figure .
The N ×N QK⊺ matrix showing the complete set of qi kj comparisons.
Finally, we can scale these scores, take the softmax, and then multiply the result
by V resulting in a matrix of shape N ×d where each row contains a contextualized
output embedding corresponding to each token in the input.
√dk
SelfAttention(Q,K,V) = softmax
QK⊺

The key architecture difference is in bidirectional models we don’t mask the fu-
ture. As shown in Fig. ., the full set of self-attention scores represented by QKT
constitute an all-pairs comparison between the keys and queries for each element
of the input. In the case of causal language models in Chapter , we masked the

BIDIRECTIONAL TRANSFORMER ENCODERS
upper triangular portion of this matrix (in Fig. .) to eliminate information about
future words since this would make the language modeling training task trivial. With
bidirectional encoders we simply skip the mask, allowing the model to contextualize
each token using information from the entire input.
Beyond this simple change, all of the other elements of the transformer archi-
tecture remain the same for bidirectional encoder models. Inputs to the model are
segmented using subword tokenization and are combined with positional embed-
dings before being passed through a series of standard transformer blocks consisting
of self-attention and feedforward layers augmented with residual connections and
layer normalization, as shown in Fig. ..
hn
Layer Normalize
z   z                                    z
Transformer
Block
Feedforward
Residual
connection
z   z                                    z
Layer Normalize
MultiHead Attention
Residual
connection
xn
Figure .
A transformer block showing all the layers.
To make this more concrete, the original English-only bidirectional transformer
encoder model, BERT (Devlin et al., ), consisted of the following:
An English-only subword vocabulary consisting of , tokens generated
using the WordPiece algorithm (Schuster and Nakajima, ).
Hidden layers of size of ,
layers of transformer blocks, with  multihead attention layers each.
The resulting model has about M parameters.
The larger multilingual XLM-RoBERTa model, trained on  languages, has
A multilingual subword vocabulary with , tokens generated using the
SentencePiece Unigram LM algorithm (Kudo and Richardson, b).
layers of transformer blocks, with  multihead attention layers each
Hidden layers of size
The resulting model has about M parameters.
The use of WordPiece or SentencePiece Unigram LM tokenization (two of the
large family of subword tokenization algorithms that includes the BPE algorithm
we saw in Chapter ) means that—like the large language models of Chapter —
BERT and its descendants are based on subword tokens rather than words. Every
input sentence ﬁrst has to be tokenized, and then all further processing takes place
on subword tokens rather than words. This will require, as we’ll see, that for some

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
NLP tasks that require notions of words (like named entity tagging, or parsing) we
will occasionally need to map subwords back to words.
As with causal transformers, the size of the input layer dictates the complexity of
the model. Both the time and memory requirements in a transformer grow quadrati-
cally with the length of the input. It’s necessary, therefore, to set a ﬁxed input length
that is long enough to provide sufﬁcient context for the model to function and yet
still be computationally tractable. For BERT and XLR-RoBERTa, a ﬁxed input size
of  subword tokens was used.
Training Bidirectional Encoders
We trained causal transformer language models in Chapter  by making them iter-
atively predict the next word in a text. But eliminating the causal mask makes the
guess-the-next-word language modeling task trivial since the answer is now directly
available from the context, so we’re in need of a new training scheme. Fortunately,
the traditional learning objective suggests an approach that can be used to train bidi-
rectional encoders. Instead of trying to predict the next word, the model learns to
perform a ﬁll-in-the-blank task, technically called the cloze task (Taylor, ). To
cloze task
see this, let’s return to the motivating example from Chapter . Instead of predicting
which words are likely to come next in this example:
Please turn your homework
we’re asked to predict a missing item given the rest of the sentence.
Please turn
homework in.
That is, given an input sequence with one or more elements missing, the learning
task is to predict the missing elements. More precisely, during training the model is
deprived of one or more elements of an input sequence and must generate a proba-
bility distribution over the vocabulary for each of the missing items. We then use the
cross-entropy loss from each of the model’s predictions to drive the learning process.
This approach can be generalized to any of a variety of methods that corrupt the
training input and then asks the model to recover the original input. Examples of the
kinds of manipulations that have been used include masks, substitutions, reorder-
ings, deletions, and extraneous insertions into the training text.
Masking Words
The original approach to training bidirectional encoders is called Masked Language
Modeling (MLM) (Devlin et al., ). As with the language model training meth-
Masked
Language
Modeling
ods we’ve already seen, MLM uses unannotated text from a large corpus. Here, the
MLM
model is presented with a series of sentences from the training corpus where a ran-
dom sample of tokens from each training sequence is selected for use in the learning
task. Once chosen, a token is used in one of three ways:
It is replaced with the unique vocabulary token [MASK].
It is replaced with another token from the vocabulary, randomly sampled
based on token unigram probabilities.
It is left unchanged.

TRAINING BIDIRECTIONAL ENCODERS
In BERT, % of the input tokens in a training sequence are sampled for learning.
Of these, % are replaced with [MASK], % are replaced with randomly selected
tokens, and the remaining % are left unchanged.
The MLM training objective is to predict the original inputs for each of the
masked tokens using a bidirectional encoder of the kind described in the last section.
The cross-entropy loss from these predictions drives the training process for all the
parameters in the model. Note that all of the input tokens play a role in the self-
attention process, but only the sampled tokens are used for learning.
More speciﬁcally, the original input sequence is ﬁrst tokenized using a subword
model. The sampled items which drive the learning process are chosen from among
the set of tokenized inputs. Word embeddings for all of the tokens in the input
are retrieved from the word embedding matrix and then combined with positional
embeddings to form the input to the transformer.
long
thanks
the
CE Loss
Softmax over
Vocabulary
Bidirectional Transformer Encoder
Token +
Positional
Embeddings
So
[mask]
and
[mask]
for
all
apricot
ﬁsh
So
long
and
thanks
for
all
ﬁsh
the
Figure .
Masked language model training. In this example, three of the input tokens are selected, two of
which are masked and the third is replaced with an unrelated word. The probabilities assigned by the model to
these three items are used as the training loss. The other  words don’t play a role in training loss. (In this and
subsequent ﬁgures we display the input as words rather than subword tokens; the reader should keep in mind
that BERT and similar models actually use subword tokens instead.)
Fig. . illustrates this approach with a simple example. Here, long, thanks and
the have been sampled from the training sequence, with the ﬁrst two masked and the
replaced with the randomly sampled token apricot. The resulting embeddings are
passed through a stack of bidirectional transformer blocks. To produce a probability
distribution over the vocabulary for each of the masked tokens, the output vector zi
from the ﬁnal transformer layer for each masked token i is multiplied by a learned
set of classiﬁcation weights WV ∈ R|V|×dh and then through a softmax to yield the
required predictions over the vocabulary.
yi = softmax(WVzi)
With a predicted probability distribution for each masked item, we can use cross-
entropy to compute the loss for each masked item—the negative log probability
assigned to the actual masked word, as shown in Fig. .. More formally, for a
given vector of input tokens in a sentence or batch be x, let the set of tokens that are

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
masked be M, the version of that sentence with some tokens replaced by masks be
xmask, and the sequence of output vectors be z. For a given input token xi, such as
the word long in Fig. ., the loss is the probability of the correct word long, given
xmask (as summarized in the single output vector zi):
LMLM(xi) = −logP(xi|zi)
The gradients that form the basis for the weight updates are based on the average
loss over the sampled learning items from a single training sequence (or batch of
sequences).
LMLM = −
|M|
i∈M
logP(xi|zi)
Note that only the tokens in M play a role in learning; the other words play no role
in the loss function, so in that sense BERT and its descendents are inefﬁcient; only
% of the input samples in the training data are actually used for training weights.
Next Sentence Prediction
The focus of mask-based learning is on predicting words from surrounding contexts
with the goal of producing effective word-level representations. However, an im-
portant class of applications involves determining the relationship between pairs of
sentences. These include tasks like paraphrase detection (detecting if two sentences
have similar meanings), entailment (detecting if the meanings of two sentences en-
tail or contradict each other) or discourse coherence (deciding if two neighboring
sentences form a coherent discourse).
To capture the kind of knowledge required for applications such as these, some
models in the BERT family include a second learning objective called Next Sen-
tence Prediction (NSP). In this task, the model is presented with pairs of sentences
Next Sentence
Prediction
and is asked to predict whether each pair consists of an actual pair of adjacent sen-
tences from the training corpus or a pair of unrelated sentences. In BERT, % of
the training pairs consisted of positive pairs, and in the other % the second sen-
tence of a pair was randomly selected from elsewhere in the corpus. The NSP loss
is based on how well the model can distinguish true pairs from random pairs.
To facilitate NSP training, BERT introduces two new tokens to the input repre-
sentation (tokens that will prove useful for ﬁne-tuning as well). After tokenizing the
input with the subword model, the token [CLS] is prepended to the input sentence
pair, and the token [SEP] is placed between the sentences and after the ﬁnal token of
the second sentence. Finally, embeddings representing the ﬁrst and second segments
of the input are added to the word and positional embeddings to allow the model to
more easily distinguish the input sentences.
During training, the output vector from the ﬁnal layer associated with the [CLS]
token represents the next sentence prediction. As with the MLM objective, a learned
set of classiﬁcation weights WNSP ∈ R×dh is used to produce a two-class prediction
from the raw [CLS] vector.
yi = softmax(WNSPhi)
There are members of the BERT family like ELECTRA that do use all examples for training (Clark
et al., b).

TRAINING BIDIRECTIONAL ENCODERS
Cross entropy is used to compute the NSP loss for each sentence pair presented
to the model. Fig. . illustrates the overall NSP training setup. In BERT, the NSP
loss was used in conjunction with the MLM training objective to form ﬁnal loss.
CE Loss
Softmax
zCLS
Bidirectional Transformer Encoder
Token +
Segment +
Positional
Embeddings
[CLS]
Cancel
my
ﬂight
[SEP]
And
the
hotel
[SEP]
Figure .
An example of the NSP loss calculation.
Training Regimes
BERT and other early transformer-based language models were trained on about .
billion words (a combination of English Wikipedia and a corpus of book texts called
BooksCorpus (Zhu et al., ) that is no longer used for intellectual property rea-
sons). Modern masked language models are now trained on much larger datasets
of web text, ﬁltered a bit, and augmented by higher-quality data like Wikipedia, the
same as those we discussed for the causal large language models of Chapter .
Multilingual models similarity use webtext and multilingual Wikipedia. For exam-
ple the XLM-R model was trained on about  billion tokens in  languages,
taken from the web via Common Crawl (https://commoncrawl.org/).
To train the original BERT models, pairs of text segments were selected from
the training corpus according to the next sentence prediction / scheme. Pairs
were sampled so that their combined length was less than the  token input. To-
kens within these sentence pairs were then masked using the MLM approach with
the combined loss from the MLM and NSP objectives used for a ﬁnal loss. Ap-
proximately  passes (epochs) over the training data was required for the model to
converge.
Some models, like the RoBERTa model, drop the next sentence prediction ob-
jective, and therefore change the training regime a bit. Instead of sampling pairs of
sentence, the input is simply a series of contiguous sentences. If the document runs
out before  tokens are reached, an extra separator token is added, and sentences
from the next document are packed in, until we reach a total of  tokens. Usually
large batch sizes are used, between K and K tokens.
Multilingual models have an additional decision to make: what data to use to
build the vocabulary? Recall that all language models use subword tokenization
(BPE or SentencePiece Unigram LM are the two most common algorithms). What
text should be used to learn this multilingual tokenization, given that it’s easier to get
much more text in some languages than others? One option would be to create this
vocabulary-learning dataset by sampling sentences from our training data (perhaps

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
web text from Common Crawl), randomly. In that case we will choose a lot of sen-
tences from languages like languages with lots of web representation like English,
and the tokens will be biased toward rare English tokens instead of creating frequent
tokens from languages with less data. Instead, it is common to divide the training
data into subcorpora of N different languages, compute the number of sentences ni
of each language i, and readjust these probabilities so as to upweight the probability
of less-represented languages (Lample and Conneau, ). The new probability of
selecting a sentence from each of the N languages (whose prior frequency is ni) is
{qi}i=...N, where:
qi =
pα
PN
j= pα
with
pi =
ni
PN
k= nk
Recall from (.) in Chapter  that an α value between  and  will give higher
weight to lower probability samples. Conneau et al. () show that α = . works
well to give rare languages more inclusion in the tokenization, resulting in better
multilingual performance overall.
The result of this pretraining process consists of both learned word embeddings,
as well as all the parameters of the bidirectional encoder that are used to produce
contextual embeddings for novel inputs.
For many purposes, a pretrained multilingual model is more practical than a
monolingual model, since it avoids the need to build many (!) separate monolin-
gual models. And multilingual models can improve performance on low-resourced
languages by leveraging linguistic information from a similar language in the train-
ing data that happens to have more resources. Nonetheless, when the number of
languages grows very large, multilingual models exhibit what has been called the
curse of multilinguality (Conneau et al., ): the performance on each language
degrades compared to a model training on fewer languages. Another problem with
multilingual models is that they ‘have an accent’: grammatical structures in higher-
resource languages (often English) bleed into lower-resource languages; the vast
amount of English language in training makes the model’s representations for low-
resource languages slightly more English-like (Papadimitriou et al., ).
Contextual Embeddings
Given a pretrained language model and a novel input sentence, we can think of the
sequence of model outputs as constituting contextual embeddings for each token in
contextual
embeddings
the input. These contextual embeddings are vectors representing some aspect of the
meaning of a token in context, and can be used for any task requiring the meaning of
tokens or words. More formally, given a sequence of input tokens x,...,xn, we can
use the output vector zi from the ﬁnal layer of the model as a representation of the
meaning of token xi in the context of sentence x,...,xn. Or instead of just using the
vector zi from the ﬁnal layer of the model, it’s common to compute a representation
for xi by averaging the output tokens zi from each of the last four layers of the model.
Just as we used static embeddings like wordvec in Chapter  to represent the
meaning of words, we can use contextual embeddings as representations of word
meanings in context for any task that might require a model of word meaning. Where
static embeddings represent the meaning of word types (vocabulary entries), contex-
tual embeddings represent the meaning of word instances: instances of a particular

CONTEXTUAL EMBEDDINGS
zCLS
Transformer
Blocks
Input
Embeddings
[CLS]
So
long
and
thanks
for
all
Figure .
The output of a BERT-style model is a contextual embedding vector zi for each
input token xi.
word type in a particular context. Thus where wordvec had a single vector for each
word type, contextual embeddings provide a single vector for each instance of that
word type in its sentential context. Contextual embeddings can thus be used for
tasks like measuring the semantic similarity of two words in context, and are useful
in linguistic tasks that require models of word meaning.
Contextual Embeddings and Word Sense
Words are ambiguous: the same word can be used to mean different things. In
ambiguous
Chapter  we saw that the word “mouse” can mean () a small rodent, or () a hand-
operated device to control a cursor. The word “bank” can mean: () a ﬁnancial
institution or () a sloping mound. We say that the words ‘mouse’ or ‘bank’ are
polysemous (from Greek ‘many senses’, poly- ‘many’ + sema, ‘sign, mark’).
A sense (or word sense) is a discrete representation of one aspect of the meaning
word sense
of a word. We can represent each sense with a superscript: bank and bank,
mouse and mouse. These senses can be found listed in online thesauruses (or
thesauri) like WordNet (Fellbaum, ), which has datasets in many languages
WordNet
listing the senses of many words. In context, it’s easy to see the different meanings:
mouse : .... a mouse controlling a computer system in .
mouse : .... a quiet animal like a mouse
bank : ...a bank can hold the investments in a custodial account ...
bank : ...as agriculture burgeons on the east bank, the river ...
This fact that context disambiguates the senses of mouse and bank above can
also be visualized geometrically. Fig. . shows a two-dimensional project of many
instances of the BERT embeddings of the word die in English and German. Each
point in the graph represents the use of die in one input sentence. We can clearly see
at least two different English senses of die (the singular of dice and the verb to die,
as well as the German article, in the BERT embedding space.
Thus while thesauruses like WordNet give discrete lists of senses, embeddings
(whether static or contextual) offer a continuous high-dimensional model of meaning
The word polysemy itself is ambiguous; you may see it used in a different way, to refer only to cases
where a word’s senses are related in some structured way, reserving the word homonymy to mean sense
ambiguities with no relation between the senses (Haber and Poesio, ). Here we will use ‘polysemy’
to mean any kind of sense ambiguity, and ‘structured polysemy’ for polysemy with sense relations.

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
Figure .
Each blue dot shows a BERT contextual embedding for the word die from different sentences
in English and German, projected into two dimensions with the UMAP algorithm. The German and English
meanings and the different English senses fall into different clusters. Some sample points are shown with the
contextual sentence they came from. Figure from Coenen et al. ().
Figure : Embeddings for the word "die" in different contexts, visualized with UMAP. Sample points
are annotated with corresponding sentences. Overall annotations (blue text) are added as a guide.
that, although it can be clustered, doesn’t divide up into fully discrete senses.
Visualization of word senses
Word Sense Disambiguation
The task of selecting the correct sense for a word is called word sense disambigua-
tion, or WSD. WSD algorithms take as input a word in context and a ﬁxed inventory
word sense
disambiguation
WSD
of potential word senses (like the ones in WordNet) and outputs the correct word
sense in context. Fig. . sketches out the task.
Our ﬁrst experiment is an exploratory visualization of how word sense affects context embeddings.
For data on different word senses, we collected all sentences used in the introductions to English-
language Wikipedia articles. (Text outside of introductions was frequently fragmentary.) We created
an interactive application, which we plan to make public. A user enters a word, and the system
retrieves , sentences containing that word. It sends these sentences to BERT-base as input, and
for each one it retrieves the context embedding for the word from a layer of the user’s choosing.
bass:
stand:
upright
low range
side:
relative
region
electric:
stand:
using
bass:
sea ﬁsh
bear
side:
of body
electricity
electric:
stand:
The system visualizes these , context embeddings using UMAP [], generally showing clear
clusters relating to word senses. Different senses of a word are typically spatially separated, and
within the clusters there is often further structure related to ﬁne shades of meaning. In Figure , for
example, we not only see crisp, well-separated clusters for three meanings of the word “die,” but
within one of these clusters there is a kind of quantitative scale, related to the number of people
dying. See Appendix . for further examples. The apparent detail in the clusters we visualized raises
two immediate questions. First, is it possible to ﬁnd quantitative corroboration that word senses are
well-represented? Second, how can we resolve a seeming contradiction: in the previous section, we
saw how position represented syntax; yet here we see position representing semantics.
tense
put
bass:
player:
in game
player:
musician
player:
instrument
actor
upright
side:
slope
electric:
thrilling
guitar
Measurement of word sense disambiguation capability
an
electric
guitar
and
bass
player
stand
oﬀ
to
one
side
The crisp clusters seen in visualizations such as Figure  suggest that BERT may create simple,
effective internal representations of word senses, putting different meanings in different locations. To
test this hypothesis quantitatively, we test whether a simple classiﬁer on these internal representations
can perform well at word-sense disambiguation (WSD).
Figure .
The all-words WSD task, mapping from input words (x) to WordNet senses
(y). Figure inspired by Chaplot and Salakhutdinov ().
We follow the procedure described in [], which performed a similar experiment with the ELMo
model. For a given word with n senses, we make a nearest-neighbor classiﬁer where each neighbor is
the centroid of a given word sense’s BERT-base embeddings in the training data. To classify a new
word we ﬁnd the closest of these centroids, defaulting to the most commonly used sense if the word
was not present in the training data. We used the data and evaluation from []: the training data was
SemCor [] (, senses), and the testing data was the suite described in [] (, senses).
WSD can be a useful analytic tool for text analysis in the humanities and social
sciences, and word senses can play a role in model interpretability for word repre-
sentations. Word senses also have interesting distributional properties. For example
a word often is used in roughly the same sense through a discourse, an observation
called the one sense per discourse rule (Gale et al., a).
one sense per
discourse
The simple nearest-neighbor classiﬁer achieves an F score of ., higher than the current state of
the art (Table ), with the accuracy monotonically increasing through the layers. This is a strong
signal that context embeddings are representing word-sense information. Additionally, an even higher
score of . was obtained using the technique described in the following section.
CONTEXTUAL EMBEDDINGS
The best performing WSD algorithm is a simple -nearest-neighbor algorithm
using contextual word embeddings, due to Melamud et al. () and Peters et al.
(). At training time we pass each sentence in some sense-labeled dataset (like
the SemCore or SenseEval datasets in various languages) through any contextual
embedding (e.g., BERT) resulting in a contextual embedding for each labeled token.
(There are various ways to compute this contextual embedding vi for a token i; for
BERT it is common to pool multiple layers by summing the vector representations
of i from the last four BERT layers). Then for each sense s of any word in the corpus,
for each of the n tokens of that sense, we average their n contextual representations
vi to produce a contextual sense embedding vs for s:
vs =
vi
∀vi ∈ tokens(s)
At test time, given a token of a target word t in context, we compute its contextual
embedding t and choose its nearest neighbor sense from the training set, i.e., the
sense whose sense embedding has the highest cosine with t:
sense(t) = argmax
s∈senses(t)
cosine(t,vs)
Fig. . illustrates the model.
find
find
find
find
cI
cfound
cthe
cjar
cempty
ENCODER
I  found  the  jar  empty
Figure .
The nearest-neighbor algorithm for WSD. In green are the contextual embed-
dings precomputed for each sense of each word; here we just show a few of the senses for
ﬁnd. A contextual embedding is computed for the target word found, and then the nearest
neighbor sense (in this case ﬁndv) is chosen. Figure inspired by Loureiro and Jorge ().
Contextual Embeddings and Word Similarity
In Chapter  we introduced the idea that we could measure the similarity of two
words by considering how close they are geometrically, by using the cosine as a
similarity function. The idea of meaning similarity is also clear geometrically in the
meaning clusters in Fig. .; the representation of a word which has a particular
sense in a context is closer to other instances of the same sense of the word. Thus we
often measure the similarity between two instances of two words in context (or two
instances of the same word in two different contexts) by using the cosine between
their contextual embeddings.
Usually some transformations to the embeddings are required before computing
cosine. This is because contextual embeddings (whether from masked language

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
models or from autoregressive ones) have the property that the vectors for all words
are extremely similar. If we look at the embeddings from the ﬁnal layer of BERT
or other models, embeddings for instances of any two randomly chosen words will
have extremely high cosines that can be quite close to , meaning all word vectors
tend to point in the same direction. The property of vectors in a system all tending
to point in the same direction is known as anisotropy. Ethayarajh () deﬁnes
the anisotropy of a model as the expected cosine similarity of any pair of words in
anisotropy
a corpus. The word ‘isotropy’ means uniformity in all directions, so in an isotropic
model, the collection of vectors should point in all directions and the expected cosine
between a pair of random embeddings would be zero. Timkey and van Schijndel
() show that one cause of anisotropy is that cosine measures are dominated by
a small number of dimensions of the contextual embedding whose values are very
different than the others: these rogue dimensions have very large magnitudes and
very high variance.
Timkey and van Schijndel () shows that we can make the embeddings more
isotropic by standardizing (z-scoring) the vectors, i.e., subtracting the mean and
dividing by the variance. Given a set C of all the embeddings in some corpus, each
with dimensionality d (i.e., x ∈ Rd), the mean vector µ ∈ Rd is:
µ =
|C|
x∈C
The standard deviation in each dimension σ ∈ Rd is:
σ =
|C|
x∈C
(x− µ)
Then each word vector x is replaced by a standardized version z:
z = x− µ
One problem with cosine that is not solved by standardization is that cosine tends
to underestimate human judgments on similarity of word meaning for very frequent
words (Zhou et al., ).
In the next section we’ll see the most common use of contextual representations:
as representations of words or even entire sentences that can be the inputs to classi-
ﬁers in the ﬁne-tuning process for downstream NLP applications.
Fine-Tuning Language Models
The power of pretrained language models lies in their ability to extract generaliza-
tions from large amounts of text—generalizations that are useful for myriad down-
stream applications. There are two ways to make practical use of the generaliza-
tions. One way is to use natural language to prompt the model, putting it in a state
where it contextually generates what we want. We’ll introduce prompting in Chap-
ter . An alternative is to create interfaces from pretrained language models to
downstream applications through a process called ﬁne-tuning. In ﬁne-tuning, we
ﬁne-tuning
create applications on top of pretrained models by adding a small set of application-
speciﬁc parameters. The ﬁne-tuning process consists of using labeled data about

FINE-TUNING LANGUAGE MODELS
the application to train these additional application-speciﬁc parameters. Typically,
this training will either freeze or make only minimal adjustments to the pretrained
language model parameters.
The following sections introduce ﬁne-tuning methods for the most common ap-
plications including sequence classiﬁcation, sequence labeling, sentence-pair infer-
ence, and span-based operations.
Sequence Classiﬁcation
Sequence classiﬁcation applications often represent an input sequence with a single
consolidated representation. With RNNs, we used the hidden layer associated with
the ﬁnal input element to stand for the entire sequence. A similar approach is used
with transformers. An additional vector is added to the model to stand for the entire
sequence. This vector is sometimes called the sentence embedding since it refers
sentence
embedding
to the entire sequence, although the term ‘sentence embedding’ is also used in other
ways. In BERT, the [CLS] token plays the role of this embedding. This unique token
is added to the vocabulary and is prepended to the start of all input sequences, both
during pretraining and encoding. The output vector in the ﬁnal layer of the model
for the [CLS] input represents the entire input sequence and serves as the input to
a classiﬁer head, a logistic regression or neural network classiﬁer that makes the
classiﬁer head
relevant decision.
As an example, let’s return to the problem of sentiment classiﬁcation. A sim-
ple approach to ﬁne-tuning a classiﬁer for this application involves learning a set
of weights, WC, to map the output vector for the [CLS] token—zCLS—to a set of
scores over the possible sentiment classes. Assuming a three-way sentiment clas-
siﬁcation task (positive, negative, neutral) and dimensionality dh for the size of the
language model hidden layers gives WC ∈ R×dh. Classiﬁcation of unseen docu-
ments proceeds by passing the input text through the pretrained language model to
generate zCLS, multiplying it by WC, and ﬁnally passing the resulting vector through
a softmax.
y = softmax(WCzCLS)
Finetuning the values in WC requires supervised training data consisting of input
sequences labeled with the appropriate class. Training proceeds in the usual way;
cross-entropy loss between the softmax output and the correct answer is used to
drive the learning that produces WC.
A key difference from what we’ve seen earlier with neural classiﬁers is that this
loss can be used to not only learn the weights of the classiﬁer, but also to update the
weights for the pretrained language model itself. In practice, reasonable classiﬁca-
tion performance is typically achieved with only minimal changes to the language
model parameters, often limited to updates over the ﬁnal few layers of the trans-
former. Fig. . illustrates this overall approach to sequence classiﬁcation.
Pair-Wise Sequence Classiﬁcation
As mentioned in Section .., an important type of problem involves the classiﬁca-
tion of pairs of input sequences. Practical applications that fall into this class include
paraphrase detection (are the two sentences paraphrases of each other?), logical en-
tailment (does sentence A logically entail sentence B?), and discourse coherence
(how coherent is sentence B as a follow-on to sentence A?).

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
zCLS
Bidirectional Transformer Encoder
Word +
Positional
Embeddings
[CLS]
entirely
predictable
and
lacks
energy
Figure .
Sequence classiﬁcation with a bidirectional transformer encoder. The output vector for the
[CLS] token serves as input to a simple classiﬁer.
Fine-tuning an application for one of these tasks proceeds just as with pretrain-
ing using the NSP objective. During ﬁne-tuning, pairs of labeled sentences from the
supervised training data are presented to the model, and run through all the layers of
the model to produce the z outputs for each input token. As with sequence classiﬁ-
cation, the output vector associated with the prepended [CLS] token represents the
model’s view of the input pair. And as with NSP training, the two inputs are sepa-
rated by the [SEP] token. To perform classiﬁcation, the [CLS] vector is multiplied
by a set of learning classiﬁcation weights and passed through a softmax to generate
label predictions, which are then used to update the weights.
As an example, let’s consider an entailment classiﬁcation task with the Multi-
Genre Natural Language Inference (MultiNLI) dataset (Williams et al., ). In
the task of natural language inference or NLI, also called recognizing textual
natural
language
inference
entailment, a model is presented with a pair of sentences and must classify the re-
lationship between their meanings. For example in the MultiNLI corpus, pairs of
sentences are given one of  labels: entails, contradicts and neutral. These labels
describe a relationship between the meaning of the ﬁrst sentence (the premise) and
the meaning of the second sentence (the hypothesis). Here are representative exam-
ples of each class from the corpus:
Neutral
a: Jon walked back to the town to the smithy.
b: Jon traveled back to his hometown.
Contradicts
a: Tourist Information ofﬁces can be very helpful.
b: Tourist Information ofﬁces are never of any help.
Entails
a: I’m confused.
b: Not all of it is very clear to me.
A relationship of contradicts means that the premise contradicts the hypothesis; en-
tails means that the premise entails the hypothesis; neutral means that neither is
necessarily true. The meaning of these labels is looser than strict logical entailment

FINE-TUNING LANGUAGE MODELS
or contradiction indicating that a typical human reading the sentences would most
likely interpret the meanings in this way.
To ﬁne-tune a classiﬁer for the MultiNLI task, we pass the premise/hypothesis
pairs through a bidirectional encoder as described above and use the output vector
for the [CLS] token as the input to the classiﬁcation head. As with ordinary sequence
classiﬁcation, this head provides the input to a three-way classiﬁer that can be trained
on the MultiNLI training corpus.
Sequence Labelling
Sequence labelling tasks, such as part-of-speech tagging or BIO-based named entity
recognition, follow the same basic classiﬁcation approach. Here, the ﬁnal output
vector corresponding to each input token is passed to a classiﬁer that produces a
softmax distribution over the possible set of tags. Again, assuming a simple classiﬁer
consisting of a single feedforward layer followed by a softmax, the set of weights
to be learned for this additional layer is WK ∈ Rk×dh, where k is the number of
possible tags for the task. As with RNNs, a greedy approach, where the argmax tag
for each token is taken as a likely answer, can be used to generate the ﬁnal output
tag sequence. Fig. . illustrates an example of this approach.
yi = softmax(WKzi)
ti = argmaxk(yi)
Alternatively, the distribution over labels provided by the softmax for each input
token can be passed to a conditional random ﬁeld (CRF) layer which can take global
tag-level transitions into account.
NNP
MD
VB
DT
NN
Bidirectional Transformer Encoder
Embedding
Layer
[CLS]
Janet
will
back
the
bill
Figure .
Sequence labeling for part-of-speech tagging with a bidirectional transformer encoder. The
output vector for each input token is passed to a simple k-way classiﬁer.
A complication with this approach arises from the use of subword tokenization
such as WordPiece, SentencePiece Unigram LM or Byte Pair Encoding. Supervised
training data for tasks like named entity recognition (NER) is typically in the form
of BIO tags associated with text segmented at the word level. For example the
following sentence containing two named entities:

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
[LOC Mt. Sanitas ] is in [LOC Sunshine Canyon] .
would have the following set of per-word BIO tags.
(.) Mt.
B-LOC
Sanitas
I-LOC
is
in
Sunshine
B-LOC
Canyon
I-LOC
Unfortunately, the WordPiece tokenization for this sentence yields the following
sequence of tokens which doesn’t align directly with BIO tags in the ground truth
annotation:
’Mt’, ’.’, ’San’, ’##itas’, ’is’, ’in’, ’Sunshine’, ’Canyon’ ’.’
To deal with this misalignment, we need a way to assign BIO tags to subword
tokens during training and a corresponding way to recover word-level tags from
subwords during decoding. For training, we can just assign the gold-standard tag
associated with each word to all of the subword tokens derived from it.
For decoding, the simplest approach is to use the argmax BIO tag associated with
the ﬁrst subword token of a word. Thus, in our example, the BIO tag assigned to
“Mt” would be assigned to “Mt.” and the tag assigned to “San” would be assigned
to “Sanitas”, effectively ignoring the information in the tags assigned to “.” and
“##itas”. More complex approaches combine the distribution of tag probabilities
across the subwords in an attempt to ﬁnd an optimal word-level tag.
Advanced: Span-based Masking
For many NLP applications, the natural unit of interest may be larger than a single
word (or token). Question answering, syntactic parsing, coreference and semantic
role labeling applications all involve the identiﬁcation and classiﬁcation of longer
phrases. This suggests that a span-oriented masked learning objective might provide
improved performance on such tasks.
Masking Spans
A span is a contiguous sequence of one or more words selected from a training text,
prior to subword tokenization. In span-based masking, a set of randomly selected
spans from a training sequence are chosen. In the SpanBERT work that originated
this technique (Joshi et al., ), a span length is ﬁrst chosen by sampling from a
geometric distribution that is biased towards shorter spans and with an upper bound
of . Given this span length, a starting location consistent with the desired span
length and the length of the input is sampled uniformly.
Once a span is chosen for masking, all the tokens within the span are substituted
according to the same regime used in BERT: % of the time the span elements are
substituted with the [MASK] token, % of the time they are replaced by randomly
sampled tokens from the vocabulary, and % of the time they are left as is. Note
that this substitution process is done at the span level—all the tokens in a given span
are substituted using the same method. As with BERT, the total token substitution
is limited to % of the training sequence input. Having selected and masked the
training span, the input is passed through the standard transformer architecture to
generate contextualized representations of the input tokens.

ADVANCED: SPAN-BASED MASKING
Downstream span-based applications rely on span representations derived from
the tokens within the span, as well as the start and end points, or the boundaries, of
a span. Representations for these boundaries are typically derived from the ﬁrst and
last tokens of a span, the tokens immediately preceding and following the span, or
some combination of them. The SpanBERT learning objective augments the MLM
objective with a boundary oriented component called the Span Boundary Objective
(SBO). The SBO relies on a model’s ability to predict the tokens within a masked
span from the tokens immediately preceding and following the span.
Let the sequence of output from the transformer encoder for the n input tokens
s,...,xn be z,...,zn. A token xi in a masked span of tokens (xs,...,xe), i.e., starting
with token xs and ending with token xe, is represented by concatenating  embed-
dings. The ﬁrst two are the embeddings of two external boundary tokens xs− and
xe+, i.e., the token preceding xs, the token following xe. The third embedding that
is concatenated is the relative position embedding of the target token pi−s+. The
position embeddings p, p,... represent relative positions of the tokens with respect
to the left boundary token xs−.
L(x) = LMLM(x)+LSBO(x)
LSBO(xi) = −logP(xi|xs−,xe+, pi−s+)
This probability for token xi is formed by passing the concatenation of these embed-
dings through a -layer feedforward network to get the probability distribution over
the whole vocabulary at i:
si = FFN([zs−;ze+;pi−s+])
yi = softmax(WVsi)
We then use si, the output of the vector representation of token i in the span, to pre-
dict the token xi by reshaping it and passing it through a softmax to get a probability
distribution yi over the vocabulary, and select from it the probability for input token
xi.
The ﬁnal loss is the sum of the BERT MLM loss and the SBO loss.
Fig. . illustrates this with one of our earlier examples. Here the span se-
lected is and thanks for which spans from position  to . The total loss associated
with the masked token thanks is the sum of the cross-entropy loss generated from
the prediction of thanks from the output z, plus the cross-entropy loss from the
prediction of thanks from the output vectors from the left external boundary z, the
right external boundary z, and the embedding for relative position  in the span.
Fine-tuning for Span-Based Applications
Span-oriented applications operate in a middle ground between sequence level and
token level tasks. That is, in span-oriented applications the focus is on generating
and operating with representations of contiguous sequences of tokens. Typical op-
erations include identifying spans of interest, classifying spans according to some
labeling scheme, and determining relations among discovered spans. Applications
include named entity recognition, question answering, syntactic parsing, semantic
role labeling and coreference resolution.
Formally, given an input sequence x consisting of T tokens, (x,x,...,xT), a
span is a contiguous sequence of tokens with start i and end j such that  <= i <=
j <= T. This formulation results in a total set of spans equal to T(T+)
. For practical

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
Span-based loss
MLM loss
SBO loss
<latexit sha_base="TLYSoNDcSoOZKsuvuiQ=">ABnicbVDLSsNAFLprpfVZduBovgqiSlqMuiGcVAPaUCbTSTtkokzNIN/QkImU/Bh/wbxabNpGBwzlnuPdcLLCoG/WoWNzatneJuaW/PCofHzSNirWjLeYkpPWqFCFvoUDJuHmNPAkiTuzvPHNthAofcRpxNCjUPiCUwltxQHt+jIbEqDcsWunOQdeLkpAImoPyT+oWBzwEJmkxvQcOIoRoFkxWseGRRNIgnVnCKVhsRXOnhkrmlKOBMdPASPZambVyT/vFM/obiDCKkYdsMciPJUFstkKDRnKcpoUyLdEPCxlRThulsurOatFqVnatq/aFeadzmRyjCGZzDJThwDQhyagMETvMEnfFnSerXerYFtGDlfhCdbHzOIjYs=</latexit>z
<latexit sha_base="gEjGRIWPaoEJYmtATIDmQ=">ABnicbVDLSsNAFLprofjbpMgEVyWRUlWbisYB/QljCZTtqhkwczNIN+QImU/BR/wbxabNpGBwzlnuPdcNJCoXGqWtZdvfJ+eDwLhqnpxdRgrxjslKHquRzKQLeQYGSyPFqeKnNnnfe+ZKizBwnERzdBMITjGImOWZFOculyiTNKZsqWwuQTWIXpAYFoMxyHLPZgExSrQeFeEoQoFkzytDGPNIpmdMKTxbopucykMfFClbAyUJdyVFfnvZslObueJ/iBGaUiCKkQdsOciLJcGQNJWCjOUMzQpkSYaETamiDLMLdXtaKbpHtdtvxmOjrorjlCGciAKDhBlrwAGoAIMYuATvozIeDXejYltGQUfgBcbHMijsw=</latexit>z
FFN
<latexit sha_base="oMgmL/BYdJZefwM+RdYc=">ABnicbVDLSsNAFLprpfVZduBovgqiSlqMuiGcVAPaUCbTSTtMklnboQS+hNuRNwo+DH+gnjmbTgMDhPOcO+XiSFQdv+tQpbzueXsHhfFJ+fSsbcJYMioQxOGSFCwVKopEnecebPGR+VrILjLOIuwEdKeELRjGVHAcezSTQfEqDcsWuguQTeLkpAImoPyTYsjgCpmkxvQcOIoRoFkxeseGRRNIgniXnCqVhsQPdfoUkoWkqOBMbPASPZambdyT/vFM/pbCBXFyBVbDvJjSTAkWyFJozlLOUKZFuiFhYopw/QWXVnvegmadeqzk/lSvNOzIxThAihGhyhQYQhNawGAKb/AJXaXqMZLVjnNYgfXByScjYE=</latexit>p
and
for
thanks
Bidirectional Transformer Encoder
Embedding
Layer
So
long
[mask]
[mask]
[mask]
all
ﬁsh
the
So
long
and
thanks
for
all
ﬁsh
the
Figure .
Span-based language model training. In this example, a span of length  is selected for training
and all of the words in the span are masked. The ﬁgure illustrates the loss computed for word thanks; the loss
for the entire span is the sum of the loss for the three words in the span.
purposes, span-based models often impose an application-speciﬁc length limit L, so
the legal spans are limited to those where j −i < L. In the following, we’ll refer to
the enumerated set of legal spans in x as S(x).
The ﬁrst step in ﬁne-tuning a pretrained language model for a span-based ap-
plication is using the contextualized input embeddings from the model to generate
representations for all the spans in the input. Most schemes for representing spans
make use of two primary components: representations of the span boundaries and
summary representations of the contents of each span. To compute a uniﬁed span
representation, we concatenate the boundary representations with the summary rep-
resentation.
In the simplest possible approach, we can use the contextual embeddings of
the start and end tokens of a span as the boundaries, and the average of the output
embeddings within the span as the summary representation.
gij =
k=i
zk
( j −i)+
spanRepij = [zi;z j;gi, j]
A weakness of this approach is that it doesn’t distinguish the use of a word’s em-
bedding as the beginning of a span from its use as the end of one. Therefore, more
elaborate schemes for representing the span boundaries involve learned representa-
tions for start and end points through the use of two distinct feedforward networks:
si = FFNstart(zi)
e j = FFNend(z j)
spanRepij = [si;e j;gi, j]

ADVANCED: SPAN-BASED MASKING
Similarly, a simple average of the vectors in a span is unlikely to be an optimal
representation of a span since it treats all of a span’s embeddings as equally impor-
tant. For many applications, a more useful representation would be centered around
the head of the phrase corresponding to the span. One method for getting at such in-
formation in the absence of a syntactic parse is to use a standard self-attention layer
to generate a span representation.
gij = SelfAttention(zi:j)
Now, given span representations g for each span in S(x), classiﬁers can be ﬁne-
tuned to generate application-speciﬁc scores for various span-oriented tasks: binary
span identiﬁcation (is this a legitimate span of interest or not?), span classiﬁcation
(what kind of span is this?), and span relation classiﬁcation (how are these two spans
related?).
To ground this discussion, let’s return to named entity recognition (NER). Given
a scheme for representing spans and a set of named entity types, a span-based ap-
proach to NER is a straightforward classiﬁcation problem where each span in an
input is assigned a class label. More formally, given an input sequence x,...,xn,
we want to assign a label y, from the set of valid NER labels, to each of the spans in
S(x). Since most of the spans in a given input will not be named entities we’ll add
the label NULL to the set of types in Y.
yij = softmax(FFN(spanRepij)
Softmax
Classiﬁcation
Scores
FFNN
FFNN
Span representation
SelfAttn
SelfAttn
Span summary
Contextualized
Embeddings (h)
Bidirectional Transformer Encoder
Jane
Villanueva
of
United
Airlines
Holding
discussed
PER
ORG
Figure .
A span-oriented approach to named entity classiﬁcation. The ﬁgure only illustrates the compu-
tation for  spans corresponding to ground truth named entities. In reality, the network scores all of the T(T+)
spans in the text. That is, all the unigrams, bigrams, trigrams, etc. up to the length limit.
With this approach, ﬁne-tuning entails using supervised training data to learn
the parameters of the ﬁnal classiﬁer, as well as the weights used to generate the
boundary representations, and the weights in the self-attention layer that generates
the span content representation. During training, the model’s predictions for all
spans are compared to their gold-standard labels and cross-entropy loss is used to
drive the training.
During decoding, each span is scored using a softmax over the ﬁnal classiﬁer
output to generate a distribution over the possible labels, with the argmax score for
each span taken as the correct answer. Fig. . illustrates this approach with an

CHAPTER
FINE-TUNING AND MASKED LANGUAGE MODELS
example. A variation on this scheme designed to improve precision adds a calibrated
threshold to the labeling of a span as anything other than NULL.
There are two signiﬁcant advantages to a span-based approach to NER over a
BIO-based per-word labeling approach. The ﬁrst advantage is that BIO-based ap-
proaches are prone to a labeling mis-match problem. That is, every label in a longer
named entity must be correct for an output to be judged correct. Returning to the
example in Fig. ., the following labeling would be judged entirely wrong due to
the incorrect label on the ﬁrst item. Span-based approaches only have to make one
classiﬁcation for each span.
(.) Jane
B-PER
Villanueva
I-PER
of
United
I-ORG
Airlines
I-ORG
Holding
I-ORG
discussed
The second advantage to span-based approaches is that they naturally accommo-
date embedded named entities. For example, in this example both United Airlines
and United Airlines Holding are legitimate named entities. The BIO approach has
no way of encoding this embedded structure. But the span-based approach can nat-
urally label both since the spans are labeled separately.
Summary
This chapter has introduced the topic of transfer learning from pretrained language
models. Here’s a summary of the main points that we covered:
Bidirectional encoders can be used to generate contextualized representations
of input embeddings using the entire input context.
Pretrained language models based on bidirectional encoders can be learned
using a masked language model objective where a model is trained to guess
the missing information from an input.
Pretrained language models can be ﬁne-tuned for speciﬁc applications by
adding lightweight classiﬁer layers on top of the outputs of the pretrained
model.
Bibliographical and Historical Notes

Prompting, In-Context Learn-
ing, and Instruct Tuning
CHAPTER
Placeholder
Part II
NLP APPLICATIONS
In this second part of the book we introduce fundamental NLP applications:
machine translation, information retrieval, question answering, dialogue systems,
and speech recognition.

Machine Translation
CHAPTER
“I want to talk the dialect of your people. It’s no use of talking unless
people understand what you say.”
Zora Neale Hurston, Moses, Man of the Mountain , p.
This chapter introduces machine translation (MT), the use of computers to trans-
machine
translation
MT
late from one language to another.
Of course translation, in its full generality, such as the translation of literature, or
poetry, is a difﬁcult, fascinating, and intensely human endeavor, as rich as any other
area of human creativity.
Machine translation in its present form therefore focuses on a number of very
practical tasks. Perhaps the most common current use of machine translation is
for information access. We might want to translate some instructions on the web,
information
access
perhaps the recipe for a favorite dish, or the steps for putting together some furniture.
Or we might want to read an article in a newspaper, or get information from an
online resource like Wikipedia or a government webpage in some other language.
MT for information
access
is
probably
one of the most com-
mon uses of NLP
technology, and Google
Translate alone (shown above) translates hundreds of billions of words a day be-
tween over  languages. Improvements in machine translation can thus help re-
duce what is often called the digital divide in information access: the fact that much
digital divide
more information is available in English and other languages spoken in wealthy
countries. Web searches in English return much more information than searches in
other languages, and online resources like Wikipedia are much larger in English and
other higher-resourced languages. High-quality translation can help provide infor-
mation to speakers of lower-resourced languages.
Another common use of machine translation is to aid human translators. MT sys-
tems are routinely used to produce a draft translation that is ﬁxed up in a post-editing
post-editing
phase by a human translator. This task is often called computer-aided translation
or CAT. CAT is commonly used as part of localization: the task of adapting content
CAT
localization
or a product to a particular language community.
Finally, a more recent application of MT is to in-the-moment human commu-
nication needs. This includes incremental translation, translating speech on-the-ﬂy
before the entire sentence is complete, as is commonly used in simultaneous inter-
pretation. Image-centric translation can be used for example to use OCR of the text
on a phone camera image as input to an MT system to translate menus or street signs.
The standard algorithm for MT is the encoder-decoder network, an architecture
encoder-
decoder
that we introduced in Chapter  for RNNs. Recall that encoder-decoder or sequence-
to-sequence models are used for tasks in which we need to map an input sequence to
an output sequence that is a complex function of the entire input sequence. Indeed,

CHAPTER
MACHINE TRANSLATION
in machine translation, the words of the target language don’t necessarily agree with
the words of the source language in number or order. Consider translating the fol-
lowing made-up English sentence into Japanese.
(.) English:
He wrote a letter to a friend
Japanese:
tomodachi
friend
ni
to
tegami-o
letter
kaita
wrote
Note that the elements of the sentences are in very different places in the different
languages. In English, the verb is in the middle of the sentence, while in Japanese,
the verb kaita comes at the end. The Japanese sentence doesn’t require the pronoun
he, while English does.
Such differences between languages can be quite complex. In the following ac-
tual sentence from the United Nations, notice the many changes between the Chinese
sentence (we’ve given in red a word-by-word gloss of the Chinese characters) and
its English equivalent produced by human translators.
(.) 大会/General Assembly 在/on 年/ 月/December 日/ 通过
了/adopted 第号/th 决议/resolution ，核准了/approved 第二
次/second 探索/exploration 及/and 和平peaceful }colorblue利用/using 外
层空间/outer space 会议/conference 的/of 各项/various 建议/suggestions
On  December  , the General Assembly adopted resolution  in
which it endorsed the recommendations of the Second United Nations
Conference on the Exploration and Peaceful Uses of Outer Space .
Note the many ways the English and Chinese differ. For example the order-
ing differs in major ways; the Chinese order of the noun phrase is “peaceful using
outer space conference of suggestions” while the English has “suggestions of the ...
conference on peaceful use of outer space”). And the order differs in minor ways
(the date is ordered differently). English requires the in many places that Chinese
doesn’t, and adds some details (like “in which” and “it”) that aren’t necessary in
Chinese. Chinese doesn’t grammatically mark plurality on nouns (unlike English,
which has the “-s” in “recommendations”), and so the Chinese must use the modi-
ﬁer 各项/various to make it clear that there is not just one recommendation. English
capitalizes some words but not others. Encoder-decoder networks are very success-
ful at handling these sorts of complicated cases of sequence mappings.
We’ll begin in the next section by considering the linguistic background about
how languages vary, and the implications this variance has for the task of MT. Then
we’ll sketch out the standard algorithm, give details about things like input tokeniza-
tion and creating training corpora of parallel sentences, give some more low-level
details about the encoder-decoder network, and ﬁnally discuss how MT is evaluated,
introducing the simple chrF metric.
Language Divergences and Typology
There are about , languages in the world. Some aspects of human language
seem to be universal, holding true for every one of these languages, or are statistical
universal
universals, holding true for most of these languages. Many universals arise from the
functional role of language as a communicative system by humans. Every language,
for example, seems to have words for referring to people, for talking about eating and

LANGUAGE DIVERGENCES AND TYPOLOGY
drinking, for being polite or not. There are also structural linguistic universals; for
example, every language seems to have nouns and verbs (Chapter ), has ways to ask
questions, or issue commands, has linguistic mechanisms for indicating agreement
or disagreement.
Yet languages also differ in many ways (as has been pointed out since ancient
times; see Fig. .). Understanding what causes such translation divergences
translation
divergence
(Dorr, ) can help us build better MT models. We often distinguish the idiosyn-
cratic and lexical differences that must be dealt with one by one (the word for “dog”
differs wildly from language to language), from systematic differences that we can
model in a general way (many languages put the verb before the grammatical ob-
ject; others put the verb after the grammatical object). The study of these systematic
cross-linguistic similarities and differences is called linguistic typology. This sec-
typology
tion sketches some typological facts that impact machine translation; the interested
reader should also look into WALS, the World Atlas of Language Structures, which
gives many typological facts about languages (Dryer and Haspelmath, ).
Figure .
The Tower of Babel, Pieter Bruegel . Wikimedia Commons, from the
Kunsthistorisches Museum, Vienna.
Word Order Typology
As we hinted at in our example above comparing English and Japanese, languages
differ in the basic word order of verbs, subjects, and objects in simple declara-
tive clauses. German, French, English, and Mandarin, for example, are all SVO
SVO
(Subject-Verb-Object) languages, meaning that the verb tends to come between
the subject and object. Hindi and Japanese, by contrast, are SOV languages, mean-
SOV
ing that the verb tends to come at the end of basic clauses, and Irish and Arabic are
VSO languages. Two languages that share their basic word order type often have
VSO
other similarities. For example, VO languages generally have prepositions, whereas
OV languages generally have postpositions.

CHAPTER
MACHINE TRANSLATION
Let’s look in more detail at the example we saw above. In this SVO English
sentence, the verb wrote is followed by its object a letter and the prepositional phrase
to a friend, in which the preposition to is followed by its argument a friend. Arabic,
with a VSO order, also has the verb before the object and prepositions. By contrast,
in the Japanese example that follows, each of these orderings is reversed; the verb is
preceded by its arguments, and the postposition follows its argument.
(.) English:
He wrote a letter to a friend
Japanese: tomodachi
friend
ni
to
tegami-o
letter
kaita
wrote
Arabic: katabt
wrote
ris¯ala
letter
li
to
˙sadq
friend
Other kinds of ordering preferences vary idiosyncratically from language to lan-
guage. In some SVO languages (like English and Mandarin) adjectives tend to ap-
pear before nouns, while in others languages like Spanish and Modern Hebrew, ad-
jectives appear after the noun:
Spanish bruja verde
English green witch
(a)
(b)
Figure .
Examples of other word order differences: (a) In German, adverbs occur in
initial position that in English are more natural later, and tensed verbs occur in second posi-
tion. (b) In Mandarin, preposition phrases expressing goals often occur pre-verbally, unlike
in English.
Fig. . shows examples of other word order differences. All of these word
order differences between languages can cause problems for translation, requiring
the system to do huge structural reorderings as it generates the output.
Lexical Divergences
Of course we also need to translate the individual words from one language to an-
other. For any translation, the appropriate word can vary depending on the context.
The English source-language word bass, for example, can appear in Spanish as the
ﬁsh lubina or the musical instrument bajo. German uses two distinct words for what
in English would be called a wall: Wand for walls inside a building, and Mauer for
walls outside a building. Where English uses the word brother for any male sib-
ling, Chinese and many other languages have distinct words for older brother and
younger brother (Mandarin gege and didi, respectively). In all these cases, trans-
lating bass, wall, or brother from English would require a kind of specialization,
disambiguating the different uses of a word. For this reason the ﬁelds of MT and
Word Sense Disambiguation (Chapter ) are closely linked.
Sometimes one language places more grammatical constraints on word choice
than another. We saw above that English marks nouns for whether they are singular
or plural. Mandarin doesn’t. Or French and Spanish, for example, mark grammat-
ical gender on adjectives, so an English translation into French requires specifying
adjective gender.

LANGUAGE DIVERGENCES AND TYPOLOGY
The way that languages differ in lexically dividing up conceptual space may be
more complex than this one-to-many translation problem, leading to many-to-many
mappings. For example, Fig. . summarizes some of the complexities discussed
by Hutchins and Somers () in translating English leg, foot, and paw, to French.
For example, when leg is used about an animal it’s translated as French jambe; but
about the leg of a journey, as French etape; if the leg is of a chair, we use French
pied.
Further, one language may have a lexical gap, where no word or phrase, short
lexical gap
of an explanatory footnote, can express the exact meaning of a word in the other
language. For example, English does not have a word that corresponds neatly to
Mandarin xi`ao or Japanese oyak¯ok¯o (in English one has to make do with awkward
phrases like ﬁlial piety or loving child, or good son/daughter for both).
ANIMAL
paw
etape
patte
JOURNEY
ANIMAL
BIRD
foot
leg
HUMAN
HUMAN
CHAIR
jambe
pied
Figure .
The complex overlap between English leg, foot, etc., and various French trans-
lations as discussed by Hutchins and Somers ().
Finally, languages differ systematically in how the conceptual properties of an
event are mapped onto speciﬁc words. Talmy (, ) noted that languages
can be characterized by whether direction of motion and manner of motion are
marked on the verb or on the “satellites”: particles, prepositional phrases, or ad-
verbial phrases. For example, a bottle ﬂoating out of a cave would be described in
English with the direction marked on the particle out, while in Spanish the direction
would be marked on the verb:
(.) English:
The bottle ﬂoated out.
Spanish: La
The
botella
bottle
sali´o
exited
ﬂotando.
ﬂoating.
Verb-framed languages mark the direction of motion on the verb (leaving the
verb-framed
satellites to mark the manner of motion), like Spanish acercarse ‘approach’, al-
canzar ‘reach’, entrar ‘enter’, salir ‘exit’. Satellite-framed languages mark the
satellite-framed
direction of motion on the satellite (leaving the verb to mark the manner of motion),
like English crawl out, ﬂoat off, jump down, run after. Languages like Japanese,
Tamil, and the many languages in the Romance, Semitic, and Mayan languages fam-
ilies, are verb-framed; Chinese as well as non-Romance Indo-European languages
like English, Swedish, Russian, Hindi, and Farsi are satellite framed (Talmy ,
Slobin ).
Morphological Typology
Morphologically, languages are often characterized along two dimensions of vari-
ation.
The ﬁrst is the number of morphemes per word, ranging from isolating
isolating
languages like Vietnamese and Cantonese, in which each word generally has one
morpheme, to polysynthetic languages like Siberian Yupik (“Eskimo”), in which a
polysynthetic
single word may have very many morphemes, corresponding to a whole sentence in

CHAPTER
MACHINE TRANSLATION
English. The second dimension is the degree to which morphemes are segmentable,
ranging from agglutinative languages like Turkish, in which morphemes have rel-
agglutinative
atively clean boundaries, to fusion languages like Russian, in which a single afﬁx
fusion
may conﬂate multiple morphemes, like -om in the word stolom (table-SG-INSTR-
DECL), which fuses the distinct morphological categories instrumental, singular,
and ﬁrst declension.
Translating between languages with rich morphology requires dealing with struc-
ture below the word level, and for this reason modern systems generally use subword
models like the wordpiece or BPE models of Section ...
Referential density
Finally, languages vary along a typological dimension related to the things they tend
to omit. Some languages, like English, require that we use an explicit pronoun when
talking about a referent that is given in the discourse. In other languages, however,
we can sometimes omit pronouns altogether, as the following example from Spanish
shows:
(.) [El jefe]i dio con un libro. /i Mostr´o su hallazgo a un descifrador ambulante.
[The boss] came upon a book. [He] showed his ﬁnd to a wandering decoder.
Languages that can omit pronouns are called pro-drop languages. Even among
pro-drop
the pro-drop languages, there are marked differences in frequencies of omission.
Japanese and Chinese, for example, tend to omit far more than does Spanish. This
dimension of variation across languages is called the dimension of referential den-
sity. We say that languages that tend to use more pronouns are more referentially
referential
density
dense than those that use more zeros. Referentially sparse languages, like Chinese or
Japanese, that require the hearer to do more inferential work to recover antecedents
are also called cold languages. Languages that are more explicit and make it easier
cold language
for the hearer are called hot languages. The terms hot and cold are borrowed from
hot language
Marshall McLuhan’s  distinction between hot media like movies, which ﬁll in
many details for the viewer, versus cold media like comics, which require the reader
to do more inferential work to ﬁll out the representation (Bickel, ).
Translating from languages with extensive pro-drop, like Chinese or Japanese, to
non-pro-drop languages like English can be difﬁcult since the model must somehow
identify each zero and recover who or what is being talked about in order to insert
the proper pronoun.
Machine Translation using Encoder-Decoder
The standard architecture for MT is the encoder-decoder transformer or sequence-
to-sequence model, an architecture we saw for RNNs in Chapter . We’ll see the
details of how to apply this architecture to transformers in Section ., but ﬁrst let’s
talk about the overall task.
Most machine translation tasks make the simpliﬁcation that we can translate each
sentence independently, so we’ll just consider individual sentences for now. Given
a sentence in a source language, the MT task is then to generate a corresponding
sentence in a target language. For example, an MT system is given an English
sentence like
Here we use the /-notation; we’ll introduce this and discuss this issue further in Chapter
MACHINE TRANSLATION USING ENCODER-DECODER
The green witch arrived
and must translate it into the Spanish sentence:
Lleg´o la bruja verde
MT uses supervised machine learning: at training time the system is given a
large set of parallel sentences (each sentence in a source language matched with
a sentence in the target language), and learns to map source sentences into target
sentences. In practice, rather than using words (as in the example above), we split
the sentences into a sequence of subword tokens (tokens can be words, or subwords,
or individual characters). The systems are then trained to maximize the probability
of the sequence of tokens in the target language y,...,ym given the sequence of
tokens in the source language x,...,xn:
P(y,...,ym|x,...,xn)
Rather than use the input tokens directly, the encoder-decoder architecture con-
sists of two components, an encoder and a decoder. The encoder takes the input
words x = [x,...,xn] and produces an intermediate context h. At decoding time, the
system takes h and, word by word, generates the output y:
h = encoder(x)
yi+ = decoder(h,y,...,yi))
∀i ∈ [,...,m]
In the next two sections we’ll talk about subword tokenization, and then how to get
parallel corpora for training, and then we’ll introduce the details of the encoder-
decoder architecture.
Tokenization
Machine translation systems use a vocabulary that is ﬁxed in advance, and rather
than using space-separated words, this vocabulary is generated with subword to-
kenization algorithms, like the BPE algorithm sketched in Chapter . A shared
vocabulary is used for the source and target languages, which makes it easy to copy
tokens (like names) from source to target. Using subword tokenization with tokens
shared between languages makes it natural to translate between languages like En-
glish or Hindi that use spaces to separate words, and languages like Chinese or Thai
that don’t.
We build the vocabulary by running a subword tokenization algorithm on a cor-
pus that contains both source and target language data.
Rather than the simple BPE algorithm from Fig. ., modern systems often use
more powerful tokenization algorithms. Some systems (like BERT) use a variant of
BPE called the wordpiece algorithm, which instead of choosing the most frequent
wordpiece
set of tokens to merge, chooses merges based on which one most increases the lan-
guage model probability of the tokenization. Wordpieces use a special symbol at the
beginning of each token; here’s a resulting tokenization from the Google MT system
(Wu et al., ):
words:
Jet makers feud over seat width with big orders at stake
wordpieces:
J et makers fe ud over seat width with big orders at stake
The wordpiece algorithm is given a training corpus and a desired vocabulary size
V, and proceeds as follows:

CHAPTER
MACHINE TRANSLATION
. Initialize the wordpiece lexicon with characters (for example a subset of Uni-
code characters, collapsing all the remaining characters to a special unknown
character token).
. Repeat until there are V wordpieces:
(a) Train an n-gram language model on the training corpus, using the current
set of wordpieces.
(b) Consider the set of possible new wordpieces made by concatenating two
wordpieces from the current lexicon. Choose the one new wordpiece that
most increases the language model probability of the training corpus.
Recall that with BPE we had to specify the number of merges to perform; in
wordpiece, by contrast, we specify the total vocabulary, which is a more intuitive
parameter. A vocabulary of K to K word pieces is commonly used.
An even more commonly used tokenization algorithm is (somewhat ambigu-
ously) called the unigram algorithm (Kudo, ) or sometimes the SentencePiece
unigram
SentencePiece
algorithm, and is used in systems like ALBERT (Lan et al., ) and T (Raf-
fel et al., ). (Because unigram is the default tokenization algorithm used in a
library called SentencePiece that adds a useful wrapper around tokenization algo-
rithms (Kudo and Richardson, b), authors often say they are using Sentence-
Piece tokenization but really mean they are using the unigram algorithm)).
In unigram tokenization, instead of building up a vocabulary by merging tokens,
we start with a huge vocabulary of every individual unicode character plus all fre-
quent sequences of characters (including all space-separated words, for languages
with spaces), and iteratively remove some tokens to get to a desired ﬁnal vocabulary
size. The algorithm is complex (involving sufﬁx-trees for efﬁciently storing many
tokens, and the EM algorithm for iteratively assigning probabilities to tokens), so we
don’t give it here, but see Kudo () and Kudo and Richardson (b). Roughly
speaking the algorithm proceeds iteratively by estimating the probability of each
token, tokenizing the input data using various tokenizations, then removing a per-
centage of tokens that don’t occur in high-probability tokenization, and then iterates
until the vocabulary has been reduced down to the desired number of tokens.
Why does unigram tokenization work better than BPE? BPE tends to creates lots
of very small non-meaningful tokens (because BPE can only create larger words or
morphemes by merging characters one at a time), and it also tends to merge very
common tokens, like the sufﬁx ed, onto their neighbors. We can see from these
examples from Bostrom and Durrett () that unigram tends to produce tokens
that are more semantically meaningful:
Original:
corrupted
Original:
Completely preposterous suggestions
BPE:
cor rupted
BPE:
Comple t ely prep ost erous suggest ions
Unigram: corrupt ed
Unigram: Complete ly pre post er ous suggestion s
Creating the Training data
Machine translation models are trained on a parallel corpus, sometimes called a
parallel corpus
bitext, a text that appears in two (or more) languages. Large numbers of paral-
lel corpora are available. Some are governmental; the Europarl corpus (Koehn,
Europarl
), extracted from the proceedings of the European Parliament, contains between
, and  million sentences each from  European languages. The United Na-
tions Parallel Corpus contains on the order of  million sentences in the six ofﬁcial
languages of the United Nations (Arabic, Chinese, English, French, Russian, Span-
ish) Ziemski et al. (). Other parallel corpora have been made from movie and

MACHINE TRANSLATION USING ENCODER-DECODER
TV subtitles, like the OpenSubtitles corpus (Lison and Tiedemann, ), or from
general web text, like the ParaCrawl corpus of  million sentence pairs between
EU languages and English extracted from the CommonCrawl Ba˜n´on et al. ().
Sentence alignment
Standard training corpora for MT come as aligned pairs of sentences. When creat-
ing new corpora, for example for underresourced languages or new domains, these
sentence alignments must be created. Fig. . gives a sample hypothetical sentence
alignment.
E: “Good morning," said the little prince.
F: -Bonjour, dit le petit prince.
E: “Good morning," said the merchant.
F: -Bonjour, dit le marchand de pilules perfectionnées qui
apaisent la soif.
E: This was a merchant who sold pills that had
been perfected to quench thirst.
F: On en avale une par semaine et l'on n'éprouve plus le
besoin de boire.
F: -C’est une grosse économie de temps, dit le marchand.
E: You just swallow one pill a week and you
won’t feel the need for anything to drink.
F: Les experts ont fait des calculs.
E: “They save a huge amount of time," said the merchant.
E: “Fifty−three minutes a week."
F: On épargne cinquante-trois minutes par semaine.
E: “If I had  fifty−three minutes to spend?" said the
little prince to himself.
F: “Moi, se dit le petit prince, si j'avais cinquante-trois minutes
à dépenser, je marcherais tout doucement vers une fontaine..."
E: “I would take a stroll to a spring of fresh water”
Figure .
A sample alignment between sentences in English and French, with sentences extracted from
Antoine de Saint-Exupery’s Le Petit Prince and a hypothetical translation. Sentence alignment takes sentences
e,...,en, and f,..., fn and ﬁnds minimal sets of sentences that are translations of each other, including single
sentence mappings like (e,f), (e,f), (e,f), (e,f) as well as - alignments (e/e,f), (e/e,f), and null
alignments (f).
Given two documents that are translations of each other, we generally need two
steps to produce sentence alignments:
a cost function that takes a span of source sentences and a span of target sen-
tences and returns a score measuring how likely these spans are to be transla-
tions.
an alignment algorithm that takes these scores to ﬁnd a good alignment be-
tween the documents.
To score the similarity of sentences across languages, we need to make use of
a multilingual embedding space, in which sentences from different languages are
in the same embedding space (Artetxe and Schwenk, ). Given such a space,
cosine similarity of such embeddings provides a natural scoring function (Schwenk,
). Thompson and Koehn () give the following cost function between two
sentences or spans x,y from the source and target documents respectively:
c(x,y) =
(−cos(x,y))nSents(x) nSents(y)
PS
s= −cos(x,ys)+PS
s= −cos(xs,y)
where nSents() gives the number of sentences (this biases the metric toward many
alignments of single sentences instead of aligning very large spans). The denom-
inator helps to normalize the similarities, and so x,...,xS,y,...,yS, are randomly
selected sentences sampled from the respective documents.
Usually dynamic programming is used as the alignment algorithm (Gale and
Church, ), in a simple extension of the minimum edit distance algorithm we
introduced in Chapter .

CHAPTER
MACHINE TRANSLATION
Finally, it’s helpful to do some corpus cleanup by removing noisy sentence pairs.
This can involve handwritten rules to remove low-precision pairs (for example re-
moving sentences that are too long, too short, have different URLs, or even pairs
that are too similar, suggesting that they were copies rather than translations). Or
pairs can be ranked by their multilingual embedding cosine score and low-scoring
pairs discarded.
Details of the Encoder-Decoder Model
Decoder
llegó
la
bruja
verde
</s>
cross-attention
transformer
blocks
The
green
witch
arrived
<s>
llegó
la
bruja
verde
Encoder
Figure .
The encoder-decoder transformer architecture for machine translation. The encoder uses the
transformer blocks we saw in Chapter , while the decoder uses a more powerful block with an extra cross-
attention layer that can attend to all the encoder words. We’ll see this in more detail in the next section.
The standard architecture for MT is the encoder-decoder transformer. The encoder-
decoder architecture was introduced already for RNNs in Chapter , and the trans-
former version has the same idea. Fig. . shows the intuition of the architecture
at a high level You’ll see that the encoder-decoder architecture is made up of two
transformers: an encoder, which is the same as the basic transformers from Chap-
ter , and a decoder, which is augmented with a special new layer called the cross-
attention layer. The encoder takes the source language input words X = x,...,xT
and maps them to an output representation Henc = h,...,hT; usually via N =
stacked encoder blocks.
The decoder is essentially a conditional language model that attends to the en-
coder representation and generates the target words one by one, at each timestep
conditioning on the source sentence and the previously generated target language
words to generate a token. Decoding can use any of the decoding methods discussed
in Chapter  like greedy, or temperature or nucleus sampling. But the most com-
mon decoding algorithm for MT is the beam search algorithm that we’ll introduce
in Section ..
But the components of the architecture differ somewhat from the RNN and also
from the transformer block we’ve seen. First, in order to attend to the source lan-
guage, the transformer blocks in the decoder have an extra cross-attention layer.
Recall that the transformer block of Chapter  consists of a self-attention layer
that attends to the input from the previous layer, followed by layer norm, a feed
forward layer, and another layer norm. The decoder transformer block includes an
extra layer with a special kind of attention, cross-attention (also sometimes called
cross-attention
encoder-decoder attention or source attention). Cross-attention has the same form
as the multi-headed self-attention in a normal transformer block, except that while

DETAILS OF THE ENCODER-DECODER MODEL
the queries as usual come from the previous layer of the decoder, the keys and values
come from the output of the encoder.
ym
Linear Layer
Block
hn
hn
hn
hn
Block
Block
Layer Normalize
Block
Layer Normalize
Feedforward
Layer Normalize
Feedforward
Encoder
Block
Decoder
Block
Cross-Attention Layer
Layer Normalize
Layer Normalize
Self-Attention Layer
Causal Self-Attention Layer
xn
Decoder
Encoder
Figure .
The transformer block for the encoder and the decoder. The ﬁnal output of the encoder Henc =
h,...,hT is the context used in the decoder. The decoder is a standard transformer except with one extra layer,
the cross-attention layer, which takes that decoder output Henc and uses it to form its K and V inputs.
That is, the ﬁnal output of the encoder Henc = h,...,ht is multiplied by the
cross-attention layer’s key weights WK and value weights WV, but the output from
the prior decoder layer Hdec[i−] is multiplied by the cross-attention layer’s query
weights WQ:
Q = WQHdec[i−]; K = WKHenc; V = WVHenc
√dk
CrossAttention(Q,K,V) = softmax
QK⊺

The cross attention thus allows the decoder to attend to each of the source language
words as projected into the entire encoder ﬁnal output representations. The other
attention layer in each decoder block, the self-attention layer, is the same causal (left-
to-right) self-attention that we saw in Chapter . The self-attention in the encoder,
however, is allowed to look ahead at the entire source language text.
To train an encoder-decoder model, we use the same self-supervision model we
used for training encoder-decoders RNNs in Chapter . The network is given the
source text and then starting with the separator token is trained autoregressively to
predict the next token yt, using cross-entropy loss:
LCE( ˆyt,yt) = −log ˆyt[wt+]

CHAPTER
MACHINE TRANSLATION
As in that case, we use teacher forcing in the decoder. Recall that in teacher forc-
teacher forcing
ing, at each time step in decoding we force the system to use the gold target token
from training as the next input xt+, rather than allowing it to rely on the (possibly
erroneous) decoder output ˆyt.
Decoding in MT: Beam Search
Recall the greedy decoding algorithm from Chapter : at each time step t in gen-
eration, the output yt is chosen by computing the probability for each word in the
vocabulary and then choosing the highest probability word (the argmax):
ˆwt = argmaxw∈V P(w|w<t)
A problem with greedy decoding is that what looks high probability at word t might
turn out to have been the wrong choice once we get to word t +. The beam search
algorithm maintains multiple choices until later when we can see which one is best.
In beam search we model decoding as searching the space of possible genera-
tions, represented as a search tree whose branches represent actions (generating a
search tree
token), and nodes represent states (having generated a particular preﬁx). We search
for the best action sequence, i.e., the string with the highest probability.
An illustration of the problem
Fig. . shows a made-up example. The most probable sequence is ok ok EOS (its
probability is .× .× .). But greedy search doesn’t ﬁnd it, incorrectly choosing
yes as the ﬁrst word since it has the highest local probability (.).
p(t| t,t)
p(t| t)
ok
EOS
yes
EOS
p(t|start)
ok
EOS
yes
ok
EOS
start
yes
EOS
EOS
EOS
Figure .
A search tree for generating the target string T = t,t,... from vocabulary
V = {yes,ok,<s>}, showing the probability of generating each token from that state. Greedy
search chooses yes followed by yes, instead of the globally most probable sequence ok ok.
Recall from Chapter  that for part-of-speech tagging we used dynamic pro-
gramming search (the Viterbi algorithm) to address this problem. Unfortunately,
dynamic programming is not applicable to generation problems with long-distance
dependencies between the output decisions. The only method guaranteed to ﬁnd the
best solution is exhaustive search: computing the probability of every one of the V T
possible sentences (for some length value T) which is obviously too slow.

DECODING IN MT: BEAM SEARCH
The solution: beam search
Instead, MT systems generally decode using beam search, a heuristic search method
beam search
ﬁrst proposed by Lowerre (). In beam search, instead of choosing the best token
to generate at each timestep, we keep k possible tokens at each step. This ﬁxed-size
memory footprint k is called the beam width, on the metaphor of a ﬂashlight beam
beam width
that can be parameterized to be wider or narrower.
Thus at the ﬁrst step of decoding, we compute a softmax over the entire vocab-
ulary, assigning a probability to each word. We then select the k-best options from
this softmax output. These initial k outputs are the search frontier and these k initial
words are called hypotheses. A hypothesis is an output sequence, a translation-so-
far, together with its probability.
arrived
the
green
hd
hd
hd
hd
hd
arrived
BOS
aardvark
mage
the
BOS
green
hd
the
the
aardvark
witch
witch
BOS
arrived
zebra
zebra
start
the
arrived
zebra
aardvark
aardvark
the
green
green
witch
who
hd
hd
the
witch
zebra
zebra
the
BOS
hd
hd
hd
the
BOS
witch
Figure .
Beam search decoding with a beam width of k = . At each time step, we choose the k best
hypotheses, form the V possible extensions of each, score those k ×V hypotheses and choose the best k =
to continue. At time , the frontier has the best  options from the initial decoder state: arrived and the. We
extend each, compute the probability of all the hypotheses so far (arrived the, arrived aardvark, the green, the
witch) and again chose the best  (the green and the witch) to be the search frontier. The images on the arcs
schematically represent the decoders that must be run at each step to score the next words (for simplicity not
depicting cross-attention).
At subsequent steps, each of the k best hypotheses is extended incrementally
by being passed to distinct decoders, which each generate a softmax over the entire
vocabulary to extend the hypothesis to every possible next token. Each of these k×V
hypotheses is scored by P(yi|x,y<i): the product of the probability of the current
word choice multiplied by the probability of the path that led to it. We then prune
the k ×V hypotheses down to the k best hypotheses, so there are never more than k

CHAPTER
MACHINE TRANSLATION
hypotheses at the frontier of the search, and never more than k decoders. Fig. .
illustrates this with a beam width of  for the beginning of The green witch arrived.
This process continues until an EOS is generated indicating that a complete can-
didate output has been found. At this point, the completed hypothesis is removed
from the frontier and the size of the beam is reduced by one. The search continues
until the beam has been reduced to . The result will be k hypotheses.
To score each node by its log probability, we use the chain rule of probability to
break down p(y|x) into the product of the probability of each word given its prior
context, which we can turn into a sum of logs (for an output string of length t):
score(y) = logP(y|x)
= log(P(y|x)P(y|y,x)P(y|y,y,x)...P(yt|y,...,yt−,x))
i=
logP(yi|y,...,yi−,x)
tX
Thus at each step, to compute the probability of a partial sentence, we simply add the
log probability of the preﬁx sentence so far to the log probability of generating the
next token. Fig. . shows the scoring for the example sentence shown in Fig. .,
using some simple made-up probabilities. Log probabilities are negative or , and
the max of two log probabilities is the one that is greater (closer to ).
log P (arrived the|x)
log P (“the green witch arrived”|x)
= log P (the|x) + log P(green|the,x)
= -.
+ log P(witch | the, green,x)
the
+logP(arrived|the,green,witch,x)
+log P(EOS|the,green,witch,arrived,x)
log P(arrived|x)
log P(arrived witch|x)
mage
= -.
EOS
arrived
witch
arrived
log P(the green|x)
at
= -.
BOS
log P(the|x)
came
witch
green
the
log P(the witch|x)
= -.
EOS
arrived
witch
by
who
log P(y|x)
log P(y|y,x)
log P(y|y,y,x)
log P(y|y,y,y,x)
log P(y|y,y,y,y,x)
Figure .
Scoring for beam search decoding with a beam width of k = . We maintain the log probability
of each hypothesis in the beam by incrementally adding the logprob of generating each next token. Only the top
k paths are extended to the next step.
Fig. . gives the algorithm. One problem with this version of the algorithm is
that the completed hypotheses may have different lengths. Because language mod-
els generally assign lower probabilities to longer strings, a naive algorithm would
choose shorter strings for y. (This is not an issue during the earlier steps of decod-
ing; since beam search is breadth-ﬁrst, all the hypotheses being compared had the
same length.) For this reason we often apply length normalization methods, like

DECODING IN MT: BEAM SEARCH
function BEAMDECODE(c, beam width) returns best paths
y, h ←
path←()
complete paths←()
state←(c, y, h, path)
;initial state
frontier←⟨state⟩
;initial frontier
while frontier contains incomplete paths and beamwidth >
extended frontier←⟨⟩
for each state ∈ frontier do
y←DECODE(state)
for each word i ∈ Vocabulary do
successor←NEWSTATE(state, i, yi)
extended frontier←ADDTOBEAM(successor, extended frontier,
beam width)
for each state in extended frontier do
if state is complete do
complete paths←APPEND(complete paths, state)
extended frontier←REMOVE(extended frontier, state)
beam width←beam width -
frontier←extended frontier
return completed paths
function NEWSTATE(state, word, word prob) returns new state
function ADDTOBEAM(state, frontier, width) returns updated frontier
if LENGTH(frontier) < width then
frontier←INSERT(state, frontier)
else if SCORE(state) > SCORE(WORSTOF(frontier))
frontier←REMOVE(WORSTOF(frontier))
frontier←INSERT(state, frontier)
return frontier
Figure .
Beam search decoding.
dividing the logprob by the number of words:
score(y) = logP(y|x) =
i=
logP(yi|y,...,yi−,x)
tX
For MT we generally use beam widths k between  and , giving us k hypotheses at
the end. We can pass all k to the downstream application with their respective scores,
or if we just need a single translation we can pass the most probable hypothesis.
Minimum Bayes Risk Decoding
Minimum Bayes risk or MBR decoding is an alternative decoding algorithm that
minimum
Bayes risk
MBR
can work even better than beam search and also tends to be better than the other
decoding algorithms like temperature sampling introduced in Section ..
The intuition of minimum Bayes risk is that instead of trying to choose the trans-
lation which is most probable, we choose the one that is likely have the least error.

CHAPTER
MACHINE TRANSLATION
For example, we might want our decoding algorithm to ﬁnd the translation which
has the highest score on some evaluation metric. For example in Section . we will
introduce metrics like chrF or BERTScore that measure the goodness-of-ﬁt between
a candidate translation and a set of reference human translations. A translation that
maximizes this score, especially with a hypothetically huge set of perfect human
translations is likely to be a good one (have minimum risk) even if it is not the most
probable translation by our particular probability estimator.
In practice, we don’t know the perfect set of translations for a given sentence. So
the standard simpliﬁcation used in MBR decoding algorithms is to instead choose
the candidate translation which is most similar (by some measure of goodness-of-
ﬁt) with some set of candidate translations. We’re essentially approximating the
enormous space of all possible translations U with a smaller set of possible candidate
translations Y.
Given this set of possible candidate translations Y, and some similarity or align-
ment function util, we choose the best translation ˆy as the translation which is most
similar to all the other candidate translations:
ˆy = argmax
y∈Y
c∈Y
util(y,c)
Various util functions can be used, like chrF or BERTscore or BLEU. We can get the
set of candidate translations by sampling using one of the basic sampling algorithms
of Section . like temperature sampling; good results can be obtained with as few
as  or  candidates.
Minimum Bayes risk decoding can also be used for other NLP tasks; indeed
it was widely applied to speech recognition (Stolcke et al., ; Goel and Byrne,
) before being applied to machine translation (Kumar and Byrne, ), and
has been shown to work well across many other generation tasks as well (e.g., sum-
marization, dialogue, and image captioning (Suzgun et al., )).
Translating in low-resource situations
For some languages, and especially for English, online resources are widely avail-
able. There are many large parallel corpora that contain translations between En-
glish and many languages. But the vast majority of the world’s languages do not
have large parallel training texts available. An important ongoing research question
is how to get good translation with lesser resourced languages. The resource prob-
lem can even be true for high resource languages when we need to translate into low
resource domains (for example in a particular genre that happens to have very little
bitext).
Here we brieﬂy introduce two commonly used approaches for dealing with this
data sparsity: backtranslation, which is a special case of the general statistical
technique called data augmentation, and multilingual models, and also discuss
some socio-technical issues.
Data Augmentation
Data augmentation is a statistical technique for dealing with insufﬁcient training
data, by adding new synthetic data that is generated from the current natural data.

TRANSLATING IN LOW-RESOURCE SITUATIONS
The most common data augmentation technique for machine translation is called
backtranslation. Backtranslation relies on the intuition that while parallel corpora
backtranslation
may be limited for particular languages or domains, we can often ﬁnd a large (or
at least larger) monolingual corpus, to add to the smaller parallel corpora that are
available. The algorithm makes use of monolingual corpora in the target language
by creating synthetic bitexts.
In backtranslation, our goal is to improve source-to-target MT, given a small
parallel text (a bitext) in the source/target languages, and some monolingual data in
the target language. We ﬁrst use the bitext to train a MT system in the reverse di-
rection: a target-to-source MT system . We then use it to translate the monolingual
target data to the source language. Now we can add this synthetic bitext (natural
target sentences, aligned with MT-produced source sentences) to our training data,
and retrain our source-to-target MT model. For example suppose we want to trans-
late from Navajo to English but only have a small Navajo-English bitext, although of
course we can ﬁnd lots of monolingual English data. We use the small bitext to build
an MT engine going the other way (from English to Navajo). Once we translate the
monolingual English text to Navajo, we can add this synthetic Navajo/English bitext
to our training data.
Backtranslation has various parameters. One is how we generate the backtrans-
lated data; we can run the decoder in greedy inference, or use beam search. Or we
can do sampling, like the temperature sampling algorithm we saw in Chapter .
Another parameter is the ratio of backtranslated data to natural bitext data; we can
choose to upsample the bitext data (include multiple copies of each sentence). In
general backtranslation works surprisingly well; one estimate suggests that a system
trained on backtranslated text gets about / of the gain as would training on the
same amount of natural bitext (Edunov et al., ).
Multilingual models
The models we’ve described so far are for bilingual translation: one source language,
one target language. It’s also possible to build a multilingual translator.
In a multilingual translator, we train the system by giving it parallel sentences
in many different pairs of languages. That means we need to tell the system which
language to translate from and to! We tell the system which language is which
by adding a special token ls to the encoder specifying the source language we’re
translating from, and a special token lt to the decoder telling it the target language
we’d like to translate into.
Thus we slightly update Eq. . above to add these tokens in Eq. .:
h = encoder(x,ls)
yi+ = decoder(h,lt,y,...,yi))
∀i ∈ [,...,m]
One advantage of a multilingual model is that they can improve the translation
of lower-resourced languages by drawing on information from a similar language
in the training data that happens to have more resources. Perhaps we don’t know
the meaning of a word in Galician, but the word appears in the similar and higher-
resourced language Spanish.
Sociotechnical issues
Many issues in dealing with low-resource languages go beyond the purely techni-
cal. One problem is that for low-resource languages, especially from low-income

CHAPTER
MACHINE TRANSLATION
countries, native speakers are often not involved as the curators for content selec-
tion, as the language technologists, or as the evaluators who measure performance
(∀ et al., ). Indeed, one well-known study that manually audited a large set of
parallel corpora and other major multilingual datasets found that for many of the
corpora, less than % of the sentences were of acceptable quality, with a lot of
data consisting of repeated sentences with web boilerplate or incorrect translations,
suggesting that native speakers may not have been sufﬁciently involved in the data
process (Kreutzer et al., ).
Other issues, like the tendency of many MT approaches to focus on the case
where one of the languages is English (Anastasopoulos and Neubig, ), have to
do with allocation of resources. Where most large multilingual systems were trained
on bitexts in which English was one of the two languages, recent huge corporate
systems like those of Fan et al. () and Costa-juss`a et al. () and datasets
like Schwenk et al. () attempt to handle large numbers of languages (up to
languages) and create bitexts between many more pairs of languages and not just
through English.
At the smaller end, ∀ et al. () propose a participatory design process to
encourage content creators, curators, and language technologists who speak these
low-resourced languages to participate in developing MT algorithms. They provide
online groups, mentoring, and infrastructure, and report on a case study on devel-
oping MT algorithms for low-resource African languages. Among their conclusions
was perform MT evaluation by post-editing rather than direct evaluation, since hav-
ing labelers edit an MT system and then measure the distance between the MT output
and its post-edited version both was simpler to train evaluators and makes it easier to
measure true errors in the MT output and not differences due to linguistic variation
(Bentivogli et al., ).
MT Evaluation
Translations are evaluated along two dimensions:
. adequacy: how well the translation captures the exact meaning of the source
adequacy
sentence. Sometimes called faithfulness or ﬁdelity.
. ﬂuency: how ﬂuent the translation is in the target language (is it grammatical,
ﬂuency
clear, readable, natural).
Using humans to evaluate is most accurate, but automatic metrics are also used for
convenience.
Using Human Raters to Evaluate MT
The most accurate evaluations use human raters, such as online crowdworkers, to
evaluate each translation along the two dimensions. For example, along the dimen-
sion of ﬂuency, we can ask how intelligible, how clear, how readable, or how natural
the MT output (the target text) is. We can give the raters a scale, for example, from
(totally unintelligible) to  (totally intelligible), or  to , and ask them to rate
each sentence or paragraph of the MT output.
We can do the same thing to judge the second dimension, adequacy, using raters
to assign scores on a scale. If we have bilingual raters, we can give them the source
sentence and a proposed target sentence, and rate, on a -point or -point scale,

MT EVALUATION
how much of the information in the source was preserved in the target. If we only
have monolingual raters but we have a good human translation of the source text, we
can give the monolingual raters the human reference translation and a target machine
translation and again rate how much information is preserved. An alternative is to
do ranking: give the raters a pair of candidate translations, and ask them which one
ranking
they prefer.
Training of human raters (who are often online crowdworkers) is essential; raters
without translation expertise ﬁnd it difﬁcult to separate ﬂuency and adequacy, and
so training includes examples carefully distinguishing these. Raters often disagree
(source sentences may be ambiguous, raters will have different world knowledge,
raters may apply scales differently). It is therefore common to remove outlier raters,
and (if we use a ﬁne-grained enough scale) normalizing raters by subtracting the
mean from their scores and dividing by the variance.
As discussed above, an alternative way of using human raters is to have them
post-edit translations, taking the MT output and changing it minimally until they
feel it represents a correct translation. The difference between their post-edited
translations and the original MT output can then be used as a measure of quality.
Automatic Evaluation
While humans produce the best evaluations of machine translation output, running a
human evaluation can be time consuming and expensive. For this reason automatic
metrics are often used as temporary proxies. Automatic metrics are less accurate
than human evaluation, but can help test potential system improvements, and even
be used as an automatic loss function for training. In this section we introduce two
families of such metrics, those based on character- or word-overlap and those based
on embedding similarity.
Automatic Evaluation by Character Overlap: chrF
The simplest and most robust metric for MT evaluation is called chrF, which stands
chrF
for character F-score (Popovi´c, ). chrF (along with many other earlier related
metrics like BLEU, METEOR, TER, and others) is based on a simple intuition de-
rived from the pioneering work of Miller and Beebe-Center (): a good machine
translation will tend to contain characters and words that occur in a human trans-
lation of the same sentence. Consider a test set from a parallel corpus, in which
each source sentence has both a gold human target translation and a candidate MT
translation we’d like to evaluate. The chrF metric ranks each MT target sentence by
a function of the number of character n-gram overlaps with the human translation.
Given the hypothesis and the reference, chrF is given a parameter k indicating
the length of character n-grams to be considered, and computes the average of the
k precisions (unigram precision, bigram, and so on) and the average of the k recalls
(unigram recall, bigram recall, etc.):
chrP percentage of character -grams, -grams, ..., k-grams in the hypothesis that
occur in the reference, averaged.
chrR percentage of character -grams, -grams,..., k-grams in the reference that
occur in the hypothesis, averaged.
The metric then computes an F-score by combining chrP and chrR using a weighting
parameter β. It is common to set β = , thus weighing recall twice as much as

CHAPTER
MACHINE TRANSLATION
precision:
chrFβ = (+β )
chrPchrR
β  chrP+chrR
For β = , that would be:
chrF = chrPchrR
chrP+chrR
For example, consider two hypotheses that we’d like to score against the refer-
ence translation witness for the past. Here are the hypotheses along with chrF values
computed using parameters k = β =  (in real examples, k would be a higher number
like ):
REF: witness for the past,
HYP: witness of the past, chrF, = .
HYP: past witness
chrF, = .
Let’s see how we computed that chrF value for HYP (we’ll leave the compu-
tation of the chrF value for HYP as an exercise for the reader). First, chrF ignores
spaces, so we’ll remove them from both the reference and hypothesis:
REF: witnessforthepast, ( unigrams,  bigrams)
HYP: witnessofthepast, ( unigrams,  bigrams)
Next let’s see how many unigrams and bigrams match between the reference and
hypothesis:
unigrams that match: w i t n e s s f o t h e p a s t , ( unigrams)
bigrams that match: wi it tn ne es ss th he ep pa as st t, ( bigrams)
We use that to compute the unigram and bigram precisions and recalls:
unigram P: / =
unigram R: / = .
bigram P:
/ = . bigram R:
/ = .
Finally we average to get chrP and chrR, and compute the F-score:
chrP = (/+/)/ = .
chrR = (/+/)/ = .
chrF, =  chrP∗chrR
chrP+chrR = .
chrF is simple, robust, and correlates very well with human judgments in many
languages (Kocmi et al., ).
Alternative overlap metric: BLEU
There are various alternative overlap metrics. For example, before the development
of chrF, it was common to use a word-based overlap metric called BLEU (for BiLin-
gual Evaluation Understudy), that is purely precision-based rather than combining
precision and recall (Papineni et al., ). The BLEU score for a corpus of candi-
date translation sentences is a function of the n-gram word precision over all the
sentences combined with a brevity penalty computed over the corpus as a whole.
What do we mean by n-gram precision? Consider a corpus composed of a single
sentence. The unigram precision for this corpus is the percentage of unigram tokens

MT EVALUATION
in the candidate translation that also occur in the reference translation, and ditto for
bigrams and so on, up to -grams. BLEU extends this unigram metric to the whole
corpus by computing the numerator as the sum over all sentences of the counts of all
the unigram types that also occur in the reference translation, and the denominator
is the total of the counts of all unigrams in all candidate sentences. We compute
this n-gram precision for unigrams, bigrams, trigrams, and -grams and take the
geometric mean. BLEU has many further complications, including a brevity penalty
for penalizing candidate translations that are too short, and it also requires the n-
gram counts be clipped in a particular way.
Because BLEU is a word-based metric, it is very sensitive to word tokenization,
making it impossible to compare different systems if they rely on different tokeniza-
tion standards, and doesn’t work as well in languages with complex morphology.
Nonetheless, you will sometimes still see systems evaluated by BLEU, particularly
for translation into English. In such cases it’s important to use packages that enforce
standardization for tokenization like SACREBLEU (Post, ).
Statistical Signiﬁcance Testing for MT evals
Character or word overlap-based metrics like chrF (or BLEU, or etc.) are mainly
used to compare two systems, with the goal of answering questions like: did the
new algorithm we just invented improve our MT system? To know if the difference
between the chrF scores of two MT systems is a signiﬁcant difference, we use the
paired bootstrap test, or the similar randomization test.
To get a conﬁdence interval on a single chrF score using the bootstrap test, recall
from Section . that we take our test set (or devset) and create thousands of pseudo-
testsets by repeatedly sampling with replacement from the original test set. We now
compute the chrF score of each of the pseudo-testsets. If we drop the top .% and
bottom .% of the scores, the remaining scores will give us the % conﬁdence
interval for the chrF score of our system.
To compare two MT systems A and B, we draw the same set of pseudo-testsets,
and compute the chrF scores for each of them. We then compute the percentage of
pseudo-test-sets in which A has a higher chrF score than B.
chrF: Limitations
While automatic character and word-overlap metrics like chrF or BLEU are useful,
they have important limitations. chrF is very local: a large phrase that is moved
around might barely change the chrF score at all, and chrF can’t evaluate cross-
sentence properties of a document like its discourse coherence (Chapter ). chrF
and similar automatic metrics also do poorly at comparing very different kinds of
systems, such as comparing human-aided translation against machine translation, or
different machine translation architectures against each other (Callison-Burch et al.,
). Instead, automatic overlap metrics like chrF are most appropriate when eval-
uating changes to a single system.
Automatic Evaluation: Embedding-Based Methods
The chrF metric is based on measuring the exact character n-grams a human refer-
ence and candidate machine translation have in common. However, this criterion
is overly strict, since a good translation may use alternate words or paraphrases. A
solution ﬁrst pioneered in early metrics like METEOR (Banerjee and Lavie, )
was to allow synonyms to match between the reference x and candidate ˜x. More

CHAPTER
MACHINE TRANSLATION
recent metrics use BERT or other embeddings to implement this intuition.
For example, in some situations we might have datasets that have human as-
sessments of translation quality. Such datasets consists of tuples (x, ˜x,r), where
x = (x,...,xn) is a reference translation, ˜x = (˜x,..., ˜xm) is a candidate machine
translation, and r ∈ R is a human rating that expresses the quality of ˜x with respect
to x. Given such data, algorithms like COMET (Rei et al., ) BLEURT (Sellam
et al., ) train a predictor on the human-labeled datasets, for example by passing
x and ˜x through a version of BERT (trained with extra pretraining, and then ﬁne-
tuned on the human-labeled sentences), followed by a linear layer that is trained to
predict r. The output of such models correlates highly with human labels.
In other cases, however, we don’t have such human-labeled datasets. In that
case we can measure the similarity of x and ˜x by the similarity of their embeddings.
The BERTSCORE algorithm (Zhang et al., ) shown in Fig. ., for example,
passes the reference x and the candidate ˜x through BERT, computing a BERT em-
bedding for each token xi and ˜xj. Each pair of tokens (xi, ˜xj) is scored by its cosine
xi˜x j
|xi||˜x j|. Each token in x is matched to a token in ˜x to compute recall, and each token in
˜x is matched to a token in x to compute precision (with each token greedily matched
to the most similar token in the corresponding sentence). BERTSCORE provides
precision and recall (and hence F):
RBERT =
|x|
|˜x|
xi∈x
max
˜x j∈˜x xi  ˜xj
PBERT =
˜x j∈˜x
max
xi∈x xi  ˜xj
Published as a conference paper at ICLR
Pairwise Cosine
Importance Weighting
Maximum Similarity
Contextual
Embedding
Similarity
(Optional)
Reference
the weather is
cold today
RBERT = (.×.)+(.×.)+...
Reference
ˆx
Candidate
it is freezing today
idf
weights
Candidate
Figure .
The computation of BERTSCORE recall from reference x and candidate ˆx, from Figure  in
Figure : Illustration of the computation of the recall metric RBERT. Given the reference x and
candidate ˆx, we compute BERT embeddings and pairwise cosine similarity. We highlight the greedy
matching in red, and include the optional idf importance weighting.
Zhang et al. (). This version shows an extended version of the metric in which tokens are also weighted by
their idf values.
Bias and Ethical Issues
We experiment with different models (Section ), using the tokenizer provided with each model.
Given a tokenized reference sentence x = hx, . . . , xki, the embedding model generates a se-
quence of vectors hx, . . . , xki. Similarly, the tokenized candidate ˆx = hˆx, . . . , ˆxmi is mapped
to hˆx, . . . , ˆxli. The main model we use is BERT, which tokenizes the input text into a sequence
of word pieces (Wu et al., ), where unknown words are split into several commonly observed
sequences of characters. The representation for each word piece is computed with a Transformer
encoder (Vaswani et al., ) by repeatedly applying self-attention and nonlinear transformations
in an alternating fashion. BERT embeddings have been shown to beneﬁt various NLP tasks (Devlin
et al., ; Liu, ; Huang et al., ; Yang et al., a).
Similarity Measure
The vector representation allows for a soft measure of similarity instead of
i ˆxj
exact-string (Papineni et al., ) or heuristic (Banerjee & Lavie, ) matching. The cosine
similarity of a reference token xi and a candidate token ˆxj is
x>
kxikkˆxjk. We use pre-normalized
vectors, which reduces this calculation to the inner product x>
i ˆxj. While this measure considers
tokens in isolation, the contextual embeddings contain information from the rest of the sentence.
Machine translation raises many of the same ethical issues that we’ve discussed in
earlier chapters. For example, consider MT systems translating from Hungarian
(which has the gender neutral pronoun ˝o) or Spanish (which often drops pronouns)
into English (in which pronouns are obligatory, and they have grammatical gender).
When translating a reference to a person described without speciﬁed gender, MT
systems often default to male gender (Schiebinger , Prates et al. ). And
MT systems often assign gender according to culture stereotypes of the sort we saw
in Section .. Fig. . shows examples from Prates et al. (), in which Hun-
garian gender-neutral ˝o is a nurse is translated with she, but gender-neutral ˝o is a
CEO is translated with he. Prates et al. () ﬁnd that these stereotypes can’t com-
pletely be accounted for by gender bias in US labor statistics, because the biases are
BERTSCORE
The complete score matches each token in x to a token in ˆx to compute recall,
and each token in ˆx to a token in x to compute precision. We use greedy matching to maximize
the matching similarity score, where each token is matched to the most similar token in the other
sentence. We combine precision and recall to compute an F measure. For a reference x and
candidate ˆx, the recall, precision, and F scores are:
max x>
max x>
RBERT =
i ˆxj ,
FBERT =  PBERT  RBERT
i ˆxj ,
PBERT =
| |
| |

SUMMARY
ampliﬁed by MT systems, with pronouns being mapped to male or female gender
with a probability higher than if the mapping was based on actual labor employment
statistics.
Hungarian (gender neutral) source
English MT output
˝o egy ´apol´o
she is a nurse
˝o egy tud´os
he is a scientist
˝o egy m´ern¨ok
he is an engineer
˝o egy p´ek
he is a baker
˝o egy tan´ar
she is a teacher
˝o egy esk¨uv˝oszervez˝o
she is a wedding organizer
˝o egy vez´erigazgat´o
he is a CEO
Figure .
When translating from gender-neutral languages like Hungarian into English,
current MT systems interpret people from traditionally male-dominated occupations as male,
and traditionally female-dominated occupations as female (Prates et al., ).
Similarly, a recent challenge set, the WinoMT dataset (Stanovsky et al., )
shows that MT systems perform worse when they are asked to translate sentences
that describe people with non-stereotypical gender roles, like “The doctor asked the
nurse to help her in the operation”.
Many ethical questions in MT require further research. One open problem is
developing metrics for knowing what our systems don’t know. This is because MT
systems can be used in urgent situations where human translators may be unavailable
or delayed: in medical domains, to help translate when patients and doctors don’t
speak the same language, or in legal domains, to help judges or lawyers communi-
cate with witnesses or defendants. In order to ‘do no harm’, systems need ways to
assign conﬁdence values to candidate translations, so they can abstain from giving
conﬁdence
incorrect translations that may cause harm.
Summary
Machine translation is one of the most widely used applications of NLP, and the
encoder-decoder model, ﬁrst developed for MT is a key tool that has applications
throughout NLP.
Languages have divergences, both structural and lexical, that make translation
difﬁcult.
The linguistic ﬁeld of typology investigates some of these differences; lan-
guages can be classiﬁed by their position along typological dimensions like
whether verbs precede their objects.
Encoder-decoder networks (for transformers just as we saw in Chapter  for
RNNs) are composed of an encoder network that takes an input sequence
and creates a contextualized representation of it, the context. This context
representation is then passed to a decoder which generates a task-speciﬁc
output sequence.
Cross-attention allows the transformer decoder to view information from all
the hidden states of the encoder.
Machine translation models are trained on a parallel corpus, sometimes called
a bitext, a text that appears in two (or more) languages.

CHAPTER
MACHINE TRANSLATION
Backtranslation is a way of making use of monolingual corpora in the target
language by running a pilot MT engine backwards to create synthetic bitexts.
MT is evaluated by measuring a translation’s adequacy (how well it captures
the meaning of the source sentence) and ﬂuency (how ﬂuent or natural it is
in the target language). Human evaluation is the gold standard, but automatic
evaluation metrics like chrF, which measure character n-gram overlap with
human translations, or more recent metrics based on embedding similarity,
are also commonly used.
Bibliographical and Historical Notes
MT was proposed seriously by the late s, soon after the birth of the computer
(Weaver, /). In , the ﬁrst public demonstration of an MT system pro-
totype (Dostert, ) led to great excitement in the press (Hutchins, ). The
next decade saw a great ﬂowering of ideas, preﬁguring most subsequent develop-
ments. But this work was ahead of its time—implementations were limited by, for
example, the fact that pending the development of disks there was no good way to
store dictionary information.
As high-quality MT proved elusive (Bar-Hillel, ), there grew a consensus
on the need for better evaluation and more basic research in the new ﬁelds of for-
mal and computational linguistics. This consensus culminated in the famously crit-
ical ALPAC (Automatic Language Processing Advisory Committee) report of
(Pierce et al., ) that led in the mid s to a dramatic cut in funding for MT
in the US. As MT research lost academic respectability, the Association for Ma-
chine Translation and Computational Linguistics dropped MT from its name. Some
MT developers, however, persevered, and there were early MT systems like M´et´eo,
which translated weather forecasts from English to French (Chandioux, ), and
industrial systems like Systran.
In the early years, the space of MT architectures spanned three general mod-
els. In direct translation, the system proceeds word-by-word through the source-
language text, translating each word incrementally. Direct translation uses a large
bilingual dictionary, each of whose entries is a small program with the job of trans-
lating one word. In transfer approaches, we ﬁrst parse the input text and then ap-
ply rules to transform the source-language parse into a target language parse. We
then generate the target language sentence from the parse tree. In interlingua ap-
proaches, we analyze the source language text into some abstract meaning repre-
sentation, called an interlingua. We then generate into the target language from
this interlingual representation. A common way to visualize these three early ap-
proaches was the Vauquois triangle shown in Fig. .. The triangle shows the
Vauquois
triangle
increasing depth of analysis required (on both the analysis and generation end) as
we move from the direct approach through transfer approaches to interlingual ap-
proaches. In addition, it shows the decreasing amount of transfer knowledge needed
as we move up the triangle, from huge amounts of transfer at the direct level (al-
most all knowledge is transfer knowledge for each word) through transfer (transfer
rules only for parse trees or thematic roles) through interlingua (no speciﬁc transfer
knowledge). We can view the encoder-decoder network as an interlingual approach,
with attention acting as an integration of direct and transfer, allowing words or their
representations to be directly accessed by the decoder.

BIBLIOGRAPHICAL AND HISTORICAL NOTES
Interlingua
Source Text:
Target Text:
Semantic/Syntactic
analysis
analysis
Semantic/Syntactic
Transfer
source language
source language
Structure
Structure
target language
generation
source
Direct Translation
text
target
text
Figure .
The Vauquois () triangle.
Statistical methods began to be applied around , enabled ﬁrst by the devel-
opment of large bilingual corpora like the Hansard corpus of the proceedings of the
Canadian Parliament, which are kept in both French and English, and then by the
growth of the Web. Early on, a number of researchers showed that it was possible
to extract pairs of aligned sentences from bilingual corpora, using words or simple
cues like sentence length (Kay and R¨oscheisen , Gale and Church , Gale
and Church , Kay and R¨oscheisen ).
At the same time, the IBM group, drawing directly on the noisy channel model
for speech recognition, proposed two related paradigms for statistical MT. These
statistical MT
include the generative algorithms that became known as IBM Models  through
IBM Models
, implemented in the Candide system. The algorithms (except for the decoder)
Candide
were published in full detail— encouraged by the US government who had par-
tially funded the work— which gave them a huge impact on the research community
(Brown et al. , Brown et al. ).
The group also developed a discriminative approach, called MaxEnt (for maxi-
mum entropy, an alternative formulation of logistic regression), which allowed many
features to be combined discriminatively rather than generatively (Berger et al.,
), which was further developed by Och and Ney ().
By the turn of the century, most academic research on machine translation used
statistical MT, either in the generative or discriminative mode. An extended version
of the generative approach, called phrase-based translation was developed, based
phrase-based
translation
on inducing translations for phrase-pairs (Och , Marcu and Wong , Koehn
et al. (), Och and Ney , Deng and Byrne , inter alia).
Once automatic metrics like BLEU were developed (Papineni et al., ), the
discriminative log linear formulation (Och and Ney, ), drawing from the IBM
MaxEnt work (Berger et al., ), was used to directly optimize evaluation metrics
like BLEU in a method known as Minimum Error Rate Training, or MERT (Och,
MERT
), also drawing from speech recognition models (Chou et al., ). Toolkits
like GIZA (Och and Ney, ) and Moses (Koehn et al. , Zens and Ney )
Moses
were widely used.
There were also approaches around the turn of the century that were based on
syntactic structure (Chapter ). Models based on transduction grammars (also
transduction
grammars
called synchronous grammars assign a parallel syntactic tree structure to a pair of
sentences in different languages, with the goal of translating the sentences by ap-
plying reordering operations on the trees. From a generative perspective, we can
view a transduction grammar as generating pairs of aligned sentences in two lan-
guages. Some of the most widely used models included the inversion transduction
grammar (Wu, ) and synchronous context-free grammars (Chiang, ),
inversion
transduction
grammar

CHAPTER
MACHINE TRANSLATION
Neural networks had been applied at various times to various aspects of machine
translation; for example Schwenk et al. () showed how to use neural language
models to replace n-gram language models in a Spanish-English system based on
IBM Model . The modern neural encoder-decoder approach was pioneered by
Kalchbrenner and Blunsom (), who used a CNN encoder and an RNN decoder,
and was ﬁrst applied to MT by Bahdanau et al. (). The transformer encoder-
decoder was proposed by Vaswani et al. () (see the History section of Chap-
ter ).
Research on evaluation of machine translation began quite early. Miller and
Beebe-Center () proposed a number of methods drawing on work in psycholin-
guistics. These included the use of cloze and Shannon tasks to measure intelligibility
as well as a metric of edit distance from a human translation, the intuition that un-
derlies all modern overlap-based automatic evaluation metrics. The ALPAC report
included an early evaluation study conducted by John Carroll that was extremely in-
ﬂuential (Pierce et al., , Appendix ). Carroll proposed distinct measures for
ﬁdelity and intelligibility, and had raters score them subjectively on -point scales.
Much early evaluation work focuses on automatic word-overlap metrics like BLEU
(Papineni et al., ), NIST (Doddington, ), TER (Translation Error Rate)
(Snover et al., ), Precision and Recall (Turian et al., ), and METEOR
(Banerjee and Lavie, ); character n-gram overlap methods like chrF (Popovi´c,
) came later. More recent evaluation work, echoing the ALPAC report, has
emphasized the importance of careful statistical methodology and the use of human
evaluation (Kocmi et al., ; Marie et al., ).
The early history of MT is surveyed in Hutchins  and ; Nirenburg et al.
() collects early readings. See Croft () or Comrie () for introductions
to linguistic typology.
Exercises
. Compute by hand the chrF, score for HYP on page  (the answer should
round to .).

Question Answering and In-
formation Retrieval
CHAPTER
The quest for knowledge is deeply human, and so it is not surprising that practically
as soon as there were computers we were asking them questions. By the early s,
systems used the two major paradigms of question answering—retrieval-based and
knowledge-based—to answer questions about baseball statistics or scientiﬁc facts.
Even imaginary computers got into the act. Deep Thought, the computer that Dou-
glas Adams invented in The Hitchhiker’s Guide to the Galaxy, managed to answer
“the Ultimate Question Of Life, The Universe, and Everything”. In , IBM’s
Watson question-answering system won the TV game-show Jeopardy!, surpassing
humans at answering questions like:
WILLIAM WILKINSON’S “AN ACCOUNT OF THE
PRINCIPALITIES OF WALLACHIA AND MOLDOVIA”
INSPIRED THIS AUTHOR’S MOST FAMOUS NOVEL
Question answering systems are designed to ﬁll human information needs that
might arise in situations like talking to a virtual assistant or a chatbot, interacting
with a search engine, or querying a database. Question answering systems often
focus on a particular subset of these information needs: factoid questions, questions
that can be answered with simple facts expressed in short texts, like the following:
(.) Where is the Louvre Museum located?
(.) What is the average age of the onset of autism?
One way to do question answering is just to directly ask a large language model.
For example, we could use the techniques of Chapter , prompting a large pre-
trained causal language model with a string like
Q: Where is the Louvre Museum located? A:
have it do conditional generation given this preﬁx, and take the response as the
answer. The idea is that huge pretrained language models have read a lot of facts
in their pretraining data, presumably including the location of the Louvre, and have
encoded this information in their parameters.
For some general factoid questions this can be a useful approach and is used in
practice. But prompting a large language model is not yet a solution for question
answering. The main problem is that large language models often give the wrong
answer! Large language models hallucinate. A hallucination is a response that is
hallucinate
not faithful to the facts of the world. That is, when asked questions, large language
models simply make up answers that sound reasonable. For example, (Dahl et al.,
) found that when asked questions about the legal domain (like about particular
legal cases), large language models had hallucination rates ranging from % to
The answer was , but unfortunately the details of the question were never revealed.
The answer, of course, is ‘Who is Bram Stoker’, and the novel was Dracula.

CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
Sometime there are ways to tell that language models are hallucinating, but often
there aren’t. One problem is that language model estimates of their conﬁdence in
their answers aren’t well-calibrated. In a calibrated system, the conﬁdence of a
calibrated
system in the correctness of its answer is highly correlated with the probability of an
answer being correct. So if the system is wrong, at least it might hedge its answer
or tell us to go check another source. But since language models are not well-
calibrated, they often give a very wrong answer with complete certainty.
A second problem is that simply prompting a large language model doesn’t allow
us to ask questions about proprietary data. A common use of question-answering is
to query private data, like asking an assistant about our email or private documents,
or asking a question about our own medical records. Or a company may have in-
ternal documents that contain answers for customer service or internal use. Or legal
ﬁrms need to ask questions about legal discovery from proprietary documents. Fur-
thermore, the use of internal datasets, or even the web itself, can be especially useful
for rapidly changing or dynamic information; by contrast, large language models
are often only released at long increments of many months and so may not have
up-to-date information.
For this reason the current dominant solution for question-answering is the two-
stage retriever/reader model (Chen et al., a), and that is the method we will
focus on in this chapter. In a retriever/reader model, we use information retrieval
techniques to ﬁrst retrieve documents that are likely to have information that might
help answer the question. Then we either extract an answer from spans of text in
the documents, or use large language models to generate an answer given these
documents, sometimes called retrieval-augmented generation,
Basing our answers on retrieved documents can solve the above-mentioned prob-
lems with using simple prompting to answer questions. First, we can ensure that the
answer is grounded in facts from some curated dataset. And we can give the answer
accompanied by the context of the passage or document the answer came from. This
information can help users have conﬁdence in the accuracy of the answer (or help
them spot when it is wrong!). And we can use our retrieval techniques on any pro-
prietary data we want, such as legal or medical data for those applications.
We’ll begin by introducing information retrieval, the task of choosing the most
relevant document from a document set given a user’s query expressing their infor-
mation need. We’ll see the classic method based on cosines of sparse tf-idf vec-
tors, as well as modern neural IR using dense retriever, in which we run documents
through BERT or other language models to get neural representations, and use co-
sine between dense representations of the query and document.
We then introduce retriever-based question answering, via the retriever/reader
model. This algorithm most commonly relies on the vast amount of text on the
web, in which case it is sometimes called open domain QA, or on collections of
proprietary data, or scientiﬁc papers like PubMed. We’ll go through the two types
of readers, span extractors and retrieval-augmented generation.
Information Retrieval
Information retrieval or IR is the name of the ﬁeld encompassing the retrieval of all
information
retrieval
IR
manner of media based on user information needs. The resulting IR system is often
called a search engine. Our goal in this section is to give a sufﬁcient overview of IR
to see its application to question answering. Readers with more interest speciﬁcally

INFORMATION RETRIEVAL
in information retrieval should see the Historical Notes section at the end of the
chapter and textbooks like Manning et al. ().
The IR task we consider is called ad hoc retrieval, in which a user poses a
ad hoc retrieval
query to a retrieval system, which then returns an ordered set of documents from
some collection. A document refers to whatever unit of text the system indexes and
document
retrieves (web pages, scientiﬁc papers, news articles, or even shorter passages like
paragraphs). A collection refers to a set of documents being used to satisfy user
collection
requests. A term refers to a word in a collection, but it may also include phrases.
term
Finally, a query represents a user’s information need expressed as a set of terms.
query
The high-level architecture of an ad hoc retrieval engine is shown in Fig. ..
Document
Inverted
Document
Document
Indexing
Index
Document
Document
Document
Document
Document
Document
Document
Document
document collection
Document
Ranked
Search
Documents
Query
query
Processing
query
vector
Figure .
The architecture of an ad hoc IR system.
The basic IR architecture uses the vector space model we introduced in Chap-
ter , in which we map queries and document to vectors based on unigram word
counts, and use the cosine similarity between the vectors to rank potential documents
(Salton, ). This is thus an example of the bag-of-words model introduced in
Chapter , since words are considered independently of their positions.
Term weighting and document scoring
Let’s look at the details of how the match between a document and query is scored.
We don’t use raw word counts in IR, instead computing a term weight for each
term weight
document word. Two term weighting schemes are common: the tf-idf weighting
introduced in Chapter , and a slightly more powerful variant called BM.
BM
We’ll reintroduce tf-idf here so readers don’t need to look back at Chapter .
Tf-idf (the ‘-’ here is a hyphen, not a minus sign) is the product of two terms, the
term frequency tf and the inverse document frequency idf.
The term frequency tells us how frequent the word is; words that occur more
often in a document are likely to be informative about the document’s contents. We
usually use the log of the word frequency, rather than the raw count. The intuition
is that a word appearing  times in a document doesn’t make that word  times
more likely to be relevant to the meaning of the document. We also need to do
something special with counts of , since we can’t take the log of .
tft,d =
+log count(t,d)
if count(t,d) >
otherwise
If we use log weighting, terms which occur  times in a document would have tf = ,
We can also use this alternative formulation, which we have used in earlier editions:
tft,d =
log(count(t,d)+)

CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
times in a document tf =  + log() =  +  = ,  times in a document tf =
+log() = ,  times tf = +log() = ,  times tf = , and so on.
The document frequency dft of a term t is the number of documents it oc-
curs in. Terms that occur in only a few documents are useful for discriminating
those documents from the rest of the collection; terms that occur across the entire
collection aren’t as helpful. The inverse document frequency or idf term weight
(Sparck Jones, ) is deﬁned as:
idft = log
dft
where N is the total number of documents in the collection, and dft is the number
of documents in which term t occurs. The fewer documents in which a term occurs,
the higher this weight; the lowest weight of  is assigned to terms that occur in every
document.
Here are some idf values for some words in the corpus of Shakespeare plays,
ranging from extremely informative words that occur in only one play like Romeo,
to those that occur in a few like salad or Falstaff, to those that are very common like
fool or so common as to be completely non-discriminative since they occur in all
plays like good or sweet.
Word
df
idf
Romeo
salad
Falstaff
forest
battle
wit
fool
good
sweet
The tf-idf value for word t in document d is then the product of term frequency
tft,d and IDF:
tf-idf(t,d) = tft,d idft
Document Scoring
We score document d by the cosine of its vector d with the query vector q:
score(q,d) = cos(q,d) = qd
|q||d|
Another way to think of the cosine computation is as the dot product of unit vectors;
we ﬁrst normalize both the query and document vector to unit vectors, by dividing
by their lengths, and then take the dot product:
score(q,d) = cos(q,d) = q
|q|  d
|d|
Sweet was one of Shakespeare’s favorite adjectives, a fact probably related to the increased use of
sugar in European recipes around the turn of the th century (Jurafsky, , p. ).

INFORMATION RETRIEVAL
We can spell out Eq. ., using the tf-idf values and spelling out the dot product as
a sum of products:
t∈q
score(q,d) =
tf-idf(t,q)
qP
qi∈q tf-idf (qi,q)

tf-idf(t,d)
qP
di∈d tf-idf (di,d)
Now let’s use (.) to walk through an example of a tiny query against a collec-
tion of  nano documents, computing tf-idf values and seeing the rank of the docu-
ments. We’ll assume all words in the following query and documents are downcased
and punctuation is removed:
Query: sweet love
Doc :
Sweet sweet nurse! Love?
Doc :
Sweet sorrow
Doc :
How sweet is love?
Doc :
Nurse!
Fig. . shows the computation of the tf-idf cosine between the query and Doc-
ument , and the query and Document . The cosine is the normalized dot product
of tf-idf values, so for the normalization we must need to compute the document
vector lengths |q|, |d|, and |d| for the query and the ﬁrst two documents using
Eq. ., Eq. ., Eq. ., and Eq. . (computations for Documents  and  are
also needed but are left as an exercise for the reader). The dot product between the
vectors is the sum over dimensions of the product, for each dimension, of the values
of the two tf-idf vectors for that dimension. This product is only non-zero where
both the query and document have non-zero values, so for this example, in which
only sweet and love have non-zero values in the query, the dot product will be the
sum of the products of those elements of each vector.
Document  has a higher cosine with the query (.) than Document  has
with the query (.), and so the tf-idf cosine model would rank Document
above Document . This ranking is intuitive given the vector space model, since
Document  has both terms including two instances of sweet, while Document  is
missing one of the terms. We leave the computation for Documents  and  as an
exercise for the reader.
In practice, there are many variants and approximations to Eq. .. For exam-
ple, we might choose to simplify processing by removing some terms. To see this,
let’s start by expanding the formula for tf-idf in Eq. . to explicitly mention the tf
and idf terms from (.):
t∈q
score(q,d) =
tft,q idft
qP
qi∈q tf-idf (qi,q)

tft,d idft
qP
di∈d tf-idf (di,d)
In one common variant of tf-idf cosine, for example, we drop the idf term for the
document. Eliminating the second copy of the idf term (since the identical term is
already computed for the query) turns out to sometimes result in better performance:
t∈q
score(q,d) =
tft,qidft
qP
qi∈q tf-idf (qi,q)

tft,d idft
qP
di∈d tf-idf (di,d)
Other variants of tf-idf eliminate various other terms.
A slightly more complex variant in the tf-idf family is the BM weighting
BM
CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
Query
word
cnt tf df idf
tf-idf n’lized = tf-idf/|q|
sweet
. . .
nurse
love
. . .
how
sorrow
is
. +. = .
|q| =
Document
Document
word
cnt tf
tf-idf n’lized
× q
cnt tf
tf-idf n’lized
×q
sweet
. . .
. . .
nurse
. . .
love
. . .
how
sorrow
. . .
is
. +. = .
|d| =
. +. +. = .
|d| =
Figure .
Computation of tf-idf cosine score between the query and nano-documents  (.) and
(.), using Eq. ., Eq. ., Eq. . and Eq. ..
Cosine: P of column: .
Cosine: P of column: .
scheme (sometimes called Okapi BM after the Okapi IR system in which it was
introduced (Robertson et al., )). BM adds two parameters: k, a knob that
adjust the balance between term frequency and IDF, and b, which controls the im-
portance of document length normalization. The BM score of a document d given
a query q is:
dft
IDF
log

weighted tf
tft,d
t∈q

−b+b

|d|
|davg|

+tft,d
where |davg| is the length of the average document. When k is , BM reverts to
no use of term frequency, just a binary selection of terms in the query (plus idf).
A large k results in raw term frequency (plus idf). b ranges from  (scaling by
document length) to  (no length scaling). Manning et al. () suggest reasonable
values are k = [.,] and b = .. Kamphuis et al. () is a useful summary of
the many minor variants of BM.
Stop words
In the past it was common to remove high-frequency words from both
the query and document before representing them. The list of such high-frequency
words to be removed is called a stop list. The intuition is that high-frequency terms
stop list
(often function words like the, a, to) carry little semantic weight and may not help
with retrieval, and can also help shrink the inverted index ﬁles we describe below.
The downside of using a stop list is that it makes it difﬁcult to search for phrases
that contain words in the stop list. For example, common stop lists would reduce the
phrase to be or not to be to the phrase not. In modern IR systems, the use of stop lists
is much less common, partly due to improved efﬁciency and partly because much
of their function is already handled by IDF weighting, which downweights function

INFORMATION RETRIEVAL
words that occur in every document. Nonetheless, stop word removal is occasionally
useful in various NLP tasks so is worth keeping in mind.
Inverted Index
In order to compute scores, we need to efﬁciently ﬁnd documents that contain words
in the query. (Any document that contains none of the query terms will have a score
of  and can be ignored.) The basic search problem in IR is thus to ﬁnd all documents
d ∈ C that contain a term q ∈ Q.
The data structure for this task is the inverted index, which we use for mak-
inverted index
ing this search efﬁcient, and also conveniently storing useful information like the
document frequency and the count of each term in each document.
An inverted index, given a query term, gives a list of documents that contain the
term. It consists of two parts, a dictionary and the postings. The dictionary is a list
postings
of terms (designed to be efﬁciently accessed), each pointing to a postings list for the
term. A postings list is the list of document IDs associated with each term, which
can also contain information like the term frequency or even the exact positions of
terms in the document. The dictionary can also start the document frequency for
each term For example, a simple inverted index for our  sample documents above,
with each word containing its document frequency in {}, and a pointer to a postings
list that contains document IDs and term counts in [], might look like the following:
how {}
→  []
is {}
→  []
love {}
→  [] →  []
nurse {} →  [] →  []
sorry {}
→  []
sweet {} →  [] →  [] →  []
Given a list of terms in query, we can very efﬁciently get lists of all candidate
documents, together with the information necessary to compute the tf-idf scores we
need.
There are alternatives to the inverted index. For the question-answering domain
of ﬁnding Wikipedia pages to match a user query, Chen et al. (a) show that
indexing based on bigrams works better than unigrams, and use efﬁcient hashing
algorithms rather than the inverted index to make the search efﬁcient.
Evaluation of Information-Retrieval Systems
We measure the performance of ranked retrieval systems using the same precision
and recall metrics we have been using. We make the assumption that each docu-
ment returned by the IR system is either relevant to our purposes or not relevant.
Precision is the fraction of the returned documents that are relevant, and recall is the
fraction of all relevant documents that are returned. More formally, let’s assume a
system returns T ranked documents in response to an information request, a subset
R of these are relevant, a disjoint subset, N, are the remaining irrelevant documents,
and U documents in the collection as a whole are relevant to this request. Precision
and recall are then deﬁned as:
Precision = |R|
|T|
Recall = |R|
|U|
Unfortunately, these metrics don’t adequately measure the performance of a system
that ranks the documents it returns. If we are comparing the performance of two

CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
ranked retrieval systems, we need a metric that prefers the one that ranks the relevant
documents higher. We need to adapt precision and recall to capture how well a
system does at putting relevant documents higher in the ranking.
Rank
Judgment
PrecisionRank
RecallRank
Figure .
Rank-speciﬁc precision and recall values calculated as we proceed down
through a set of ranked documents (assuming the collection has  relevant documents).
Let’s turn to an example. Assume the table in Fig. . gives rank-speciﬁc pre-
cision and recall values calculated as we proceed down through a set of ranked doc-
uments for a particular query; the precisions are the fraction of relevant documents
seen at a given rank, and recalls the fraction of relevant documents found at the same
rank. The recall measures in this example are based on this query having  relevant
documents in the collection as a whole.
Note that recall is non-decreasing; when a relevant document is encountered,
recall increases, and when a non-relevant document is found it remains unchanged.
Precision, on the other hand, jumps up and down, increasing when relevant doc-
uments are found, and decreasing otherwise. The most common way to visualize
precision and recall is to plot precision against recall in a precision-recall curve,
precision-recall
curve
like the one shown in Fig. . for the data in table ..
Fig. . shows the values for a single query. But we’ll need to combine values
for all the queries, and in a way that lets us compare one system to another. One way
of doing this is to plot averaged precision values at  ﬁxed levels of recall ( to ,
in steps of ). Since we’re not likely to have datapoints at these exact levels, we
use interpolated precision values for the  recall values from the data points we do
interpolated
precision
have. We can accomplish this by choosing the maximum precision value achieved
at any level of recall at or above the one we’re calculating. In other words,
IntPrecision(r) = max
i>=r Precision(i)

INFORMATION RETRIEVAL
Precision
Recall
Figure .
The precision recall curve for the data in table ..
This interpolation scheme not only lets us average performance over a set of queries,
but also helps smooth over the irregular precision values in the original data. It is
designed to give systems the beneﬁt of the doubt by assigning the maximum preci-
sion value achieved at higher levels of recall from the one being measured. Fig. .
and Fig. . show the resulting interpolated data points from our example.
Interpolated Precision
Recall
Figure .
Interpolated data points from Fig. ..
Given curves such as that in Fig. . we can compare two systems or approaches
by comparing their curves. Clearly, curves that are higher in precision across all
recall values are preferred. However, these curves can also provide insight into the
overall behavior of a system. Systems that are higher in precision toward the left
may favor precision over recall, while systems that are more geared towards recall
will be higher at higher levels of recall (to the right).
A second way to evaluate ranked retrieval is mean average precision (MAP),
mean average
precision
which provides a single metric that can be used to compare competing systems or
approaches. In this approach, we again descend through the ranked list of items,
but now we note the precision only at those points where a relevant item has been
encountered (for example at ranks , , ,  but not  or  in Fig. .). For a single
query, we average these individual precision measurements over the return set (up
to some ﬁxed cutoff). More formally, if we assume that Rr is the set of relevant

CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
Interpolated Precision Recall Curve
Precision
Recall
Figure .
An  point interpolated precision-recall curve. Precision at each of the
standard recall levels is interpolated for each query from the maximum at any higher level of
recall. The original measured precision recall points are also shown.
documents at or above r, then the average precision (AP) for a single query is
AP =
|Rr|
d∈Rr
Precisionr(d)
where Precisionr(d) is the precision measured at the rank at which document d was
found. For an ensemble of queries Q, we then average over these averages, to get
our ﬁnal MAP measure:
MAP =
|Q|
q∈Q
AP(q)
The MAP for the single query (hence = AP) in Fig. . is ..
Information Retrieval with Dense Vectors
The classic tf-idf or BM algorithms for IR have long been known to have a con-
ceptual ﬂaw: they work only if there is exact overlap of words between the query
and document. In other words, the user posing a query (or asking a question) needs
to guess exactly what words the writer of the answer might have used, an issue called
the vocabulary mismatch problem (Furnas et al., ).
The solution to this problem is to use an approach that can handle synonymy:
instead of (sparse) word-count vectors, using (dense) embeddings. This idea was
ﬁrst proposed for retrieval in the last century under the name of Latent Semantic
Indexing approach (Deerwester et al., ), but is implemented in modern times
via encoders like BERT.
The most powerful approach is to present both the query and the document to a
single encoder, allowing the transformer self-attention to see all the tokens of both

INFORMATION RETRIEVAL WITH DENSE VECTORS
the query and the document, and thus building a representation that is sensitive to
the meanings of both query and document. Then a linear layer can be put on top of
the [CLS] token to predict a similarity score for the query/document tuple:
z = BERT(q;[SEP];d)[CLS]
score(q,d) = softmax(U(z))
This architecture is shown in Fig. .a. Usually the retrieval step is not done on
an entire document. Instead documents are broken up into smaller passages, such
as non-overlapping ﬁxed-length chunks of say  tokens, and the retriever encodes
and retrieves these passages rather than entire documents. The query and document
have to be made to ﬁt in the BERT -token window, for example by truncating
the query to  tokens and truncating the document if necessary so that it, the query,
[CLS], and [SEP] ﬁt in  tokens. The BERT system together with the linear layer
U can then be ﬁne-tuned for the relevance task by gathering a tuning dataset of
relevant and non-relevant passages.
s(q,d)
s(q,d)

zCLS_Q
zCLS_D
zCLS
Query
Document
Query
Document
[sep]
(a)
(b)
Figure .
Two ways to do dense retrieval, illustrated by using lines between layers to schematically rep-
resent self-attention: (a) Use a single encoder to jointly encode query and document and ﬁnetune to produce a
relevance score with a linear layer over the CLS token. This is too compute-expensive to use except in rescoring
(b) Use separate encoders for query and document, and use the dot product between CLS token outputs for the
query and document as the score. This is less compute-expensive, but not as accurate.
The problem with the full BERT architecture in Fig. .a is the expense in
computation and time. With this architecture, every time we get a query, we have to
pass every single single document in our entire collection through a BERT encoder
jointly with the new query! This enormous use of resources is impractical for real
cases.
At the other end of the computational spectrum is a much more efﬁcient archi-
tecture, the bi-encoder. In this architecture we can encode the documents in the
collection only one time by using two separate encoder models, one to encode the
query and one to encode the document. We encode each document, and store all
the encoded document vectors in advance. When a query comes in, we encode just
this query and then use the dot product between the query vector and the precom-
puted document vectors as the score for each candidate document (Fig. .b). For
example, if we used BERT, we would have two encoders BERTQ and BERTD and

CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
we could represent the query and document as the [CLS] token of the respective
encoders (Karpukhin et al., ):
zq = BERTQ(q)[CLS]
zd = BERTD(d)[CLS]
score(q,d) = zq zd
The bi-encoder is much cheaper than a full query/document encoder, but is also
less accurate, since its relevance decision can’t take full advantage of all the possi-
ble meaning interactions between all the tokens in the query and the tokens in the
document.
There are numerous approaches that lie in between the full encoder and the bi-
encoder. One intermediate alternative is to use cheaper methods (like BM) as the
ﬁrst pass relevance ranking for each document, take the top N ranked documents,
and use expensive methods like the full BERT scoring to rerank only the top N
documents rather than the whole set.
Another intermediate approach is the ColBERT approach of Khattab and Za-
ColBERT
haria () and Khattab et al. (), shown in Fig. .. This method separately
encodes the query and document, but rather than encoding the entire query or doc-
ument into one vector, it separately encodes each of them into contextual represen-
tations for each token. These BERT representations of each document word can be
pre-stored for efﬁciency. The relevance score between a query q and a document d is
a sum of maximum similarity (MaxSim) operators between tokens in q and tokens
in d. Essentially, for each token in q, ColBERT ﬁnds the most contextually simi-
lar token in d, and then sums up these similarities. A relevant document will have
tokens that are contextually very similar to the query.
More formally, a question q is tokenized as [q,...,qn], prepended with a [CLS]
and a special [Q] token, truncated to N= tokens (or padded with [MASK] tokens if
it is shorter), and passed through BERT to get output vectors q = [q,...,qN]. The
passage d with tokens [d,...,dm], is processed similarly, including a [CLS] and
special [D] token. A linear layer is applied on top of d and q to control the output
dimension, so as to keep the vectors small for storage efﬁciency, and vectors are
rescaled to unit length, producing the ﬁnal vector sequences Eq (length N) and Ed
(length m). The ColBERT scoring mechanism is:
score(q,d) =
max
j= Eqi Edj
i=
While the interaction mechanism has no tunable parameters, the ColBERT ar-
chitecture still needs to be trained end-to-end to ﬁne-tune the BERT encoders and
train the linear layers (and the special [Q] and [D] embeddings) from scratch. It
is trained on triples ⟨q,d+,d−⟩ of query q, positive document d+ and negative doc-
ument d− to produce a score for each document using (.), optimizing model
parameters using a cross-entropy loss.
All the supervised algorithms (like ColBERT or the full-interaction version of
the BERT algorithm applied for reranking) need training data in the form of queries
together with relevant and irrelevant passages or documents (positive and negative
examples). There are various semi-supervised ways to get labels; some datasets (like
MS MARCO Ranking, Section ..) contain gold positive examples. Negative
examples can be sampled randomly from the top- results from some existing
IR system. If datasets don’t have labeled positive examples, iterative methods like

USING NEURAL IR FOR QUESTION ANSWERING
s(q,d)
MaxSim
MaxSim
MaxSim
norm
norm
norm
norm
norm
norm
Query
Document
Figure .
A sketch of the ColBERT algorithm at inference time. The query and docu-
ment are ﬁrst passed through separate BERT encoders. Similarity between query and doc-
ument is computed by summing a soft alignment between the contextual representations of
tokens in the query and the document. Training is end-to-end. (Various details aren’t de-
picted; for example the query is prepended by a [CLS] and [Q:] tokens, and the document
by [CLS] and [D:] tokens). Figure adapted from Khattab and Zaharia ().
relevance-guided supervision can be used (Khattab et al., ) which rely on the
fact that many datasets contain short answer strings. In this method, an existing IR
system is used to harvest examples that do contain short answer strings (the top few
are taken as positives) or don’t contain short answer strings (the top few are taken as
negatives), these are used to train a new retriever, and then the process is iterated.
Efﬁciency is an important issue, since every possible document must be ranked
for its similarity to the query. For sparse word-count vectors, the inverted index
allows this very efﬁciently. For dense vector algorithms ﬁnding the set of dense
document vectors that have the highest dot product with a dense query vector is
an instance of the problem of nearest neighbor search. Modern systems there-
fore make use of approximate nearest neighbor vector search algorithms like Faiss
Faiss
(Johnson et al., ).
Using Neural IR for Question Answering
The goal of retrieval-based QA (sometimes called open domain QA) is to an-
retrieval-based
QA
swer a user’s question by either ﬁnding short text segments from the web or some
other large collection of documents, or by generating an answer based on them.
Figure . shows some sample factoid questions with answers.
The dominant paradigm for retrieval-based QA is sometimes called the retrieve
and read model shown in Fig. .. In the ﬁrst stage of this -stage model we re-
retrieve and
read
trieve relevant passages from a text collection, for example using the dense retrievers
of the previous section.
The second stage, called the reader, is commonly implemented as either an ex-

CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
Question
Answer
Where is the Louvre Museum located?
in Paris, France
What are the names of Odin’s ravens?
Huginn and Muninn
What kind of nuts are used in marzipan?
almonds
What instrument did Max Roach play?
drums
What’s the ofﬁcial language of Algeria?
Arabic
Figure .
Some factoid questions and their answers.
tractor or a generator. The ﬁrst method is span extraction, using a neural reading
comprehension algorithm that passes over each passage and is trained to ﬁnd spans
of text that answer the question. The second method is also known as retrieval-
augmented generation: we take a large pretrained language model, give it some set
of retrieved passages and other text as its prompt, and autoregressively generate a
new answer token by token.
Reader
Generator
query
LLM
Retriever
Docs and prompt
docs
A:
or Extracter
Q: When was
the premiere of
start   end
The Magic Flute?
BERT
Relevant
Docs
[CLS] q q [SEP]  d d
Indexed Docs
Figure .
Retrieval-based question answering has two stages: retrieval, which returns relevant docu-
ments from the collection, and reading, in which a neural reading comprehension system extracts answer
spans, or a large pretrained language model that generates answers autoregressively given the documents as a
prompt.
In the next few sections we’ll describe these two standard reader algorithms.
But ﬁrst, we’ll introduce some commonly-used question answering datasets.
Retrieval-based QA: Datasets
Datasets for retrieval-based QA are most commonly created by ﬁrst developing
reading comprehension datasets containing tuples of (passage, question, answer).
Reading comprehension systems can use the datasets to train a reader that is given a
passage and a question, and predicts a span in the passage as the answer. Including
the passage from which the answer is to be extracted eliminates the need for reading
comprehension systems to deal with IR.
For example the Stanford Question Answering Dataset (SQuAD) consists of
SQuAD
passages from Wikipedia and associated questions whose answers are spans from
the passage (Rajpurkar et al. ). Squad . in addition adds some questions
that are designed to be unanswerable (Rajpurkar et al. ), with a total of just
over , questions. Fig. . shows a (shortened) excerpt from a SQUAD .
passage together with three questions and their gold answer spans.
SQuAD was built by having humans read a given Wikipedia passage, write ques-
tions about the passage, and choose a speciﬁc answer span.
Other datasets are created by similar techniques but try to make the questions
more complex. The HotpotQA dataset (Yang et al., ) was created by showing
HotpotQA

USING NEURAL IR FOR QUESTION ANSWERING
Beyonc´e Giselle Knowles-Carter (born September , ) is an American singer, songwriter,
record producer and actress.
Born and raised in Houston, Texas, she performed in various
singing and dancing competitions as a child, and rose to fame in the late s as lead singer
of R&B girl-group Destiny’s Child. Managed by her father, Mathew Knowles, the group became
one of the world’s best-selling girl groups of all time. Their hiatus saw the release of Beyonc´e’s
debut album, Dangerously in Love (), which established her as a solo artist worldwide, earned
ﬁve Grammy Awards and featured the Billboard Hot  number-one singles “Crazy in Love” and
“Baby Boy”.
Q: “In what city and state did Beyonc´e grow up?”
A: “Houston, Texas”
Q: “What areas did Beyonc´e compete in when she was growing up?”
A: “singing and dancing”
Q: “When did Beyonc´e release Dangerously in Love?”
A: “”
Figure .
A (Wikipedia) passage from the SQuAD . dataset (Rajpurkar et al., ) with  sample
questions and the labeled answer spans.
crowd workers multiple context documents and asked to come up with questions
that require reasoning about all of the documents.
The fact that questions in datasets like SQuAD or HotpotQA are created by an-
notators who have ﬁrst read the passage may make their questions easier to answer,
since the annotator may (subconsciously) make use of words from the answer text.
A solution to this possible bias is to make datasets from questions that were not
written with a passage in mind. The TriviaQA dataset (Joshi et al., ) contains
K questions written by trivia enthusiasts, together with supporting documents
from Wikipedia and the web resulting in K question-answer-evidence triples.
MS MARCO (Microsoft Machine Reading Comprehension) is a collection of
MS MARCO
datasets, including  million real anonymized questions from Microsoft Bing query
logs together with a human generated answer and  million passages (Nguyen et al.,
), that can be used both to test retrieval ranking and question answering. The
Natural Questions dataset (Kwiatkowski et al., ) similarly incorporates real
Natural
Questions
anonymized queries to the Google search engine. Annotators are presented a query,
along with a Wikipedia page from the top  search results, and annotate a paragraph-
length long answer and a short span answer, or mark null if the text doesn’t contain
the paragraph. For example the question “When are hops added to the brewing
process?” has the short answer the boiling process and a long answer which the
surrounding entire paragraph from the Wikipedia page on Brewing. In using this
dataset, a reading comprehension model is given a question and a Wikipedia page
and must return a long answer, short answer, or ’no answer’ response.
The above datasets are all in English. The TyDi QA dataset contains K
TyDi QA
question-answer pairs from  typologically diverse languages, including Arabic,
Bengali, Kiswahili, Russian, and Thai (Clark et al., a). In the TYDI QA task,
a system is given a question and the passages from a Wikipedia article and must
(a) select the passage containing the answer (or NULL if no passage contains the
answer), and (b) mark the minimal answer span (or NULL). Many questions have
no answer. The various languages in the dataset bring up challenges for QA systems
like morphological variation between the question and the answer, or complex issue
with word segmentation or multiple alphabets.
In the reading comprehension task, a system is given a question and the passage
in which the answer should be found. In the full two-stage QA task, however, sys-

CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
tems are not given a passage, but are required to do their own retrieval from some
document collection. A common way to create open-domain QA datasets is to mod-
ify a reading comprehension dataset. For research purposes this is most commonly
done by using QA datasets that annotate Wikipedia (like SQuAD or HotpotQA). For
training, the entire (question, passage, answer) triple is used to train the reader. But
at inference time, the passages are removed and system is given only the question,
together with access to the entire Wikipedia corpus. The system must then do IR to
ﬁnd a set of pages and then read them.
Reader algorithms: Answer Span Extraction
The job of the reader is to take a passage as input and produce the answer. Here we
introduce the span extraction style of reader, in which the answer is a span of text
in the passage. For example given a question like “How tall is Mt. Everest?” and
a passage that contains the clause Reaching , feet at its summit, a reader will
output , feet.
The answer extraction task is commonly modeled by span labeling: identifying
in the passage a span (a continuous string of text) that constitutes an answer. Neural
span
algorithms for reading comprehension are given a question q of n tokens q,...,qn
and a passage p of m tokens p,..., pm. Their goal is thus to compute the probability
P(a|q, p) that each possible span a is the answer.
If each span a starts at position as and ends at position ae, we make the simplify-
ing assumption that this probability can be estimated as P(a|q, p) = Pstart(as|q, p)Pend(ae|q, p).
Thus for for each token pi in the passage we’ll compute two probabilities: pstart(i)
that pi is the start of the answer span, and pend(i) that pi is the end of the answer
span.
A standard baseline algorithm for reading comprehension is to pass the ques-
tion and passage to any encoder like BERT (Fig. .), as strings separated with a
[SEP] token, resulting in an encoding token embedding for every passage token pi.
Pstarti
Pendi
Encoder (BERT)
[CLS]
[SEP]
pm
qn
Question
Passage
Figure .
An encoder model (using BERT) for span-based question answering from
reading-comprehension-based question answering tasks.
For span-based question answering, we represent the question as the ﬁrst se-
quence and the passage as the second sequence. We’ll also need to add a linear layer
that will be trained in the ﬁne-tuning phase to predict the start and end position of the

USING NEURAL IR FOR QUESTION ANSWERING
span. We’ll add two new special vectors: a span-start embedding S and a span-end
embedding E, which will be learned in ﬁne-tuning. To get a span-start probability
for each output token p′
i, we compute the dot product between S and p′
i and then use
a softmax to normalize over all tokens p′
i in the passage:
Pstarti =
exp(S p′
i)
j exp(S p′
j)
We do the analogous thing to compute a span-end probability:
Pendi =
exp(E  p′
i)
j exp(E  p′
j)
The score of a candidate span from position i to j is S  p′
i + E  p′
j, and the highest
scoring span in which j ≥ i is chosen is the model prediction.
The training loss for ﬁne-tuning is the negative sum of the log-likelihoods of the
correct start and end positions for each instance:
L = −logPstarti −logPendi
Many datasets (like SQuAD . and Natural Questions) also contain (question,
passage) pairs in which the answer is not contained in the passage. We thus also
need a way to estimate the probability that the answer to a question is not in the
document. This is standardly done by treating questions with no answer as having
the [CLS] token as the answer, and hence the answer span start and end index will
point at [CLS] (Devlin et al., ).
For many datasets the annotated documents/passages are longer than the maxi-
mum  input tokens BERT allows, such as Natural Questions whose gold passages
are full Wikipedia pages. In such cases, following Alberti et al. (), we can cre-
ate multiple pseudo-passage observations from the labeled Wikipedia page. Each
observation is formed by concatenating [CLS], the question, [SEP], and tokens from
the document. We walk through the document, sliding a window of size  (or
rather,  minus the question length n minus special tokens) and packing the win-
dow of tokens into each next pseudo-passage. The answer span for the observation
is either labeled [CLS] (= no answer in this particular window) or the gold-labeled
span is marked. The same process can be used for inference, breaking up each re-
trieved document into separate observation passages and labeling each observation.
The answer can be chosen as the span with the highest probability (or nil if no span
is more probable than [CLS]).
Reader algorithms: Retrieval-Augmented Generation
The second standard reader algorithm is to generate from a large language model,
conditioned on the retrieved passages. This method is known as retrieval-augmented
generation, or RAG.
retrieval-
augmented
generation
RAG
Recall that in simple conditional generation, we can cast the task of question
answering as word prediction by giving a language model a question and a token
like A: suggesting that an answer should come next:
Q: Who wrote the book ‘‘The Origin of Species"?
A:
Then we generate autoregressively conditioned on this text.

CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
More formally, recall that simple autoregressive language modeling computes
the probability of a string from the previous tokens:
p(x,...,xn) =
i=
p(xi|x<i)
And simple conditional generation for question answering adds a prompt like Q: ,
followed by a query q , and A:, all concatenated:
p(x,...,xn) =
i=
p([Q:] ; q ; [A:] ; x<i)
The advantage of using a large language model is the enormous amount of
knowledge encoded in its parameters from the text it was pretrained on. But as
we mentioned at the start of the chapter, while this kind of simple prompted gener-
ation can work ﬁne for many simple factoid questions, it is not a general solution
for QA, because it leads to hallucination, is unable to show users textual evidence to
support the answer, and is unable to answer questions from proprietary data.
The idea of retrieval-augmented generation is to address these problems by con-
ditioning on the retrieved passages as part of the preﬁx, perhaps with some prompt
text like “Based on these texts, answer this question:”. Let’s suppose we have a
query q, and call the set of retrieved passages based on it R(q). For example, we
could have a prompt like:
retrieved passage
retrieved passage
retrieved passage n
Based on these texts, answer this question:
Q: Who wrote
the book ‘‘The Origin of Species"?
A:
Or more formally,
p(x,...,xn) =
i=
p(xi|R(q) ; prompt ; [Q:] ; q ;[A:] ;x<i)
As with the span-based extraction reader, successfully applying the retrieval-
augmented generation algorithm for QA requires a successful retriever, and often
a two-stage retrieval algorithm is used in which the retrieval is reranked. Some
complex questions may require multi-hop architectures, in which a query is used to
multi-hop
retrieve documents, which are then appended to the original query for a second stage
of retrieval. Details of prompt engineering also have to be worked out, like deciding
whether to demarcate passages, for example with [SEP] tokens, and so on. Finally,
combinations of private data and public data involving an externally hosted large
language model may lead to privacy concerns that need to be worked out (Arora
et al., ).

EVALUATING RETRIEVAL-BASED QUESTION ANSWERING
Evaluating Retrieval-based Question Answering
Question answering is commonly evaluated using mean reciprocal rank, or MRR
mean
reciprocal rank
MRR
(Voorhees, ). MRR is designed for systems that return a short ranked list of
answers or passages for each test set question, which we can compare against the
(human-labeled) correct answer. First, each test set question is scored with the re-
ciprocal of the rank of the ﬁrst correct answer. For example if the system returned
ﬁve answers to a question but the ﬁrst three are wrong (so the highest-ranked correct
answer is ranked fourth), the reciprocal rank for that question is
. The score for
questions that return no correct answer is . The MRR of a system is the average of
the scores for each question in the test set. In some versions of MRR, questions with
a score of zero are ignored in this calculation. More formally, for a system returning
ranked answers to each question in a test set Q, (or in the alternate version, let Q be
the subset of test set questions that have non-zero scores). MRR is then deﬁned as
MRR =
ranki
i=
|Q|
|Q|
Alternatively, question answering systems can be evaluated with exact match, or
with F score. This is common for datasets like SQuAD which are evaluated (ﬁrst
ignoring punctuation and articles like a, an, the) via both (Rajpurkar et al., ):
Exact match: The % of predicted answers that match the gold answer exactly.
F score: The average word/token overlap between predicted and gold an-
swers. Treat the prediction and gold as a bag of tokens, and compute F for
each question, then return the average F over all questions.
Other recent datasets include the AI Reasoning Challenge (ARC) (Clark et al.,
) of multiple choice questions designed to be hard to answer from simple lexical
methods, like this question
Which property of a mineral can be determined just by looking at it?
(A) luster [correct] (B) mass (C) weight (D) hardness
in which the correct answer luster is unlikely to co-occur frequently with phrases
like looking at it, while the word mineral is highly associated with the incorrect
answer hardness.
Summary
This chapter introduced the tasks of question answering and information retrieval.
Question answering (QA) is the task of answering a user’s questions.
We focus in this chapter on the task of retrieval-based question answering,
in which the user’s questions are intended to be answered by the material in
some set of documents.
Information Retrieval (IR) is the task of returning documents to a user based
on their information need as expressed in a query. In ranked retrieval, the
documents are returned in ranked order.

CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
The match between a query and a document can be done by ﬁrst representing
each of them with a sparse vector that represents the frequencies of words,
weighted by tf-idf or BM. Then the similarity can be measured by cosine.
Documents or queries can instead be represented by dense vectors, by encod-
ing the question and document with an encoder-only model like BERT, and in
that case computing similarity in embedding space.
The inverted index is an storage mechanism that makes it very efﬁcient to
ﬁnd documents that have a particular word.
Ranked retrieval is generally evaluated by mean average precision or inter-
polated precision.
Question answering systems generally use the retriever/reader architecture.
In the retriever stage, an IR system is given a query and returns a set of
documents.
The reader stage can either be a span-based extractor, that predicts a span
of text in the retrieved documents to return as the answer, or a retrieval-
augmented generator, in which a large language model is used to generate a
novel answer after reading the documents and the query.
QA can be evaluated by exact match with a known answer if only a single
answer is given, or with mean reciprocal rank if a ranked set of answers is
given.
Bibliographical and Historical Notes
Question answering was one of the earliest NLP tasks, and early versions of the text-
based and knowledge-based paradigms were developed by the very early s. The
text-based algorithms generally relied on simple parsing of the question and of the
sentences in the document, and then looking for matches. This approach was used
very early on (Phillips, ) but perhaps the most complete early system, and one
that strikingly preﬁgures modern relation-based systems, was the Protosynthex sys-
tem of Simmons et al. (). Given a question, Protosynthex ﬁrst formed a query
from the content words in the question, and then retrieved candidate answer sen-
tences in the document, ranked by their frequency-weighted term overlap with the
question. The query and each retrieved sentence were then parsed with dependency
parsers, and the sentence whose structure best matches the question structure se-
lected. Thus the question What do worms eat? would match worms eat grass: both
have the subject worms as a dependent of eat, in the version of dependency grammar
used at the time, while birds eat worms has birds as the subject:
What do worms eat
Worms eat grass
Birds eat worms
The alternative knowledge-based paradigm was implemented in the BASEBALL
system (Green et al., ). This system answered questions about baseball games
like “Where did the Red Sox play on July ” by querying a structured database of
game information. The database was stored as a kind of attribute-value matrix with
values for attributes of each game:

BIBLIOGRAPHICAL AND HISTORICAL NOTES
Month = July
Place = Boston
Day
Game Serial No.
(Team = Red Sox, Score = )
(Team = Yankees, Score = )
Each question was constituency-parsed using the algorithm of Zellig Harris’s
TDAP project at the University of Pennsylvania, essentially a cascade of ﬁnite-state
transducers (see the historical discussion in Joshi and Hopely  and Karttunen
). Then in a content analysis phase each word or phrase was associated with a
program that computed parts of its meaning. Thus the phrase ‘Where’ had code to
assign the semantics Place = ?, with the result that the question “Where did the
Red Sox play on July ” was assigned the meaning
Place = ?
Team = Red Sox
Month = July
Day =
The question is then matched against the database to return the answer. Simmons
() summarizes other early QA systems.
Another important progenitor of the knowledge-based paradigm for question-
answering is work that used predicate calculus as the meaning representation lan-
guage. The LUNAR system (Woods et al. , Woods ) was designed to be
LUNAR
a natural language interface to a database of chemical facts about lunar geology. It
could answer questions like Do any samples have greater than  percent aluminum
by parsing them into a logical form
(TEST (FOR SOME X / (SEQ SAMPLES) : T ; (CONTAIN’ X
(NPR* X / (QUOTE AL)) (GREATERTHAN  PCT))))
By a couple decades later, drawing on new machine learning approaches in NLP,
Zelle and Mooney () proposed to treat knowledge-based QA as a semantic pars-
ing task, by creating the Prolog-based GEOQUERY dataset of questions about US
geography. This model was extended by Zettlemoyer and Collins () and .
By a decade later, neural models were applied to semantic parsing (Dong and Lap-
ata , Jia and Liang ), and then to knowledge-based question answering by
mapping text to SQL (Iyer et al., ).
Meanwhile, the information-retrieval paradigm for question answering was in-
ﬂuenced by the rise of the web in the s. The U.S. government-sponsored TREC
(Text REtrieval Conference) evaluations, run annually since , provide a testbed
for evaluating information-retrieval tasks and techniques (Voorhees and Harman,
). TREC added an inﬂuential QA track in , which led to a wide variety of
factoid and non-factoid systems competing in annual evaluations.
At that same time, Hirschman et al. () introduced the idea of using chil-
dren’s reading comprehension tests to evaluate machine text comprehension algo-
rithms. They acquired a corpus of  passages with  questions each designed for
rd-th grade children, built an answer extraction system, and measured how well
the answers given by their system corresponded to the answer key from the test’s
publisher. Their algorithm focused on word overlap as a feature; later algorithms
added named entity features and more complex similarity between the question and
the answer span (Riloff and Thelen , Ng et al. ).
The DeepQA component of the Watson Jeopardy! system was a large and so-
phisticated feature-based system developed just before neural systems became com-

CHAPTER
QUESTION ANSWERING AND INFORMATION RETRIEVAL
mon. It is described in a series of papers in volume  of the IBM Journal of Re-
search and Development, e.g., Ferrucci ().
Neural reading comprehension systems drew on the insight common to early
systems that answer ﬁnding should focus on question-passage similarity. Many of
the architectural outlines of these modern neural systems were laid out in Hermann
et al. (a), Chen et al. (a), and Seo et al. (). These systems focused
on datasets like Rajpurkar et al. () and Rajpurkar et al. () and their succes-
sors, usually using separate IR algorithms as input to neural reading comprehension
systems. The paradigm of using dense retrieval with a span-based reader, often with
a single end-to-end architecture, is exempliﬁed by systems like Lee et al. ()
or Karpukhin et al. (). An important research area with dense retrieval for
open-domain QA is training data: using self-supervised methods to avoid having
to label positive and negative passages (Sachan et al., ). Retrieval-augmented
generation algorithms were ﬁrst introduced as a way to improve language modeling
(Khandelwal et al., ), but were quickly applied to question answering (Izacard
et al., ; Ram et al., ; Shi et al., ).
Exercises

Chatbots & Dialogue Systems
CHAPTER
Les lois de la conversation sont en g´en´eral de ne s’y appesantir sur aucun ob-
jet, mais de passer l´eg`erement, sans effort et sans affectation, d’un sujet `a un
autre ; de savoir y parler de choses frivoles comme de choses s´erieuses
[The rules of conversation are, in general, not to dwell on any one subject,
but to pass lightly from one to another without effort and without affectation;
to know how to speak about trivial topics as well as serious ones;]
The th C. Encyclopedia of Diderot, start of the entry on conversation
The literature of the fantastic abounds in inanimate objects magically endowed with
the gift of speech. From Ovid’s statue of Pygmalion to Mary Shelley’s story about
Frankenstein, we continually reinvent stories about creat-
ing something and then having a chat with it. Legend has
it that after ﬁnishing his sculpture Moses, Michelangelo
thought it so lifelike that he tapped it on the knee and
commanded it to speak. Perhaps this shouldn’t be sur-
prising. Language is the mark of humanity and sentience,
and conversation or dialogue is the most fundamental
conversation
dialogue
arena of language. It is the ﬁrst kind of language we
learn as children, and the kind we engage in constantly,
whether we are ordering lunch, buying train tickets, or
talking with our families, friends, or coworkers.
This chapter introduces the fundamental algorithms of programs that use con-
versation to interact with users. We often distinguish between two kinds of archi-
tectures. Task-oriented dialogue systems converse with users to accomplish ﬁxed
dialogue system
tasks like controlling appliances or ﬁnding restaurants, relying on a data structure
called the frame, which represents the knowledge a system needs to acquire from
frame
the user (like the time to set an alarm clock). Chatbots, by contrast, are designed
chatbot
to mimic the longer and more unstructured conversations or ‘chats’ characteristic of
human-human interaction. Modern systems incorporate aspects of both; industrial
chatbots like ChatGPT can carry on longer unstructured conversations; industrial
digital assistants like Siri or Alexa are generally frame-based dialogue systems.
The fact that chatbots and dialogue systems are designed for human-computer
interaction has strong implications for their design and use. Many of these impli-
cations already became clear in one of the earliest chatbots, ELIZA (Weizenbaum,
). ELIZA was designed to simulate a Rogerian psychologist, based on a branch
of clinical psychology whose methods involve drawing the patient out by reﬂecting
patient’s statements back at them. Rogerian interactions are the rare type of conver-
sation in which, as Weizenbaum points out, one can “assume the pose of knowing
almost nothing of the real world”. If a patient says “I went for a long boat ride” and
the psychiatrist says “Tell me about boats”, you don’t assume she didn’t know what

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
Men are all alike.
IN WHAT WAY
They’re always bugging us about something or other.
CAN YOU THINK OF A SPECIFIC EXAMPLE
Well my boyfriend made me come here.
YOUR BOYFRIEND MADE YOU COME HERE
He says I’m depressed much of the time.
I AM SORRY TO HEAR YOU ARE DEPRESSED
Figure .
Sample ELIZA dialogue from Weizenbaum ().
a boat is, but rather assume she had some conversational goal.
Weizenbaum made use of this property of Rogerian psychiatric conversations,
along with clever regular expressions, to allow ELIZA to interact in ways that seemed
deceptively human-like, as in the sample conversational fragment in Fig. ..
As we foreshadowed in Chapter , ELIZA worked by simple rules roughly like:
(.*) YOU (.*) ME
WHAT MAKES YOU THINK I \ YOU
to transform a user sentence like “You hate me” into a system response like
WHAT MAKES YOU THINK I HATE YOU
Among Weizenbaum’s clever tricks are the linking of each ELIZA pattern/rule
to a keyword. Consider the following user sentence:
I know everybody laughed at me
Because it has the word “I”, this sentence could match the following rule whose
keyword is I:
I (.*)
You say you \
producing:
YOU SAY YOU KNOW EVERYBODY LAUGHED AT YOU
Weizenbaum points out, however, that a more powerful response would rely on
the keyword “everybody”, since someone using universals like everybody or always
is probably thinking about a speciﬁc person or situation. So the ELIZA algorithm
prefers to respond using patterns associated more speciﬁc keywords like everybody:
WHO IN PARTICULAR ARE YOU THINKING OF?
If no keyword matches, the algorithm chooses a non-committal response like
“PLEASE GO ON”, “THAT’S VERY INTERESTING”, or “I SEE”.
ELIZA illustrates a number of important issues with chatbots. First, people
became deeply emotionally involved and conducted very personal conversations,
even to the extent of asking Weizenbaum to leave the room while they were typ-
ing. Reeves and Nass () show that people tend to assign human characteristics
to computers and interact with them in ways that are typical of human-human in-
teractions. They interpret an utterance in the way they would if it had spoken by a
human, (even though they are aware they are talking to a computer). This means that
chatbots can have signiﬁcant inﬂuences on people’s cognitive and emotional state.
A second related issue is privacy. When Weizenbaum suggested that he might
want to store the ELIZA conversations, people immediately pointed out that this
would violate people’s privacy. Modern chatbots in the home are likely to overhear
This is due to the Gricean principle of relevance that we’ll discuss in the next section..

PROPERTIES OF HUMAN CONVERSATION
private information, even if they aren’t used for counseling as ELIZA was. Indeed,
if a chatbot is human-like, users are more likely to disclose private information, and
yet less likely to worry about the harm of this disclosure (Ischen et al., ).
Both of these issues (emotional engagement and privacy) mean we need to think
carefully about how we deploy chatbots and the people who are interacting with
them. Dialogue research that uses human participants often requires getting permis-
sion from the Institutional Review Board (IRB) of your institution.
In the next section we introduce some basic properties of human conversation.
We then turn in the rest of the chapter to the two basic paradigms for conversational
interaction: frame-based dialogue systems and chatbots.
Properties of Human Conversation
Conversation between humans is an intricate and complex joint activity. Before
we attempt to design a dialogue system to converse with humans, it is crucial to
understand something about how humans converse with each other. Consider some
of the phenomena that occur in the conversation between a human travel agent and
a human client excerpted in Fig. ..
C:
...I need to travel in May.
A:
And, what day in May did you want to travel?
C:
OK uh I need to be there for a meeting that’s from the th to the th.
A:
And you’re ﬂying into what city?
C:
Seattle.
A:
And what time would you like to leave Pittsburgh?
C:
Uh hmm I don’t think there’s many options for non-stop.
A:
Right. There’s three non-stops today.
C:
What are they?
A: The ﬁrst one departs PGH at :am arrives Seattle at : their time.
The second ﬂight departs PGH at :pm, arrives Seattle at pm. And the
last ﬂight departs PGH at :pm arrives Seattle at :pm.
C: OK I’ll take the ish ﬂight on the night before on the th.
A: On the th? OK. Departing at :pm arrives Seattle at pm, U.S. Air
ﬂight .
C: OK.
A: And you said returning on May th?
C: Uh, yeah, at the end of the day.
A: OK. There’s #two non-stops ...#
C:
#Act...actually
#, what day of the week is the th?
A: It’s a Friday.
C: Uh hmm. I would consider staying there an extra day til Sunday.
A: OK...OK. On Sunday I have ...
Figure .
Part of a phone conversation between a human travel agent (A) and human
client (C). The passages framed by # in A and C indicate overlaps in speech.
Turns
A dialogue is a sequence of turns (C, A, C, and so on), each a single contribution
turn
from one speaker to the dialogue (as if in a game: I take a turn, then you take a turn,

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
then me, and so on). There are  turns in Fig. .. A turn can consist of a sentence
(like C), although it might be as short as a single word (C) or as long as multiple
sentences (A).
Turn structure has important implications for spoken dialogue. A human has
to know when to stop talking; the client interrupts (in A and C), so a system
that was performing this role must know to stop talking (and that the user might be
making a correction). A system also has to know when to start talking. For example,
most of the time in conversation, speakers start their turns almost immediately after
the other speaker ﬁnishes, without a long pause, because people are can usually
predict when the other person is about to ﬁnish talking. Spoken dialogue systems
must also detect whether a user is done speaking, so they can process the utterance
and respond. This task—called endpointing or endpoint detection— can be quite
endpointing
challenging because of noise and because people often pause in the middle of turns.
Speech Acts
A key insight into conversation—due originally to the philosopher Wittgenstein
() but worked out more fully by Austin ()—is that each utterance in a
dialogue is a kind of action being performed by the speaker. These actions are com-
monly called speech acts or dialogue acts: here’s one taxonomy consisting of
speech acts
major classes (Bach and Harnish, ):
Constatives:
committing the speaker to something’s being the case (answering, claiming,
conﬁrming, denying, disagreeing, stating)
Directives:
attempts by the speaker to get the addressee to do something (advising, ask-
ing, forbidding, inviting, ordering, requesting)
Commissives:
committing the speaker to some future course of action (promising, planning,
vowing, betting, opposing)
Acknowledgments: express the speaker’s attitude regarding the hearer with respect to some so-
cial action (apologizing, greeting, thanking, accepting an acknowledgment)
A user asking a person or a dialogue system to do something (‘Turn up the mu-
sic’) is issuing a DIRECTIVE. Asking a question that requires an answer is also
a way of issuing a DIRECTIVE: in a sense when the system says (A) “what day
in May did you want to travel?” it’s as if the system is (very politely) command-
ing the user to answer. By contrast, a user stating a constraint (like C ‘I need to
travel in May’) is issuing a CONSTATIVE. A user thanking the system is issuing
an ACKNOWLEDGMENT. The speech act expresses an important component of the
intention of the speaker (or writer) in saying what they said.
Grounding
A dialogue is not just a series of independent speech acts, but rather a collective act
performed by the speaker and the hearer. Like all collective acts, it’s important for
the participants to establish what they both agree on, called the common ground
common
ground
(Stalnaker, ). Speakers do this by grounding each other’s utterances. Ground-
grounding
ing means acknowledging that the hearer has understood the speaker (Clark, ).
(People need grounding for non-linguistic actions as well; the reason an elevator but-
ton lights up when it’s pressed is to acknowledge that the elevator has indeed been
called, essentially grounding your action of pushing the button (Norman, ).)
Humans constantly ground each other’s utterances. We can ground by explicitly
saying “OK”, as the agent does in A or A. Or we can ground by repeating what
the other person says; in utterance A the agent repeats “in May”, demonstrating her

PROPERTIES OF HUMAN CONVERSATION
understanding to the client. Or notice that when the client answers a question, the
agent begins the next question with “And”. The “And” implies that the new question
is ‘in addition’ to the old question, again indicating to the client that the agent has
successfully understood the answer to the last question.
Subdialogues and Dialogue Structure
Conversations have structure. Consider, for example, the local structure between
speech acts discussed in the ﬁeld of conversational analysis (Sacks et al., ).
conversational
analysis
QUESTIONS set up an expectation for an ANSWER. PROPOSALS are followed by
ACCEPTANCE (or REJECTION). COMPLIMENTS (“Nice jacket!”) often give rise to
DOWNPLAYERS (“Oh, this old thing?”). These pairs, called adjacency pairs are
adjacency pair
composed of a ﬁrst pair part and a second pair part (Schegloff, ), and these
expectations can help systems decide what actions to take.
However, dialogue acts aren’t always followed immediately by their second pair
part. The two parts can be separated by a side sequence (Jefferson ) or sub-
side sequence
dialogue. For example utterances C to A constitute a correction subdialogue
subdialogue
(Litman , Litman and Allen , Chu-Carroll and Carberry ):
C: #Act...actually#, what day of the week is the th?
A: It’s a Friday.
C: Uh hmm. I would consider staying there an extra day til Sunday.
A: OK...OK. On Sunday I have ...
The question in C interrupts the prior discourse, in which the agent was looking
for a May  return ﬂight. The agent must answer the question and also realize that
‘’I would consider staying...til Sunday” means that the client would probably like to
change their plan, and now go back to ﬁnding return ﬂights, but for the th.
Another side sequence is the clariﬁcation question, which can form a subdia-
logue between a REQUEST and a RESPONSE. This is especially common in dialogue
systems where speech recognition errors causes the system to have to ask for clari-
ﬁcations or repetitions like the following:
User:
What do you have going to UNKNOWN WORD on the th?
System:
Let’s see, going where on the th?
User:
Going to Hong Kong.
System:
OK, here are some ﬂights...
In addition to side-sequences, questions often have presequences, like the fol-
presequence
lowing example where a user starts with a question about the system’s capabilities
(“Can you make train reservations”) before making a request.
User:
Can you make train reservations?
System: Yes I can.
User:
Great, I’d like to reserve a seat on the pm train to New York.
Initiative
Sometimes a conversation is completely controlled by one participant. For exam-
ple a reporter interviewing a chef might ask questions, and the chef responds. We
say that the reporter in this case has the conversational initiative (Carbonell, ;
initiative
Nickerson, ). In normal human-human dialogue, however, it’s more common
for initiative to shift back and forth between the participants, as they sometimes
answer questions, sometimes ask them, sometimes take the conversations in new di-
rections, sometimes not. You may ask me a question, and then I respond asking you

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
to clarify something you said, which leads the conversation in all sorts of ways. We
call such interactions mixed initiative (Carbonell, ).
Full mixed initiative, while the norm for human-human conversations, can be
difﬁcult for dialogue systems. The most primitive dialogue systems tend to use
system-initiative, where the system asks a question and the user can’t do anything
until they answer it, or user-initiative like simple search engines, where the user
speciﬁes a query and the system passively responds. Even modern large language
model-based dialogue systems, which come much closer to using full mixed initia-
tive, often don’t have completely natural initiative switching. Getting this right is an
important goal for modern systems.
Inference and Implicature
Inference is also important in dialogue understanding. Consider the client’s response
C, repeated here:
A: And, what day in May did you want to travel?
C: OK uh I need to be there for a meeting that’s from the th to the th.
Notice that the client does not in fact answer the agent’s question. The client
merely mentions a meeting at a certain time. What is it that licenses the agent to
infer that the client is mentioning this meeting so as to inform the agent of the travel
dates?
The speaker seems to expect the hearer to draw certain inferences; in other
words, the speaker is communicating more information than seems to be present
in the uttered words. This kind of example was pointed out by Grice (, )
as part of his theory of conversational implicature. Implicature means a particu-
implicature
lar class of licensed inferences. Grice proposed that what enables hearers to draw
these inferences is that conversation is guided by a set of maxims, general heuristics
that play a guiding role in the interpretation of conversational utterances. One such
maxim is the maxim of relevance which says that speakers attempt to be relevant,
relevance
they don’t just utter random speech acts. When the client mentions a meeting on the
th, the agent reasons ‘There must be some relevance for mentioning this meeting.
What could it be?’. The agent knows that one precondition for having a meeting
(at least before Web conferencing) is being at the place where the meeting is held,
and therefore that maybe the meeting is a reason for the travel, and if so, then since
people like to arrive the day before a meeting, the agent should infer that the ﬂight
should be on the th.
These subtle characteristics of human conversations (turns, speech acts, ground-
ing, dialogue structure, initiative, and implicature) are among the reasons it is dif-
ﬁcult to build dialogue systems that can carry on natural conversations with humans.
Many of these challenges are active areas of dialogue systems research.
Frame-Based Dialogue Systems
A task-based dialogue system has the goal of helping a user solve a speciﬁc task
like making an travel reservation or buying a product. Task-based dialogue systems
are based around frames, ﬁrst introduced in the early inﬂuential GUS system for
frame
GUS
travel planning (Bobrow et al., ). Frames are knowledge structures representing
the details of the user’s task speciﬁcation. Each frame consists of a collection of
slots, each of which can take a set of possible values. Together a set of frames is
slot

FRAME-BASED DIALOGUE SYSTEMS
sometimes called a domain ontology.
Here we’ll describe the most well-studied frame-based architecture, the dialogue-
state architecture, made up of the six components shown in Fig. .. In the next
sections we’ll introduce four of them, after introducing the idea of frames (deferring
the speech recognition and synthesis components to Chapter ).
Figure .
Architecture of a dialogue-state system for task-oriented dialogue from Williams et al. ().
Frames and Slot Filling
The frame and its slots in a task-based dialogue system specify what the system
needs to know to perform its task. A hotel reservation system needs dates and loca-
tions. An alarm clock system needs a time. The system’s goal is to ﬁll the slots in
the frame with the ﬁllers the user intends, and then perform the relevant action for
the user (answering a question, or booking a ﬂight).
Fig. . shows a sample frame for booking air travel, with some sample ques-
tions used for ﬁlling slots. In the simplest frame-based systems (including most com-
mercial assistants until quite recently), these questions are pre-written templates, but
in more sophisticated systems, questions are generated on-the-ﬂy. The slot ﬁllers are
often constrained to a particular semantic type, like type CITY (taking on values like
San Francisco, or Hong Kong) or DATE, AIRLINE, or TIME.
Slot
Type Example Question
ORIGIN CITY
city
“From what city are you leaving?”
DESTINATION CITY city
“Where are you going?”
DEPARTURE TIME
time
“When would you like to leave?”
DEPARTURE DATE
date
“What day would you like to leave?”
ARRIVAL TIME
time
“When do you want to arrive?”
ARRIVAL DATE
date
“What day would you like to arrive?”
Figure .
A frame in a frame-based dialogue system, showing the type of each slot and
a sample question used to ﬁll the slot.

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
Many domains require multiple frames. Besides frames for car or hotel reser-
vations, we might need other frames for things like general route information (for
questions like Which airlines ﬂy from Boston to San Francisco?), That means the
system must be able to disambiguate which slot of which frame a given input is
supposed to ﬁll.
The task of slot-ﬁlling is usually combined with two other tasks, to extract
things from each user utterance. The ﬁrst is domain classiﬁcation: is this user for
example talking about airlines, programming an alarm clock, or dealing with their
calendar? The second is user intent determination: what general task or goal is the
intent
determination
user trying to accomplish? For example the task could be to Find a Movie, or Show
a Flight, or Remove a Calendar Appointment. Together, the domain classiﬁcation
and intent determination tasks decide which frame we are ﬁlling. Finally, we need
to do slot ﬁlling itself: extract the particular slots and ﬁllers that the user intends the
slot ﬁlling
system to understand from their utterance with respect to their intent. From a user
utterance like this one:
Show me morning flights from Boston to San Francisco on Tuesday
a system might want to build a representation like:
DOMAIN:
AIR-TRAVEL
INTENT:
SHOW-FLIGHTS
ORIGIN-CITY:
Boston
DEST-CITY:
San Francisco
ORIGIN-DATE:
Tuesday
ORIGIN-TIME:
morning
Similarly an utterance like this:
should give an intent like this:
Wake me tomorrow at
DOMAIN:
ALARM-CLOCK
INTENT:
SET-ALARM
TIME:
The simplest dialogue systems use handwritten rules for slot-ﬁlling, like this
regular expression for recognizing the SET-ALARM intent:
wake me (up) | set (the|an) alarm | get me up
But most systems use supervised machine-learning: each sentence in a training
set is annotated with slots, domain, and intent, and a sequence model maps from
input words to slot ﬁllers, domain and intent. For example we’ll have pairs of sen-
tences that are labeled for domain (AIRLINE) and intent (SHOWFLIGHT), and are
also labeled with BIO representations for the slots and ﬁllers. (Recall from Chap-
ter  that in BIO tagging we introduce a tag for the beginning (B) and inside (I) of
each slot label, and one for tokens outside (O) any slot label.)
O O
B-DES I-DES
B-DEPTIME I-DEPTIME
AIRLINE-SHOWFLIGHT
I want to fly to San
Francisco on Monday
afternoon
please
EOS
Fig. . shows a typical architecture for inference. The input words w...wn
are passed through a pretrained language model encoder, followed by a feedforward
layer and a softmax at each token position over possible BIO tags, with the output
a series of BIO tags s...sn. We generally combine the domain-classiﬁcation and
intent-extraction tasks with slot-ﬁlling by adding a domain concatenated with an
intent as the desired output for the ﬁnal EOS token.
Once the sequence labeler has tagged the user utterance, a ﬁller string can be ex-
tracted for each slot from the tags (e.g., “San Francisco”), and these word strings
can then be normalized to the correct form in the ontology (perhaps the airport

DIALOGUE ACTS AND DIALOGUE STATE
B-DES
I-DES
B-DTIME
d+i
Classiﬁer
+softmax
Encodings
Encoder
San
Francisco
on
Monday
<EOS>
Figure .
Slot ﬁlling by passing input words through an encoder, and then using a linear
or feedforward layer followed by a softmax to generate a series of BIO tags. Here we also
show a ﬁnal state: a domain concatenated with an intent.
code ‘SFO’), for example with dictionaries that specify that SF, SFO, and San Fran-
cisco are synonyms. Often in industrial contexts, combinations of rules and machine
learning are used for each of these components.
We can make a very simple frame-based dialogue system by wrapping a small
amount of code around this slot extractor. Mainly we just need to ask the user
questions until all the slots are full, do a database query, then report back to the user,
using hand-built templates for generating sentences.
Evaluating Task-Based Dialogue
We evaluate task-based systems by computing the task error rate, or task success
task error rate
rate: the percentage of times the system booked the right plane ﬂight, or put the
right event on the calendar. A more ﬁne-grained, but less extrinsic metric is the slot
error rate, the percentage of slots ﬁlled with the correct values:
slot error rate
Slot Error Rate for a Sentence = # of inserted/deleted/subsituted slots
# of total reference slots for sentence
For example a system that extracted the slot structure below from this sentence:
(.) Make an appointment with Chris at : in Gates
Slot
Filler
PERSON Chris
TIME
: a.m.
ROOM
Gates
has a slot error rate of /, since the TIME is wrong. Instead of error rate, slot
precision, recall, and F-score can also be used. We can also measure efﬁciency
costs like the length of the dialogue in seconds or turns.
efﬁciency costs
Dialogue Acts and Dialogue State
While the naive slot-extractor system described above can handle simple dialogues,
often we want more complex interactions. For example, we might want to conﬁrm
that we’ve understand the user, or ask them to repeat themselves. We can build a
more sophisticated system using dialogue acts and dialogue state.

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
Dialogue Acts
Dialogue acts are a generalization of speech acts that also represent grounding. The
dialogue acts
set of acts can be general, or can be designed for particular dialogue tasks.
Tag
Sys User
Description
HELLO(a = x,b = y,...)
Open a dialogue and give info a = x,b = y,...
INFORM(a = x,b = y,...)
Give info a = x,b = y,...
REQUEST(a,b = x,...)
Request value for a given b = x,...
REQALTS(a = x,...)
Request alternative with a = x,...
CONFIRM(a = x,b = y,...) ✓
Explicitly conﬁrm a = x,b = y,...
CONFREQ(a = x,...,d)
Implicitly conﬁrm a = x,... and request value of d
SELECT(a = x,a = y)
Implicitly conﬁrm a = x,... and request value of d
AFFIRM(a = x,b = y,...)
Afﬁrm and give further info a = x,b = y,...
NEGATE(a = x)
Negate and give corrected value a = x
DENY(a = x)
Deny that a = x
BYE()
Close a dialogue
Figure .
Dialogue acts used by the HIS restaurant recommendation system of Young
et al. (). The Sys and User columns indicate which acts are valid as system outputs and
user inputs, respectively.
Figure . shows a tagset for a restaurant recommendation system, and Fig. .
shows these tags labeling a sample dialogue from the HIS system (Young et al.,
). This example also shows the content of each dialogue act, which are the slot
ﬁllers being communicated. So the user might INFORM the system that they want
Italian food near a museum, or CONFIRM with the system that the price is reasonable.
Utterance
Dialogue act
U: Hi, I am looking for somewhere to eat.
hello(task = find,type=restaurant)
S: You are looking for a restaurant. What
type of food do you like?
confreq(type = restaurant, food)
U: I’d like an Italian near the museum.
inform(food = Italian, near=museum)
S: Roma is a nice Italian restaurant near
the museum.
inform(name = "Roma", type = restaurant,
food = Italian, near = museum)
U: Is it reasonably priced?
confirm(pricerange = moderate)
S: Yes, Roma is in the moderate price
range.
affirm(name = "Roma", pricerange =
moderate)
U: What is the phone number?
request(phone)
S: The number of Roma is .
inform(name = "Roma", phone = "")
U: Ok, thank you goodbye.
bye()
Figure .
A dialogue from the HIS System of Young et al. () using the dialogue acts in Fig. ..
Dialogue State Tracking
The job of the dialogue-state tracker is to determine the current state of the frame
(the ﬁllers of each slot), and the user’s most recent dialogue act. The dialogue-state
is not just the slot-ﬁllers in the current sentence; it includes the entire state of the
frame at this point, summarizing all of the user’s constraints. Fig. . from Mrkˇsi´c
et al. () shows the dialogue state after each turn.
Dialogue act detection is done just like domain or intent classiﬁcation, by passing
the input sentence through an encoder and adding an act classiﬁer. Often passing in
the prior dialogue act as well can improve classiﬁcation. And since dialogue acts

DIALOGUE ACTS AND DIALOGUE STATE
User:
I’m looking for a cheaper restaurant
inform(price=cheap)
System: Sure. What kind - and where?
User:
Thai food, somewhere downtown
inform(price=cheap, food=Thai, area=centre)
System: The House serves cheap Thai food
User:
Where is it?
inform(price=cheap, food=Thai, area=centre); request(address)
System: The House is at  Regent Street
Figure .
The output of the dialogue state tracker after each turn (Mrkˇsi´c et al., ).
place some constraints on the slots and values, the tasks of dialogue-act detection and
slot-ﬁlling are often performed jointly. The state tracker can just take the output of
a slot-ﬁlling sequence-model (Section ..) after each sentence, or do something
more complicated like training a classiﬁer to decide if a value has been changed.
A special case: detecting correction acts.
If a dialogue system misrecognizes
or misunderstands an utterance, users will repeat or reformulate the utterance. De-
tecting these user correction acts is quite important, especially for spoken lan-
user correction
acts
guage. Ironically, corrections are actually harder to recognize than normal sentences
(Swerts et al., ), because users who are frustrated adjust their speech in a way
that is difﬁcult for speech recognizers (Goldberg et al., ). For example speak-
ers often use a prosodic style for corrections called hyperarticulation, in which the
hyperarticula-
tion
utterance is louder or longer or exaggerated in pitch, such as I said BAL-TI-MORE,
not Boston (Wade et al. , Levow , Hirschberg et al. ). Detecting acts
can be part of the general dialogue act detection classiﬁer, or can make use of spe-
cial features beyond the words, like those shown below (Levow , Litman et al.
, Hirschberg et al. , Bulyko et al. , Awadallah et al. ).
features
examples
semantic
embedding similarity between correction and user’s prior utterance
phonetic
phonetic overlap between candidate correction act and user’s prior utterance
(i.e. “WhatsApp” may be incorrectly recognized as “What’s up”)
prosodic
hyperarticulation, increases in F range, pause duration, and word duration
ASR
ASR conﬁdence, language model probability
Dialogue Policy: Which act to generate
In early commercial frame-based systems, the dialogue policy is simple: ask ques-
tions until all the slots are full, do a database query, then report back to the user. A
more sophisticated dialogue policy can help a system decide when to answer the
dialogue policy
user’s questions, when to instead ask the user a clariﬁcation question, and so on. A
dialogue policy thus decides what dialogue act to generate. Choosing a dialogue act
to generate, along with its arguments, is sometimes called content planning.
content
planning
Let’s see how to do this for some important dialogue acts. Dialogue systems, es-
pecially speech systems, often misrecognize the users’ words or meaning. To ensure
system and user share a common ground, systems must conﬁrm understandings with
the user or reject utterances that the system don’t understand. A system might use
an explicit conﬁrmation act to conﬁrm with the user, like Is that correct? below:
explicit
conﬁrmation

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
U: I’d like to ﬂy from Denver Colorado to New York City on September
twenty ﬁrst in the morning on United Airlines
S: Let’s see then. I have you going from Denver Colorado to New York
on September twenty ﬁrst. Is that correct?
When using an implicit conﬁrmation act, a system instead grounds more im-
implicit
conﬁrmation
plicitly, for example by repeating the system’s understanding as part of asking the
next question, as Shanghai is conﬁrmed in passing in this example:
U: I want to travel to to Shanghai
S: When do you want to travel to Shanghai?
There’s a tradeoff. Explicit conﬁrmation makes it easier for users to correct mis-
recognitions by just answering “no” to the conﬁrmation question. But explicit con-
ﬁrmation is time-consuming and awkward (Danieli and Gerbino , Walker et al.
a). We also might want an act that expresses lack of understanding: rejection,
rejection
for example with a prompt like I’m sorry, I didn’t understand that. To decide among
these acts, we can make use of the fact that ASR systems often compute their conﬁ-
dence in their transcription (often based on the log-likelihood the system assigns the
sentence). A system can thus choose to explicitly conﬁrm only low-conﬁdence sen-
tences. Or systems might have a four-tiered level of conﬁdence with three thresholds
α, β, and γ:
< α low conﬁdence
reject
≥ α above the threshold
conﬁrm explicitly
≥ β high conﬁdence
conﬁrm implictly
≥ γ
very high conﬁdence don’t conﬁrm at all
Natural language generation: Sentence Realization
recommend(restaurant name= Au Midi, neighborhood = midtown,
cuisine = french)
Au Midi is in Midtown and serves French food.
There is a French restaurant in Midtown called Au Midi.
Figure .
Sample inputs to the sentence realization phase of NLG, showing the dialogue
act and attributes prespeciﬁed by the content planner, and two distinct potential output sen-
tences to be generated. From the restaurant recommendation system of Nayak et al. ().
Once a dialogue act has been chosen, we need to generate the text of the re-
sponse to the user. This part of the generation process is called sentence realiza-
tion. Fig. . shows a sample input/output for the sentence realization phase. The
sentence
realization
content planner has chosen the dialogue act RECOMMEND and some slots (name,
neighborhood, cuisine) and ﬁllers. The sentence realizer generates a sentence like
lines  or  (by training on examples of representation/sentence pairs from a corpus
of labeled dialogues). Because we won’t see every restaurant or attribute in every
possible wording, we can delexicalize: generalize the training examples by replac-
delexicalize
ing speciﬁc slot value words in the training set with a generic placeholder token
representing the slot. Fig. . shows the sentences in Fig. . delexicalized.
We can map from frames to delexicalized sentences with an encoder decoder
model (Mrkˇsi´c et al. , inter alia), trained on hand-labeled dialogue corpora like
MultiWOZ (Budzianowski et al., ). The input to the encoder is a sequence of

CHATBOTS
recommend(restaurant name= Au Midi, neighborhood = midtown,
cuisine = french)
restaurant name is in neighborhood and serves cuisine food.
There is a cuisine restaurant in neighborhood called restaurant name.
Figure .
Delexicalized sentences that can be used for generating many different relex-
icalized sentences. From the restaurant recommendation system of Nayak et al. ().
[name]
has
decent
service
DECODER
ENCODER
RECOMMEND service: decent
cuisine: null
Figure .
An encoder decoder sentence realizer mapping slots/ﬁllers to English.
tokens xt that represent the dialogue act (e.g., RECOMMEND) and its arguments (e.g.,
service:decent, cuisine:null) (Nayak et al., ), as in Fig. ..
The decoder outputs the delexicalized English sentence “name has decent ser-
vice”, which we can then relexicalize, i.e. ﬁll back in correct slot values, resulting
relexicalize
in “Au Midi has decent service”.
Chatbots
Chatbots are systems that can carry on extended conversations with the goal of
chatbot
mimicking the unstructured conversations or ‘chats’ characteristic of informal human-
human interaction. While early systems like ELIZA (Weizenbaum, ) or PARRY
(Colby et al., ) had theoretical goals like testing theories of psychological coun-
seling, for most of the last  years chatbots have been designed for entertainment.
That changed with the recent rise of neural chatbots like ChatGPT, which incor-
porate solutions to NLP tasks like question answering, writing tools, or machine
translation into a conversational interface. A conversation with ChatGPT is shown
in Fig. .. In this section we describe neural chatbot architectures and datasets.
[TBD]
Figure .
A conversation with ChatGPT.
Training chatbots
Data
Chatbots are generally trained on a training set that includes standard large
language model training data of the type discussed in Section ..: versions of the
web from the Common Crawl, including news sites, Wikipedia, as well as books.
For training chatbots, it is common to additionally add lots of dialogue data.
This can include datasets created speciﬁcally for training chatbots by hiring
speakers of the language to have conversations, such as by having them take on
personas or talk about knowledge provided to them. For example the Topical-Chat
dataset has K crowdsourced conversations spanning  broad topics (Gopalakrish-
nan et al., ), the EMPATHETICDIALOGUES includes K crowdsourced con-

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
versations grounded in a speciﬁc situation where a speaker was feeling a speciﬁc
emotion (Rashkin et al., ), and the SaFeRDialogues dataset (Ung et al., )
has k dialogues demonstrating graceful responses to conversational feedback about
safety failures.
Such datasets are far too small to train a language model alone, and so it’s com-
mon to also pretrain on large datasets of pseudo-conversations drawn from Twitter
(Ritter et al., a), Reddit (Roller et al., ), Weibo (微博), and other social
media platforms. To turn social media data into data that has the structure of a con-
versation, we can treat any post on the platform as the ﬁrst turn in a conversation,
and the sequence of comments/replies as subsequent turns in that conversation.
Datasets from the web can be enormously toxic, so it’s crucial to ﬁlter the di-
alogues ﬁrst. This can be done by using the same toxicity classiﬁers we describe
below in the ﬁne-tuning section.
Architecture
For training chatbots, it’s most common to use the standard causal
language model architecture, in which the model predicts each word given all the
prior words, and the loss is the standard language modeling loss. Fig. . shows
a standard training setup; no different than language model training in Chapter .
The only difference is the data, which has the addition of signiﬁcant conversation
and pseudo-conversation data as described in the prior section. As usual, the left
context can include the entire prior conversation (or as much as ﬁts in the context
window).
got
promoted
<s>
Next word
Congrats
LM Loss
-log y!
-log yCongrats
-log y<s>
-log y!
-log ypromoted
-log ygot
LM head
LM head
LM head
LM head
LM head
LM head
LM head
LM head
Transformer
Blocks
Congrats
got
promoted
<s>
Figure .
Training a causal (decoder-only) language model for a chatbot.
An alternative is to use the encoder-decoder architecture of Chapter . In this
case the entire conversation up to the last turn (as much as ﬁts in the context) is
presented to the encoder, and the decoder generates the next turn.
Congrats
DECODER
ENCODER
got promoted
<s>
Figure .
An alternative: an encoder-decoder language model for a chatbot.

CHATBOTS
In practice, dialogue systems require additional customization beyond just pre-
training on dialogue data. In the next few sections we’ll discuss various stages of
ﬁne-tuning that can be used for this customization.
Fine Tuning for Quality and Safety
It is a common practice for dialogue systems to use further labeled data for ﬁne-
tuning. One function of this ﬁne-tuning step is to improve the quality of the dialogue,
training the system to produce responses that are sensible and interesting. Another
function might be to improve safety, keeping a dialogue system from suggesting
harmful actions (like ﬁnancial fraud, medical harm, inciting hatred, or abusing the
user or other people).
In the simplest method for improving quality and safety, speakers of the lan-
guage are given an initial prompt and instructions to have high-quality, safe dia-
logues. They then interact with an initial dialogue system and their responses are
used to ﬁnetune the model, usually as part of the instruct tuning step we introduced
in Chapter . Thus a dialogue system learns to answer questions, follow other
instructions, and also carry on high-quality, safe dialogues, in a single multi-task
learning format.
While ﬁne-tuning on positive examples is helpful, it is generally insufﬁcient and
so it is common to add more discriminative data that speciﬁcally downweights low-
quality or harmful responses. The simplest paradigm for this is to train a model to
predict turn-level safety and quality values, by training on human-labeled ratings.
Such ratings might be collected by ﬁrst having speakers of the language carry on
dialogues with a system, and then a second set of people act as labelers to label
every system turn for its quality and safety, resulting in a binary label for quality and
safety for each turn.
Once a dataset has been created with these labels, a language model can be used
in a classiﬁcation task to label the quality and safety of a turn. For example in the
Lamda system (Cohen et al., ), a single language model is used in two phases,
roughly corresponding to generative and discriminative tasks: ﬁrst generating a re-
sponse, and then generating a label. In the generative phase, the model is given the
prior turn and a special RESPONSE token and generates the blue response turn. (In
training, the training loss is given only for the blue response):
“What’s up? RESPONSE Not much.
In a second, discriminative phase, the model is ﬁne-tuned to see an attribute
(SENSIBLE, INTERESTING, UNSAFE) and then to predict a  or  value, again
with training losses given only for the blue value.
What’s up? RESPONSE Not much. SENSIBLE
What’s up? RESPONSE Not much. INTERESTING
What’s up? RESPONSE Not much. UNSAFE
To use the system in inference, the model ﬁrst generates a response given the context,
and then it is given the attribute and asked to generate a rating. The result is a
generated turn along with a label. This label isn’t shown to the user but can be use
for ﬁltering, either at training time or at deployment time. For example, the system
can generate multiple potential responses, ﬁlter out any response that is unsafe, and
return to the user the highest ranking response.

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
Learning to perform retrieval as part of responding
Modern chatbots are also trained to do retrieval (calls to Google or Bing or other
search engines) as a component of generating a response. This is generally done
by having a sort of fake dialogue participant called something like Search Query
whose utterances are passed to a search engine. The system can be encourged to do
searches either by prompting or by ﬁne-tuning.
For example in the Sparrow chatbot (Glaese et al., ), the prompt includes
a few sample conversations that include two special users, Search Query, and
Search Results:
...[this is preceded by other parts of the prompt]
User:
What color is the sky?
Sparrow:
Blue.
User:
Why?
Search Query:
why is sky blue
Search Results: Page title: Sky Except for direct sunlight, most of the light in
the daytime sky is caused by scattering, which is dominated by
a small-particle limit called Rayleigh scattering. The scattering
due to molecule-sized particles (as in air) is greater in the di-
rections both toward and away from the source of light than it
is in directions perpendicular to the incident path. Scattering is
signiﬁcant for light at all visible wavelengths, but is stronger at
the shorter (bluer) end of the visible spectrum, meaning that the
scattered light is bluer than its source: the Sun. The remain-
ing direct sunlight, having lost some of its shorter-wavelength
components, appears slightly less blue.
Sparrow:
Because of the Rayleigh scattering. It causes short waves of
blue light to be scattered more than the other colours in the spec-
trum.
User:
Who was Raleigh?
Search Query:
who was Rayleigh
From these prompts, the system learns to generate texts with Search Query
turns for fact-based questions from the user, and these are passed to a search engine
to generate the Search Results turns.
Alternatively, systems can be ﬁnetuned to to know when to use a search en-
gine. For example, labelers can interact with a system, fact check each of the re-
sponses, and whenever the system emits an incorrect response, perform the web
search queries that the system should have used to check its answer, and then the in-
teration is recorded and used for ﬁne-tuning. Or labelers can look at a transcript of a
language model carrying on a dialogue, and similarly mark every place where a fact
was wrong (or out-of-date) and write the set of search queries that would have been
appropriate. A system is then ﬁne-tuned to generate search query turns which
are again passed to a search engine to generate the search responses. The set
of pages or snippets returned by the search engine in the search response turn are
then treated as the context for generation, similarly to the retrieval-based question-
answering methods of Chapter .

DIALOGUE SYSTEM DESIGN
RLHF
A more sophisticated family of methods uses reinforcement learning to learn to
match human preferences for generated turns. In this method, RLHF for Rein-
RLHF
forcement Learning from Human Feedback, we give a system a dialogue context
and sample two possible turns from the language model. We then have humans la-
bel which of the two is better, creating a large dataset of sentence pairs with human
preferences. These pairs are used to train a dialogue policy, and reinforcement learn-
ing is used to train the language model to generate turns that have higher rewards
(Christiano et al., ; Ouyang et al., ). While using RLHF is the current state
of the art at the time of this writing, a number of alternatives have been recently
developed that don’t require reinforcement learning (Rafailov et al., , e.g.,) and
so this aspect of the ﬁeld is changing very quickly.
Evaluating Chatbots
Chatbots are evaluated by humans, who assign a score. This can be the human who
talked to the chatbot (participant evaluation) or a third party who reads a transcript
of a human/chatbot conversation (observer evaluation). In the participant evalua-
tion of See et al. (), the human evaluator chats with the model for six turns and
rates the chatbot on  dimensions capturing conversational quality: avoiding repe-
tition, interestingness, making sense, ﬂuency, listening, inquisitiveness, humanness
and engagingness on Likert scales like these:
Engagingness How much did you enjoy talking to this user?
Not at all  A little  Somewhat  A lot
Making sense How often did this user say something which did NOT make sense?
Never made any sense
Most responses didn’t make sense
Some re-
sponses didn’t make sense  Everything made perfect sense
Observer evaluations use third party annotators to look at the text of a complete
conversation. Sometimes we’re interested in having raters assign a score to each
system turn; for example (Artstein et al., ) have raters mark how coherent each
turn is. Often, however, we just want a single high-level score to know if system A
is better than system B. The acute-eval metric (Li et al., a) is such an observer
acute-eval
evaluation in which annotators look at two separate human-computer conversations
and choose the system which performed better on four metrics: engagingness, inter-
estingness, humanness, and knowledgability.
Dialogue System Design
Because of the important role of the user, the ﬁeld of dialogue systems is closely
linked with Human-Computer Interaction (HCI). This is especially true for task-
oriented dialogue and assistants, where the design of dialogue strategies, sometimes
called voice user interface design, generally follows user-centered design princi-
voice user
interface
ples (Gould and Lewis, ):
. Study the user and task:
Understand the users and the task by interviewing
users, investigating similar systems, and studying related human-human dialogues.
. Build simulations and prototypes:
A crucial tool in building dialogue systems
is the Wizard-of-Oz system. In wizard systems, the users interact with what they
Wizard-of-Oz
system

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
think is a program but is in fact a human “wizard” disguised by a software interface
(Gould et al. , Good et al. , Fraser and
Gilbert ). The name comes from the chil-
dren’s book The Wizard of Oz (Baum, ),
in which the wizard turned out to be a simu-
lation controlled by a man behind a curtain or
screen. A wizard system can be used to test out
an architecture before implementation; only the
interface software and databases need to be in
place. The wizard gets input from the user, uses
a database interface to run queries based on the
user utterance, and then outputs sentences, ei-
ther by typing them or speaking them.
Wizard-of-Oz systems are not a perfect
simulation, since the wizard doesn’t exactly
simulate the errors or limitations of a real sys-
tem; but wizard studies can still provide a useful ﬁrst idea of the domain issues.
. Iteratively test the design on users:
An iterative design cycle with embedded
user testing is essential in system design (Nielsen , Cole et al. , Yankelovich
et al. , Landauer ). For example in a well-known incident, an early dia-
logue system required the user to press a key to interrupt the system (Stifelman et al.,
). But user testing showed users barged in (interrupted, talking over the sys-
barged in
tem), which led to a redesign of the system to recognize overlapped speech. It’s also
important to incorporate value sensitive design, in which we carefully consider dur-
value sensitive
design
ing the design process the beneﬁts, harms and possible stakeholders of the resulting
system (Friedman et al. , Friedman and Hendry ).
Ethical Issues in Dialogue System Design
Ethical issues have been key to how we think about designing artiﬁcial agents since
well before we had dialogue systems. Mary Shelley (depicted below) centered her
novel Frankenstein around the problem of creating artiﬁcial agents without consider-
ing
ethical and humanistic concerns.
One issue is the
safety of users. If users seek information from di-
alogue systems in safety-critical situations like ask-
ing medical advice, or in emergency situations, or
when indicating the intentions of self-harm, incorrect
advice can be dangerous and even life-threatening.
For example (Bickmore et al., ) gave participants
medical problems to pose to three commercial di-
alogue systems (Siri, Alexa, Google Assistant) and
asked them to determine an action to take based on
the system responses; many of the proposed actions,
if actually taken, would have led to harm or death.
A system can also harm users by verbally attacking them, or creating represen-
tational harms (Blodgett et al., ) by generating abusive or harmful stereotypes
that demean particular groups of people. Both abuse and stereotypes can cause psy-
chological harm to users. Microsoft’s  Tay chatbot, for example, was taken
Tay
ofﬂine  hours after it went live, when it began posting messages with racial slurs,

SUMMARY
conspiracy theories, and personal attacks on its users. Tay had learned these biases
and actions from its training data, including from users who seemed to be purposely
teaching the system to repeat this kind of language (Neff and Nagy ). Hender-
son et al. () examined dialogue datasets used to train corpus-based chatbots and
found toxic and abusive language, especially in social media corpora like Twitter
and Reddit, and indeed such language then appears in the text generated by lan-
guage models and dialogue systems (Gehman et al. ; Xu et al. ) which
can even amplify the bias from the training data (Dinan et al., ). Liu et al.
() developed another method for investigating bias, testing how neural dialogue
systems responded to pairs of simulated user turns that are identical except for men-
tioning different genders or race. They found, for example, that simple changes like
using the word ‘she’ instead of ‘he’ in a sentence caused systems to respond more
offensively and with more negative sentiment.
Another important ethical issue is privacy. Already in the ﬁrst days of ELIZA,
Weizenbaum pointed out the privacy implications of people’s revelations to the chat-
bot. The ubiquity of in-home dialogue systems means they may often overhear
private information (Henderson et al., ). If a chatbot is human-like, users are
also more likely to disclose private information, and less likely to worry about the
harm of this disclosure (Ischen et al., ). In general, chatbots that are trained
on transcripts of human-human or human-machine conversation must anonymize
personally identiﬁable information.
Finally, chatbots raise important issues of gender equality in addition to textual
bias. Current chatbots are overwhelmingly given female names, likely perpetuating
the stereotype of a subservient female servant (Paolino, ). And when users
use sexually harassing language, most commercial chatbots evade or give positive
responses rather than responding in clear negative ways (Fessler, ).
These ethical issues are an important area of investigation, including ﬁnding
ways to mitigate problems of abuse and toxicity, like detecting and responding ap-
propriately to toxic contexts (Wolf et al. , Dinan et al. , Xu et al. ).
Value sensitive design, carefully considering possible harms in advance (Friedman
et al. , Friedman and Hendry ) is also important; (Dinan et al., ) give
a number of suggestions for best practices in dialogue system design. For exam-
ple getting informed consent from participants, whether they are used for training,
or whether they are interacting with a deployed system is important. Because di-
alogue systems by deﬁnition involve human participants, researchers also work on
these issues with the Institutional Review Boards (IRB) at their institutions, who
IRB
help protect the safety of experimental subjects.
Summary
Chatbots and dialogue systems are crucial speech and language processing appli-
cations that are already widely used commercially.
In human dialogue, speaking is a kind of action; these acts are referred to
as speech acts or dialogue acts. Speakers also attempt to achieve common
ground by acknowledging that they have understand each other. Conversation
also is characterized by turn structure and dialogue structure.
Chatbots are conversational systems designed to mimic the appearance of in-
formal human conversation. Rule-based chatbots like ELIZA and its modern

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
descendants use rules to map user sentences into system responses. Corpus-
based chatbots mine logs of human conversation to learn to automatically map
user sentences into system responses.
For task-based dialogue, most commercial dialogue systems use the GUS or
frame-based architecture, in which the designer speciﬁes frames consisting of
slots that the system must ﬁll by asking the user.
The dialogue-state architecture augments the GUS frame-and-slot architec-
ture with richer representations and more sophisticated algorithms for keeping
track of user’s dialogue acts, policies for generating its own dialogue acts, and
a natural language component.
Dialogue systems are a kind of human-computer interaction, and general HCI
principles apply in their design, including the role of the user, simulations such
as Wizard-of-Oz systems, and the importance of iterative design and testing
on real users.
Bibliographical and Historical Notes
The linguistic, philosophical, and psychological literature on dialogue is quite ex-
tensive. For example the idea that utterances in a conversation are a kind of action
being performed by the speaker was due originally to the philosopher Wittgenstein
() but worked out more fully by Austin () and his student John Searle.
Various sets of speech acts have been deﬁned over the years, and a rich linguistic
and philosophical literature developed, especially focused on explaining the use of
indirect speech acts. The idea of dialogue acts draws also from a number of other
sources, including the ideas of adjacency pairs, pre-sequences, and other aspects of
the interactional properties of human conversation developed in the ﬁeld of conver-
sation analysis (see Levinson () for an introduction to the ﬁeld). This idea that
conversation
analysis
acts set up strong local dialogue expectations was also preﬁgured by Firth (, p.
), in a famous quotation:
Most of the give-and-take of conversation in our everyday life is stereotyped
and very narrowly conditioned by our particular type of culture. It is a sort
of roughly prescribed social ritual, in which you generally say what the other
fellow expects you, one way or the other, to say.
Another important research thread modeled dialogue as a kind of collaborative
behavior, including the ideas of common ground (Clark and Marshall, ), ref-
erence as a collaborative process (Clark and Wilkes-Gibbs, ), joint intention
(Levesque et al., ), and shared plans (Grosz and Sidner, ).
The earliest conversational systems were simple pattern-action chatbots like ELIZA
(Weizenbaum, ). ELIZA had a widespread inﬂuence on popular perceptions of
artiﬁcial intelligence, and brought up some of the ﬁrst ethical questions in natural
language processing —such as the issues of privacy we discussed above as well the
role of algorithms in decision-making— leading its creator Joseph Weizenbaum to
ﬁght for social responsibility in AI and computer science in general.
Computational-implemented theories of dialogue blossomed in the . That
period saw the very inﬂuential GUS system (Bobrow et al., ), which in the late
s established the frame-based paradigm that became the dominant industrial
paradigm for dialogue systems for over  years.

BIBLIOGRAPHICAL AND HISTORICAL NOTES
Another inﬂuential line of research from that decade focused on modeling the hi-
erarchical structure of dialogue. Grosz’s pioneering b dissertation ﬁrst showed
that “task-oriented dialogues have a structure that closely parallels the structure of
the task being performed” (p. ), leading to her work with Sidner and others show-
ing how to use similar notions of intention and plans to model discourse structure
and coherence in dialogue. See, e.g., Lochbaum et al. () for a summary of the
role of intentional structure in dialogue.
Yet a third line, ﬁrst suggested by Bruce (), suggested that since speech acts
are actions, they should be planned like other actions, and drew on the AI planning
literature (Fikes and Nilsson, ). A system seeking to ﬁnd out some information
can come up with the plan of asking the interlocutor for the information. A system
hearing an utterance can interpret a speech act by running the planner “in reverse”,
using inference rules to infer from what the interlocutor said what the plan might
have been. Plan-based models of dialogue are referred to as BDI models because
BDI
such planners model the beliefs, desires, and intentions (BDI) of the system and in-
terlocutor. BDI models of dialogue were ﬁrst introduced by Allen, Cohen, Perrault,
and their colleagues in a number of inﬂuential papers showing how speech acts could
be generated (Cohen and Perrault, ) and interpreted (Perrault and Allen ,
Allen and Perrault ). At the same time, Wilensky () introduced plan-based
models of understanding as part of the task of interpreting stories.
In the s, machine learning models that had ﬁrst been applied to natural
language processing began to be applied to dialogue tasks like slot ﬁlling (Miller
et al. , Pieraccini et al. ). This period also saw lots of analytic work on the
linguistic properties of dialogue acts and on machine-learning-based methods for
their detection. (Sag and Liberman , Hinkelman and Allen , Nagata and
Morimoto , Goodwin , Chu-Carroll , Shriberg et al. , Stolcke
et al. , Gravano et al. . This work strongly informed the development
of the dialogue-state model (Larsson and Traum, ). Dialogue state tracking
quickly became an important problem for task-oriented dialogue, and there has been
an inﬂuential annual evaluation of state-tracking algorithms (Williams et al., ).
The turn of the century saw a line of work on applying reinforcement learning
to dialogue, which ﬁrst came out of AT&T and Bell Laboratories with work on
MDP dialogue systems (Walker , Levin et al. , Singh et al. ) along
with work on cue phrases, prosody, and rejection and conﬁrmation. Reinforcement
learning research turned quickly to the more sophisticated POMDP models (Roy
et al. , Lemon et al. , Williams and Young ) applied to small slot-
ﬁlling dialogue tasks. Neural reinforcement learning models have been used both for
chatbot systems, for example simulating dialogues between two dialogue systems,
rewarding good conversational properties like coherence and ease of answering (Li
et al., a), and for task-oriented dialogue (Williams et al., ).
By around  the GUS architecture ﬁnally began to be widely used commer-
cially in dialogue systems on phones like Apple’s SIRI (Bellegarda, ) and other
digital assistants.
The rise of the web gave rise to corpus-based chatbot architectures around the
turn of the century, ﬁrst using information retrieval models and then in the s,
after the rise of deep learning, with sequence-to-sequence models.
[TBD: Modern history of neural chatbots]
Other important dialogue areas include the study of affect in dialogue (Rashkin
et al. , Lin et al. ) and conversational interface design (Cohen et al. ,
Harris , Pearl , Deibel and Evanhoe ).

CHAPTER
CHATBOTS & DIALOGUE SYSTEMS
Exercises
. Write a ﬁnite-state automaton for a dialogue manager for checking your bank
balance and withdrawing money at an automated teller machine.
. A dispreferred response is a response that has the potential to make a person
dispreferred
response
uncomfortable or embarrassed in the conversational context; the most com-
mon example dispreferred responses is turning down a request. People signal
their discomfort with having to say no with surface cues (like the word well),
or via signiﬁcant silence. Try to notice the next time you or someone else
utters a dispreferred response, and write down the utterance. What are some
other cues in the response that a system might use to detect a dispreferred
response? Consider non-verbal cues like eye gaze and body gestures.
. When asked a question to which they aren’t sure they know the answer, peo-
ple display their lack of conﬁdence by cues that resemble other dispreferred
responses. Try to notice some unsure answers to questions. What are some
of the cues? If you have trouble doing this, read Smith and Clark () and
listen speciﬁcally for the cues they mention.
. Implement a small air-travel help system based on text input. Your system
should get constraints from users about a particular ﬂight that they want to
take, expressed in natural language, and display possible ﬂights on a screen.
Make simplifying assumptions. You may build in a simple ﬂight database or
you may use a ﬂight information system on the Web as your backend.

Automatic Speech Recognition
and Text-to-Speech
CHAPTER
I KNOW not whether
I see your meaning: if I do, it lies
Upon the wordy wavelets of your voice,
Dim as an evening shadow in a brook,
Thomas Lovell Beddoes,
Understanding spoken language, or at least transcribing the words into writing, is
one of the earliest goals of computer language processing. In fact, speech processing
predates the computer by many decades!
The ﬁrst machine that recognized speech
was a toy from the s. “Radio Rex”,
shown to the right, was a celluloid dog
that moved (by means of a spring) when
the spring was released by  Hz acous-
tic energy. Since  Hz is roughly the
ﬁrst formant of the vowel [eh] in “Rex”,
Rex seemed to come when he was called
(David, Jr. and Selfridge, ).
In modern times, we expect more of our automatic systems. The task of auto-
matic speech recognition (ASR) is to map any waveform like this:
ASR
to the appropriate string of words:
It’s time for lunch!
Automatic transcription of speech by any speaker in any environment is still far from
solved, but ASR technology has matured to the point where it is now viable for many
practical tasks. Speech is a natural interface for communicating with smart home ap-
pliances, personal assistants, or cellphones, where keyboards are less convenient, in
telephony applications like call-routing (“Accounting, please”) or in sophisticated
dialogue applications (“I’d like to change the return date of my ﬂight”). ASR is also
useful for general transcription, for example for automatically generating captions
for audio or video text (transcribing movies or videos or live discussions). Transcrip-
tion is important in ﬁelds like law where dictation plays an important role. Finally,
ASR is important as part of augmentative communication (interaction between com-
puters and humans with some disability resulting in difﬁculties or inabilities in typ-
ing or audition). The blind Milton famously dictated Paradise Lost to his daughters,
and Henry James dictated his later novels after a repetitive stress injury.
What about the opposite problem, going from text to speech? This is a problem
with an even longer history. In Vienna in , Wolfgang von Kempelen built for

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
the Empress Maria Theresa the famous Mechanical Turk, a chess-playing automaton
consisting of a wooden box ﬁlled with gears, behind which sat a robot mannequin
who played chess by moving pieces with his mechanical arm. The Turk toured Eu-
rope and the Americas for decades, defeating Napoleon Bonaparte and even playing
Charles Babbage. The Mechanical Turk might have been one of the early successes
of artiﬁcial intelligence were it not for the fact that it was, alas, a hoax, powered by
a human chess player hidden inside the box.
What
is
less
well
known
is
that
von
Kempelen,
an
extraordinarily
proliﬁc inventor, also built between
and  what was deﬁnitely
not a hoax:
the ﬁrst full-sentence
speech synthesizer, shown partially to
the right.
His device consisted of a
bellows to simulate the lungs, a rub-
ber mouthpiece and a nose aperture, a
reed to simulate the vocal folds, var-
ious whistles for the fricatives, and a
small auxiliary bellows to provide the puff of air for plosives. By moving levers
with both hands to open and close apertures, and adjusting the ﬂexible leather “vo-
cal tract”, an operator could produce different consonants and vowels.
More than two centuries later, we no longer build our synthesizers out of wood
and leather, nor do we need human operators. The modern task of speech synthesis,
speech
synthesis
also called text-to-speech or TTS, is exactly the reverse of ASR; to map text:
text-to-speech
TTS
It’s time for lunch!
to an acoustic waveform:
Modern speech synthesis has a wide variety of applications. TTS is used in
conversational agents that conduct dialogues with people, plays a role in devices
that read out loud for the blind or in games, and can be used to speak for sufferers
of neurological disorders, such as the late astrophysicist Steven Hawking who, after
he lost the use of his voice because of ALS, spoke by manipulating a TTS system.
In the next sections we’ll show how to do ASR with encoder-decoders, intro-
duce the CTC loss functions, the standard word error rate evaluation metric, and
describe how acoustic features are extracted. We’ll then see how TTS can be mod-
eled with almost the same algorithm in reverse, and conclude with a brief mention
of other speech tasks.
The Automatic Speech Recognition Task
Before describing algorithms for ASR, let’s talk about how the task itself varies.
One dimension of variation is vocabulary size. Some ASR tasks can be solved with
extremely high accuracy, like those with a -word vocabulary (yes versus no) or
an  word vocabulary like digit recognition (recognizing sequences of digits in-
digit
recognition
cluding zero to nine plus oh). Open-ended tasks like transcribing videos or human
conversations, with large vocabularies of up to , words, are much harder.

THE AUTOMATIC SPEECH RECOGNITION TASK
A second dimension of variation is who the speaker is talking to. Humans speak-
ing to machines (either dictating or talking to a dialogue system) are easier to recog-
nize than humans speaking to humans. Read speech, in which humans are reading
read speech
out loud, for example in audio books, is also relatively easy to recognize. Recog-
nizing the speech of two humans talking to each other in conversational speech,
conversational
speech
for example, for transcribing a business meeting, is the hardest. It seems that when
humans talk to machines, or read without an audience present, they simplify their
speech quite a bit, talking more slowly and more clearly.
A third dimension of variation is channel and noise. Speech is easier to recognize
if it’s recorded in a quiet room with head-mounted microphones than if it’s recorded
by a distant microphone on a noisy city street, or in a car with the window open.
A ﬁnal dimension of variation is accent or speaker-class characteristics. Speech
is easier to recognize if the speaker is speaking the same dialect or variety that the
system was trained on. Speech by speakers of regional or ethnic dialects, or speech
by children can be quite difﬁcult to recognize if the system is only trained on speak-
ers of standard dialects, or only adult speakers.
A number of publicly available corpora with human-created transcripts are used
to create ASR test and training sets to explore this variation; we mention a few of
them here since you will encounter them in the literature. LibriSpeech is a large
LibriSpeech
open-source read-speech  kHz dataset with over  hours of audio books from
the LibriVox project, with transcripts aligned at the sentence level (Panayotov et al.,
). It is divided into an easier (“clean”) and a more difﬁcult portion (“other”)
with the clean portion of higher recording quality and with accents closer to US
English. This was done by running a speech recognizer (trained on read speech from
the Wall Street Journal) on all the audio, computing the WER for each speaker based
on the gold transcripts, and dividing the speakers roughly in half, with recordings
from lower-WER speakers called “clean” and recordings from higher-WER speakers
“other”.
The Switchboard corpus of prompted telephone conversations between strangers
Switchboard
was collected in the early s; it contains  conversations averaging  min-
utes each, totaling  hours of  kHz speech and about  million words (Godfrey
et al., ). Switchboard has the singular advantage of an enormous amount of
auxiliary hand-done linguistic labeling, including parses, dialogue act tags, phonetic
and prosodic labeling, and discourse and information structure. The CALLHOME
CALLHOME
corpus was collected in the late s and consists of  unscripted -minute
telephone conversations between native speakers of English who were usually close
friends or family (Canavan et al., ).
The Santa Barbara Corpus of Spoken American English (Du Bois et al., ) is
a large corpus of naturally occurring everyday spoken interactions from all over the
United States, mostly face-to-face conversation, but also town-hall meetings, food
preparation, on-the-job talk, and classroom lectures. The corpus was anonymized by
removing personal names and other identifying information (replaced by pseudonyms
in the transcripts, and masked in the audio).
CORAAL is a collection of over  sociolinguistic interviews with African
CORAAL
American speakers, with the goal of studying African American Language (AAL),
the many variations of language used in African American communities (Kendall
and Farrington, ). The interviews are anonymized with transcripts aligned at
the utterance level. The CHiME Challenge is a series of difﬁcult shared tasks with
CHiME
corpora that deal with robustness in ASR. The CHiME  task, for example, is ASR of
conversational speech in real home environments (speciﬁcally dinner parties). The

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
corpus contains recordings of twenty different dinner parties in real homes, each
with four participants, and in three locations (kitchen, dining area, living room),
recorded both with distant room microphones and with body-worn mikes.
The
HKUST Mandarin Telephone Speech corpus has  ten-minute telephone con-
HKUST
versations between speakers of Mandarin across China, including transcripts of the
conversations, which are between either friends or strangers (Liu et al., ). The
AISHELL- corpus contains  hours of Mandarin read speech of sentences taken
AISHELL-
from various domains, read by different speakers mainly from northern China (Bu
et al., ).
Figure . shows the rough percentage of incorrect words (the word error rate,
or WER, deﬁned on page ) from state-of-the-art systems on some of these tasks.
Note that the error rate on read speech (like the LibriSpeech audiobook corpus) is
around %; this is a solved task, although these numbers come from systems that re-
quire enormous computational resources. By contrast, the error rate for transcribing
conversations between humans is much higher; . to % for the Switchboard and
CALLHOME corpora. The error rate is higher yet again for speakers of varieties
like African American Vernacular English, and yet again for difﬁcult conversational
tasks like transcription of -speaker dinner party speech, which can have error rates
as high as .%. Character error rates (CER) are also much lower for read Man-
darin speech than for natural conversation.
English Tasks
WER%
LibriSpeech audiobooks hour clean
LibriSpeech audiobooks hour other
Switchboard telephone conversations between strangers
CALLHOME telephone conversations between family
Sociolinguistic interviews, CORAAL (AAL)
CHiMe dinner parties with body-worn microphones
CHiMe dinner parties with distant microphones
Chinese (Mandarin) Tasks
CER%
AISHELL- Mandarin read speech corpus
HKUST Mandarin Chinese telephone conversations
Figure .
Rough Word Error Rates (WER = % of words misrecognized) reported around
for ASR on various American English recognition tasks, and character error rates (CER)
for two Chinese recognition tasks.
Feature Extraction for ASR: Log Mel Spectrum
The ﬁrst step in ASR is to transform the input waveform into a sequence of acoustic
feature vectors, each vector representing the information in a small time window
feature vector
of the signal. Let’s see how to convert a raw waveﬁle to the most commonly used
features, sequences of log mel spectrum vectors. A speech signal processing course
is recommended for more details.
Sampling and Quantization
The input to a speech recognizer is a complex series of changes in air pressure.
These changes in air pressure obviously originate with the speaker and are caused

FEATURE EXTRACTION FOR ASR: LOG MEL SPECTRUM
by the speciﬁc way that air passes through the glottis and out the oral or nasal cav-
ities. We represent sound waves by plotting the change in air pressure over time.
One metaphor which sometimes helps in understanding these graphs is that of a ver-
tical plate blocking the air pressure waves (perhaps in a microphone in front of a
speaker’s mouth, or the eardrum in a hearer’s ear). The graph measures the amount
of compression or rarefaction (uncompression) of the air molecules at this plate.
Figure . shows a short segment of a waveform taken from the Switchboard corpus
of telephone speech of the vowel [iy] from someone saying “she just had a baby”.
Time (s)
Figure .
A waveform of an instance of the vowel [iy] (the last vowel in the word “baby”). The y-axis
shows the level of air pressure above and below normal atmospheric pressure. The x-axis shows time. Notice
that the wave repeats regularly.
The ﬁrst step in digitizing a sound wave like Fig. . is to convert the analog
representations (ﬁrst air pressure and then analog electric signals in a microphone)
into a digital signal. This analog-to-digital conversion has two steps: sampling and
sampling
quantization. To sample a signal, we measure its amplitude at a particular time; the
sampling rate is the number of samples taken per second. To accurately measure a
wave, we must have at least two samples in each cycle: one measuring the positive
part of the wave and one measuring the negative part. More than two samples per
cycle increases the amplitude accuracy, but fewer than two samples causes the fre-
quency of the wave to be completely missed. Thus, the maximum frequency wave
that can be measured is one whose frequency is half the sample rate (since every
cycle needs two samples). This maximum frequency for a given sampling rate is
called the Nyquist frequency. Most information in human speech is in frequencies
Nyquist
frequency
below , Hz; thus, a , Hz sampling rate would be necessary for com-
plete accuracy. But telephone speech is ﬁltered by the switching network, and only
frequencies less than , Hz are transmitted by telephones. Thus, an , Hz
sampling rate is sufﬁcient for telephone-bandwidth speech like the Switchboard
corpus, while , Hz sampling is often used for microphone speech.
Although using higher sampling rates produces higher ASR accuracy, we can’t
combine different sampling rates for training and testing ASR systems. Thus if
we are testing on a telephone corpus like Switchboard ( KHz sampling), we must
downsample our training corpus to  KHz. Similarly, if we are training on mul-
tiple corpora and one of them includes telephone speech, we downsample all the
wideband corpora to Khz.
Amplitude measurements are stored as integers, either  bit (values from -–
) or  bit (values from -–). This process of representing real-valued
numbers as integers is called quantization; all values that are closer together than
quantization
the minimum granularity (the quantum size) are represented identically. We refer to
each sample at time index n in the digitized, quantized waveform as x[n].
Once data is quantized, it is stored in various formats. One parameter of these
formats is the sample rate and sample size discussed above; telephone speech is
often sampled at  kHz and stored as -bit samples, and microphone data is often
sampled at  kHz and stored as -bit samples. Another parameter is the number of

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
channels. For stereo data or for two-party conversations, we can store both channels
channel
in the same ﬁle or we can store them in separate ﬁles. A ﬁnal parameter is individual
sample storage—linearly or compressed. One common compression format used for
telephone speech is µ-law (often written u-law but still pronounced mu-law). The
intuition of log compression algorithms like µ-law is that human hearing is more
sensitive at small intensities than large ones; the log represents small values with
more faithfulness at the expense of more error on large values. The linear (unlogged)
values are generally referred to as linear PCM values (PCM stands for pulse code
PCM
modulation, but never mind that). Here’s the equation for compressing a linear PCM
sample value x to -bit µ-law, (where µ= for  bits):
F(x) = sgn(x)log(+ µ|x|)
log(+ µ)
− ≤ x ≤
There are a number of standard ﬁle formats for storing the resulting digitized wave-
ﬁle, such as Microsoft’s .wav and Apple’s AIFF all of which have special headers;
simple headerless “raw” ﬁles are also used. For example, the .wav format is a sub-
set of Microsoft’s RIFF format for multimedia ﬁles; RIFF is a general format that
can represent a series of nested chunks of data and control information. Figure .
shows a simple .wav ﬁle with a single data chunk together with its format chunk.
Figure .
Microsoft waveﬁle header format, assuming simple ﬁle with one chunk. Fol-
lowing this -byte header would be the data chunk.
Windowing
From the digitized, quantized representation of the waveform, we need to extract
spectral features from a small window of speech that characterizes part of a par-
ticular phoneme. Inside this small window, we can roughly think of the signal as
stationary (that is, its statistical properties are constant within this region). (By
stationary
contrast, in general, speech is a non-stationary signal, meaning that its statistical
non-stationary
properties are not constant over time). We extract this roughly stationary portion of
speech by using a window which is non-zero inside a region and zero elsewhere, run-
ning this window across the speech signal and multiplying it by the input waveform
to produce a windowed waveform.
The speech extracted from each window is called a frame. The windowing is
frame
characterized by three parameters: the window size or frame size of the window
(its width in milliseconds), the frame stride, (also called shift or offset) between
stride
successive windows, and the shape of the window.
To extract the signal we multiply the value of the signal at time n, s[n] by the
value of the window at time n, w[n]:
y[n] = w[n]s[n]
The window shape sketched in Fig. . is rectangular; you can see the ex-
rectangular
tracted windowed signal looks just like the original signal. The rectangular window,

FEATURE EXTRACTION FOR ASR: LOG MEL SPECTRUM
Window
ms
Shift
ms
Window
ms
Shift
ms
Window
ms
Figure .
Windowing, showing a  ms rectangular window with a ms stride.
however, abruptly cuts off the signal at its boundaries, which creates problems when
we do Fourier analysis. For this reason, for acoustic feature creation we more com-
monly use the Hamming window, which shrinks the values of the signal toward
Hamming
zero at the window boundaries, avoiding discontinuities. Figure . shows both;
the equations are as follows (assuming a window that is L frames long):
rectangular
w[n] =

≤ n ≤ L−
otherwise
L )
≤ n ≤ L−
otherwise
Hamming
w[n] =

.−.cos( πn
Time (s)
Rectangular window
Hamming window
Time (s)
Time (s)
Figure .
Windowing a sine wave with the rectangular or Hamming windows.
Discrete Fourier Transform
The next step is to extract spectral information for our windowed signal; we need to
know how much energy the signal contains at different frequency bands. The tool

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
for extracting spectral information for discrete frequency bands for a discrete-time
(sampled) signal is the discrete Fourier transform or DFT.
Discrete
Fourier
transform
DFT
The input to the DFT is a windowed signal x[n]...x[m], and the output, for each of
N discrete frequency bands, is a complex number X[k] representing the magnitude
and phase of that frequency component in the original signal. If we plot the mag-
nitude against the frequency, we can visualize the spectrum that we introduced in
Chapter . For example, Fig. . shows a  ms Hamming-windowed portion of
a signal and its spectrum as computed by a DFT (with some additional smoothing).
Sound pressure level (dB/Hz)
Time (s)
Frequency (Hz)
(a)
(b)
Figure .
(a) A  ms Hamming-windowed portion of a signal from the vowel [iy]
and (b) its spectrum computed by a DFT.
We do not introduce the mathematical details of the DFT here, except to note
that Fourier analysis relies on Euler’s formula, with j as the imaginary unit:
Euler’s formula
e jθ = cosθ + jsinθ
As a brief reminder for those students who have already studied signal processing,
the DFT is deﬁned as follows:
N kn
X[k] =
n=
x[n]e−j π
N−
A commonly used algorithm for computing the DFT is the fast Fourier transform
fast Fourier
transform
or FFT. This implementation of the DFT is very efﬁcient but only works for values
FFT
of N that are powers of .
Mel Filter Bank and Log
The results of the FFT tell us the energy at each frequency band. Human hearing,
however, is not equally sensitive at all frequency bands; it is less sensitive at higher
frequencies. This bias toward low frequencies helps human recognition, since in-
formation in low frequencies (like formants) is crucial for distinguishing vowels or
nasals, while information in high frequencies (like stop bursts or fricative noise) is
less crucial for successful recognition. Modeling this human perceptual property
improves speech recognition performance in the same way.
We implement this intuition by collecting energies, not equally at each frequency
band, but according to the mel scale, an auditory frequency scale (Chapter ). A
mel (Stevens et al. , Stevens and Volkmann ) is a unit of pitch. Pairs of
mel
sounds that are perceptually equidistant in pitch are separated by an equal number

SPEECH RECOGNITION ARCHITECTURE
of mels. The mel frequency m can be computed from the raw acoustic frequency by
a log transformation:
mel(f) = ln(+
We implement this intuition by creating a bank of ﬁlters that collect energy from
each frequency band, spread logarithmically so that we have very ﬁne resolution
at low frequencies, and less resolution at high frequencies. Figure . shows a
sample bank of triangular ﬁlters that implement this idea, that can be multiplied by
the spectrum to get a mel spectrum.
Amplitude
Frequency (Hz)
mM
mel spectrum
Figure .
The mel ﬁlter bank (Davis and Mermelstein, ). Each triangular ﬁlter,
spaced logarithmically along the mel scale, collects energy from a given frequency range.
Finally, we take the log of each of the mel spectrum values. The human response
to signal level is logarithmic (like the human response to frequency). Humans are
less sensitive to slight differences in amplitude at high amplitudes than at low ampli-
tudes. In addition, using a log makes the feature estimates less sensitive to variations
in input such as power variations due to the speaker’s mouth moving closer or further
from the microphone.
Speech Recognition Architecture
The basic architecture for ASR is the encoder-decoder (implemented with either
RNNs or Transformers), exactly the same architecture introduced for MT in Chap-
ter . Generally we start from the log mel spectral features described in the previous
section, and map to letters, although it’s also possible to map to induced morpheme-
like chunks like wordpieces or BPE.
Fig. . sketches the standard encoder-decoder architecture, which is com-
monly referred to as the attention-based encoder decoder or AED, or listen attend
AED
and spell (LAS) after the two papers which ﬁrst applied it to speech (Chorowski
listen attend
and spell
et al. , Chan et al. ). The input is a sequence of t acoustic feature vectors
F = f, f,..., ft, one vector per  ms frame. The output can be letters or word-
pieces; we’ll assume letters here. Thus the output sequenceY = (⟨SOS⟩,y,...,ym⟨EOS⟩),
assuming special start of sequence and end of sequence tokens ⟨sos⟩ and ⟨eos⟩ and
each yi is a character; for English we might choose the set:
yi ∈ {a,b,c,...,z,,...,,⟨space⟩,⟨comma⟩,⟨period⟩,⟨apostrophe⟩,⟨unk⟩}
Of course the encoder-decoder architecture is particularly appropriate when in-
put and output sequences have stark length differences, as they do for speech, with

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
ym

DECODER
ENCODER
<s>

Shorter sequence X
xn
Subsampling
-dimensional
log Mel spectrum
ft
per frame
Feature Computation
Figure .
Schematic architecture for an encoder-decoder speech recognizer.
very long acoustic feature sequences mapping to much shorter sequences of letters
or words. A single word might be  letters long but, supposing it lasts about
seconds, would take  acoustic frames (of ms each).
Because this length difference is so extreme for speech, encoder-decoder ar-
chitectures for speech need to have a special compression stage that shortens the
acoustic feature sequence before the encoder stage. (Alternatively, we can use a loss
function that is designed to deal well with compression, like the CTC loss function
we’ll introduce in the next section.)
The goal of the subsampling is to produce a shorter sequence X = x,...,xn that
will be the input to the encoder. The simplest algorithm is a method sometimes
called low frame rate (Pundak and Sainath, ): for time i we stack (concatenate)
low frame rate
the acoustic feature vector fi with the prior two vectors fi− and fi− to make a new
vector three times longer. Then we simply delete fi− and fi−. Thus instead of
(say) a -dimensional acoustic feature vector every  ms, we have a longer vector
(say -dimensional) every  ms, with a shorter sequence length n = t
After this compression stage, encoder-decoders for speech use the same archi-
tecture as for MT or other text, composed of either RNNs (LSTMs) or Transformers.
For inference, the probability of the output string Y is decomposed as:
p(y,...,yn) =
i=
p(yi|y,...,yi−,X)
We can produce each letter of the output via greedy decoding:
ˆyi = argmaxchar∈ AlphabetP(char|y...yi−,X)
Alternatively we can use beam search as described in the next section. This is par-
ticularly relevant when we are adding a language model.
Adding a language model
Since an encoder-decoder model is essentially a con-
ditional language model, encoder-decoders implicitly learn a language model for the
output domain of letters from their training data. However, the training data (speech
There are also more complex alternatives for subsampling, like using a convolutional net that down-
samples with max pooling, or layers of pyramidal RNNs, RNNs where each successive layer has half
the number of RNNs as the previous layer.

CTC
paired with text transcriptions) may not include sufﬁcient text to train a good lan-
guage model. After all, it’s easier to ﬁnd enormous amounts of pure text training
data than it is to ﬁnd text paired with speech. Thus we can can usually improve a
model at least slightly by incorporating a very large language model.
The simplest way to do this is to use beam search to get a ﬁnal beam of hy-
pothesized sentences; this beam is sometimes called an n-best list. We then use a
n-best list
language model to rescore each hypothesis on the beam. The scoring is done by in-
rescore
terpolating the score assigned by the language model with the encoder-decoder score
used to create the beam, with a weight λ tuned on a held-out set. Also, since most
models prefer shorter sentences, ASR systems normally have some way of adding a
length factor. One way to do this is to normalize the probability by the number of
characters in the hypothesis |Y|c. The following is thus a typical scoring function
(Chan et al., ):
score(Y|X) =
|Y|c
logP(Y|X)+λ logPLM(Y)
Learning
Encoder-decoders for speech are trained with the normal cross-entropy loss gener-
ally used for conditional language models. At timestep i of decoding, the loss is the
log probability of the correct token (letter) yi:
LCE = −log p(yi|y,...,yi−,X)
The loss for the entire sentence is the sum of these losses:
LCE = −
i=
log p(yi|y,...,yi−,X)
This loss is then backpropagated through the entire end-to-end model to train the
entire encoder-decoder.
As we described in Chapter , we normally use teacher forcing, in which the
decoder history is forced to be the correct gold yi rather than the predicted ˆyi. It’s
also possible to use a mixture of the gold and decoder output, for example using
the gold output % of the time, but with probability . taking the decoder output
instead:
LCE = −log p(yi|y,..., ˆyi−,X)
CTC
We pointed out in the previous section that speech recognition has two particular
properties that make it very appropriate for the encoder-decoder architecture, where
the encoder produces an encoding of the input that the decoder uses attention to
explore. First, in speech we have a very long acoustic input sequence X mapping to
a much shorter sequence of letters Y, and second, it’s hard to know exactly which
part of X maps to which part of Y.
In this section we brieﬂy introduce an alternative to encoder-decoder: an algo-
rithm and loss function called CTC, short for Connectionist Temporal Classiﬁca-
CTC

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
tion (Graves et al., ), that deals with these problems in a very different way. The
intuition of CTC is to output a single character for every frame of the input, so that
the output is the same length as the input, and then to apply a collapsing function
that combines sequences of identical letters, resulting in a shorter sequence.
Let’s imagine inference on someone saying the word dinner, and let’s suppose
we had a function that chooses the most probable letter for each input spectral frame
representation xi. We’ll call the sequence of letters corresponding to each input
frame an alignment, because it tells us where in the acoustic signal each letter aligns
alignment
to. Fig. . shows one such alignment, and what happens if we use a collapsing
function that just removes consecutive duplicate letters.
Y (output)
A (alignment)
X (input)
wavefile
Figure .
A naive algorithm for collapsing an alignment between input and letters.
Well, that doesn’t work; our naive algorithm has transcribed the speech as diner,
not dinner! Collapsing doesn’t handle double letters. There’s also another problem
with our naive function; it doesn’t tell us what symbol to align with silence in the
input. We don’t want to be transcribing silence as random letters!
The CTC algorithm solves both problems by adding to the transcription alphabet
a special symbol for a blank, which we’ll represent as . The blank can be used in
blank
the alignment whenever we don’t want to transcribe a letter. Blank can also be used
between letters; since our collapsing function collapses only consecutive duplicate
letters, it won’t collapse across . More formally, let’s deﬁne the mapping B : a → y
between an alignment a and an output y, which collapses all repeated letters and
then removes all blanks. Fig. . sketches this collapsing function B.
Y (output)
remove blanks
merge duplicates
␣ ␣
A (alignment)
X (input)
x x
x x
x x x
Figure .
The CTC collapsing function B, showing the space blank character
; re-
peated (consecutive) characters in an alignment A are removed to form the output Y.
The CTC collapsing function is many-to-one; lots of different alignments map
to the same output string. For example, the alignment shown in Fig. . is not
the only alignment that results in the string dinner. Fig. . shows some other
alignments that would produce the same output.
It’s useful to think of the set of all alignments that might produce the same output
Y. We’ll use the inverse of our B function, called B−, and represent that set as

CTC
␣ ␣
␣ ␣ ␣
Figure .
Three other legitimate alignments producing the transcript dinner.
B−(Y).
CTC Inference
Before we see how to compute PCTC(Y|X) let’s ﬁrst see how CTC assigns a proba-
bility to one particular alignment ˆA = { ˆa,..., ˆan}. CTC makes a strong conditional
independence assumption: it assumes that, given the input X, the CTC model output
at at time t is independent of the output labels at any other time ai. Thus:
PCTC(A|X) =
t=
p(at|X)
TY
Thus to ﬁnd the best alignment ˆA = { ˆa,..., ˆaT} we can greedily choose the charac-
ter with the max probability at each time step t:
ˆat = argmax
c∈C
pt(c|X)
We then pass the resulting sequence A to the CTC collapsing function B to get the
output sequence Y.
Let’s talk about how this simple inference algorithm for ﬁnding the best align-
ment A would be implemented. Because we are making a decision at each time
point, we can treat CTC as a sequence-modeling task, where we output one letter
ˆyt at time t corresponding to each input token xt, eliminating the need for a full de-
coder. Fig. . sketches this architecture, where we take an encoder, produce a
hidden state ht at each timestep, and decode by taking a softmax over the character
vocabulary at each time step.
yn
output letter
sequence Y
Classiﬁer
+softmax
ENCODER
Shorter input
sequence X
xn
Subsampling
ft
log Mel spectrum
Feature Computation
Figure .
Inference with CTC: using an encoder-only model, with decoding done by
simple softmaxes over the hidden state ht at each output step.

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
Alas, there is a potential ﬂaw with the inference algorithm sketched in (Eq. .)
and Fig. .. The problem is that we chose the most likely alignment A, but the
most likely alignment may not correspond to the most likely ﬁnal collapsed output
string Y. That’s because there are many possible alignments that lead to the same
output string, and hence the most likely output string might not correspond to the
most probable alignment. For example, imagine the most probable alignment A for
an input X = [xxx] is the string [a b ϵ] but the next two most probable alignments
are [b ϵ b] and [ϵ b b]. The output Y =[b b], summing over those two alignments,
might be more probable than Y =[a b].
For this reason, the most probable output sequence Y is the one that has, not
the single best CTC alignment, but the highest sum over the probability of all its
possible alignments:
PCTC(Y|X) =
A∈B−(Y)
P(A|X)
t=
p(at|ht)
TY
A∈B−(Y)
ˆY = argmax
PCTC(Y|X)
Alas, summing over all alignments is very expensive (there are a lot of alignments),
so we approximate this sum by using a version of Viterbi beam search that cleverly
keeps in the beam the high-probability alignments that map to the same output string,
and sums those as an approximation of (Eq. .). See Hannun () for a clear
explanation of this extension of beam search for CTC.
Because of the strong conditional independence assumption mentioned earlier
(that the output at time t is independent of the output at time t −, given the input),
CTC does not implicitly learn a language model over the data (unlike the attention-
based encoder-decoder architectures). It is therefore essential when using CTC to
interpolate a language model (and some sort of length factor L(Y)) using interpola-
tion weights that are trained on a dev set:
scoreCTC(Y|X) = logPCTC(Y|X)+λ logPLM(Y)λL(Y)
CTC Training
To train a CTC-based ASR system, we use negative log-likelihood loss with a special
CTC loss function. Thus the loss for an entire dataset D is the sum of the negative
log-likelihoods of the correct output Y for each input X:
(X,Y)∈D
−logPCTC(Y|X)
LCTC =
To compute CTC loss function for a single input pair (X,Y), we need the probability
of the outputY given the input X. As we saw in Eq. ., to compute the probability
of a given output Y we need to sum over all the possible alignments that would
collapse to Y. In other words:
t=
p(at|ht)
PCTC(Y|X) =
TY
A∈B−(Y)

CTC
Naively summing over all possible alignments is not feasible (there are too many
alignments). However, we can efﬁciently compute the sum by using dynamic pro-
gramming to merge alignments, with a version of the forward-backward algo-
rithm also used to train HMMs (Appendix A) and CRFs. The original dynamic pro-
gramming algorithms for both training and inference are laid out in (Graves et al.,
); see (Hannun, ) for a detailed explanation of both.
Combining CTC and Encoder-Decoder
It’s also possible to combine the two architectures/loss functions we’ve described,
the cross-entropy loss from the encoder-decoder architecture, and the CTC loss.
Fig. . shows a sketch. For training, we can simply weight the two losses with a
λ tuned on a dev set:
L = −λ logPencdec(Y|X)−(−λ)logPctc(Y|X)
For inference, we can combine the two with the language model (or the length
penalty), again with learned weights:
ˆY = argmax
[λ logPencdec(Y|X)−(−λ)logPCTC(Y|X)+γ logPLM(Y)] (.)
i   t   ’   s      t   i   m   e  …
CTC Loss
Encoder-Decoder Loss
DECODER
ENCODER
<s> i
t ‘ s
i m
xn
Figure .
Combining the CTC and encoder-decoder loss functions.
Streaming Models: RNN-T for improving CTC
Because of the strong independence assumption in CTC (assuming that the output
at time t is independent of the output at time t − ), recognizers based on CTC
don’t achieve as high an accuracy as the attention-based encoder-decoder recog-
nizers. CTC recognizers have the advantage, however, that they can be used for
streaming. Streaming means recognizing words on-line rather than waiting until
streaming
the end of the sentence to recognize them. Streaming is crucial for many applica-
tions, from commands to dictation, where we want to start recognition while the
user is still talking. Algorithms that use attention need to compute the hidden state
sequence over the entire input ﬁrst in order to provide the attention distribution con-
text, before the decoder can start decoding. By contrast, a CTC algorithm can input
letters from left to right immediately.
If we want to do streaming, we need a way to improve CTC recognition to re-
move the conditional independent assumption, enabling it to know about output his-
tory. The RNN-Transducer (RNN-T), shown in Fig. ., is just such a model
RNN-T
(Graves , Graves et al. ). The RNN-T has two main components: a CTC

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
acoustic model, and a separate language model component called the predictor that
conditions on the output token history. At each time step t, the CTC encoder outputs
a hidden state henc
given the input x...xt. The language model predictor takes as in-
put the previous output token (not counting blanks), outputting a hidden state hpred
The two are passed through another network whose output is then passed through a
softmax to predict the next character.
PRNN−T(Y|X) =
A∈B−(Y)
P(A|X)
t=
p(at|ht,y<ut)
TY
A∈B−(Y)
P ( yt,u | x[..t] , y[..u-] )
SOFTMAX
zt,u
JOINT NETWORK
DECODER
PREDICTION
NETWORK
hpredu
henct
yu-
ENCODER
xt
Figure .
The RNN-T model computing the output token distribution at time t by inte-
grating the output of a CTC acoustic encoder and a separate ‘predictor’ language model.
ASR Evaluation: Word Error Rate
The standard evaluation metric for speech recognition systems is the word error
word error
rate. The word error rate is based on how much the word string returned by the
recognizer (the hypothesized word string) differs from a reference transcription.
The ﬁrst step in computing word error is to compute the minimum edit distance in
words between the hypothesized and correct strings, giving us the minimum num-
ber of word substitutions, word insertions, and word deletions necessary to map
between the correct and hypothesized strings. The word error rate (WER) is then
deﬁned as follows (note that because the equation includes insertions, the error rate
can be greater than %):
Word Error Rate = × Insertions+Substitutions+Deletions
Total Words in Correct Transcript
Here is a sample alignment between a reference and a hypothesis utterance from
alignment
the CallHome corpus, showing the counts used to compute the error rate:
REF:
i ***
** UM the PHONE IS
i LEFT THE portable ****
PHONE UPSTAIRS last night
HYP:
i GOT IT TO the *****
FULLEST i LOVE TO
portable FORM OF
STORES
last night
Eval:
This utterance has six substitutions, three insertions, and one deletion:
Word Error Rate = ++
= .%

ASR EVALUATION: WORD ERROR RATE
The standard method for computing word error rates is a free script called sclite,
available from the National Institute of Standards and Technologies (NIST) (NIST,
). Sclite is given a series of reference (hand-transcribed, gold-standard) sen-
tences and a matching set of hypothesis sentences. Besides performing alignments,
and computing word error rate, sclite performs a number of other useful tasks. For
example, for error analysis it gives useful information such as confusion matrices
showing which words are often misrecognized for others, and summarizes statistics
of words that are often inserted or deleted. sclite also gives error rates by speaker
(if sentences are labeled for speaker ID), as well as useful statistics like the sentence
error rate, the percentage of sentences with at least one word error.
Sentence error
rate
Statistical signiﬁcance for ASR: MAPSSWE or MacNemar
As with other language processing algorithms, we need to know whether a particular
improvement in word error rate is signiﬁcant or not.
The standard statistical tests for determining if two word error rates are different
is the Matched-Pair Sentence Segment Word Error (MAPSSWE) test, introduced in
Gillick and Cox ().
The MAPSSWE test is a parametric test that looks at the difference between
the number of word errors the two systems produce, averaged across a number of
segments. The segments may be quite short or as long as an entire utterance; in
general, we want to have the largest number of (short) segments in order to justify
the normality assumption and to maximize power. The test requires that the errors
in one segment be statistically independent of the errors in another segment. Since
ASR systems tend to use trigram LMs, we can approximate this requirement by
deﬁning a segment as a region bounded on both sides by words that both recognizers
get correct (or by turn/utterance boundaries). Here’s an example from NIST ()
with four regions:
II
III
IV
REF:
|it was|the best|of|times it|was the worst|of times|
|it was
SYS A:|ITS
|the best|of|times it|IS the worst |of times|OR|it was
SYS B:|it was|the best|
|times it|WON the TEST |of times|
|it was
In region I, system A has two errors (a deletion and an insertion) and system B
has zero; in region III, system A has one error (a substitution) and system B has two.
Let’s deﬁne a sequence of variables Z representing the difference between the errors
in the two systems as follows:
Ni
the number of errors made on segment i by system A
Ni
the number of errors made on segment i by system B
Ni
A −Ni
B,i = ,, ,n where n is the number of segments
In the example above, the sequence of Z values is {,−,−,}. Intuitively, if
the two systems are identical, we would expect the average difference, that is, the
average of the Z values, to be zero. If we call the true average of the differences
muz, we would thus like to know whether muz = . Following closely the original
proposal and notation of Gillick and Cox (), we can estimate the true average
from our limited sample as ˆµz = Pn
i= Zi/n. The estimate of the variance of the Zi’s
is
z =
i=
(Zi − µz)
n−

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
Let
W =
ˆµz
σz/√n
For a large enough n (> ), W will approximately have a normal distribution with
unit variance. The null hypothesis is H : µz = , and it can thus be rejected if
∗ P(Z ≥ |w|) ≤ . (two-tailed) or P(Z ≥ |w|) ≤ . (one-tailed), where Z is
standard normal and w is the realized value W; these probabilities can be looked up
in the standard tables of the normal distribution.
Earlier work sometimes used McNemar’s test for signiﬁcance, but McNemar’s
McNemar’s test
is only applicable when the errors made by the system are independent, which is not
true in continuous speech recognition, where errors made on a word are extremely
dependent on errors made on neighboring words.
Could we improve on word error rate as a metric? It would be nice, for exam-
ple, to have something that didn’t give equal weight to every word, perhaps valuing
content words like Tuesday more than function words like a or of. While researchers
generally agree that this would be a good idea, it has proved difﬁcult to agree on
a metric that works in every application of ASR. For dialogue systems, however,
where the desired semantic output is more clear, a metric called slot error rate or
concept error rate has proved extremely useful; it is discussed in Chapter  on page
TTS
The goal of text-to-speech (TTS) systems is to map from strings of letters to wave-
forms, a technology that’s important for a variety of applications from dialogue sys-
tems to games to education.
Like ASR systems, TTS systems are generally based on the encoder-decoder
architecture, either using LSTMs or Transformers. There is a general difference in
training. The default condition for ASR systems is to be speaker-independent: they
are trained on large corpora with thousands of hours of speech from many speakers
because they must generalize well to an unseen test speaker. By contrast, in TTS, it’s
less crucial to use multiple voices, and so basic TTS systems are speaker-dependent:
trained to have a consistent voice, on much less data, but all from one speaker. For
example, one commonly used public domain dataset, the LJ speech corpus, consists
of  hours of one speaker, Linda Johnson, reading audio books in the LibriVox
project (Ito and Johnson, ), much smaller than standard ASR corpora which are
hundreds or thousands of hours.
We generally break up the TTS task into two components. The ﬁrst component
is an encoder-decoder model for spectrogram prediction: it maps from strings of
letters to mel spectrographs: sequences of mel spectral values over time. Thus we
There is also recent TTS research on the task of multi-speaker TTS, in which a system is trained on
speech from many speakers, and can switch between different voices.

TTS
might map from this string:
It’s time for lunch!
to the following mel spectrogram:
The second component maps from mel spectrograms to waveforms. Generating
waveforms from intermediate representations like spectrograms is called vocoding
vocoding
and this second component is called a vocoder:
vocoder
These standard encoder-decoder algorithms for TTS are still quite computation-
ally intensive, so a signiﬁcant focus of modern research is on ways to speed them
up.
TTS Preprocessing: Text normalization
Before either of these two steps, however, TTS systems require text normaliza-
tion preprocessing for handling non-standard words: numbers, monetary amounts,
non-standard
words
dates, and other concepts that are verbalized differently than they are spelled. A TTS
system seeing a number like  needs to know to verbalize it as one hundred ﬁfty
one if it occurs as $ but as one ﬁfty one if it occurs in the context  Chapulte-
pec Ave.. The number  can be spoken in at least four different ways, depending
on the context:
seventeen fifty:
(in “The European economy in ”)
one seven five zero:
(in “The password is ”)
seventeen hundred and fifty:
(in “ dollars”)
one thousand, seven hundred, and fifty:
(in “ dollars”)
Often the verbalization of a non-standard word depends on its meaning (what
Taylor () calls its semiotic class).
Fig. . lays out some English non-
standard word types.
Many classes have preferred realizations. A year is generally read as paired
digits (e.g., seventeen fifty for ). $. billion must be read out with the
word dollars at the end, as three point two billion dollars. Some ab-
breviations like N.Y. are expanded (to New York), while other acronyms like GPU
are pronounced as letter sequences. In languages with grammatical gender, normal-
ization may depend on morphological properties. In French, the phrase  mangue
(‘one mangue’) is normalized to une mangue, but  ananas (‘one pineapple’) is
normalized to un ananas. In German, Heinrich IV (‘Henry IV’) can be normalized
to Heinrich der Vierte, Heinrich des Vierten, Heinrich dem Vierten, or
Heinrich den Vierten depending on the grammatical case of the noun (Demberg,

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
semiotic class
examples
verbalization
abbreviations
gov’t, N.Y., mph
government
acronyms read as letters
GPU, D.C., PC, UN, IBM
G P U
cardinal numbers
, , /, .
twelve
ordinal numbers
May , rd, Bill Gates III
seventh
numbers read as digits
Room
one oh one
times
., :
eleven forty ﬁve
dates
/ (or in US, /)
February twenty eighth
years
, s, s,
nineteen ninety nine
money
$., e, $K
three dollars forty ﬁve
money in tr/m/billions
$. billion
three point four ﬁve billion dollars
percentage
% .%
seventy ﬁve percent
Figure .
Some types of non-standard words in text normalization; see Sproat et al.
() and (van Esch and Sproat, ) for many more.
Modern end-to-end TTS systems can learn to do some normalization themselves,
but TTS systems are only trained on a limited amount of data (like the , words
we mentioned above for the LJ corpus (Ito and Johnson, )), and so a separate
normalization step is important.
Normalization can be done by rule or by an encoder-decoder model. Rule-based
normalization is done in two stages: tokenization and verbalization. In the tokeniza-
tion stage we hand-write write rules to detect non-standard words. These can be
regular expressions, like the following for detecting years:
A second pass of rules express how to verbalize each semiotic class. Larger TTS
systems instead use more complex rule-systems, like the Kestral system of (Ebden
and Sproat, ), which ﬁrst classiﬁes and parses each input into a normal form
and then produces text using a verbalization grammar. Rules have the advantage
that they don’t require training data, and they can be designed for high precision, but
can be brittle, and require expert rule-writers so are hard to maintain.
The alternative model is to use encoder-decoder models, which have been shown
to work better than rules for such transduction tasks, but do require expert-labeled
training sets in which non-standard words have been replaced with the appropriate
verbalization; such training sets for some languages are available (Sproat and Gor-
man , Zhang et al. ).
In the simplest encoder-decoder setting, we simply treat the problem like ma-
chine translation, training a system to map from:
They live at  Mission St.
to
They live at two twenty four Mission Street
While encoder-decoder algorithms are highly accurate, they occasionally pro-
duce errors that are egregious; for example normalizing  minutes as forty ﬁve mil-
limeters. To address this, more complex systems use mechanisms like lightweight
covering grammars, which enumerate a large set of possible verbalizations but
don’t try to disambiguate, to constrain the decoding to avoid such outputs (Zhang
et al., ).
TTS: Spectrogram prediction
The exact same architecture we described for ASR—the encoder-decoder with attention–
can be used for the ﬁrst component of TTS. Here we’ll give a simpliﬁed overview

TTS
of the Tacotron architecture (Shen et al., ), which extends the earlier Tacotron
Tacotron
(Wang et al., ) architecture and the Wavenet vocoder (van den Oord et al.,
Wavenet
). Fig. . sketches out the entire architecture.
The encoder’s job is to take a sequence of letters and produce a hidden repre-
sentation representing the letter sequence, which is then used by the attention mech-
anism in the decoder. The Tacotron encoder ﬁrst maps every input grapheme to
a -dimensional character embedding. These are then passed through a stack
of  convolutional layers, each containing  ﬁlters with shape  × , i.e. each
ﬁlter spanning  characters, to model the larger letter context. The output of the
ﬁnal convolutional layer is passed through a biLSTM to produce the ﬁnal encoding.
It’s common to use a slightly higher quality (but slower) version of attention called
location-based attention, in which the computation of the α values (Eq. . in
location-based
attention
Chapter ) makes use of the α values from the prior time-state.
In the decoder, the predicted mel spectrum from the prior time slot is passed
through a small pre-net as a bottleneck. This prior output is then concatenated with
the encoder’s attention vector context and passed through  LSTM layers. The out-
put of this LSTM is used in two ways. First, it is passed through a linear layer, and
some output processing, to autoregressively predict one -dimensional log-mel ﬁl-
terbank vector frame ( ms, with a . ms stride) at each step. Second, it is passed
through another linear layer to a sigmoid to make a “stop token prediction” decision
about whether to stop producing output.
While linear spectrograms discard phase information (and are
HOSHFWURJUDP
;EZIJSVQ
EQTPIW
Vocoder
'SRZE]IV
;EZIIX
SWXIX
Decoder
MRIEV
VSNIGXMSR
E]IV
VIIX
E]IVW
MRIEV
XSTSOIR
VSNIGXMSR
therefore lossy), algorithms such as Grifﬁn-Lim [] are capable of
estimating this discarded information, which enables time-domain
conversion via the inverse short-time Fourier transform. Mel spectro-
grams discard even more information, presenting a challenging in-
verse problem. However, in comparison to the linguistic and acoustic
features used in WaveNet, the mel spectrogram is a simpler, lower-
level acoustic representation of audio signals. It should therefore
be straightforward for a similar WaveNet model conditioned on mel
spectrograms to generate audio, essentially as a neural vocoder. In-
deed, we will show that it is possible to generate high quality audio
from mel spectrograms using a modiﬁed WaveNet architecture.
SGEXMSR
IRWMXMZI
%XXIRXMSR
.. Spectrogram Prediction Network
Encoder
&MHMVIGXMSREP
-RTYXI\X
'LEVEGXIV
)QFIHHMRK
'SRZ
E]IVW
Fig. . Block diagram of the Tacotron  system architecture.
As in Tacotron, mel spectrograms are computed through a short-
time Fourier transform (STFT) using a  ms frame size, . ms
frame hop, and a Hann window function. We experimented with a
ms frame hop to match the frequency of the conditioning inputs
in the original WaveNet, but the corresponding increase in temporal
resolution resulted in signiﬁcantly more pronunciation issues.
Figure .
The Tacotron architecture: An encoder-decoder maps from graphemes to
mel spectrograms, followed by a vocoder that maps to waveﬁles. Figure modiﬁed from Shen
et al. ().
We transform the STFT magnitude to the mel scale using an
post-net layer is comprised of  ﬁlters with shape  ⇥  with batch
normalization, followed by tanh activations on all but the ﬁnal layer.
We minimize the summed mean squared error (MSE) from before
channel mel ﬁlterbank spanning  Hz to . kHz, followed by log
dynamic range compression. Prior to log compression, the ﬁlterbank
output magnitudes are clipped to a minimum value of . in order
to limit dynamic range in the logarithmic domain.
The network is composed of an encoder and a decoder with atten-
The system is trained on gold log-mel ﬁlterbank features, using teacher forcing,
that is the decoder is fed the correct log-model spectral feature at each decoder step
instead of the predicted decoder output from the prior step.
and after the post-net to aid convergence. We also experimented
with a log-likelihood loss by modeling the output distribution with
a Mixture Density Network [, ] to avoid assuming a constant
variance over time, but found that these were more difﬁcult to train
and they did not lead to better sounding samples.
In parallel to spectrogram frame prediction, the concatenation of
TTS: Vocoding
The vocoder for Tacotron  is an adaptation of the WaveNet vocoder (van den Oord
WaveNet
decoder LSTM output and the attention context is projected down
to a scalar and passed through a sigmoid activation to predict the
probability that the output sequence has completed. This “stop token”
prediction is used during inference to allow the model to dynamically
determine when to terminate generation instead of always generating
for a ﬁxed duration. Speciﬁcally, generation completes at the ﬁrst
frame for which this probability exceeds a threshold of ..
The convolutional layers in the network are regularized using
tion. The encoder converts a character sequence into a hidden feature
representation which the decoder consumes to predict a spectrogram.
Input characters are represented using a learned -dimensional
character embedding, which are passed through a stack of  convolu-
tional layers each containing  ﬁlters with shape  ⇥ , i.e., where
each ﬁlter spans  characters, followed by batch normalization []
and ReLU activations. As in Tacotron, these convolutional layers
model longer-term context (e.g., N-grams) in the input character
sequence. The output of the ﬁnal convolutional layer is passed into a
single bi-directional [] LSTM [] layer containing  units (
in each direction) to generate the encoded features.
The encoder output is consumed by an attention network which
et al., ). Here we’ll give a somewhat simpliﬁed description of vocoding using
WaveNet.
Recall that the goal of the vocoding process here will be to invert a log mel spec-
trum representations back into a time-domain waveform representation. WaveNet is
an autoregressive network, like the language models we introduced in Chapter . It
dropout [] with probability ., and LSTM layers are regularized
using zoneout [] with probability .. In order to introduce output
variation at inference time, dropout with probability . is applied
only to layers in the pre-net of the autoregressive decoder.
In contrast to the original Tacotron, our model uses simpler build-
ing blocks, using vanilla LSTM and convolutional layers in the en-
coder and decoder instead of “CBHG” stacks and GRU recurrent
layers. We do not use a “reduction factor”, i.e., each decoder step
corresponds to a single spectrogram frame.
summarizes the full encoded sequence as a ﬁxed-length context vector
for each decoder output step. We use the location-sensitive attention
from [], which extends the additive attention mechanism [] to
use cumulative attention weights from previous decoder time steps
as an additional feature. This encourages the model to move forward
consistently through the input, mitigating potential failure modes
where some subsequences are repeated or ignored by the decoder.
Attention probabilities are computed after projecting inputs and lo-
cation features to -dimensional hidden representations. Location
features are computed using  -D convolution ﬁlters of length .

WaveNet Vocoder

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
takes spectrograms as input and produces audio output represented as sequences of
-bit mu-law (page ). The probability of a waveform , a sequence of -bit mu-
law values Y = y,...,yt, given an intermediate input mel spectrogram h is computed
as:
p(Y) =
t=
P(yt|y,...,yt−,h,...,ht)
tY
Because models with causal convolutions do not have recurrent connections, they are typically faster
to train than RNNs, especially when applied to very long sequences. One of the problems of causal
convolutions is that they require many layers, or large ﬁlters to increase the receptive ﬁeld. For
example, in Fig.  the receptive ﬁeld is only  (= #layers + ﬁlter length - ). In this paper we use
dilated convolutions to increase the receptive ﬁeld by orders of magnitude, without greatly increasing
computational cost.
This probability distribution is modeled by a stack of special convolution layers,
which include a speciﬁc convolutional structure called dilated convolutions, and a
speciﬁc non-linearity function.
A dilated convolution is a subtype of causal convolutional layer. Causal or
masked convolutions look only at the past input, rather than the future; the pre-
diction of yt+ can only depend on y,...,yt, useful for autoregressive left-to-right
processing. In dilated convolutions, at each successive layer we apply the convolu-
dilated
convolutions
A dilated convolution (also called `a trous, or convolution with holes) is a convolution where the
ﬁlter is applied over an area larger than its length by skipping input values with a certain step. It is
equivalent to a convolution with a larger ﬁlter derived from the original ﬁlter by dilating it with zeros,
but is signiﬁcantly more efﬁcient. A dilated convolution effectively allows the network to operate on
a coarser scale than with a normal convolution. This is similar to pooling or strided convolutions, but
here the output has the same size as the input. As a special case, dilated convolution with dilation
yields the standard convolution. Fig.  depicts dilated causal convolutions for dilations , , ,
and . Dilated convolutions have previously been used in various contexts, e.g. signal processing
(Holschneider et al., ; Dutilleux, ), and image segmentation (Chen et al., ; Yu &
Koltun, ).
tional ﬁlter over a span longer than its length by skipping input values. Thus at time
t with a dilation value of , a convolutional ﬁlter of length  would see input values
xt and xt−. But a ﬁlter with a distillation value of  would skip an input, so would
see input values xt and xt−. Fig. . shows the computation of the output at time
t with  dilated convolution layers with dilation values, , , , and .
Output
Dilation =
Hidden Layer
Dilation =
Hidden Layer
Dilation =
Hidden Layer
Dilation =
Input
Figure .
Dilated convolutions, showing one dilation cycle size of , i.e., dilation values
of , , , . Figure from van den Oord et al. ().
Figure : Visualization of a stack of dilated causal convolutional layers.
Stacked dilated convolutions enable networks to have very large receptive ﬁelds with just a few lay-
ers, while preserving the input resolution throughout the network as well as computational efﬁciency.
In this paper, the dilation is doubled for every layer up to a limit and then repeated: e.g.
, , , . . . , , , , , . . . , , , , , . . . , .
The intuition behind this conﬁguration is two-fold. First, exponentially increasing the dilation factor
results in exponential receptive ﬁeld growth with depth (Yu & Koltun, ). For example each
, , , . . . ,  block has receptive ﬁeld of size , and can be seen as a more efﬁcient and dis-
criminative (non-linear) counterpart of a ⇥ convolution. Second, stacking these blocks further
increases the model capacity and the receptive ﬁeld size.
SOFTMAX DISTRIBUTIONS
The Tacotron  synthesizer uses  convolutional layers in two cycles with a
dilation cycle size of , meaning that the ﬁrst  layers have dilations of , , , , ,
and . and the next  layers again have dilations of , , , , , and . Dilated
convolutions allow the vocoder to grow the receptive ﬁeld exponentially with depth.
WaveNet predicts mu-law audio samples. Recall from page  that this is a
standard compression for audio in which the values at each sampling timestep are
compressed into -bits. This means that we can predict the value of each sample
with a simple -way categorical classiﬁer. The output of the dilated convolutions
is thus passed through a softmax which makes this -way decision.
The spectrogram prediction encoder-decoder and the WaveNet vocoder are trained
separately. After the spectrogram predictor is trained, the spectrogram prediction
network is run in teacher-forcing mode, with each predicted spectral frame condi-
tioned on the encoded text input and the previous frame from the ground truth spec-
trogram. This sequence of ground truth-aligned spectral features and gold audio
output is then used to train the vocoder.
This has been only a high-level sketch of the TTS process. There are numer-
ous important details that the reader interested in going further with TTS may want
One approach to modeling the conditional distributions p (xt | x, . . . , xt−) over the individual
audio samples would be to use a mixture model such as a mixture density network (Bishop, )
or mixture of conditional Gaussian scale mixtures (MCGSM) (Theis & Bethge, ). However,
van den Oord et al. (a) showed that a softmax distribution tends to work better, even when the
data is implicitly continuous (as is the case for image pixel intensities or audio sample values). One
of the reasons is that a categorical distribution is more ﬂexible and can more easily model arbitrary
distributions because it makes no assumptions about their shape.
Because raw audio is typically stored as a sequence of -bit integer values (one per timestep), a
softmax layer would need to output , probabilities per timestep to model all possible values.
To make this more tractable, we ﬁrst apply a µ-law companding transformation (ITU-T, ) to
the data, and then quantize it to  possible values:
f (
)ln ( + µ |xt|)

OTHER SPEECH TASKS
to look into. For example WaveNet uses a special kind of a gated activation func-
tion as its non-linearity, and contains residual and skip connections. In practice,
predicting -bit audio values doesn’t as work as well as -bit, for which a simple
softmax is insufﬁcient, so decoders use fancier ways as the last step of predicting
audio sample values, like mixtures of distributions. Finally, the WaveNet vocoder
as we have described it would be so slow as to be useless; many different kinds of
efﬁciency improvements are necessary in practice, for example by ﬁnding ways to
do non-autoregressive generation, avoiding the latency of having to wait to generate
each frame until the prior frame has been generated, and instead making predictions
in parallel. We encourage the interested reader to consult the original papers and
various version of the code.
TTS Evaluation
Speech synthesis systems are evaluated by human listeners. (The development of a
good automatic metric for synthesis evaluation, one that would eliminate the need
for expensive and time-consuming human listening experiments, remains an open
and exciting research topic.)
We evaluate the quality of synthesized utterances by playing a sentence to lis-
teners and ask them to give a mean opinion score (MOS), a rating of how good
MOS
the synthesized utterances are, usually on a scale from –. We can then compare
systems by comparing their MOS scores on the same sentences (using, e.g., paired
t-tests to test for signiﬁcant differences).
If we are comparing exactly two systems (perhaps to see if a particular change
actually improved the system), we can use AB tests. In AB tests, we play the same
AB tests
sentence synthesized by two different systems (an A and a B system). The human
listeners choose which of the two utterances they like better. We do this for say
sentences (presented in random order) and compare the number of sentences
preferred for each system.
Other Speech Tasks
While we have focused on speech recognition and TTS in this chapter, there are a
wide variety of speech-related tasks.
The task of wake word detection is to detect a word or short phrase, usually in
wake word
order to wake up a voice-enable assistant like Alexa, Siri, or the Google Assistant.
The goal with wake words is build the detection into small devices at the computing
edge, to maintain privacy by transmitting the least amount of user speech to a cloud-
based server. Thus wake word detectors need to be fast, small footprint software that
can ﬁt into embedded devices. Wake word detectors usually use the same frontend
feature extraction we saw for ASR, often followed by a whole-word classiﬁer.
Speaker diarization is the task of determining ‘who spoke when’ in a long
speaker
diarization
multi-speaker audio recording, marking the start and end of each speaker’s turns in
the interaction. This can be useful for transcribing meetings, classroom speech, or
medical interactions. Often diarization systems use voice activity detection (VAD) to
ﬁnd segments of continuous speech, extract speaker embedding vectors, and cluster
the vectors to group together segments likely from the same speaker. More recent
work is investigating end-to-end algorithms to map directly from input speech to a
sequence of speaker labels for each frame.

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
Speaker recognition, is the task of identifying a speaker. We generally distin-
speaker
recognition
guish the subtasks of speaker veriﬁcation, where we make a binary decision (is
this speaker X or not?), such as for security when accessing personal information
over the telephone, and speaker identiﬁcation, where we make a one of N decision
trying to match a speaker’s voice against a database of many speakers . These tasks
are related to language identiﬁcation, in which we are given a waveﬁle and must
language
identiﬁcation
identify which language is being spoken; this is useful for example for automatically
directing callers to human operators that speak appropriate languages.
Summary
This chapter introduced the fundamental algorithms of automatic speech recognition
(ASR) and text-to-speech (TTS).
The task of speech recognition (or speech-to-text) is to map acoustic wave-
forms to sequences of graphemes.
The input to a speech recognizer is a series of acoustic waves. that are sam-
pled, quantized, and converted to a spectral representation like the log mel
spectrum.
Two common paradigms for speech recognition are the encoder-decoder with
attention model, and models based on the CTC loss function. Attention-
based models have higher accuracies, but models based on CTC more easily
adapt to streaming: outputting graphemes online instead of waiting until the
acoustic input is complete.
ASR is evaluated using the Word Error Rate; the edit distance between the
hypothesis and the gold transcription.
TTS systems are also based on the encoder-decoder architecture. The en-
coder maps letters to an encoding, which is consumed by the decoder which
generates mel spectrogram output. A neural vocoder then reads the spectro-
gram and generates waveforms.
TTS systems require a ﬁrst pass of text normalization to deal with numbers
and abbreviations and other non-standard words.
TTS is evaluated by playing a sentence to human listeners and having them
give a mean opinion score (MOS) or by doing AB tests.
Bibliographical and Historical Notes
ASR
A number of speech recognition systems were developed by the late s
and early s. An early Bell Labs system could recognize any of the  digits
from a single speaker (Davis et al., ). This system had  speaker-dependent
stored patterns, one for each digit, each of which roughly represented the ﬁrst two
vowel formants in the digit. They achieved %–% accuracy by choosing the pat-
tern that had the highest relative correlation coefﬁcient with the input. Fry ()
and Denes () built a phoneme recognizer at University College, London, that
recognized four vowels and nine consonants based on a similar pattern-recognition
principle. Fry and Denes’s system was the ﬁrst to use phoneme transition probabili-
ties to constrain the recognizer.

BIBLIOGRAPHICAL AND HISTORICAL NOTES
The late s and early s produced a number of important paradigm shifts.
First were a number of feature-extraction algorithms, including the efﬁcient fast
Fourier transform (FFT) (Cooley and Tukey, ), the application of cepstral pro-
cessing to speech (Oppenheim et al., ), and the development of LPC for speech
coding (Atal and Hanauer, ). Second were a number of ways of handling warp-
ing; stretching or shrinking the input signal to handle differences in speaking rate
warping
and segment length when matching against stored patterns. The natural algorithm for
solving this problem was dynamic programming, and, as we saw in Appendix A, the
algorithm was reinvented multiple times to address this problem. The ﬁrst applica-
tion to speech processing was by Vintsyuk (), although his result was not picked
up by other researchers, and was reinvented by Velichko and Zagoruyko () and
Sakoe and Chiba () (and ). Soon afterward, Itakura () combined this
dynamic programming idea with the LPC coefﬁcients that had previously been used
only for speech coding. The resulting system extracted LPC features from incoming
words and used dynamic programming to match them against stored LPC templates.
The non-probabilistic use of dynamic programming to match a template against in-
coming speech is called dynamic time warping.
dynamic time
warping
The third innovation of this period was the rise of the HMM. Hidden Markov
models seem to have been applied to speech independently at two laboratories around
. One application arose from the work of statisticians, in particular Baum and
colleagues at the Institute for Defense Analyses in Princeton who applied HMMs
to various prediction problems (Baum and Petrie , Baum and Eagon ).
James Baker learned of this work and applied the algorithm to speech processing
(Baker, a) during his graduate work at CMU. Independently, Frederick Jelinek
and collaborators (drawing from their research in information-theoretical models
inﬂuenced by the work of Shannon ()) applied HMMs to speech at the IBM
Thomas J. Watson Research Center (Jelinek et al., ). One early difference was
the decoding algorithm; Baker’s DRAGON system used Viterbi (dynamic program-
ming) decoding, while the IBM system applied Jelinek’s stack decoding algorithm
(Jelinek, ). Baker then joined the IBM group for a brief time before founding
the speech-recognition company Dragon Systems.
The use of the HMM, with Gaussian Mixture Models (GMMs) as the phonetic
component, slowly spread through the speech community, becoming the dominant
paradigm by the s. One cause was encouragement by ARPA, the Advanced
Research Projects Agency of the U.S. Department of Defense. ARPA started a
ﬁve-year program in  to build -word, constrained grammar, few speaker
speech understanding (Klatt, ), and funded four competing systems of which
Carnegie-Mellon University’s Harpy system (Lowerre, ), which used a simpli-
ﬁed version of Baker’s HMM-based DRAGON system was the best of the tested sys-
tems. ARPA (and then DARPA) funded a number of new speech research programs,
beginning with -word speaker-independent read-speech tasks like “Resource
Management” (Price et al., ), recognition of sentences read from the Wall Street
Journal (WSJ), Broadcast News domain (LDC , Graff ) (transcription of
actual news broadcasts, including quite difﬁcult passages such as on-the-street inter-
views) and the Switchboard, CallHome, CallFriend, and Fisher domains (Godfrey
et al. , Cieri et al. ) (natural telephone conversations between friends or
strangers). Each of the ARPA tasks involved an approximately annual bakeoff at
bakeoff
which systems were evaluated against each other. The ARPA competitions resulted
in wide-scale borrowing of techniques among labs since it was easy to see which
ideas reduced errors the previous year, and the competitions were probably an im-

CHAPTER
AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
portant factor in the eventual spread of the HMM paradigm.
By around  neural alternatives to the HMM/GMM architecture for ASR
arose, based on a number of earlier experiments with neural networks for phoneme
recognition and other speech tasks. Architectures included the time-delay neural
network (TDNN)—the ﬁrst use of convolutional networks for speech— (Waibel
et al. , Lang et al. ), RNNs (Robinson and Fallside, ), and the hybrid
hybrid
HMM/MLP architecture in which a feedforward neural network is trained as a pho-
netic classiﬁer whose outputs are used as probability estimates for an HMM-based
architecture (Morgan and Bourlard , Bourlard and Morgan , Morgan and
Bourlard ).
While the hybrid systems showed performance close to the standard HMM/GMM
models, the problem was speed: large hybrid models were too slow to train on the
CPUs of that era. For example, the largest hybrid system, a feedforward network,
was limited to a hidden layer of  units, producing probabilities over only a few
dozen monophones. Yet training this model still required the research group to de-
sign special hardware boards to do vector processing (Morgan and Bourlard, ).
A later analytic study showed the performance of such simple feedforward MLPs
for ASR increases sharply with more than  hidden layer, even controlling for the
total number of parameters (Maas et al., ). But the computational resources of
the time were insufﬁcient for more layers.
Over the next two decades a combination of Moore’s law and the rise of GPUs
allowed deep neural networks with many layers. Performance was getting close to
traditional systems on smaller tasks like TIMIT phone recognition by  (Mo-
hamed et al., ), and by , the performance of hybrid systems had surpassed
traditional HMM/GMM systems (Jaitly et al. , Dahl et al. , inter alia).
Originally it seemed that unsupervised pretraining of the networks using a tech-
nique like deep belief networks was important, but by , it was clear that for
hybrid HMM/GMM feedforward networks, all that mattered was to use a lot of data
and enough layers, although a few other components did improve performance: us-
ing log mel features instead of MFCCs, using dropout, and using rectiﬁed linear
units (Deng et al. , Maas et al. , Dahl et al. ).
Meanwhile early work had proposed the CTC loss function by  (Graves
et al., ), and by  the RNN-Transducer was deﬁned and applied to phone
recognition (Graves , Graves et al. ), and then to end-to-end speech recog-
nition rescoring (Graves and Jaitly, ), and then recognition (Maas et al., ),
with advances such as specialized beam search (Hannun et al., ). (Our de-
scription of CTC in the chapter draws on Hannun (), which we encourage the
interested reader to follow).
The encoder-decoder architecture was applied to speech at about the same time
by two different groups, in the Listen Attend and Spell system of Chan et al. ()
and the attention-based encoder decoder architecture of Chorowski et al. ()
and Bahdanau et al. (). By  Transformers were included in this encoder-
decoder architecture. Karita et al. () is a nice comparison of RNNs vs Trans-
formers in encoder-architectures for ASR, TTS, and speech-to-speech translation.
Popular toolkits for speech processing include Kaldi (Povey et al., ) and
Kaldi
ESPnet (Watanabe et al. , Hayashi et al. ).
ESPnet
TTS
As we noted at the beginning of the chapter, speech synthesis is one of the
earliest ﬁelds of speech and language processing. The th century saw a number
of physical models of the articulation process, including the von Kempelen model
mentioned above, as well as the  vowel model of Kratzenstein in Copenhagen

EXERCISES
using organ pipes.
The early s saw the development of three early paradigms of waveform
synthesis: formant synthesis, articulatory synthesis, and concatenative synthesis.
Modern encoder-decoder systems are distant descendants of formant synthesiz-
ers. Formant synthesizers originally were inspired by attempts to mimic human
speech by generating artiﬁcial spectrograms.
The Haskins Laboratories Pattern
Playback Machine generated a sound wave by painting spectrogram patterns on a
moving transparent belt and using reﬂectance to ﬁlter the harmonics of a wave-
form (Cooper et al., ); other very early formant synthesizers include those of
Lawrence () and Fant (). Perhaps the most well-known of the formant
synthesizers were the Klatt formant synthesizer and its successor systems, includ-
ing the MITalk system (Allen et al., ) and the Klattalk software used in Digital
Equipment Corporation’s DECtalk (Klatt, ). See Klatt () for details.
A second early paradigm, concatenative synthesis, seems to have been ﬁrst pro-
posed by Harris () at Bell Laboratories; he literally spliced together pieces of
magnetic tape corresponding to phones. Soon afterwards, Peterson et al. () pro-
posed a theoretical model based on diphones, including a database with multiple
copies of each diphone with differing prosody, each labeled with prosodic features
including F, stress, and duration, and the use of join costs based on F and formant
distance between neighboring units. But such diphone synthesis models were not
actually implemented until decades later (Dixon and Maxey , Olive ). The
s and s saw the invention of unit selection synthesis, based on larger units
of non-uniform length and the use of a target cost, (Sagisaka , Sagisaka et al.
, Hunt and Black , Black and Taylor , Syrdal et al. ).
A third paradigm, articulatory synthesizers attempt to synthesize speech by
modeling the physics of the vocal tract as an open tube. Representative models
include Stevens et al. (), Flanagan et al. (), and Fant (). See Klatt
() and Flanagan () for more details.
Most early TTS systems used phonemes as input; development of the text anal-
ysis components of TTS came somewhat later, drawing on NLP. Indeed the ﬁrst
true text-to-speech system seems to have been the system of Umeda and Teranishi
(Umeda et al. , Teranishi and Umeda , Umeda ), which included a
parser that assigned prosodic boundaries, as well as accent and stress.
Exercises
. Analyze each of the errors in the incorrectly recognized transcription of “um
the phone is I left the...” on page . For each one, give your best guess as
to whether you think it is caused by a problem in signal processing, pronun-
ciation modeling, lexicon size, language model, or pruning in the decoding
search.

Part III
ANNOTATING LINGUISTIC
STRUCTURE
In the ﬁnal part of the book we discuss the task of detecting linguistic structure.
In the early history of NLP these structures were an intermediate step toward deeper
language processing. In modern NLP, we don’t generally make explicit use of parse
or other structures inside the neural language models we introduced in Part I, or
directly in applications like those we discussed in Part II.
Instead linguistic structure plays a number of new roles. One of the most im-
portant roles is to provide a useful interpretive lens on neural networks. Knowing
that a particular layer or neuron may be computing something related to a particular
kind of structure can help us break open the ‘black box’ and understand what the
components of our language models are doing. A second important role for linguis-
tic structure is as as a practical tool for social scientiﬁc studies of text: knowing
which adjective modiﬁes which noun, or whether a particular implicit metaphor is
being used, can be important for measuring attitudes toward groups or individuals.
Detailed semantic structure can be helpful, for example in ﬁnding particular clauses
that have particular meanings in legal contracts. Word sense labels can help keep any
corpus study from measuring facts about the wrong word sense. Relation structures
can be used to help build knowledge bases from text. Finally, linguistic structure
can be important to answer questions about language itself. To answer linguistic
questions about how language changes over time or across individuals we’ll need to
be able, for example, to parse entire documents from different time periods.
In our study of linguistic structure, we begin with one of the oldest tasks in
computational linguistics: the extraction of syntactic structure, and give two sets of
algorithms for parsing: extracting syntactic structure, including constituency pars-
ing and dependency parsing. We then introduce model-theoretic semantics and give
algorithms for semantic parsing. We then introduce a variety of structures related
to meaning, including semantic roles, word senses, entity relations, and events. We
conclude with linguistic structures that tend to be related to discourse and meaning
over larger texts, including coreference, and discourse coherence. In each case we’ll
give algorithms for automatically annotating the relevant structure.

Context-Free Grammars and
Constituency Parsing
CHAPTER
Because the Night by Bruce Springsteen and Patty Smith
The Fire Next Time by James Baldwin
If on a winter’s night a traveler by Italo Calvino
Love Actually by Richard Curtis
Suddenly Last Summer by Tennessee Williams
A Scanner Darkly by Philip K. Dick
Six titles that are not constituents, from Geoffrey K. Pullum on
Language Log (who was pointing out their incredible rarity).
One morning I shot an elephant in my pajamas.
How he got into my pajamas I don’t know.
Groucho Marx, Animal Crackers,
The study of grammar has an ancient pedigree. The grammar of Sanskrit was
described by the Indian grammarian P¯an.ini sometime between the th and th cen-
turies BCE, in his famous treatise the As.t.¯adhy¯ay¯ı (‘ books’). And our word syntax
syntax
comes from the Greek s´yntaxis, meaning “setting out together or arrangement”, and
refers to the way words are arranged together. We have seen syntactic notions in
previous chapters like the use of part-of-speech categories (Chapter ). In this chap-
ter and the next one we introduce formal models for capturing more sophisticated
notions of grammatical structure, and algorithms for parsing these structures.
Our focus in this chapter is context-free grammars and the CKY algorithm
for parsing them. Context-free grammars are the backbone of many formal mod-
els of the syntax of natural language (and, for that matter, of computer languages).
Syntactic parsing is the task of assigning a syntactic structure to a sentence. Parse
trees (whether for context-free grammars or for the dependency or CCG formalisms
we introduce in following chapters) can be used in applications such as grammar
checking: sentence that cannot be parsed may have grammatical errors (or at least
be hard to read). Parse trees can be an intermediate stage of representation for the
formal semantic analysis of Chapter . And parsers and the grammatical structure
they assign a sentence are a useful text analysis tool for text data science applications
that require modeling the relationship of elements in sentences.
In this chapter we introduce context-free grammars, give a small sample gram-
mar of English, introduce more formal deﬁnitions of context-free grammars and
grammar normal form, and talk about treebanks: corpora that have been anno-
tated with syntactic structure. We then discuss parse ambiguity and the problems
it presents, and turn to parsing itself, giving the famous Cocke-Kasami-Younger
(CKY) algorithm (Kasami , Younger ), the standard dynamic program-
ming approach to syntactic parsing. The CKY algorithm returns an efﬁcient repre-
sentation of the set of parse trees for a sentence, but doesn’t tell us which parse tree
is the right one. For that, we need to augment CKY with scores for each possible
constituent. We’ll see how to do this with neural span-based parsers. Finally, we’ll
introduce the standard set of metrics for evaluating parser accuracy.

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
Constituency
Syntactic constituency is the idea that groups of words can behave as single units,
or constituents. Part of developing a grammar involves building an inventory of the
constituents in the language. How do words group together in English? Consider
the noun phrase, a sequence of words surrounding at least one noun. Here are some
noun phrase
examples of noun phrases (thanks to Damon Runyon):
Harry the Horse
a high-class spot such as Mindy’s
the Broadway coppers
the reason he comes into the Hot Box
they
three parties from Brooklyn
What evidence do we have that these words group together (or “form constituents”)?
One piece of evidence is that they can all appear in similar syntactic environments,
for example, before a verb.
three parties from Brooklyn arrive...
a high-class spot such as Mindy’s attracts...
the Broadway coppers love...
they sit
But while the whole noun phrase can occur before a verb, this is not true of each
of the individual words that make up a noun phrase. The following are not grammat-
ical sentences of English (recall that we use an asterisk (*) to mark fragments that
are not grammatical English sentences):
*from arrive... *as attracts...
*the is...
*spot sat...
Thus, to correctly describe facts about the ordering of these words in English, we
must be able to say things like “Noun Phrases can occur before verbs”. Let’s now
see how to do this in a more formal way!
Context-Free Grammars
A widely used formal system for modeling constituent structure in natural lan-
guage is the context-free grammar, or CFG. Context-free grammars are also called
CFG
phrase-structure grammars, and the formalism is equivalent to Backus-Naur form,
or BNF. The idea of basing a grammar on constituent structure dates back to the psy-
chologist Wilhelm Wundt () but was not formalized until Chomsky () and,
independently, Backus ().
A context-free grammar consists of a set of rules or productions, each of which
rules
expresses the ways that symbols of the language can be grouped and ordered to-
gether, and a lexicon of words and symbols. For example, the following productions
lexicon
express that an NP (or noun phrase) can be composed of either a ProperNoun or
NP
a determiner (Det) followed by a Nominal; a Nominal in turn can consist of one or

CONTEXT-FREE GRAMMARS
more Nouns.
NP → Det Nominal
NP → ProperNoun
Nominal → Noun | Nominal Noun
Context-free rules can be hierarchically embedded, so we can combine the previous
rules with others, like the following, that express facts about the lexicon:
Det → a
Det → the
Noun → ﬂight
The symbols that are used in a CFG are divided into two classes. The symbols
that correspond to words in the language (“the”, “nightclub”) are called terminal
terminal
symbols; the lexicon is the set of rules that introduce these terminal symbols. The
symbols that express abstractions over these terminals are called non-terminals. In
non-terminal
each context-free rule, the item to the right of the arrow (→) is an ordered list of one
or more terminals and non-terminals; to the left of the arrow is a single non-terminal
symbol expressing some cluster or generalization. The non-terminal associated with
each word in the lexicon is its lexical category, or part of speech.
A CFG can be thought of in two ways: as a device for generating sentences
and as a device for assigning a structure to a given sentence. Viewing a CFG as a
generator, we can read the → arrow as “rewrite the symbol on the left with the string
of symbols on the right”.
So starting from the symbol:
NP
we can use our ﬁrst rule to rewrite NP as:
Det Nominal
and then rewrite Nominal as:
Noun
and ﬁnally rewrite these parts-of-speech as:
a ﬂight
We say the string a ﬂight can be derived from the non-terminal NP. Thus, a CFG
can be used to generate a set of strings. This sequence of rule expansions is called a
derivation of the string of words. It is common to represent a derivation by a parse
derivation
tree (commonly shown inverted with the root at the top). Figure . shows the tree
parse tree
representation of this derivation.
NP
Nom
Det
Noun
ﬂight
Figure .
A parse tree for “a ﬂight”.
In the parse tree shown in Fig. ., we can say that the node NP dominates
dominates
all the nodes in the tree (Det, Nom, Noun, a, ﬂight). We can say further that it
immediately dominates the nodes Det and Nom.
The formal language deﬁned by a CFG is the set of strings that are derivable
from the designated start symbol. Each grammar must have one designated start
start symbol
When talking about these rules we can pronounce the rightarrow → as “goes to”, and so we might
read the ﬁrst rule above as “NP goes to Det Nominal”.

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
symbol, which is often called S. Since context-free grammars are often used to deﬁne
sentences, S is usually interpreted as the “sentence” node, and the set of strings that
are derivable from S is the set of sentences in some simpliﬁed version of English.
Let’s add a few additional rules to our inventory. The following rule expresses
the fact that a sentence can consist of a noun phrase followed by a verb phrase:
verb phrase
S → NP VP
I prefer a morning ﬂight
A verb phrase in English consists of a verb followed by assorted other things;
for example, one kind of verb phrase consists of a verb followed by a noun phrase:
VP → Verb NP
prefer a morning ﬂight
Or the verb may be followed by a noun phrase and a prepositional phrase:
VP → Verb NP PP
leave Boston in the morning
Or the verb phrase may have a verb followed by a prepositional phrase alone:
VP → Verb PP
leaving on Thursday
A prepositional phrase generally has a preposition followed by a noun phrase.
For example, a common type of prepositional phrase in the ATIS corpus is used to
indicate location or direction:
PP → Preposition NP
from Los Angeles
The NP inside a PP need not be a location; PPs are often used with times and
dates, and with other nouns as well; they can be arbitrarily complex. Here are ten
examples from the ATIS corpus:
to Seattle
on these ﬂights
in Minneapolis
about the ground transportation in Chicago
on Wednesday
of the round trip ﬂight on United Airlines
in the evening
of the AP ﬁfty seven ﬂight
on the ninth of July
with a stopover in Nashville
Figure . gives a sample lexicon, and Fig. . summarizes the grammar rules
we’ve seen so far, which we’ll call L. Note that we can use the or-symbol | to
indicate that a non-terminal has alternate possible expansions.
Noun → ﬂights | ﬂight | breeze | trip | morning
Verb → is | prefer | like | need | want | ﬂy | do
Adjective → cheapest | non-stop | ﬁrst | latest
| other | direct
Pronoun → me | I | you | it
Proper-Noun → Alaska | Baltimore | Los Angeles
| Chicago | United | American
Determiner → the | a | an | this | these | that
Preposition → from | to | on | near | in
Conjunction → and | or | but
Figure .
The lexicon for L.
We can use this grammar to generate sentences of this “ATIS-language”. We
start with S, expand it to NP VP, then choose a random expansion of NP (let’s say, to

CONTEXT-FREE GRAMMARS
Grammar Rules
Examples
S → NP VP
I + want a morning ﬂight
NP → Pronoun
Proper-Noun
Los Angeles
Det Nominal
a + ﬂight
Nominal → Nominal Noun
morning + ﬂight
Noun
ﬂights
VP → Verb
do
Verb NP
want + a ﬂight
Verb NP PP
leave + Boston + in the morning
Verb PP
leaving + on Thursday
PP → Preposition NP
from + Los Angeles
Figure .
The grammar for L, with example phrases for each rule.
VP
NP
NP
Verb
Pro
prefer
Nom
Det
Noun
Nom
ﬂight
Noun
morning
Figure .
The parse tree for “I prefer a morning ﬂight” according to grammar L.
I), and a random expansion of VP (let’s say, to Verb NP), and so on until we generate
the string I prefer a morning ﬂight. Figure . shows a parse tree that represents a
complete derivation of I prefer a morning ﬂight.
We can also represent a parse tree in a more compact format called bracketed
notation; here is the bracketed representation of the parse tree of Fig. .:
bracketed
notation
[S [NP [Pro I]] [VP [V prefer] [NP [Det a] [Nom [N morning] [Nom [N ﬂight]]]]]]
A CFG like that of L deﬁnes a formal language. Sentences (strings of words)
that can be derived by a grammar are in the formal language deﬁned by that gram-
mar, and are called grammatical sentences. Sentences that cannot be derived by a
grammatical
given formal grammar are not in the language deﬁned by that grammar and are re-
ferred to as ungrammatical. This hard line between “in” and “out” characterizes all
ungrammatical
formal languages but is only a very simpliﬁed model of how natural languages really
work. This is because determining whether a given sentence is part of a given nat-
ural language (say, English) often depends on the context. In linguistics, the use of
formal languages to model natural languages is called generative grammar since
generative
grammar
the language is deﬁned by the set of possible sentences “generated” by the gram-
mar. (Note that this is a different sense of the word ‘generate’ than we in the use of

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
language models to generate text.)
Formal Deﬁnition of Context-Free Grammar
We conclude this section with a quick, formal description of a context-free gram-
mar and the language it generates. A context-free grammar G is deﬁned by four
parameters: N, Σ, R, S (technically it is a “-tuple”).
N a set of non-terminal symbols (or variables)
Σ a set of terminal symbols (disjoint from N)
R a set of rules or productions, each of the form A → β ,
where A is a non-terminal,
β is a string of symbols from the inﬁnite set of strings (Σ∪N)∗
a designated start symbol and a member of N
For the remainder of the book we adhere to the following conventions when dis-
cussing the formal properties of context-free grammars (as opposed to explaining
particular facts about English or other languages).
Capital letters like A, B, and S
Non-terminals
The start symbol
Lower-case Greek letters like α, β, and γ
Strings drawn from (Σ∪N)∗
Lower-case Roman letters like u, v, and w
Strings of terminals
A language is deﬁned through the concept of derivation. One string derives an-
other one if it can be rewritten as the second one by some series of rule applications.
More formally, following Hopcroft and Ullman (),
if A → β is a production of R and α and γ are any strings in the set
(Σ∪N)∗, then we say that αAγ directly derives αβγ, or αAγ ⇒ αβγ.
directly derives
Derivation is then a generalization of direct derivation:
Let α, α, ..., αm be strings in (Σ∪N)∗,m ≥ , such that
α ⇒ α,α ⇒ α,...,αm− ⇒ αm
We say that α derives αm, or α
∗⇒ αm.
derives
We can then formally deﬁne the language LG generated by a grammar G as the
set of strings composed of terminal symbols that can be derived from the designated
start symbol S.
LG = {w|w is in Σ∗ and S ∗⇒ w}
The problem of mapping from a string of words to its parse tree is called syn-
tactic parsing, as we’ll see in Section ..
syntactic
parsing
Treebanks
A corpus in which every sentence is annotated with a parse tree is called a treebank.
treebank

TREEBANKS
Treebanks play an important role in parsing as well as in linguistic investigations of
syntactic phenomena.
Treebanks are generally made by running a parser over each sentence and then
having the resulting parse hand-corrected by human linguists. Figure . shows
sentences from the Penn Treebank project, which includes various treebanks in
Penn Treebank
English, Arabic, and Chinese. The Penn Treebank part-of-speech tagset was deﬁned
in Chapter , but we’ll see minor formatting differences across treebanks. The use
of LISP-style parenthesized notation for trees is extremely common and resembles
the bracketed notation we saw earlier in (.). For those who are not familiar with
it we show a standard node-and-line tree representation in Fig. ..
((S
(NP-SBJ The/DT flight/NN )
(VP should/MD
(VP arrive/VB
(PP-TMP at/IN
(NP eleven/CD a.m/RB ))
(NP-TMP tomorrow/NN )))))
((S
(NP-SBJ (DT That)
(JJ cold) (, ,)
(JJ empty) (NN sky) )
(VP (VBD was)
(ADJP-PRD (JJ full)
(PP (IN of)
(NP (NN fire)
(CC and)
(NN light) ))))
(. .) ))
(a)
(b)
Figure .
Parses from the LDC Treebank for (a) Brown and (b) ATIS sentences.
VP
NP-SBJ
ADJP-PRD
VBD
NN
JJ
JJ
DT
was
sky
empty
cold
That
PP
JJ
full
NP
IN
of
NN
CC
NN
light
and
ﬁre
Figure .
The tree corresponding to the Brown corpus sentence in the previous ﬁgure.
The sentences in a treebank implicitly constitute a grammar of the language. For
example, from the parsed sentences in Fig. . we can extract the CFG rules shown
in Fig. . (with rule sufﬁxes (-SBJ) stripped for simplicity). The grammar used
to parse the Penn Treebank is very ﬂat, resulting in very many rules. For example,

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
Grammar
Lexicon
S → NP VP .
DT → the | that
S → NP VP
JJ → cold | empty | full
NP → DT NN
NN → sky | ﬁre | light | ﬂight | tomorrow
NP → NN CC NN
CC → and
NP → DT JJ , JJ NN
IN → of | at
NP → NN
CD → eleven
VP → MD VP
RB → a.m.
VP → VBD ADJP
VB → arrive
VP → MD VP
VBD → was | said
VP → VB PP NP
MD → should | would
ADJP → JJ PP
PP → IN NP
PP → IN NP RB
Figure .
CFG grammar rules and lexicon from the treebank sentences in Fig. ..
among the approximately , different rules for expanding VPs are separate rules
for PP sequences of any length and every possible arrangement of verb arguments:
VP → VBD PP
VP → VBD PP PP
VP → VBD PP PP PP
VP → VBD PP PP PP PP
VP → VB ADVP PP
VP → VB PP ADVP
VP → ADVP VB PP
Grammar Equivalence and Normal Form
A formal language is deﬁned as a (possibly inﬁnite) set of strings of words. This sug-
gests that we could ask if two grammars are equivalent by asking if they generate the
same set of strings. In fact, it is possible to have two distinct context-free grammars
generate the same language. We say that two grammars are strongly equivalent if
strongly
equivalent
they generate the same set of strings and if they assign the same phrase structure
to each sentence (allowing merely for renaming of the non-terminal symbols). Two
grammars are weakly equivalent if they generate the same set of strings but do not
weakly
equivalent
assign the same phrase structure to each sentence.
It is sometimes useful to have a normal form for grammars, in which each of
normal form
the productions takes a particular form. For example, a context-free grammar is in
Chomsky normal form (CNF) (Chomsky, ) if it is ϵ-free and if in addition
Chomsky
normal form
each production is either of the form A → B C or A → a. That is, the right-hand side
of each rule either has two non-terminal symbols or one terminal symbol. Chomsky
normal form grammars are binary branching, that is they have binary trees (down
binary
branching
to the prelexical nodes). We make use of this binary branching property in the CKY
parsing algorithm in Chapter .
Any context-free grammar can be converted into a weakly equivalent Chomsky
normal form grammar. For example, a rule of the form
A → B C D
can be converted into the following two CNF rules (Exercise . asks the reader to

AMBIGUITY
Grammar
Lexicon
S → NP VP
Det → that | this | the | a
S → Aux NP VP
Noun → book | ﬂight | meal | money
S → VP
Verb → book | include | prefer
NP → Pronoun
Pronoun → I | she | me
NP → Proper-Noun
Proper-Noun → Houston | NWA
NP → Det Nominal
Aux → does
Nominal → Noun
Preposition → from | to | on | near | through
Nominal → Nominal Noun
Nominal → Nominal PP
VP → Verb
VP → Verb NP
VP → Verb NP PP
VP → Verb PP
VP → VP PP
PP → Preposition NP
Figure .
The L miniature English grammar and lexicon.
formulate the complete algorithm):
A → B X
X → C D
Sometimes using binary branching can actually produce smaller grammars. For
example, the sentences that might be characterized as
VP -> VBD NP PP*
are represented in the Penn Treebank by this series of rules:
VP → VBD NP PP
VP → VBD NP PP PP
VP → VBD NP PP PP PP
VP → VBD NP PP PP PP PP
but could also be generated by the following two-rule grammar:
VP → VBD NP PP
VP → VP PP
The generation of a symbol A with a potentially inﬁnite sequence of symbols B with
a rule of the form A → A B is known as Chomsky-adjunction.
Chomsky-
adjunction
Ambiguity
Ambiguity is the most serious problem faced by syntactic parsers. Chapter  intro-
duced the notions of part-of-speech ambiguity and part-of-speech disambigua-
tion. Here, we introduce a new kind of ambiguity, called structural ambiguity,
structural
ambiguity
illustrated with a new toy grammar L, shown in Figure ., which adds a few
rules to the L grammar from the last chapter.
Structural ambiguity occurs when the grammar can assign more than one parse
to a sentence. Groucho Marx’s well-known line as Captain Spaulding in Animal

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
VP
VP
NP
NP
NP
PP
Verb
Pronoun
Pronoun
VP
in my pajamas
shot
Nominal
Det
NP
Verb
an
shot
PP
Nominal
Nominal
Det
in my pajamas
an
Noun
Noun
elephant
elephant
Figure .
Two parse trees for an ambiguous sentence. The parse on the left corresponds to the humorous
reading in which the elephant is in the pajamas, the parse on the right corresponds to the reading in which
Captain Spaulding did the shooting in his pajamas.
Crackers is ambiguous because the phrase in my pajamas can be part of the NP
headed by elephant or a part of the verb phrase headed by shot. Figure . illus-
trates these two analyses of Marx’s line using rules from L.
Structural ambiguity, appropriately enough, comes in many forms. Two common
kinds of ambiguity are attachment ambiguity and coordination ambiguity. A
sentence has an attachment ambiguity if a particular constituent can be attached to
attachment
ambiguity
the parse tree at more than one place. The Groucho Marx sentence is an example
of PP-attachment ambiguity: the preposition phrase can be attached either as part
PP-attachment
ambiguity
of the NP or as part of the VP. Various kinds of adverbial phrases are also subject
to this kind of ambiguity. For instance, in the following example the gerundive-VP
ﬂying to Paris can be part of a gerundive sentence whose subject is the Eiffel Tower
or it can be an adjunct modifying the VP headed by saw:
(.) We saw the Eiffel Tower ﬂying to Paris.
In coordination ambiguity phrases can be conjoined by a conjunction like and.
coordination
ambiguity
For example, the phrase old men and women can be bracketed as [old [men and
women]], referring to old men and old women, or as [old men] and [women], in
which case it is only the men who are old. These ambiguities combine in complex
ways in real sentences, like the following news sentence from the Brown corpus:
(.) President Kennedy today pushed aside other White House business to
devote all his time and attention to working on the Berlin crisis address he
will deliver tomorrow night to the American people over nationwide
television and radio.
This sentence has a number of ambiguities, although since they are semantically
unreasonable, it requires a careful reading to see them. The last noun phrase could be
parsed [nationwide [television and radio]] or [[nationwide television] and radio].
The direct object of pushed aside should be other White House business but could
also be the bizarre phrase [other White House business to devote all his time and
attention to working] (i.e., a structure like Kennedy afﬁrmed [his intention to propose
a new budget to address the deﬁcit]). Then the phrase on the Berlin crisis address he

CKY PARSING: A DYNAMIC PROGRAMMING APPROACH
will deliver tomorrow night to the American people could be an adjunct modifying
the verb pushed. A PP like over nationwide television and radio could be attached
to any of the higher VPs or NPs (e.g., it could modify people or night).
The fact that there are many grammatically correct but semantically unreason-
able parses for naturally occurring sentences is an irksome problem that affects all
parsers. Fortunately, the CKY algorithm below is designed to efﬁciently handle
structural ambiguities. And as we’ll see in the following section, we can augment
CKY with neural methods to choose a single correct parse by syntactic disambigua-
tion.
syntactic
disambiguation
CKY Parsing: A Dynamic Programming Approach
Dynamic programming provides a powerful framework for addressing the prob-
lems caused by ambiguity in grammars. Recall that a dynamic programming ap-
proach systematically ﬁlls in a table of solutions to subproblems. The complete
table has the solution to all the subproblems needed to solve the problem as a whole.
In the case of syntactic parsing, these subproblems represent parse trees for all the
constituents detected in the input.
The dynamic programming advantage arises from the context-free nature of our
grammar rules—once a constituent has been discovered in a segment of the input we
can record its presence and make it available for use in any subsequent derivation
that might require it. This provides both time and storage efﬁciencies since subtrees
can be looked up in a table, not reanalyzed. This section presents the Cocke-Kasami-
Younger (CKY) algorithm, the most widely used dynamic-programming based ap-
proach to parsing. Chart parsing (Kaplan , Kay ) is a related approach,
and dynamic programming methods are often referred to as chart parsing methods.
chart parsing
Conversion to Chomsky Normal Form
The CKY algorithm requires grammars to ﬁrst be in Chomsky Normal Form (CNF).
Recall from Section . that grammars in CNF are restricted to rules of the form
A → B C or A → w. That is, the right-hand side of each rule must expand either to
two non-terminals or to a single terminal. Restricting a grammar to CNF does not
lead to any loss in expressiveness, since any context-free grammar can be converted
into a corresponding CNF grammar that accepts exactly the same set of strings as
the original grammar.
Let’s start with the process of converting a generic CFG into one represented in
CNF. Assuming we’re dealing with an ϵ-free grammar, there are three situations we
need to address in any generic grammar: rules that mix terminals with non-terminals
on the right-hand side, rules that have a single non-terminal on the right-hand side,
and rules in which the length of the right-hand side is greater than .
The remedy for rules that mix terminals and non-terminals is to simply introduce
a new dummy non-terminal that covers only the original terminal. For example, a
rule for an inﬁnitive verb phrase such as INF-VP → to VP would be replaced by the
two rules INF-VP → TO VP and TO → to.
Rules with a single non-terminal on the right are called unit productions. We
Unit
productions
can eliminate unit productions by rewriting the right-hand side of the original rules
with the right-hand side of all the non-unit production rules that they ultimately lead
to. More formally, if A ∗⇒ B by a chain of one or more unit productions and B → γ

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
is a non-unit production in our grammar, then we add A → γ for each such rule in
the grammar and discard all the intervening unit productions. As we demonstrate
with our toy grammar, this can lead to a substantial ﬂattening of the grammar and a
consequent promotion of terminals to fairly high levels in the resulting trees.
Rules with right-hand sides longer than  are normalized through the introduc-
tion of new non-terminals that spread the longer sequences over several new rules.
Formally, if we have a rule like
A → B C γ
we replace the leftmost pair of non-terminals with a new non-terminal and introduce
a new production, resulting in the following new rules:
A → X γ
X → B C
In the case of longer right-hand sides, we simply iterate this process until the of-
fending rule has been replaced by rules of length . The choice of replacing the
leftmost pair of non-terminals is purely arbitrary; any systematic scheme that results
in binary rules would sufﬁce.
In our current grammar, the rule S → Aux NP VP would be replaced by the two
rules S → X VP and X → Aux NP.
The entire conversion process can be summarized as follows:
. Copy all conforming rules to the new grammar unchanged.
. Convert terminals within rules to dummy non-terminals.
. Convert unit productions.
. Make all rules binary and add them to new grammar.
Figure . shows the results of applying this entire conversion procedure to
the L grammar introduced earlier on page . Note that this ﬁgure doesn’t show
the original lexical rules; since these original lexical rules are already in CNF, they
all carry over unchanged to the new grammar. Figure . does, however, show
the various places where the process of eliminating unit productions has, in effect,
created new lexical rules. For example, all the original verbs have been promoted to
both VPs and to Ss in the converted grammar.
CKY Recognition
With our grammar now in CNF, each non-terminal node above the part-of-speech
level in a parse tree will have exactly two daughters. A two-dimensional matrix can
be used to encode the structure of an entire tree. For a sentence of length n, we will
work with the upper-triangular portion of an (n+)×(n+) matrix. Each cell [i, j]
in this matrix contains the set of non-terminals that represent all the constituents that
span positions i through j of the input. Since our indexing scheme begins with , it’s
natural to think of the indexes as pointing at the gaps between the input words (as in
Book  that  ﬂight ). These gaps are often called fenceposts, on the metaphor of
fenceposts
the posts between segments of fencing. It follows then that the cell that represents
the entire input resides in position [,n] in the matrix.
Since each non-terminal entry in our table has two daughters in the parse, it fol-
lows that for each constituent represented by an entry [i, j], there must be a position
in the input, k, where it can be split into two parts such that i < k < j. Given such

CKY PARSING: A DYNAMIC PROGRAMMING APPROACH
L Grammar
L in CNF
S → NP VP
S → NP VP
S → Aux NP VP
S → X VP
X → Aux NP
S → VP
S → book | include | prefer
S → Verb NP
S → X PP
S → Verb PP
S → VP PP
NP → Pronoun
NP → I | she | me
NP → Proper-Noun
NP → TWA | Houston
NP → Det Nominal
NP → Det Nominal
Nominal → Noun
Nominal → book | ﬂight | meal | money
Nominal → Nominal Noun
Nominal → Nominal Noun
Nominal → Nominal PP
Nominal → Nominal PP
VP → Verb
VP → book | include | prefer
VP → Verb NP
VP → Verb NP
VP → Verb NP PP
VP → X PP
X → Verb NP
VP → Verb PP
VP → Verb PP
VP → VP PP
VP → VP PP
PP → Preposition NP
PP → Preposition NP
Figure .
L Grammar and its conversion to CNF. Note that although they aren’t shown
here, all the original lexical entries from L carry over unchanged as well.
a position k, the ﬁrst constituent [i,k] must lie to the left of entry [i, j] somewhere
along row i, and the second entry [k, j] must lie beneath it, along column j.
To make this more concrete, consider the following example with its completed
parse matrix, shown in Fig. ..
(.) Book the ﬂight through Houston.
The superdiagonal row in the matrix contains the parts of speech for each word in
the input. The subsequent diagonals above that superdiagonal contain constituents
that cover all the spans of increasing length in the input.
Given this setup, CKY recognition consists of ﬁlling the parse table in the right
way. To do this, we’ll proceed in a bottom-up fashion so that at the point where we
are ﬁlling any cell [i, j], the cells containing the parts that could contribute to this
entry (i.e., the cells to the left and the cells below) have already been ﬁlled. The
algorithm given in Fig. . ﬁlls the upper-triangular matrix a column at a time
working from left to right, with each column ﬁlled from bottom to top, as the right
side of Fig. . illustrates. This scheme guarantees that at each point in time we
have all the information we need (to the left, since all the columns to the left have
already been ﬁlled, and below since we’re ﬁlling bottom to top). It also mirrors on-
line processing, since ﬁlling the columns from left to right corresponds to processing
each word one at a time.
The outermost loop of the algorithm given in Fig. . iterates over the columns,
and the second loop iterates over the rows, from the bottom up. The purpose of the
innermost loop is to range over all the places where a substring spanning i to j in
the input might be split in two. As k ranges over the places where the string can be
split, the pairs of cells we consider move, in lockstep, to the right along row i and
down along column j. Figure . illustrates the general case of ﬁlling cell [i, j].

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
Book
the
flight
through
Houston
S,VP,X
S,VP,X
S, VP, Verb,
Nominal,
Noun
Det
NP
NP
Nominal
Nominal,
Noun
Prep
PP
NP,
Proper-
Noun
Figure .
Completed parse table for Book the ﬂight through Houston.
function CKY-PARSE(words, grammar) returns table
for j←from  to LENGTH(words) do
for all {A | A → words[ j] ∈ grammar}
table[j −, j]←table[ j −, j] ∪ A
for i←from j − down to  do
for k←i+ to j − do
for all {A | A → BC ∈ grammar and B ∈ table[i,k] and C ∈ table[k, j]}
table[i,j]←table[i,j] ∪ A
Figure .
The CKY algorithm.
At each such split, the algorithm considers whether the contents of the two cells can
be combined in a way that is sanctioned by a rule in the grammar. If such a rule
exists, the non-terminal on its left-hand side is entered into the table.
Figure . shows how the ﬁve cells of column  of the table are ﬁlled after the
word Houston is read. The arrows point out the two spans that are being used to add
an entry to the table. Note that the action in cell [,] indicates the presence of three
alternative parses for this input, one where the PP modiﬁes the ﬂight, one where
it modiﬁes the booking, and one that captures the second argument in the original
VP → Verb NP PP rule, now captured indirectly with the VP → X PP rule.
CKY Parsing
The algorithm given in Fig. . is a recognizer, not a parser. That is, it can tell
us whether a valid parse exists for a given sentence based on whether or not if ﬁnds
an S in cell [,n], but it can’t provide the derivation, which is the actual job for a
parser. To turn it into a parser capable of returning all possible parses for a given
input, we can make two simple changes to the algorithm: the ﬁrst change is to
augment the entries in the table so that each non-terminal is paired with pointers to
the table entries from which it was derived (more or less as shown in Fig. .), the
second change is to permit multiple versions of the same non-terminal to be entered
into the table (again as shown in Fig. .). With these changes, the completed
table contains all the possible parses for a given input. Returning an arbitrary single

CKY PARSING: A DYNAMIC PROGRAMMING APPROACH
[,n]
[i,j]
[i,i+]
[i,i+]
[i,j-]
[i,j-]
[i+,j]
[i+,j]
[j-,j]
[j-,j]
[n-, n]
Figure .
All the ways to ﬁll the [i, j]th cell in the CKY table.
parse consists of choosing an S from cell [,n] and then recursively retrieving its
component constituents from the table. Of course, instead of returning every parse
for a sentence, we usually want just the best parse; we’ll see how to do that in the
next section.
CKY in Practice
Finally, we should note that while the restriction to CNF does not pose a problem
theoretically, it does pose some non-trivial problems in practice. The returned CNF
trees may not be consistant with the original grammar built by the grammar devel-
opers, and will complicate any syntax-driven approach to semantic analysis.
One approach to getting around these problems is to keep enough information
around to transform our trees back to the original grammar as a post-processing step
of the parse. This is trivial in the case of the transformation used for rules with length
greater than . Simply deleting the new dummy non-terminals and promoting their
daughters restores the original tree.
In the case of unit productions, it turns out to be more convenient to alter the ba-
sic CKY algorithm to handle them directly than it is to store the information needed
to recover the correct trees. Exercise . asks you to make this change. Many of
the probabilistic parsers presented in Appendix C use the CKY algorithm altered in

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
Book
the
flight
through
Houston
Book
the
flight
through
Houston
S,VP,X
S,VP,X
S, VP, Verb,
Nominal,
Noun
S, VP, Verb,
Nominal,
Noun
Det
NP
Det
NP
NP
Nominal
Nominal,
Noun
Nominal,
Noun
Prep
Prep
PP
NP,
Proper-
Noun
NP,
Proper-
Noun
Book
the
flight
through
Houston
Book
the
flight
through
Houston
S,VP,X
S,VP,X
S, VP, Verb,
Nominal,
Noun
S, VP, Verb,
Nominal,
Noun
Det
NP
NP
Det
NP
NP
Nominal
Nominal
Nominal,
Noun
Nominal,
Noun
Prep
PP
Prep
PP
NP,
Proper-
Noun
NP,
Proper-
Noun
Book
the
flight
through
Houston
S,VP, X
S, VP, Verb,
Nominal,
Noun
S, VP
S,
VP,
Det
NP
NP
Nominal
Nominal,
Noun
Prep
PP
NP,
Proper-
Noun
Figure .
Filling the cells of column  after reading the word Houston.

SPAN-BASED NEURAL CONSTITUENCY PARSING
just this manner.
Span-Based Neural Constituency Parsing
While the CKY parsing algorithm we’ve seen so far does great at enumerating all
the possible parse trees for a sentence, it has a large problem: it doesn’t tell us which
parse is the correct one! That is, it doesn’t disambiguate among the possible parses.
To solve the disambiguation problem we’ll use a simple neural extension of the
CKY algorithm. The intuition of such parsing algorithms (often called span-based
constituency parsing, or neural CKY), is to train a neural classiﬁer to assign a
score to each constituent, and then use a modiﬁed version of CKY to combine these
constituent scores to ﬁnd the best-scoring parse tree.
Here we’ll describe a version of the algorithm from Kitaev et al. (). This
parser learns to map a span of words to a constituent, and, like CKY, hierarchically
combines larger and larger spans to build the parse-tree bottom-up. But unlike clas-
sic CKY, this parser doesn’t use the hand-written grammar to constrain what con-
stituents can be combined, instead just relying on the learned neural representations
of spans to encode likely combinations.
Computing Scores for a Span
Let’s begin by considering just the constituent (we’ll call it a span) that lies between
span
fencepost positions i and j with non-terminal symbol label l. We’ll build a system
to assign a score s(i, j,l) to this constituent span.
NP
CKY for computing best parse
MLP
Compute score for span
Represent span
hj-hi
i=
j=
postprocessing layers
map back to words
ENCODER
map to subwords
[START] Book
the
flight through Houston [END]
Figure .
A simpliﬁed outline of computing the span score for the span the ﬂight with
the label NP.
Fig. . sketches the architecture. The input word tokens are embedded by

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
passing them through a pretrained language model like BERT. Because BERT oper-
ates on the level of subword (wordpiece) tokens rather than words, we’ll ﬁrst need to
convert the BERT outputs to word representations. One standard way of doing this
is to simply use the ﬁrst subword unit as the representation for the entire word; us-
ing the last subword unit, or the sum of all the subword units are also common. The
embeddings can then be passed through some postprocessing layers; Kitaev et al.
(), for example, use  Transformer layers.
The resulting word encoder outputs yt are then used to compute a span score.
First, we must map the word encodings (indexed by word positions) to span encod-
ings (indexed by fenceposts). We do this by representing each fencepost with two
separate values; the intuition is that a span endpoint to the right of a word represents
different information than a span endpoint to the left of a word. We convert each
word output yt into a (leftward-pointing) value for spans ending at this fencepost,
←−y t, and a (rightward-pointing) value −→y t for spans beginning at this fencepost, by
splitting yt into two halves. Each span then stretches from one double-vector fence-
post to another, as in the following representation of the ﬂight, which is span(,):
START
Book
the
ﬂight
through
y ←−
y ←−
y ←−
y ←−
y ←−
span(,)
A traditional way to represent a span, developed originally for RNN-based models
(Wang and Chang, ), but extended also to Transformers, is to take the differ-
ence between the embeddings of its start and end, i.e., representing span (i, j) by
subtracting the embedding of i from the embedding of j. Here we represent a span
by concatenating the difference of each of its fencepost components:
v(i, j) = [−→
yj −−→
yi ; ←−−
y j+ −←−−
yi+]
The span vector v is then passed through an MLP span classiﬁer, with two fully-
connected layers and one ReLU activation function, whose output dimensionality is
the number of possible non-terminal labels:
s(i, j,) = W ReLU(LayerNorm(Wv(i, j)))
The MLP then outputs a score for each possible non-terminal.
Integrating Span Scores into a Parse
Now we have a score for each labeled constituent span s(i, j,l). But we need a score
for an entire parse tree. Formally a tree T is represented as a set of |T| such labeled
spans, with the tth span starting at position it and ending at position jt, with label lt:
T = {(it, jt,lt) : t = ,...,|T|}
Thus once we have a score for each span, the parser can compute a score for the
whole tree s(T) simply by summing over the scores of its constituent spans:
(i, j,l)∈T
s(i, j,l)
s(T) =

EVALUATING PARSERS
And we can choose the ﬁnal parse tree as the tree with the maximum score:
ˆT = argmax
s(T)
The simplest method to produce the most likely parse is to greedily choose the
highest scoring label for each span. This greedy method is not guaranteed to produce
a tree, since the best label for a span might not ﬁt into a complete tree. In practice,
however, the greedy method tends to ﬁnd trees; in their experiments Gaddy et al.
() ﬁnds that % of predicted bracketings form valid trees.
Nonetheless it is more common to use a variant of the CKY algorithm to ﬁnd the
full parse. The variant deﬁned in Gaddy et al. () works as follows. Let’s deﬁne
sbest(i, j) as the score of the best subtree spanning (i, j). For spans of length one, we
choose the best label:
sbest(i,i+) = max
s(i,i+,l)
For other spans (i, j), the recursion is:
sbest(i, j) = max
s(i, j,l)
+ max
k [sbest(i,k)+sbest(k, j)]
Note that the parser is using the max label for span (i, j) + the max labels for spans
(i,k) and (k, j) without worrying about whether those decisions make sense given a
grammar. The role of the grammar in classical parsing is to help constrain possible
combinations of constituents (NPs like to be followed by VPs). By contrast, the
neural model seems to learn these kinds of contextual constraints during its mapping
from spans to non-terminals.
For more details on span-based parsing, including the margin-based training al-
gorithm, see Stern et al. (), Gaddy et al. (), Kitaev and Klein (), and
Kitaev et al. ().
Evaluating Parsers
The standard tool for evaluating parsers that assign a single parse tree to a sentence
is the PARSEVAL metrics (Black et al., ). The PARSEVAL metric measures
PARSEVAL
how much the constituents in the hypothesis parse tree look like the constituents in a
hand-labeled, reference parse. PARSEVAL thus requires a human-labeled reference
(or “gold standard”) parse tree for each sentence in the test set; we generally draw
these reference parses from a treebank like the Penn Treebank.
A constituent in a hypothesis parse Ch of a sentence s is labeled correct if there
is a constituent in the reference parse Cr with the same starting point, ending point,
and non-terminal symbol. We can then measure the precision and recall just as for
tasks we’ve seen already like named entity tagging:
labeled recall: = # of correct constituents in hypothesis parse of s
# of total constituents in reference parse of s
labeled precision: = # of correct constituents in hypothesis parse of s
# of total constituents in hypothesis parse of s

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
S(dumped)
VP(dumped)
NP(workers)
PP(into)
NNS(workers)
NP(sacks)
VBD(dumped)
workers
dumped
NP(bin)
NNS(sacks)
into
sacks
NN(bin)
DT(a)
bin
Figure .
A lexicalized tree from Collins ().
As usual, we often report a combination of the two, F:
F = PR
P+R
We additionally use a new metric, crossing brackets, for each sentence s:
cross-brackets: the number of constituents for which the reference parse has a
bracketing such as ((A B) C) but the hypothesis parse has a bracketing such
as (A (B C)).
For comparing parsers that use different grammars, the PARSEVAL metric in-
cludes a canonicalization algorithm for removing information likely to be grammar-
speciﬁc (auxiliaries, pre-inﬁnitival “to”, etc.) and for computing a simpliﬁed score
(Black et al., ). The canonical implementation of the PARSEVAL metrics is
called evalb (Sekine and Collins, ).
evalb
Heads and Head-Finding
Syntactic constituents can be associated with a lexical head; N is the head of an NP,
V is the head of a VP. This idea of a head for each constituent dates back to Bloom-
ﬁeld , and is central to the dependency grammars and dependency parsing we’ll
introduce in Chapter . Indeed, heads can be used as a way to map between con-
stituency and dependency parses. Heads are also important in probabilistic pars-
ing (Appendix C) and in constituent-based grammar formalisms like Head-Driven
Phrase Structure Grammar (Pollard and Sag, )..
In one simple model of lexical heads, each context-free rule is associated with
a head (Charniak , Collins ). The head is the word in the phrase that is
grammatically the most important. Heads are passed up the parse tree; thus, each
non-terminal in a parse tree is annotated with a single word, which is its lexical head.
Figure . shows an example of such a tree from Collins (), in which each
non-terminal is annotated with its head.
For the generation of such a tree, each CFG rule must be augmented to identify
one right-side constituent to be the head child. The headword for a node is then set to
the headword of its head child. Choosing these head children is simple for textbook
examples (NN is the head of NP) but is complicated and indeed controversial for

SUMMARY
most phrases. (Should the complementizer to or the verb be the head of an inﬁnite
verb phrase?) Modern linguistic theories of syntax generally include a component
that deﬁnes heads (see, e.g., (Pollard and Sag, )).
An alternative approach to ﬁnding a head is used in most practical computational
systems. Instead of specifying head rules in the grammar itself, heads are identiﬁed
dynamically in the context of trees for speciﬁc sentences. In other words, once
a sentence is parsed, the resulting tree is walked to decorate each node with the
appropriate head. Most current systems rely on a simple set of handwritten rules,
such as a practical one for Penn Treebank grammars given in Collins () but
developed originally by Magerman (). For example, the rule for ﬁnding the
head of an NP is as follows (Collins, , p. ):
If the last word is tagged POS, return last-word.
Else search from right to left for the ﬁrst child which is an NN, NNP, NNPS, NX, POS,
or JJR.
Else search from left to right for the ﬁrst child which is an NP.
Else search from right to left for the ﬁrst child which is a $, ADJP, or PRN.
Else search from right to left for the ﬁrst child which is a CD.
Else search from right to left for the ﬁrst child which is a JJ, JJS, RB or QP.
Else return the last word
Selected other rules from this set are shown in Fig. .. For example, for VP
rules of the form VP → Y  Yn, the algorithm would start from the left of Y
Yn looking for the ﬁrst Yi of type TO; if no TOs are found, it would search for the
ﬁrst Yi of type VBD; if no VBDs are found, it would search for a VBN, and so on.
See Collins () for more details.
Parent
Direction
Priority List
ADJP
Left
NNS QP NN $ ADVP JJ VBN VBG ADJP JJR NP JJS DT FW RBR RBS
SBAR RB
ADVP
Right
RB RBR RBS FW ADVP TO CD JJR JJ IN NP JJS NN
PRN
Left
PRT
Right
RP
QP
Left
$ IN NNS NN JJ RB DT CD NCD QP JJR JJS
Left
TO IN VP S SBAR ADJP UCP NP
SBAR
Left
WHNP WHPP WHADVP WHADJP IN DT S SQ SINV SBAR FRAG
VP
Left
TO VBD VBN MD VBZ VB VBG VBP VP ADJP NN NNS NP
Figure .
Some head rules from Collins (). The head rules are also called a head percolation table.
Summary
This chapter introduced constituency parsing. Here’s a summary of the main points:
In many languages, groups of consecutive words act as a group or a con-
stituent, which can be modeled by context-free grammars (which are also
known as phrase-structure grammars).
A context-free grammar consists of a set of rules or productions, expressed
over a set of non-terminal symbols and a set of terminal symbols. Formally,
a particular context-free language is the set of strings that can be derived
from a particular context-free grammar.

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
Structural ambiguity is a signiﬁcant problem for parsers. Common sources
of structural ambiguity include PP-attachment and coordination ambiguity.
Dynamic programming parsing algorithms, such as CKY, use a table of
partial parses to efﬁciently parse ambiguous sentences.
CKY restricts the form of the grammar to Chomsky normal form (CNF).
The basic CKY algorithm compactly represents all possible parses of the sen-
tence but doesn’t choose a single best parse.
Choosing a single parse from all possible parses (disambiguation) can be
done by neural constituency parsers.
Span-based neural constituency parses train a neural classiﬁer to assign a score
to each constituent, and then use a modiﬁed version of CKY to combine these
constituent scores to ﬁnd the best-scoring parse tree.
Parsers are evaluated with three metrics: labeled recall, labeled precision,
and cross-brackets.
Partial parsing and chunking are methods for identifying shallow syntac-
tic constituents in a text. They are solved by sequence models trained on
syntactically-annotated data.
Bibliographical and Historical Notes
According to Percival (), the idea of breaking up a sentence into a hierarchy of
constituents appeared in the V¨olkerpsychologie of the groundbreaking psychologist
Wilhelm Wundt (Wundt, ):
...den sprachlichen Ausdruck f¨ur die willk¨urliche Gliederung einer Ge-
sammtvorstellung in ihre in logische Beziehung zueinander gesetzten
Bestandteile
[the linguistic expression for the arbitrary division of a total idea
into its constituent parts placed in logical relations to one another]
Wundt’s idea of constituency was taken up into linguistics by Leonard Bloom-
ﬁeld in his early book An Introduction to the Study of Language (Bloomﬁeld, ).
By the time of his later book, Language (Bloomﬁeld, ), what was then called
“immediate-constituent analysis” was a well-established method of syntactic study
in the United States. By contrast, traditional European grammar, dating from the
Classical period, deﬁned relations between words rather than constituents, and Eu-
ropean syntacticians retained this emphasis on such dependency grammars, the sub-
ject of Chapter . (And indeed, both dependency and constituency grammars have
been in vogue in computational linguistics at different times).
American Structuralism saw a number of speciﬁc deﬁnitions of the immediate
constituent, couched in terms of their search for a “discovery procedure”: a method-
ological algorithm for describing the syntax of a language. In general, these attempt
to capture the intuition that “The primary criterion of the immediate constituent
is the degree in which combinations behave as simple units” (Bazell, /, p.
). The most well known of the speciﬁc deﬁnitions is Harris’ idea of distributional
similarity to individual units, with the substitutability test. Essentially, the method
proceeded by breaking up a construction into constituents by attempting to substitute
simple structures for possible constituents—if a substitution of a simple form, say,

EXERCISES
man, was substitutable in a construction for a more complex set (like intense young
man), then the form intense young man was probably a constituent. Harris’s test was
the beginning of the intuition that a constituent is a kind of equivalence class.
The context-free grammar was a formalization of this idea of hierarchical
constituency deﬁned in Chomsky () and further expanded upon (and argued
against) in Chomsky () and Chomsky (/). Shortly after Chomsky’s
initial work, the context-free grammar was reinvented by Backus () and inde-
pendently by Naur et al. () in their descriptions of the ALGOL programming
language; Backus () noted that he was inﬂuenced by the productions of Emil
Post and that Naur’s work was independent of his (Backus’) own. After this early
work, a great number of computational models of natural language processing were
based on context-free grammars because of the early development of efﬁcient pars-
ing algorithms.
Dynamic programming parsing has a history of independent discovery. Ac-
cording to the late Martin Kay (personal communication), a dynamic programming
parser containing the roots of the CKY algorithm was ﬁrst implemented by John
Cocke in . Later work extended and formalized the algorithm, as well as prov-
ing its time complexity (Kay , Younger , Kasami ). The related well-
formed substring table (WFST) seems to have been independently proposed by
WFST
Kuno () as a data structure that stores the results of all previous computations
in the course of the parse. Based on a generalization of Cocke’s work, a similar
data structure had been independently described in Kay () (and Kay ). The
top-down application of dynamic programming to parsing was described in Earley’s
Ph.D. dissertation (Earley , Earley ). Sheil () showed the equivalence
of the WFST and the Earley algorithm. Norvig () shows that the efﬁciency of-
fered by dynamic programming can be captured in any language with a memoization
function (such as in LISP) simply by wrapping the memoization operation around a
simple top-down parser.
The earliest disambiguation algorithms for parsing were based on probabilistic
context-free grammars, ﬁrst worked out by Booth () and Salomaa (); see
probabilistic
context-free
grammars
Appendix C for more history. Neural methods were ﬁrst applied to parsing at around
the same time as statistical parsing methods were developed (Henderson, ). In
the earliest work neural networks were used to estimate some of the probabilities for
statistical constituency parsers (Henderson, , ; Emami and Jelinek, )
. The next decades saw a wide variety of neural parsing algorithms, including re-
cursive neural architectures (Socher et al., , ), encoder-decoder models
(Vinyals et al., ; Choe and Charniak, ), and the idea of focusing on spans
(Cross and Huang, ). For more on the span-based self-attention approach we
describe in this chapter see Stern et al. (), Gaddy et al. (), Kitaev and Klein
(), and Kitaev et al. (). See Chapter  for the parallel history of neural
dependency parsing.
The classic reference for parsing algorithms is Aho and Ullman (); although
the focus of that book is on computer languages, most of the algorithms have been
applied to natural language.
Exercises
. Implement the algorithm to convert arbitrary context-free grammars to CNF.

CHAPTER
CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING
Apply your program to the L grammar.
. Implement the CKY algorithm and test it with your converted L grammar.
. Rewrite the CKY algorithm given in Fig. . on page  so that it can
accept grammars that contain unit productions.
. Discuss how to augment a parser to deal with input that may be incorrect, for
example, containing spelling errors or mistakes arising from automatic speech
recognition.
. Implement the PARSEVAL metrics described in Section .. Next, use a
parser and a treebank, compare your metrics against a standard implementa-
tion. Analyze the errors in your approach.

Dependency Parsing
CHAPTER
Tout mot qui fait partie d’une phrase... Entre lui et ses voisins, l’esprit aperc¸oit
des connexions, dont l’ensemble forme la charpente de la phrase.
[Between each word in a sentence and its neighbors, the mind perceives con-
nections. These connections together form the scaffolding of the sentence.]
Lucien Tesni`ere. . ´El´ements de syntaxe structurale, A..§
The focus of the last chapter was on context-free grammars and constituent-
based representations. Here we present another important family of grammar for-
malisms called dependency grammars. In dependency formalisms, phrasal con-
dependency
grammars
stituents and phrase-structure rules do not play a direct role. Instead, the syntactic
structure of a sentence is described solely in terms of directed binary grammatical
relations between the words, as in the following dependency parse:
root
obj
det
nmod
nsubj
compound
case
I prefer the morning
ﬂight through Denver
Relations among the words are illustrated above the sentence with directed, labeled
arcs from heads to dependents. We call this a typed dependency structure because
typed
dependency
the labels are drawn from a ﬁxed inventory of grammatical relations. A root node
explicitly marks the root of the tree, the head of the entire structure.
Figure . on the next page shows the dependency analysis from (.) but vi-
sualized as a tree, alongside its corresponding phrase-structure analysis of the kind
given in the prior chapter. Note the absence of nodes corresponding to phrasal con-
stituents or lexical categories in the dependency parse; the internal structure of the
dependency parse consists solely of directed relations between words. These head-
dependent relationships directly encode important information that is often buried in
the more complex phrase-structure parses. For example, the arguments to the verb
prefer are directly linked to it in the dependency structure, while their connection
to the main verb is more distant in the phrase-structure tree. Similarly, morning
and Denver, modiﬁers of ﬂight, are linked to it directly in the dependency structure.
This fact that the head-dependent relations are a good proxy for the semantic rela-
tionship between predicates and their arguments is an important reason why depen-
dency grammars are currently more common than constituency grammars in natural
language processing.
Another major advantage of dependency grammars is their ability to deal with
languages that have a relatively free word order. For example, word order in Czech
free word order
can be much more ﬂexible than in English; a grammatical object might occur before
or after a location adverbial. A phrase-structure grammar would need a separate rule

CHAPTER
DEPENDENCY PARSING
prefer
ﬂight
VP
NP
Denver
morning
the
NP
Verb
Pro
prefer
Nom
Det
through
the
PP
Nom
NP
Noun
Nom
through
ﬂight
Pro
Noun
Denver
morning
Figure .
Dependency and constituent analyses for I prefer the morning ﬂight through Denver.
for each possible place in the parse tree where such an adverbial phrase could occur.
A dependency-based approach can have just one link type representing this particu-
lar adverbial relation; dependency grammar approaches can thus abstract away a bit
more from word order information.
In the following sections, we’ll give an inventory of relations used in dependency
parsing, discuss two families of parsing algorithms (transition-based, and graph-
based), and discuss evaluation.
Dependency Relations
The traditional linguistic notion of grammatical relation provides the basis for the
grammatical
relation
binary relations that comprise these dependency structures. The arguments to these
relations consist of a head and a dependent. The head plays the role of the central
head
dependent
organizing word, and the dependent as a kind of modiﬁer. The head-dependent rela-
tionship is made explicit by directly linking heads to the words that are immediately
dependent on them.
In addition to specifying the head-dependent pairs, dependency grammars allow
us to classify the kinds of grammatical relations, or grammatical function that the
grammatical
function
dependent plays with respect to its head. These include familiar notions such as
subject, direct object and indirect object. In English these notions strongly corre-
late with, but by no means determine, both position in a sentence and constituent
type and are therefore somewhat redundant with the kind of information found in
phrase-structure trees. However, in languages with more ﬂexible word order, the
information encoded directly in these grammatical relations is critical since phrase-
based constituent syntax provides little help.
Linguists have developed taxonomies of relations that go well beyond the famil-
iar notions of subject and object. While there is considerable variation from theory

DEPENDENCY RELATIONS
Clausal Argument Relations Description
NSUBJ
Nominal subject
OBJ
Direct object
IOBJ
Indirect object
CCOMP
Clausal complement
Nominal Modiﬁer Relations
Description
NMOD
Nominal modiﬁer
AMOD
Adjectival modiﬁer
APPOS
Appositional modiﬁer
DET
Determiner
CASE
Prepositions, postpositions and other case markers
Other Notable Relations
Description
CONJ
Conjunct
CC
Coordinating conjunction
Figure .
Some of the Universal Dependency relations (de Marneffe et al., ).
to theory, there is enough commonality that cross-linguistic standards have been
developed. The Universal Dependencies (UD) project (de Marneffe et al., ),
Universal
Dependencies
an open community effort to annotate dependencies and other aspects of grammar
across more than  languages, provides an inventory of  dependency relations.
Fig. . shows a subset of the UD relations and Fig. . provides some examples.
The motivation for all of the relations in the Universal Dependency scheme is
beyond the scope of this chapter, but the core set of frequently used relations can be
broken into two sets: clausal relations that describe syntactic roles with respect to a
predicate (often a verb), and modiﬁer relations that categorize the ways that words
can modify their heads.
Consider, for example, the following sentence:
root
obj
det
nmod
nsubj
compound
case
United canceled the morning
ﬂights to Houston
Here the clausal relations NSUBJ and DOBJ identify the subject and direct object of
the predicate cancel, while the NMOD, DET, and CASE relations denote modiﬁers of
the nouns ﬂights and Houston.
Dependency Formalisms
A dependency structure can be represented as a directed graph G = (V,A), consisting
of a set of vertices V, and a set of ordered pairs of vertices A, which we’ll call arcs.
For the most part we will assume that the set of vertices, V, corresponds exactly
to the set of words in a given sentence. However, they might also correspond to
punctuation, or when dealing with morphologically complex languages the set of
vertices might consist of stems and afﬁxes. The set of arcs, A, captures the head-
dependent and grammatical function relationships between the elements in V.
Different grammatical theories or formalisms may place further constraints on
these dependency structures. Among the more frequent restrictions are that the struc-
tures must be connected, have a designated root node, and be acyclic or planar. Of
most relevance to the parsing approaches discussed in this chapter is the common,

CHAPTER
DEPENDENCY PARSING
Relation
Examples with head and dependent
NSUBJ
United canceled the ﬂight.
OBJ
United diverted the ﬂight to Reno.
We booked her the ﬁrst ﬂight to Miami.
IOBJ
We booked her the ﬂight to Miami.
COMPOUND
We took the morning ﬂight.
NMOD
ﬂight to Houston.
AMOD
Book the cheapest ﬂight.
APPOS
United, a unit of UAL, matched the fares.
DET
The ﬂight was canceled.
Which ﬂight was delayed?
CONJ
We ﬂew to Denver and drove to Steamboat.
CC
We ﬂew to Denver and drove to Steamboat.
CASE
Book the ﬂight through Houston.
Figure .
Examples of some Universal Dependency relations.
computationally-motivated, restriction to rooted trees. That is, a dependency tree
dependency
tree
is a directed graph that satisﬁes the following constraints:
. There is a single designated root node that has no incoming arcs.
. With the exception of the root node, each vertex has exactly one incoming arc.
. There is a unique path from the root node to each vertex in V.
Taken together, these constraints ensure that each word has a single head, that the
dependency structure is connected, and that there is a single root node from which
one can follow a unique directed path to each of the words in the sentence.
Projectivity
The notion of projectivity imposes an additional constraint that is derived from the
order of the words in the input. An arc from a head to a dependent is said to be
projective if there is a path from the head to every word that lies between the head
projective
and the dependent in the sentence. A dependency tree is then said to be projective if
all the arcs that make it up are projective. All the dependency trees we’ve seen thus
far have been projective. There are, however, many valid constructions which lead
to non-projective trees, particularly in languages with relatively ﬂexible word order.
Consider the following example.
acl:relcl
root
obl
cop
obj
nsubj
det
det
nsubj
adv
JetBlue canceled our
ﬂight this morning which was already late
In this example, the arc from ﬂight to its modiﬁer late is non-projective since there
is no path from ﬂight to the intervening words this and morning. As we can see from
this diagram, projectivity (and non-projectivity) can be detected in the way we’ve
been drawing our trees. A dependency tree is projective if it can be drawn with
no crossing edges. Here there is no way to link ﬂight to its dependent late without
crossing the arc that links morning to its head.

DEPENDENCY RELATIONS
Our concern with projectivity arises from two related issues. First, the most
widely used English dependency treebanks were automatically derived from phrase-
structure treebanks through the use of head-ﬁnding rules. The trees generated in such
a fashion will always be projective, and hence will be incorrect when non-projective
examples like this one are encountered.
Second, there are computational limitations to the most widely used families of
parsing algorithms. The transition-based approaches discussed in Section . can
only produce projective trees, hence any sentences with non-projective structures
will necessarily contain some errors. This limitation is one of the motivations for
the more ﬂexible graph-based parsing approach described in Section ..
Dependency Treebanks
Treebanks play a critical role in the development and evaluation of dependency
parsers. They are used for training parsers, they act as the gold labels for evaluating
parsers, and they also provide useful information for corpus linguistics studies.
Dependency treebanks are created by having human annotators directly generate
dependency structures for a given corpus, or by hand-correcting the output of an
automatic parser. A few early treebanks were also based on using a deterministic
process to translate existing constituent-based treebanks into dependency trees.
The largest open community project for building dependency trees is the Univer-
sal Dependencies project at https://universaldependencies.org/ introduced
above, which currently has almost  dependency treebanks in more than  lan-
guages (de Marneffe et al., ). Here are a few UD examples showing dependency
trees for sentences in Spanish, Basque, and Mandarin Chinese:
punct
obl:tmod
obl
case
case
det
det
VERB
ADP DET NOUN ADP DET NUM PUNCT
Subiremos
el
tren
las
cinco
we-will-board
on
the
train
at
the
ﬁve
[Spanish] Subiremos al tren a las cinco. “We will be boarding the train at ﬁve.”(.)
nsubj
punct
obj
aux
NOUN
NOUN
VERB
AUX PUNCT
Ekaitzak
itsasontzia hondoratu
du
storm (Erg.) ship (Abs.)
sunk
has
[Basque] Ekaitzak itsasontzia hondoratu du. “The storm has sunk the ship.”(.)

CHAPTER
DEPENDENCY PARSING
adv
nsubj
obj:tmod
obj
advmod
compound:vv
ADV PRON
NOUN
ADV
VERB
VERB NOUN
昨天
but
yesterday only-then receive
arrive
letter
[Chinese] 但我昨天才收到信 “But I didn’t receive the letter until yesterday”(.)
Transition-Based Dependency Parsing
Our ﬁrst approach to dependency parsing is called transition-based parsing. This
transition-based
architecture draws on shift-reduce parsing, a paradigm originally developed for
analyzing programming languages (Aho and Ullman, ). In transition-based
parsing we’ll have a stack on which we build the parse, a buffer of tokens to be
parsed, and a parser which takes actions on the parse via a predictor called an oracle,
as illustrated in Fig. ..
Input buﬀer
wn
Dependency
Parser
LEFTARC
Relations
Action
RIGHTARC
Stack
Oracle
SHIFT
sn
Figure .
Basic transition-based parser. The parser examines the top two elements of the
stack and selects an action by consulting an oracle that examines the current conﬁguration.
The parser walks through the sentence left-to-right, successively shifting items
from the buffer onto the stack. At each time point we examine the top two elements
on the stack, and the oracle makes a decision about what transition to apply to build
the parse. The possible transitions correspond to the intuitive actions one might take
in creating a dependency tree by examining the words in a single pass over the input
from left to right (Covington, ):
Assign the current word as the head of some previously seen word,
Assign some previously seen word as the head of the current word,
Postpone dealing with the current word, storing it for later processing.
We’ll formalize this intuition with the following three transition operators that
will operate on the top two elements of the stack:
LEFTARC: Assert a head-dependent relation between the word at the top of
the stack and the second word; remove the second word from the stack.
RIGHTARC: Assert a head-dependent relation between the second word on
the stack and the word at the top; remove the top word from the stack;

TRANSITION-BASED DEPENDENCY PARSING
SHIFT: Remove the word from the front of the input buffer and push it onto
the stack.
We’ll sometimes call operations like LEFTARC and RIGHTARC reduce operations,
based on a metaphor from shift-reduce parsing, in which reducing means combin-
ing elements on the stack. There are some preconditions for using operators. The
LEFTARC operator cannot be applied when ROOT is the second element of the stack
(since by deﬁnition the ROOT node cannot have any incoming arcs). And both the
LEFTARC and RIGHTARC operators require two elements to be on the stack to be
applied.
This particular set of operators implements what is known as the arc standard
arc standard
approach to transition-based parsing (Covington , Nivre ). In arc standard
parsing the transition operators only assert relations between elements at the top of
the stack, and once an element has been assigned its head it is removed from the
stack and is not available for further processing. As we’ll see, there are alterna-
tive transition systems which demonstrate different parsing behaviors, but the arc
standard approach is quite effective and is simple to implement.
The speciﬁcation of a transition-based parser is quite simple, based on repre-
senting the current state of the parse as a conﬁguration: the stack, an input buffer
conﬁguration
of words or tokens, and a set of relations representing a dependency tree. Parsing
means making a sequence of transitions through the space of possible conﬁgura-
tions. We start with an initial conﬁguration in which the stack contains the ROOT
node, the buffer has the tokens in the sentence, and an empty set of relations repre-
sents the parse. In the ﬁnal goal state, the stack and the word list should be empty,
and the set of relations will represent the ﬁnal parse. Fig. . gives the algorithm.
function DEPENDENCYPARSE(words) returns dependency tree
state←{[root], [words], [] } ; initial conﬁguration
while state not ﬁnal
t←ORACLE(state)
; choose a transition operator to apply
state←APPLY(t, state) ; apply it, creating a new state
return state
Figure .
A generic transition-based dependency parser
At each step, the parser consults an oracle (we’ll come back to this shortly) that
provides the correct transition operator to use given the current conﬁguration. It then
applies that operator to the current conﬁguration, producing a new conﬁguration.
The process ends when all the words in the sentence have been consumed and the
ROOT node is the only element remaining on the stack.
The efﬁciency of transition-based parsers should be apparent from the algorithm.
The complexity is linear in the length of the sentence since it is based on a single
left to right pass through the words in the sentence. (Each word must ﬁrst be shifted
onto the stack and then later reduced.)
Note that unlike the dynamic programming and search-based approaches dis-
cussed in Chapter , this approach is a straightforward greedy algorithm—the or-
acle provides a single choice at each step and the parser proceeds with that choice,
no other options are explored, no backtracking is employed, and a single parse is
returned in the end.
Figure . illustrates the operation of the parser with the sequence of transitions

CHAPTER
DEPENDENCY PARSING
leading to a parse for the following example.
root
obj
det
iobj
compound
Book me the morning
ﬂight
Let’s consider the state of the conﬁguration at Step , after the word me has been
pushed onto the stack.
Stack
Word List
Relations
[root, book, me] [the, morning, ﬂight]
The correct operator to apply here is RIGHTARC which assigns book as the head of
me and pops me from the stack resulting in the following conﬁguration.
Stack
Word List
Relations
[root, book] [the, morning, ﬂight] (book → me)
After several subsequent applications of the SHIFT and LEFTARC operators, the con-
ﬁguration in Step  looks like the following:
Stack
Word List
Relations
[root, book, the, morning, ﬂight]
(book → me)
Here, all the remaining words have been passed onto the stack and all that is left
to do is to apply the appropriate reduce operators. In the current conﬁguration, we
employ the LEFTARC operator resulting in the following state.
Stack
Word List
Relations
[root, book, the, ﬂight]
(book → me)
(morning ← ﬂight)
At this point, the parse for this sentence consists of the following structure.
iobj
compound
Book me the morning ﬂight
There are several important things to note when examining sequences such as
the one in Figure .. First, the sequence given is not the only one that might lead
to a reasonable parse. In general, there may be more than one path that leads to the
same result, and due to ambiguity, there may be other transition sequences that lead
to different equally valid parses.
Second, we are assuming that the oracle always provides the correct operator
at each point in the parse—an assumption that is unlikely to be true in practice.
As a result, given the greedy nature of this algorithm, incorrect choices will lead to
incorrect parses since the parser has no opportunity to go back and pursue alternative
choices. Section .. will introduce several techniques that allow transition-based
approaches to explore the search space more fully.

TRANSITION-BASED DEPENDENCY PARSING
Step
Stack
Word List
Action
Relation Added
[root]
[book, me, the, morning, ﬂight]
SHIFT
[root, book]
[me, the, morning, ﬂight]
SHIFT
[root, book, me]
[the, morning, ﬂight]
RIGHTARC
(book → me)
[root, book]
[the, morning, ﬂight]
SHIFT
[root, book, the]
[morning, ﬂight]
SHIFT
[root, book, the, morning]
[ﬂight]
SHIFT
[root, book, the, morning, ﬂight]
LEFTARC
(morning ← ﬂight)
[root, book, the, ﬂight]
LEFTARC
(the ← ﬂight)
[root, book, ﬂight]
RIGHTARC
(book → ﬂight)
[root, book]
RIGHTARC
(root → book)
[root]
Done
Figure .
Trace of a transition-based parse.
Finally, for simplicity, we have illustrated this example without the labels on
the dependency relations. To produce labeled trees, we can parameterize the LEFT-
ARC and RIGHTARC operators with dependency labels, as in LEFTARC(NSUBJ) or
RIGHTARC(OBJ). This is equivalent to expanding the set of transition operators from
our original set of three to a set that includes LEFTARC and RIGHTARC operators for
each relation in the set of dependency relations being used, plus an additional one
for the SHIFT operator. This, of course, makes the job of the oracle more difﬁcult
since it now has a much larger set of operators from which to choose.
Creating an Oracle
The oracle for greedily selecting the appropriate transition is trained by supervised
machine learning. As with all supervised machine learning methods, we will need
training data: conﬁgurations annotated with the correct transition to take. We can
draw these from dependency trees. And we need to extract features of the con-
ﬁguration. We’ll introduce neural classiﬁers that represent the conﬁguration via
embeddings, as well as classic systems that use hand-designed features.
Generating Training Data
The oracle from the algorithm in Fig. . takes as input a conﬁguration and returns a
transition operator. Therefore, to train a classiﬁer, we will need conﬁgurations paired
with transition operators (i.e., LEFTARC, RIGHTARC, or SHIFT). Unfortunately,
treebanks pair entire sentences with their corresponding trees, not conﬁgurations
with transitions.
To generate the required training data, we employ the oracle-based parsing algo-
rithm in a clever way. We supply our oracle with the training sentences to be parsed
along with their corresponding reference parses from the treebank. To produce train-
ing instances, we then simulate the operation of the parser by running the algorithm
and relying on a new training oracle to give us correct transition operators for each
training oracle
successive conﬁguration.
To see how this works, let’s ﬁrst review the operation of our parser. It begins with
a default initial conﬁguration where the stack contains the ROOT, the input list is just
the list of words, and the set of relations is empty. The LEFTARC and RIGHTARC
operators each add relations between the words at the top of the stack to the set of
relations being accumulated for a given sentence. Since we have a gold-standard
reference parse for each training sentence, we know which dependency relations are
valid for a given sentence. Therefore, we can use the reference parse to guide the

CHAPTER
DEPENDENCY PARSING
Step
Stack
Word List
Predicted Action
[root]
[book, the, ﬂight, through, houston]
SHIFT
[root, book]
[the, ﬂight, through, houston]
SHIFT
[root, book, the]
[ﬂight, through, houston]
SHIFT
[root, book, the, ﬂight]
[through, houston]
LEFTARC
[root, book, ﬂight]
[through, houston]
SHIFT
[root, book, ﬂight, through]
[houston]
SHIFT
[root, book, ﬂight, through, houston]
LEFTARC
[root, book, ﬂight, houston ]
RIGHTARC
[root, book, ﬂight]
RIGHTARC
[root, book]
RIGHTARC
[root]
Done
Figure .
Generating training items consisting of conﬁguration/predicted action pairs by simulating a parse
with a given reference parse.
selection of operators as the parser steps through a sequence of conﬁgurations.
To be more precise, given a reference parse and a conﬁguration, the training
oracle proceeds as follows:
Choose LEFTARC if it produces a correct head-dependent relation given the
reference parse and the current conﬁguration,
Otherwise, choose RIGHTARC if () it produces a correct head-dependent re-
lation given the reference parse and () all of the dependents of the word at
the top of the stack have already been assigned,
Otherwise, choose SHIFT.
The restriction on selecting the RIGHTARC operator is needed to ensure that a
word is not popped from the stack, and thus lost to further processing, before all its
dependents have been assigned to it.
More formally, during training the oracle has access to the following:
A current conﬁguration with a stack S and a set of dependency relations Rc
A reference parse consisting of a set of vertices V and a set of dependency
relations Rp
Given this information, the oracle chooses transitions as follows:
LEFTARC(r): if (S r S) ∈ Rp
RIGHTARC(r): if (S r S) ∈ Rp and ∀r′,w s.t.(S r′ w) ∈ Rp then (S r′ w) ∈ Rc
SHIFT: otherwise
Let’s walk through the processing of the following example as shown in Fig. ..
root
obj
nmod
det
case
Book the ﬂight through Houston
At Step , LEFTARC is not applicable in the initial conﬁguration since it asserts
a relation, (root ← book), not in the reference answer; RIGHTARC does assert a
relation contained in the ﬁnal answer (root → book), however book has not been
attached to any of its dependents yet, so we have to defer, leaving SHIFT as the only

TRANSITION-BASED DEPENDENCY PARSING
possible action. The same conditions hold in the next two steps. In step , LEFTARC
is selected to link the to its head.
Now consider the situation in Step .
Stack
Word buffer
Relations
[root, book, ﬂight] [through, Houston] (the ← ﬂight)
Here, we might be tempted to add a dependency relation between book and ﬂight,
which is present in the reference parse. But doing so now would prevent the later
attachment of Houston since ﬂight would have been removed from the stack. For-
tunately, the precondition on choosing RIGHTARC prevents this choice and we’re
again left with SHIFT as the only viable option. The remaining choices complete the
set of operators needed for this example.
To recap, we derive appropriate training instances consisting of conﬁguration-
transition pairs from a treebank by simulating the operation of a parser in the con-
text of a reference dependency tree. We can deterministically record correct parser
actions at each step as we progress through each training example, thereby creating
the training set we require.
A feature-based classiﬁer
We’ll now introduce two classiﬁers for choosing transitions, here a classic feature-
based algorithm and in the next section a neural classiﬁer using embedding features.
Featured-based classiﬁers generally use the same features we’ve seen with part-
of-speech tagging and partial parsing: Word forms, lemmas, parts of speech, the
head, and the dependency relation to the head. Other features may be relevant for
some languages, for example morphosyntactic features like case marking on subjects
or objects. The features are extracted from the training conﬁgurations, which consist
of the stack, the buffer and the current set of relations. Most useful are features
referencing the top levels of the stack, the words near the front of the buffer, and the
dependency relations already associated with any of those elements.
We’ll use a feature template as we did for sentiment analysis and part-of-speech
feature
template
tagging. Feature templates allow us to automatically generate large numbers of spe-
ciﬁc features from a training set. For example, consider the following feature tem-
plates that are based on single positions in a conﬁguration.
⟨s.w,op⟩,⟨s.w,op⟩⟨s.t,op⟩,⟨s.t,op⟩
⟨b.w,op⟩,⟨b.t,op⟩⟨s.wt,op⟩
Here features are denoted as location.property, where s = stack, b = the word
buffer, w = word forms, t = part-of-speech, and op = operator. Thus the feature for
the word form at the top of the stack would be s.w, the part of speech tag at the
front of the buffer b.t, and the concatenated feature s.wt represents the word form
concatenated with the part of speech of the word at the top of the stack. Consider
applying these templates to the following intermediate conﬁguration derived from a
training oracle for (.).
Stack
Word buffer
Relations
[root, canceled, ﬂights] [to Houston] (canceled → United)
(ﬂights → morning)
(ﬂights → the)

CHAPTER
DEPENDENCY PARSING
The correct transition here is SHIFT (you should convince yourself of this before
proceeding). The application of our set of feature templates to this conﬁguration
would result in the following set of instantiated features.
⟨s.w = ﬂights,op = shift⟩
⟨s.w = canceled,op = shift⟩
⟨s.t = NNS,op = shift⟩
⟨s.t = VBD,op = shift⟩
⟨b.w = to,op = shift⟩
⟨b.t = TO,op = shift⟩
⟨s.wt = ﬂightsNNS,op = shift⟩
Given that the left and right arc transitions operate on the top two elements of the
stack, features that combine properties from these positions are even more useful.
For example, a feature like s.t ◦s.t concatenates the part of speech tag of the word
at the top of the stack with the tag of the word beneath it.
⟨s.t ◦s.t = NNSVBD,op = shift⟩
Given the training data and features, any classiﬁer, like multinomial logistic re-
gression or support vector machines, can be used.
A neural classiﬁer
The oracle can also be implemented by a neural classiﬁer. A standard architecture
is simply to pass the sentence through an encoder, then take the presentation of the
top  words on the stack and the ﬁrst word of the buffer, concatenate them, and
present to a feedforward network that predicts the transition to take (Kiperwasser
and Goldberg, ; Kulmizev et al., ). Fig. . sketches this model. Learning
can be done with cross-entropy loss.
Input buﬀer
Parser Oracle
w …
e(w)
Action
Dependency
Relations
e(s)
FFN
Softmax
e(s)
Stack
LEFTARC
RIGHTARC
SHIFT
ENCODER
Figure .
Neural classiﬁer for the oracle for the transition-based parser. The parser takes
the top  words on the stack and the ﬁrst word of the buffer, represents them by their encodings
(from running the whole sentence through the encoder), concatenates the embeddings and
passes through a softmax to choose a parser action (transition).

TRANSITION-BASED DEPENDENCY PARSING
Advanced Methods in Transition-Based Parsing
The basic transition-based approach can be elaborated in a number of ways to im-
prove performance by addressing some of the most obvious ﬂaws in the approach.
Alternative Transition Systems
The arc-standard transition system described above is only one of many possible sys-
tems. A frequently used alternative is the arc eager transition system. The arc eager
arc eager
approach gets its name from its ability to assert rightward relations much sooner
than in the arc standard approach. To see this, let’s revisit the arc standard trace of
Example ., repeated here.
root
obj
nmod
det
case
Book the ﬂight through Houston
Consider the dependency relation between book and ﬂight in this analysis. As
is shown in Fig. ., an arc-standard approach would assert this relation at Step ,
despite the fact that book and ﬂight ﬁrst come together on the stack much earlier at
Step . The reason this relation can’t be captured at this point is due to the presence
of the postnominal modiﬁer through Houston. In an arc-standard approach, depen-
dents are removed from the stack as soon as they are assigned their heads. If ﬂight
had been assigned book as its head in Step , it would no longer be available to serve
as the head of Houston.
While this delay doesn’t cause any issues in this example, in general the longer
a word has to wait to get assigned its head the more opportunities there are for
something to go awry. The arc-eager system addresses this issue by allowing words
to be attached to their heads as early as possible, before all the subsequent words
dependent on them have been seen. This is accomplished through minor changes to
the LEFTARC and RIGHTARC operators and the addition of a new REDUCE operator.
LEFTARC: Assert a head-dependent relation between the word at the front of
the input buffer and the word at the top of the stack; pop the stack.
RIGHTARC: Assert a head-dependent relation between the word on the top of
the stack and the word at the front of the input buffer; shift the word at the
front of the input buffer to the stack.
SHIFT: Remove the word from the front of the input buffer and push it onto
the stack.
REDUCE: Pop the stack.
The LEFTARC and RIGHTARC operators are applied to the top of the stack and
the front of the input buffer, instead of the top two elements of the stack as in the
arc-standard approach. The RIGHTARC operator now moves the dependent to the
stack from the buffer rather than removing it, thus making it available to serve as the
head of following words. The new REDUCE operator removes the top element from
the stack. Together these changes permit a word to be eagerly assigned its head and
still allow it to serve as the head for later dependents. The trace shown in Fig. .
illustrates the new decision sequence for this example.
In addition to demonstrating the arc-eager transition system, this example demon-
strates the power and ﬂexibility of the overall transition-based approach. We were
able to swap in a new transition system without having to make any changes to the

CHAPTER
DEPENDENCY PARSING
Step
Stack
Word List
Action
Relation Added
[root]
[book, the, ﬂight, through, houston]
RIGHTARC
(root → book)
[root, book]
[the, ﬂight, through, houston]
SHIFT
[root, book, the]
[ﬂight, through, houston]
LEFTARC
(the ← ﬂight)
[root, book]
[ﬂight, through, houston]
RIGHTARC
(book → ﬂight)
[root, book, ﬂight]
[through, houston]
SHIFT
[root, book, ﬂight, through]
[houston]
LEFTARC
(through ← houston)
[root, book, ﬂight]
[houston]
RIGHTARC
(ﬂight → houston)
[root, book, ﬂight, houston]
REDUCE
[root, book, ﬂight]
REDUCE
[root, book]
REDUCE
[root]
Done
Figure .
A processing trace of Book the ﬂight through Houston using the arc-eager transition operators.
underlying parsing algorithm. This ﬂexibility has led to the development of a di-
verse set of transition systems that address different aspects of syntax and semantics
including: assigning part of speech tags (Choi and Palmer, a), allowing the
generation of non-projective dependency structures (Nivre, ), assigning seman-
tic roles (Choi and Palmer, b), and parsing texts containing multiple languages
(Bhat et al., ).
Beam Search
The computational efﬁciency of the transition-based approach discussed earlier de-
rives from the fact that it makes a single pass through the sentence, greedily making
decisions without considering alternatives. Of course, this is also a weakness – once
a decision has been made it can not be undone, even in the face of overwhelming
evidence arriving later in a sentence. We can use beam search to explore alternative
beam search
decision sequences. Recall from Chapter  that beam search uses a breadth-ﬁrst
search strategy with a heuristic ﬁlter that prunes the search frontier to stay within a
ﬁxed-size beam width.
beam width
In applying beam search to transition-based parsing, we’ll elaborate on the al-
gorithm given in Fig. .. Instead of choosing the single best transition operator
at each iteration, we’ll apply all applicable operators to each state on an agenda and
then score the resulting conﬁgurations. We then add each of these new conﬁgura-
tions to the frontier, subject to the constraint that there has to be room within the
beam. As long as the size of the agenda is within the speciﬁed beam width, we can
add new conﬁgurations to the agenda. Once the agenda reaches the limit, we only
add new conﬁgurations that are better than the worst conﬁguration on the agenda
(removing the worst element so that we stay within the limit). Finally, to insure that
we retrieve the best possible state on the agenda, the while loop continues as long as
there are non-ﬁnal states on the agenda.
The beam search approach requires a more elaborate notion of scoring than we
used with the greedy algorithm. There, we assumed that the oracle would be a
supervised classiﬁer that chose the best transition operator based on features of the
current conﬁguration. This choice can be viewed as assigning a score to all the
possible transitions and picking the best one.
ˆT(c) = argmaxScore(t,c)
With beam search we are now searching through the space of decision sequences,
so it makes sense to base the score for a conﬁguration on its entire history. So we
can deﬁne the score for a new conﬁguration as the score of its predecessor plus the

GRAPH-BASED DEPENDENCY PARSING
score of the operator used to produce it.
ConﬁgScore(c) = .
ConﬁgScore(ci) = ConﬁgScore(ci−)+Score(ti,ci−)
This score is used both in ﬁltering the agenda and in selecting the ﬁnal answer. The
new beam search version of transition-based parsing is given in Fig. ..
function DEPENDENCYBEAMPARSE(words, width) returns dependency tree
state←{[root], [words], [], .}
;initial conﬁguration
agenda←⟨state⟩
;initial agenda
while agenda contains non-ﬁnal states
newagenda←⟨⟩
for each state ∈ agenda do
for all {t | t ∈ VALIDOPERATORS(state)} do
child←APPLY(t, state)
newagenda←ADDTOBEAM(child, newagenda, width)
agenda←newagenda
return BESTOF(agenda)
function ADDTOBEAM(state, agenda, width) returns updated agenda
if LENGTH(agenda) < width then
agenda←INSERT(state, agenda)
else if SCORE(state) > SCORE(WORSTOF(agenda))
agenda←REMOVE(WORSTOF(agenda))
agenda←INSERT(state, agenda)
return agenda
Figure .
Beam search applied to transition-based dependency parsing.
Graph-Based Dependency Parsing
Graph-based methods are the second important family of dependency parsing algo-
rithms. Graph-based parsers are more accurate than transition-based parsers, espe-
cially on long sentences; transition-based methods have trouble when the heads are
very far from the dependents (McDonald and Nivre, ). Graph-based methods
avoid this difﬁculty by scoring entire trees, rather than relying on greedy local de-
cisions. Furthermore, unlike transition-based approaches, graph-based parsers can
produce non-projective trees. Although projectivity is not a signiﬁcant issue for
English, it is deﬁnitely a problem for many of the world’s languages.
Graph-based dependency parsers search through the space of possible trees for a
given sentence for a tree (or trees) that maximize some score. These methods encode
the search space as directed graphs and employ methods drawn from graph theory
to search the space for optimal solutions. More formally, given a sentence S we’re
looking for the best dependency tree in Gs, the space of all possible trees for that
sentence, that maximizes some score.
ˆT(S) = argmax
t∈GS
Score(t,S)

CHAPTER
DEPENDENCY PARSING
We’ll make the simplifying assumption that this score can be edge-factored,
edge-factored
meaning that the overall score for a tree is the sum of the scores of each of the scores
of the edges that comprise the tree.
e∈t
Score(e)
Score(t,S) =
Graph-based algorithms have to solve two problems: () assigning a score to
each edge, and () ﬁnding the best parse tree given the scores of all potential edges.
In the next few sections we’ll introduce solutions to these two problems, beginning
with the second problem of ﬁnding trees, and then giving a feature-based and a
neural algorithm for solving the ﬁrst problem of assigning scores.
Parsing via ﬁnding the maximum spanning tree
In graph-based parsing, given a sentence S we start by creating a graph G which is a
fully-connected, weighted, directed graph where the vertices are the input words and
the directed edges represent all possible head-dependent assignments. We’ll include
an additional ROOT node with outgoing edges directed at all of the other vertices.
The weights of each edge in G reﬂect the score for each possible head-dependent
relation assigned by some scoring algorithm.
It turns out that ﬁnding the best dependency parse for S is equivalent to ﬁnding
the maximum spanning tree over G. A spanning tree over a graph G is a subset
maximum
spanning tree
of G that is a tree and covers all the vertices in G; a spanning tree over G that starts
from the ROOT is a valid parse of S. A maximum spanning tree is the spanning tree
with the highest score. Thus a maximum spanning tree of G emanating from the
ROOT is the optimal dependency parse for the sentence.
A directed graph for the example Book that ﬂight is shown in Fig. ., with the
maximum spanning tree corresponding to the desired parse shown in blue. For ease
of exposition, we’ll describe here the algorithm for unlabeled dependency parsing.
root
Book
that
ﬂight
Figure .
Initial rooted, directed graph for Book that ﬂight.
Before describing the algorithm it’s useful to consider two intuitions about di-
rected graphs and their spanning trees. The ﬁrst intuition begins with the fact that
every vertex in a spanning tree has exactly one incoming edge. It follows from this
that every connected component of a spanning tree (i.e., every set of vertices that
are linked to each other by paths over edges) will also have one incoming edge.
The second intuition is that the absolute values of the edge scores are not critical
to determining its maximum spanning tree. Instead, it is the relative weights of the
edges entering each vertex that matters. If we were to subtract a constant amount
from each edge entering a given vertex it would have no impact on the choice of

GRAPH-BASED DEPENDENCY PARSING
the maximum spanning tree since every possible spanning tree would decrease by
exactly the same amount.
The ﬁrst step of the algorithm itself is quite straightforward. For each vertex
in the graph, an incoming edge (representing a possible head assignment) with the
highest score is chosen. If the resulting set of edges produces a spanning tree then
we’re done. More formally, given the original fully-connected graph G = (V,E), a
subgraph T = (V,F) is a spanning tree if it has no cycles and each vertex (other than
the root) has exactly one edge entering it. If the greedy selection process produces
such a tree then it is the best possible one.
Unfortunately, this approach doesn’t always lead to a tree since the set of edges
selected may contain cycles. Fortunately, in yet another case of multiple discovery,
there is a straightforward way to eliminate cycles generated during the greedy se-
lection phase. Chu and Liu () and Edmonds () independently developed
an approach that begins with greedy selection and follows with an elegant recursive
cleanup phase that eliminates cycles.
The cleanup phase begins by adjusting all the weights in the graph by subtracting
the score of the maximum edge entering each vertex from the score of all the edges
entering that vertex. This is where the intuitions mentioned earlier come into play.
We have scaled the values of the edges so that the weights of the edges in the cycle
have no bearing on the weight of any of the possible spanning trees. Subtracting the
value of the edge with maximum weight from each edge entering a vertex results
in a weight of zero for all of the edges selected during the greedy selection phase,
including all of the edges involved in the cycle.
Having adjusted the weights, the algorithm creates a new graph by selecting a
cycle and collapsing it into a single new node. Edges that enter or leave the cycle
are altered so that they now enter or leave the newly collapsed node. Edges that do
not touch the cycle are included and edges within the cycle are dropped.
Now, if we knew the maximum spanning tree of this new graph, we would have
what we need to eliminate the cycle. The edge of the maximum spanning tree di-
rected towards the vertex representing the collapsed cycle tells us which edge to
delete in order to eliminate the cycle. How do we ﬁnd the maximum spanning tree
of this new graph? We recursively apply the algorithm to the new graph. This will
either result in a spanning tree or a graph with a cycle. The recursions can continue
as long as cycles are encountered. When each recursion completes we expand the
collapsed vertex, restoring all the vertices and edges from the cycle with the excep-
tion of the single edge to be deleted.
Putting all this together, the maximum spanning tree algorithm consists of greedy
edge selection, re-scoring of edge costs and a recursive cleanup phase when needed.
The full algorithm is shown in Fig. ..
Fig. . steps through the algorithm with our Book that ﬂight example. The
ﬁrst row of the ﬁgure illustrates greedy edge selection with the edges chosen shown
in blue (corresponding to the set F in the algorithm). This results in a cycle between
that and ﬂight. The scaled weights using the maximum value entering each node are
shown in the graph to the right.
Collapsing the cycle between that and ﬂight to a single node (labelled tf) and
recursing with the newly scaled costs is shown in the second row. The greedy selec-
tion step in this recursion yields a spanning tree that links root to book, as well as an
edge that links book to the contracted node. Expanding the contracted node, we can
see that this edge corresponds to the edge from book to ﬂight in the original graph.
This in turn tells us which edge to drop to eliminate the cycle.

CHAPTER
DEPENDENCY PARSING
function MAXSPANNINGTREE(G=(V,E), root,score) returns spanning tree
F←[]
T’←[]
score’←[]
for each v ∈ V do
bestInEdge←argmaxe=(u,v)∈ E score[e]
F←F ∪ bestInEdge
for each e=(u,v) ∈ E do
score’[e]←score[e] − score[bestInEdge]
if T=(V,F) is a spanning tree then return it
else
C←a cycle in F
G’←CONTRACT(G, C)
T’←MAXSPANNINGTREE(G’, root, score’)
T←EXPAND(T’,C)
return T
function CONTRACT(G,C) returns contracted graph
function EXPAND(T, C) returns expanded graph
Figure .
The Chu-Liu Edmonds algorithm for ﬁnding a maximum spanning tree in a
weighted directed graph.
On arbitrary directed graphs, this version of the CLE algorithm runs in O(mn)
time, where m is the number of edges and n is the number of nodes. Since this par-
ticular application of the algorithm begins by constructing a fully connected graph
m = n yielding a running time of O(n). Gabow et al. () present a more efﬁ-
cient implementation with a running time of O(m+nlogn).
A feature-based algorithm for assigning scores
Recall that given a sentence, S, and a candidate tree, T, edge-factored parsing models
make the simpliﬁcation that the score for the tree is the sum of the scores of the edges
that comprise the tree:
e∈T
score(S,e)
score(S,T) =
In a feature-based algorithm we compute the edge score as a weighted sum of fea-
tures extracted from it:
score(S,e) =
i=
wi fi(S,e)
Or more succinctly.
score(S,e) = w f
Given this formulation, we need to identify relevant features and train the weights.
The features (and feature combinations) used to train edge-factored models mir-
ror those used in training transition-based parsers, such as

GRAPH-BASED DEPENDENCY PARSING
that
ﬂight
that
ﬂight
root
Book
root
Book
root
Book
root
Book
tf
tf
Deleted from cycle
root
Book
that
ﬂight
Figure .
Chu-Liu-Edmonds graph-based example for Book that ﬂight
Wordforms, lemmas, and parts of speech of the headword and its dependent.
Corresponding features from the contexts before, after and between the words.
Word embeddings.
The dependency relation itself.
The direction of the relation (to the right or left).
The distance from the head to the dependent.
Given a set of features, our next problem is to learn a set of weights correspond-
ing to each. Unlike many of the learning problems discussed in earlier chapters,
here we are not training a model to associate training items with class labels, or
parser actions. Instead, we seek to train a model that assigns higher scores to cor-
rect trees than to incorrect ones. An effective framework for problems like this is to
use inference-based learning combined with the perceptron learning rule. In this
inference-based
learning
framework, we parse a sentence (i.e, perform inference) from the training set using
some initially random set of initial weights. If the resulting parse matches the cor-
responding tree in the training data, we do nothing to the weights. Otherwise, we
ﬁnd those features in the incorrect parse that are not present in the reference parse
and we lower their weights by a small amount based on the learning rate. We do this
incrementally for each sentence in our training data until the weights converge.

CHAPTER
DEPENDENCY PARSING
A neural algorithm for assigning scores
State-of-the-art graph-based multilingual parsers are based on neural networks. In-
stead of extracting hand-designed features to represent each edge between words wi
and wj, these parsers run the sentence through an encoder, and then pass the encoded
representation of the two words wi and w j through a network that estimates a score
for the edge i → j.
dep)
score(h
head, h
Biaﬃne
h head
h dep
h head
h dep
h head
h dep
FFN
head
FFN
head
FFN
dep
FFN
dep
FFN
head
FFN
dep
ENCODER
book
that
ﬂight
Figure .
Computing scores for a single edge (book→ ﬂight) in the biafﬁne parser of
Dozat and Manning (); Dozat et al. (). The parser uses distinct feedforward net-
works to turn the encoder output for each word into a head and dependent representation for
the word. The biafﬁne function turns the head embedding of the head and the dependent
embedding of the dependent into a score for the dependency edge.
Here we’ll sketch the biafﬁne algorithm of Dozat and Manning () and Dozat
et al. () shown in Fig. ., drawing on the work of Gr¨unewald et al. ()
who tested many versions of the algorithm via their STEPS system. The algorithm
ﬁrst runs the sentence X = x,...,xn through an encoder to produce a contextual
embedding representation for each token R = r,...,rn. The embedding for each
token is now passed through two separate feedforward networks, one to produce a
representation of this token as a head, and one to produce a representation of this
token as a dependent:
hhead
= FFNhead(ri)
hdep
= FFNdep(ri)
Now to assign a score to the directed edge i → j, (wi is the head and wj is the depen-
dent), we feed the head representation of i, hhead
, and the dependent representation
of j, hdep
, into a biafﬁne scoring function:
Score(i → j) = Biaff(hhead
,hdep
Biaff(x,y) = x⊺Uy +W(x⊕y)+b

EVALUATION
where U, W, and b are weights learned by the model. The idea of using a biafﬁne
function is to allow the system to learn multiplicative interactions between the vec-
tors x and y.
If we pass Score(i → j) through a softmax, we end up with a probability distri-
bution, for each token j, over potential heads i (all other tokens in the sentence):
p(i → j) = softmax([Score(k → j);∀k ̸= j, ≤ k ≤ n])
This probability can then be passed to the maximum spanning tree algorithm of
Section .. to ﬁnd the best tree.
This p(i → j) classiﬁer is trained by optimizing the cross-entropy loss.
Note that the algorithm as we’ve described it is unlabeled. To make this into
a labeled algorithm, the Dozat and Manning () algorithm actually trains two
classiﬁers. The ﬁrst classiﬁer, the edge-scorer, the one we described above, assigns
a probability p(i → j) to each word wi and w j. Then the Maximum Spanning Tree
algorithm is run to get a single best dependency parse tree for the second. We then
apply a second classiﬁer, the label-scorer, whose job is to ﬁnd the maximum prob-
ability label for each edge in this parse. This second classiﬁer has the same form
as (.-.), but instead of being trained to predict with binary softmax the
probability of an edge existing between two words, it is trained with a softmax over
dependency labels to predict the dependency label between the words.
Evaluation
As with phrase structure-based parsing, the evaluation of dependency parsers pro-
ceeds by measuring how well they work on a test set. An obvious metric would be
exact match (EM)—how many sentences are parsed correctly. This metric is quite
pessimistic, with most sentences being marked wrong. Such measures are not ﬁne-
grained enough to guide the development process. Our metrics need to be sensitive
enough to tell if actual improvements are being made.
For these reasons, the most common method for evaluating dependency parsers
are labeled and unlabeled attachment accuracy. Labeled attachment refers to the
proper assignment of a word to its head along with the correct dependency relation.
Unlabeled attachment simply looks at the correctness of the assigned head, ignor-
ing the dependency relation. Given a system output and a corresponding reference
parse, accuracy is simply the percentage of words in an input that are assigned the
correct head with the correct relation. These metrics are usually referred to as the
labeled attachment score (LAS) and unlabeled attachment score (UAS). Finally, we
can make use of a label accuracy score (LS), the percentage of tokens with correct
labels, ignoring where the relations are coming from.
As an example, consider the reference parse and system parse for the following
example shown in Fig. ..
(.) Book me the ﬂight through Houston.
The system correctly ﬁnds  of the  dependency relations present in the reference
parse and receives an LAS of /. However, one of the  incorrect relations found
by the system holds between book and ﬂight, which are in a head-dependent relation
in the reference parse; the system therefore achieves a UAS of /.
Beyond attachment scores, we may also be interested in how well a system is
performing on a particular kind of dependency relation, for example NSUBJ, across

CHAPTER
DEPENDENCY PARSING
root
root
obj
xcomp
nmod
nsubj
nmod
iobj
det
case
det
case
Book me the
ﬂight
through Houston
Book me the
ﬂight
through Houston
(a) Reference
(b) System
Figure .
Reference and system parses for Book me the ﬂight through Houston, resulting in an LAS of
/ and an UAS of /.
a development corpus. Here we can make use of the notions of precision and recall
introduced in Chapter , measuring the percentage of relations labeled NSUBJ by
the system that were correct (precision), and the percentage of the NSUBJ relations
present in the development set that were in fact discovered by the system (recall).
We can employ a confusion matrix to keep track of how often each dependency type
was confused for another.
Summary
This chapter has introduced the concept of dependency grammars and dependency
parsing. Here’s a summary of the main points that we covered:
In dependency-based approaches to syntax, the structure of a sentence is de-
scribed in terms of a set of binary relations that hold between the words in a
sentence. Larger notions of constituency are not directly encoded in depen-
dency analyses.
The relations in a dependency structure capture the head-dependent relation-
ship among the words in a sentence.
Dependency-based analysis provides information directly useful in further
language processing tasks including information extraction, semantic parsing
and question answering.
Transition-based parsing systems employ a greedy stack-based algorithm to
create dependency structures.
Graph-based methods for creating dependency structures are based on the use
of maximum spanning tree methods from graph theory.
Both transition-based and graph-based approaches are developed using super-
vised machine learning techniques.
Treebanks provide the data needed to train these systems. Dependency tree-
banks can be created directly by human annotators or via automatic transfor-
mation from phrase-structure treebanks.
Evaluation of dependency parsers is based on labeled and unlabeled accuracy
scores as measured against withheld development and test corpora.

BIBLIOGRAPHICAL AND HISTORICAL NOTES
Bibliographical and Historical Notes
The dependency-based approach to grammar is much older than the relatively recent
phrase-structure or constituency grammars, which date only to the th century. De-
pendency grammar dates back to the Indian grammarian P¯an.ini sometime between
the th and th centuries BCE, as well as the ancient Greek linguistic traditions.
Contemporary theories of dependency grammar all draw heavily on the th cen-
tury work of Tesni`ere ().
Automatic parsing using dependency grammars was ﬁrst introduced into compu-
tational linguistics by early work on machine translation at the RAND Corporation
led by David Hays. This work on dependency parsing closely paralleled work on
constituent parsing and made explicit use of grammars to guide the parsing process.
After this early period, computational work on dependency parsing remained inter-
mittent over the following decades. Notable implementations of dependency parsers
for English during this period include Link Grammar (Sleator and Temperley, ),
Constraint Grammar (Karlsson et al., ), and MINIPAR (Lin, ).
Dependency parsing saw a major resurgence in the late ’s with the appear-
ance of large dependency-based treebanks and the associated advent of data driven
approaches described in this chapter. Eisner () developed an efﬁcient dynamic
programming approach to dependency parsing based on bilexical grammars derived
from the Penn Treebank. Covington () introduced the deterministic word by
word approach underlying current transition-based approaches. Yamada and Mat-
sumoto () and Kudo and Matsumoto () introduced both the shift-reduce
paradigm and the use of supervised machine learning in the form of support vector
machines to dependency parsing.
Transition-based parsing is based on the shift-reduce parsing algorithm orig-
inally developed for analyzing programming languages (Aho and Ullman, ).
Shift-reduce parsing also makes use of a context-free grammar. Input tokens are
successively shifted onto the stack and the top two elements of the stack are matched
against the right-hand side of the rules in the grammar; when a match is found the
matched elements are replaced on the stack (reduced) by the non-terminal from the
left-hand side of the rule being matched. In transition-based dependency parsing
we skip the grammar, and alter the reduce operation to add a dependency relation
between a word and its head.
Nivre () deﬁned the modern, deterministic, transition-based approach to
dependency parsing. Subsequent work by Nivre and his colleagues formalized and
analyzed the performance of numerous transition systems, training methods, and
methods for dealing with non-projective language (Nivre and Scholz , Nivre
, Nivre and Nilsson , Nivre et al. b, Nivre ). The neural ap-
proach was pioneered by Chen and Manning () and extended by Kiperwasser
and Goldberg (); Kulmizev et al. ().
The graph-based maximum spanning tree approach to dependency parsing was
introduced by McDonald et al. a, McDonald et al. b. The neural classiﬁer
was introduced by (Kiperwasser and Goldberg, ).
The long-running Prague Dependency Treebank project (Hajiˇc, ) is the most
signiﬁcant effort to directly annotate a corpus with multiple layers of morphological,
syntactic and semantic information. PDT . contains over . M tokens (Bejˇcek
et al., ).
Universal Dependencies (UD) (de Marneffe et al., ) is an open community

CHAPTER
DEPENDENCY PARSING
project to create a framework for dependency treebank annotation, with nearly
treebanks in over  languages. The UD annotation scheme evolved out of several
distinct efforts including Stanford dependencies (de Marneffe et al. , de Marn-
effe and Manning , de Marneffe et al. ), Google’s universal part-of-speech
tags (Petrov et al., ), and the Interset interlingua for morphosyntactic tagsets
(Zeman, ).
The Conference on Natural Language Learning (CoNLL) has conducted an in-
ﬂuential series of shared tasks related to dependency parsing over the years (Buch-
holz and Marsi , Nivre et al. a, Surdeanu et al. , Hajiˇc et al. ).
More recent evaluations have focused on parser robustness with respect to morpho-
logically rich languages (Seddah et al., ), and non-canonical language forms
such as social media, texts, and spoken language (Petrov and McDonald, ).
Choi et al. () presents a performance analysis of  dependency parsers across
a range of metrics, as well as DEPENDABLE, a robust parser evaluation tool.
Exercises

Information
Extraction:
Relations, Events, and Time
CHAPTER
Time will explain.
Jane Austen, Persuasion
Imagine that you are an analyst with an investment ﬁrm that tracks airline stocks.
You’re given the task of determining the relationship (if any) between airline an-
nouncements of fare increases and the behavior of their stocks the next day. His-
torical data about stock prices is easy to come by, but what about the airline an-
nouncements? You will need to know at least the name of the airline, the nature of
the proposed fare hike, the dates of the announcement, and possibly the response of
other airlines. Fortunately, these can be all found in news articles like this one:
Citing high fuel prices, United Airlines said Friday it has increased fares
by $ per round trip on ﬂights to some cities also served by lower-
cost carriers. American Airlines, a unit of AMR Corp., immediately
matched the move, spokesman Tim Wagner said. United, a unit of UAL
Corp., said the increase took effect Thursday and applies to most routes
where it competes against discount carriers, such as Chicago to Dallas
and Denver to San Francisco.
This chapter presents techniques for extracting limited kinds of semantic con-
tent from text. This process of information extraction (IE) turns the unstructured
information
extraction
information embedded in texts into structured data, for example for populating a
relational database to enable further processing.
We begin with the task of relation extraction: ﬁnding and classifying semantic
relation
extraction
relations among entities mentioned in a text, like child-of (X is the child-of Y), or
part-whole or geospatial relations. Relation extraction has close links to populat-
ing a relational database, and knowledge graphs, datasets of structured relational
knowledge
graphs
knowledge, are a useful way for search engines to present information to users.
Next, we discuss event extraction, the task of ﬁnding events in which these en-
event
extraction
tities participate, like, in our sample text, the fare increases by United and American
and the reporting events said and cite. Events are also situated in time, occurring at
a particular date or time, and events can be related temporally, happening before or
after or simultaneously with each other. We’ll need to recognize temporal expres-
sions like Friday, Thursday or two days from now and times such as : P.M., and
normalize them onto speciﬁc calendar dates or times. We’ll need to link Friday to
the time of United’s announcement, Thursday to the previous day’s fare increase,
and we’ll need to produce a timeline in which United’s announcement follows the
fare increase and American’s announcement follows both of those events.
The related task of template ﬁlling is to ﬁnd recurring stereotypical events or
template ﬁlling
situations in documents and ﬁll in the template slots. These slot-ﬁllers may consist
of text segments extracted directly from the text, or concepts like times, amounts, or
ontology entities that have been inferred through additional processing. Our airline

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
GENERAL
PERSON-
SOCIAL
PHYSICAL
AFFILIATION
PART-
WHOLE
Subsidiary
Near
Family
Lasting
Personal
Geographical
Located
Org-Location-
Business
Origin
Citizen-
Resident-
Ethnicity-
Religion
ORG
ARTIFACT
AFFILIATION
Investor
Founder
Student-Alum
User-Owner-Inventor-
Ownership
Employment
Manufacturer
Membership
Sports-Affiliation
Figure .
The  relations used in the ACE relation extraction task.
text presents such a stereotypical situation since airlines often raise fares and then
wait to see if competitors follow along. Here we can identify United as a lead air-
line that initially raised its fares, $ as the amount, Thursday as the increase date,
and American as an airline that followed along, leading to a ﬁlled template like the
following:
FARE-RAISE ATTEMPT:
LEAD AIRLINE:
UNITED AIRLINES
AMOUNT:
EFFECTIVE DATE:
FOLLOWER:
AMERICAN AIRLINES
Relation Extraction
Let’s assume that we have detected the named entities in our sample text (perhaps
using the techniques of Chapter ), and would like to discern the relationships that
exist among the detected entities:
Citing high fuel prices, [ORG United Airlines] said [TIME Friday] it
has increased fares by [MONEY $] per round trip on ﬂights to some
cities also served by lower-cost carriers. [ORG American Airlines], a
unit of [ORG AMR Corp.], immediately matched the move, spokesman
[PER Tim Wagner] said. [ORG United], a unit of [ORG UAL Corp.],
said the increase took effect [TIME Thursday] and applies to most
routes where it competes against discount carriers, such as [LOC Chicago]
to [LOC Dallas] and [LOC Denver] to [LOC San Francisco].
The text tells us, for example, that Tim Wagner is a spokesman for American
Airlines, that United is a unit of UAL Corp., and that American is a unit of AMR.
These binary relations are instances of more generic relations such as part-of or
employs that are fairly frequent in news-style texts. Figure . lists the  relations
used in the ACE relation extraction evaluations and Fig. . shows some sample
relations. We might also extract more domain-speciﬁc relation such as the notion of
an airline route. For example from this text we can conclude that United has routes
to Chicago, Dallas, Denver, and San Francisco.

RELATION EXTRACTION
Relations
Types
Examples
Physical-Located
PER-GPE
He was in Tennessee
Part-Whole-Subsidiary
ORG-ORG
XYZ, the parent company of ABC
Person-Social-Family
PER-PER
Yoko’s husband John
Org-AFF-Founder
PER-ORG
Steve Jobs, co-founder of Apple...
Figure .
Semantic relations with examples and the named entity types they involve.
Sets of relations have been deﬁned for many other domains as well. For example
UMLS, the Uniﬁed Medical Language System from the US National Library of
Medicine has a network that deﬁnes  broad subject categories, entity types, and
relations between the entities, such as the following:
Entity
Relation
Entity
Injury
disrupts
Physiological Function
Bodily Location
location-of Biologic Function
Anatomical Structure
part-of
Organism
Pharmacologic Substance causes
Pathological Function
Pharmacologic Substance treats
Pathologic Function
Given a medical sentence like this one:
(.) Doppler echocardiography can be used to diagnose left anterior descending
artery stenosis in patients with type  diabetes
We could thus extract the UMLS relation:
Echocardiography, Doppler Diagnoses Acquired stenosis
Wikipedia also offers a large supply of relations, drawn from infoboxes, struc-
infoboxes
tured tables associated with certain Wikipedia articles. For example, the Wikipedia
infobox for Stanford includes structured facts like state = "California" or
president = "Marc Tessier-Lavigne". These facts can be turned into rela-
tions like president-of or located-in. or into relations in a metalanguage called RDF
RDF
(Resource Description Framework). An RDF triple is a tuple of entity-relation-
RDF triple
entity, called a subject-predicate-object expression. Here’s a sample RDF triple:
subject
predicate object
Golden Gate Park location
San Francisco
For example the crowdsourced DBpedia (Bizer et al., ) is an ontology de-
rived from Wikipedia containing over  billion RDF triples. Another dataset from
Wikipedia infoboxes, Freebase (Bollacker et al., ), now part of Wikidata (Vrandeˇci´c
Freebase
and Kr¨otzsch, ), has relations between people and their nationality, or locations,
and other locations they are contained in.
WordNet or other ontologies offer useful ontological relations that express hier-
archical relations between words or concepts. For example WordNet has the is-a or
is-a
hypernym relation between classes,
hypernym
Giraffe is-a ruminant is-a ungulate is-a mammal is-a vertebrate ...
WordNet also has Instance-of relation between individuals and classes, so that for
example San Francisco is in the Instance-of relation with city. Extracting these
relations is an important step in extending or building ontologies.
Finally, there are large datasets that contain sentences hand-labeled with their
relations, designed for training and testing relation extractors. The TACRED dataset
(Zhang et al., ) contains , examples of relation triples about particular
people or organizations, labeled in sentences from news and web text drawn from the

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
annual TAC Knowledge Base Population (TAC KBP) challenges. TACRED contains
relation types (like per:city of birth, org:subsidiaries, org:member of, per:spouse),
plus a no relation tag; examples are shown in Fig. .. About % of all examples
are annotated as no relation; having sufﬁcient negative data is important for training
supervised classiﬁers.
Example
Entity Types & Label
PERSON/TITLE
Relation: per:title
Carey will succeed Cathleen P. Black, who held the position for
years and will take on a new role as chairwoman of Hearst Maga-
zines, the company said.
PERSON/CITY
Relation: per:city of birth
Irene Morgan Kirkaldy, who was born and reared in Baltimore, lived
on Long Island and ran a child-care center in Queens with her second
husband, Stanley Kirkaldy.
Baldwin declined further comment, and said JetBlue chief executive
Dave Barger was unavailable.
Types: PERSON/TITLE
Relation: no relation
Figure .
Example sentences and labels from the TACRED dataset (Zhang et al., ).
A standard dataset was also produced for the SemEval  Task , detecting
relations between nominals (Hendrickx et al., ). The dataset has , exam-
ples, each with a pair of nominals (untyped) hand-labeled with one of  directed
relations like product-producer ( a factory manufactures suits) or component-whole
(my apartment has a large kitchen).
Relation Extraction Algorithms
There are ﬁve main classes of algorithms for relation extraction: handwritten pat-
terns, supervised machine learning, semi-supervised (via bootstrapping or dis-
tant supervision), and unsupervised. We’ll introduce each of these in the next
sections.
Using Patterns to Extract Relations
The earliest and still common algorithm for relation extraction is lexico-syntactic
patterns, ﬁrst developed by Hearst (a), and therefore often called Hearst pat-
terns. Consider the following sentence:
Hearst patterns
Agar is a substance prepared from a mixture of red algae, such as Ge-
lidium, for laboratory or industrial use.
Hearst points out that most human readers will not know what Gelidium is, but that
they can readily infer that it is a kind of (a hyponym of) red algae, whatever that is.
She suggests that the following lexico-syntactic pattern
NP such as NP{,NP ...,(and|or)NPi},i ≥
implies the following semantics
∀NPi,i ≥ ,hyponym(NPi,NP)
allowing us to infer
hyponym(Gelidium,red algae)

RELATION EXTRACTION ALGORITHMS
NP {, NP}* {,} (and|or) other NPH
temples, treasuries, and other important civic buildings
NPH such as {NP,}* {(or|and)} NP
red algae such as Gelidium
such NPH as {NP,}* {(or|and)} NP
such authors as Herrick, Goldsmith, and Shakespeare
NPH {,} including {NP,}* {(or|and)} NP
common-law countries, including Canada and England
NPH {,} especially {NP}* {(or|and)} NP
European countries, especially France, England, and Spain
Figure .
Hand-built lexico-syntactic patterns for ﬁnding hypernyms, using {} to mark optionality (Hearst
a, Hearst ).
Figure . shows ﬁve patterns Hearst (a, ) suggested for inferring
the hyponym relation; we’ve shown NPH as the parent/hyponym. Modern versions
of the pattern-based approach extend it by adding named entity constraints. For
example if our goal is to answer questions about “Who holds what ofﬁce in which
organization?”, we can use patterns like the following:
PER, POSITION of ORG:
George Marshall, Secretary of State of the United States
PER (named|appointed|chose|etc.) PER Prep? POSITION
Truman appointed Marshall Secretary of State
PER [be]? (named|appointed|etc.) Prep? ORG POSITION
George Marshall was named US Secretary of State
Hand-built patterns have the advantage of high-precision and they can be tailored
to speciﬁc domains. On the other hand, they are often low-recall, and it’s a lot of
work to create them for all possible patterns.
Relation Extraction via Supervised Learning
Supervised machine learning approaches to relation extraction follow a scheme that
should be familiar by now. A ﬁxed set of relations and entities is chosen, a training
corpus is hand-annotated with the relations and entities, and the annotated texts are
then used to train classiﬁers to annotate an unseen test set.
The most straightforward approach, illustrated in Fig. . is: () Find pairs of
named entities (usually in the same sentence). (): Apply a relation-classiﬁcation
on each pair. The classiﬁer can use any supervised technique (logistic regression,
RNN, Transformer, random forest, etc.).
An optional intermediate ﬁltering classiﬁer can be used to speed up the process-
ing by making a binary decision on whether a given pair of named entities are related
(by any relation). It’s trained on positive examples extracted directly from all rela-
tions in the annotated corpus, and negative examples generated from within-sentence
entity pairs that are not annotated with a relation.
Feature-based supervised relation classiﬁers.
Let’s consider sample features for
a feature-based classiﬁer (like logistic regression or random forests), classifying the
relationship between American Airlines (Mention , or M) and Tim Wagner (Men-
tion , M) from this sentence:
(.) American Airlines, a unit of AMR, immediately matched the move,
spokesman Tim Wagner said
These include word features (as embeddings, or -hot, stemmed or not):
The headwords of M and M and their concatenation
Airlines
Wagner
Airlines-Wagner

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
function FINDRELATIONS(words) returns relations
relations←nil
entities←FINDENTITIES(words)
forall entity pairs ⟨e, e⟩ in entities do
if RELATED?(e,e)
relations←relations+CLASSIFYRELATION(e,e)
Figure .
Finding and classifying the relations among entities in a text.
Bag-of-words and bigrams in M and M
American, Airlines, Tim, Wagner, American Airlines, Tim Wagner
Words or bigrams in particular positions
M: - spokesman
M: + said
Bag of words or bigrams between M and M:
a, AMR, of, immediately, matched, move, spokesman, the, unit
Named entity features:
Named-entity types and their concatenation
(M: ORG, M: PER, MM: ORG-PER)
Entity Level of M and M (from the set NAME, NOMINAL, PRONOUN)
M: NAME [it or he would be PRONOUN]
M: NAME [the company would be NOMINAL]
Number of entities between the arguments (in this case , for AMR)
Syntactic structure is a useful signal, often represented as the dependency or
constituency syntactic path traversed through the tree between the entities.
Constituent paths between M and M
NP ↑ NP ↑ S ↑ S ↓ NP
Dependency-tree paths
Airlines ←sub j matched ←comp said →subj Wagner
Neural supervised relation classiﬁers
Neural models for relation extraction sim-
ilarly treat the task as supervised classiﬁcation. Let’s consider a typical system ap-
plied to the TACRED relation extraction dataset and task (Zhang et al., ). In
TACRED we are given a sentence and two spans within it: a subject, which is a
person or organization, and an object, which is any other entity. The task is to assign
a relation from the  TAC relations, or no relation.
A typical Transformer-encoder algorithm, shown in Fig. ., simply takes a
pretrained encoder like BERT and adds a linear layer on top of the sentence repre-
sentation (for example the BERT [CLS] token), a linear layer that is ﬁnetuned as a
-of-N classiﬁer to assign one of the  labels. The input to the BERT encoder is
partially de-lexiﬁed; the subject and object entities are replaced in the input by their
NER tags. This helps keep the system from overﬁtting to the individual lexical items
(Zhang et al., ). When using BERT-type Transformers for relation extraction, it
helps to use versions of BERT like RoBERTa (Liu et al., ) or spanBERT (Joshi
et al., ) that don’t have two sequences separated by a [SEP] token, but instead
form the input from a single long sequence of sentences.
In general, if the test set is similar enough to the training set, and if there is
enough hand-labeled data, supervised relation extraction systems can get high ac-

RELATION EXTRACTION ALGORITHMS
p(relation|SUBJ,OBJ)
Linear
Classiﬁer
ENCODER
[CLS] [SUBJ_PERSON] was born
in [OBJ_LOC] ,
Michigan
Figure .
Relation extraction as a linear layer on top of an encoder (in this case BERT),
with the subject and object entities replaced in the input by their NER tags (Zhang et al. ,
Joshi et al. ).
curacies. But labeling a large training set is extremely expensive and supervised
models are brittle: they don’t generalize well to different text genres. For this rea-
son, much research in relation extraction has focused on the semi-supervised and
unsupervised approaches we turn to next.
Semisupervised Relation Extraction via Bootstrapping
Supervised machine learning assumes that we have lots of labeled data. Unfortu-
nately, this is expensive. But suppose we just have a few high-precision seed pat-
terns, like those in Section .., or perhaps a few seed tuples. That’s enough
seed patterns
seed tuples
to bootstrap a classiﬁer! Bootstrapping proceeds by taking the entities in the seed
bootstrapping
pair, and then ﬁnding sentences (on the web, or whatever dataset we are using) that
contain both entities. From all such sentences, we extract and generalize the context
around the entities to learn new patterns. Fig. . sketches a basic algorithm.
function BOOTSTRAP(Relation R) returns new relation tuples
tuples←Gather a set of seed tuples that have relation R
iterate
sentences←ﬁnd sentences that contain entities in tuples
patterns←generalize the context between and around entities in sentences
newpairs←use patterns to identify more tuples
newpairs←newpairs with high conﬁdence
tuples←tuples + newpairs
return tuples
Figure .
Bootstrapping from seed entity pairs to learn relations.
Suppose, for example, that we need to create a list of airline/hub pairs, and we
know only that Ryanair has a hub at Charleroi. We can use this seed fact to discover
new patterns by ﬁnding other mentions of this relation in our corpus. We search
for the terms Ryanair, Charleroi and hub in some proximity. Perhaps we ﬁnd the
following set of sentences:
(.) Budget airline Ryanair, which uses Charleroi as a hub, scrapped all
weekend ﬂights out of the airport.
(.) All ﬂights in and out of Ryanair’s hub at Charleroi airport were grounded on
Friday...
(.) A spokesman at Charleroi, a main hub for Ryanair, estimated that
passengers had already been affected.

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
From these results, we can use the context of words between the entity mentions,
the words before mention one, the word after mention two, and the named entity
types of the two mentions, and perhaps other features, to extract general patterns
such as the following:
/ [ORG], which uses [LOC] as a hub /
/ [ORG]’s hub at [LOC] /
/ [LOC], a main hub for [ORG] /
These new patterns can then be used to search for additional tuples.
Bootstrapping systems also assign conﬁdence values to new tuples to avoid se-
conﬁdence
values
mantic drift. In semantic drift, an erroneous pattern leads to the introduction of
semantic drift
erroneous tuples, which, in turn, lead to the creation of problematic patterns and the
meaning of the extracted relations ‘drifts’. Consider the following example:
(.) Sydney has a ferry hub at Circular Quay.
If accepted as a positive example, this expression could lead to the incorrect in-
troduction of the tuple ⟨Sydney,CircularQuay⟩. Patterns based on this tuple could
propagate further errors into the database.
Conﬁdence values for patterns are based on balancing two factors: the pattern’s
performance with respect to the current set of tuples and the pattern’s productivity
in terms of the number of matches it produces in the document collection. More
formally, given a document collection D, a current set of tuples T, and a proposed
pattern p, we need to track two factors:
hits(p): the set of tuples in T that p matches while looking in D
ﬁnds(p): The total set of tuples that p ﬁnds in D
The following equation balances these considerations (Riloff and Jones, ).
Conf RlogF(p) = |hits(p)|
|ﬁnds(p)|log(|ﬁnds(p)|)
This metric is generally normalized to produce a probability.
We can assess the conﬁdence in a proposed new tuple by combining the evidence
supporting it from all the patterns P′ that match that tuple in D (Agichtein and Gra-
vano, ). One way to combine such evidence is the noisy-or technique. Assume
noisy-or
that a given tuple is supported by a subset of the patterns in P, each with its own
conﬁdence assessed as above. In the noisy-or model, we make two basic assump-
tions. First, that for a proposed tuple to be false, all of its supporting patterns must
have been in error, and second, that the sources of their individual failures are all
independent. If we loosely treat our conﬁdence measures as probabilities, then the
probability of any individual pattern p failing is  − Conf(p); the probability of all
of the supporting patterns for a tuple being wrong is the product of their individual
failure probabilities, leaving us with the following equation for our conﬁdence in a
new tuple.
p∈P′
(−Conf(p))
Conf(t) = −
Setting conservative conﬁdence thresholds for the acceptance of new patterns
and tuples during the bootstrapping process helps prevent the system from drifting
away from the targeted relation.

RELATION EXTRACTION ALGORITHMS
Distant Supervision for Relation Extraction
Although hand-labeling text with relation labels is expensive to produce, there are
ways to ﬁnd indirect sources of training data. The distant supervision method
distant
supervision
(Mintz et al., ) combines the advantages of bootstrapping with supervised learn-
ing. Instead of just a handful of seeds, distant supervision uses a large database to
acquire a huge number of seed examples, creates lots of noisy pattern features from
all these examples and then combines them in a supervised classiﬁer.
For example suppose we are trying to learn the place-of-birth relationship be-
tween people and their birth cities. In the seed-based approach, we might have only
examples to start with. But Wikipedia-based databases like DBPedia or Freebase
have tens of thousands of examples of many relations; including over , ex-
amples of place-of-birth, (<Edwin Hubble, Marshfield>, <Albert Einstein,
Ulm>, etc.,). The next step is to run named entity taggers on large amounts of text—
Mintz et al. () used , articles from Wikipedia—and extract all sentences
that have two named entities that match the tuple, like the following:
...Hubble was born in Marshﬁeld...
...Einstein, born (), Ulm...
...Hubble’s birthplace in Marshﬁeld...
Training instances can now be extracted from this data, one training instance
for each identical tuple <relation, entity, entity>. Thus there will be one
training instance for each of:
<born-in, Edwin Hubble, Marshfield>
<born-in, Albert Einstein, Ulm>
<born-year, Albert Einstein, >
and so on.
We can then apply feature-based or neural classiﬁcation.
For feature-based
classiﬁcation, we can use standard supervised relation extraction features like the
named entity labels of the two mentions, the words and dependency paths in be-
tween the mentions, and neighboring words. Each tuple will have features col-
lected from many training instances; the feature vector for a single training instance
like (<born-in,Albert Einstein, Ulm> will have lexical and syntactic features
from many different sentences that mention Einstein and Ulm.
Because distant supervision has very large training sets, it is also able to use very
rich features that are conjunctions of these individual features. So we will extract
thousands of patterns that conjoin the entity types with the intervening words or
dependency paths like these:
PER was born in LOC
PER, born (XXXX), LOC
PER’s birthplace in LOC
To return to our running example, for this sentence:
(.) American Airlines, a unit of AMR, immediately matched the move,
spokesman Tim Wagner said
we would learn rich conjunction features like this one:
M = ORG & M = PER & nextword=“said”& path= NP ↑ NP ↑ S ↑ S ↓ NP
The result is a supervised classiﬁer that has a huge rich set of features to use
in detecting relations. Since not every test sentence will have one of the training

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
relations, the classiﬁer will also need to be able to label an example as no-relation.
This label is trained by randomly selecting entity pairs that do not appear in any
Freebase relation, extracting features for them, and building a feature vector for
each such tuple. The ﬁnal algorithm is sketched in Fig. ..
function DISTANT SUPERVISION(Database D, Text T) returns relation classiﬁer C
foreach relation R
foreach tuple (e,e) of entities with relation R in D
sentences←Sentences in T that contain e and e
f←Frequent features in sentences
observations←observations + new training tuple (e, e, f, R)
C←Train supervised classiﬁer on observations
return C
Figure .
The distant supervision algorithm for relation extraction. A neural classiﬁer
would skip the feature set f.
Distant supervision shares advantages with each of the methods we’ve exam-
ined. Like supervised classiﬁcation, distant supervision uses a classiﬁer with lots
of features, and supervised by detailed hand-created knowledge. Like pattern-based
classiﬁers, it can make use of high-precision evidence for the relation between en-
tities. Indeed, distance supervision systems learn patterns just like the hand-built
patterns of early relation extractors. For example the is-a or hypernym extraction
system of Snow et al. () used hypernym/hyponym NP pairs from WordNet as
distant supervision, and then learned new patterns from large amounts of text. Their
system induced exactly the original  template patterns of Hearst (a), but also
, additional patterns including these four:
NPH like NP
Many hormones like leptin...
NPH called NP ...using a markup language called XHTML
NP is a NPH
Ruby is a programming language...
NP, a NPH
IBM, a company with a long...
This ability to use a large number of features simultaneously means that, un-
like the iterative expansion of patterns in seed-based systems, there’s no semantic
drift. Like unsupervised classiﬁcation, it doesn’t use a labeled training corpus of
texts, so it isn’t sensitive to genre issues in the training corpus, and relies on very
large amounts of unlabeled data. Distant supervision also has the advantage that it
can create training tuples to be used with neural classiﬁers, where features are not
required.
The main problem with distant supervision is that it tends to produce low-precision
results, and so current research focuses on ways to improve precision. Furthermore,
distant supervision can only help in extracting relations for which a large enough
database already exists. To extract new relations without datasets, or relations for
new domains, purely unsupervised methods must be used.
Unsupervised Relation Extraction
The goal of unsupervised relation extraction is to extract relations from the web
when we have no labeled training data, and not even any list of relations. This task
is often called open information extraction or Open IE. In Open IE, the relations
open
information
extraction

RELATION EXTRACTION ALGORITHMS
are simply strings of words (usually beginning with a verb).
For example, the ReVerb system (Fader et al., ) extracts a relation from a
sentence s in  steps:
. Run a part-of-speech tagger and entity chunker over s
. For each verb in s, ﬁnd the longest sequence of words w that start with a verb
and satisfy syntactic and lexical constraints, merging adjacent matches.
. For each phrase w, ﬁnd the nearest noun phrase x to the left which is not a
relative pronoun, wh-word or existential “there”. Find the nearest noun phrase
y to the right.
. Assign conﬁdence c to the relation r = (x,w,y) using a conﬁdence classiﬁer
and return it.
A relation is only accepted if it meets syntactic and lexical constraints. The
syntactic constraints ensure that it is a verb-initial sequence that might also include
nouns (relations that begin with light verbs like make, have, or do often express the
core of the relation with a noun, like have a hub in):
V | VP | VW*P
V = verb particle? adv?
W = (noun | adj | adv | pron | det )
P = (prep | particle | inﬁnitive “to”)
The lexical constraints are based on a dictionary D that is used to prune very rare,
long relation strings. The intuition is to eliminate candidate relations that don’t oc-
cur with sufﬁcient number of distinct argument types and so are likely to be bad
examples. The system ﬁrst runs the above relation extraction algorithm ofﬂine on
million web sentences and extracts a list of all the relations that occur after nor-
malizing them (removing inﬂection, auxiliary verbs, adjectives, and adverbs). Each
relation r is added to the dictionary if it occurs with at least  different arguments.
Fader et al. () used a dictionary of . million normalized relations.
Finally, a conﬁdence value is computed for each relation using a logistic re-
gression classiﬁer. The classiﬁer is trained by taking  random web sentences,
running the extractor, and hand labeling each extracted relation as correct or incor-
rect. A conﬁdence classiﬁer is then trained on this hand-labeled data, using features
of the relation and the surrounding words. Fig. . shows some sample features
used in the classiﬁcation.
(x,r,y) covers all words in s
the last preposition in r is for
the last preposition in r is on
len(s) ≤
there is a coordinating conjunction to the left of r in s
r matches a lone V in the syntactic constraints
there is preposition to the left of x in s
there is an NP to the right of y in s
Figure .
Features for the classiﬁer that assigns conﬁdence to relations extracted by the
Open Information Extraction system REVERB (Fader et al., ).
For example the following sentence:
(.) United has a hub in Chicago, which is the headquarters of United
Continental Holdings.

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
has the relation phrases has a hub in and is the headquarters of (it also has has and
is, but longer phrases are preferred). Step  ﬁnds United to the left and Chicago to
the right of has a hub in, and skips over which to ﬁnd Chicago to the left of is the
headquarters of. The ﬁnal output is:
r:
<United, has a hub in, Chicago>
r:
<Chicago, is the headquarters of, United Continental Holdings>
The great advantage of unsupervised relation extraction is its ability to handle
a huge number of relations without having to specify them in advance. The dis-
advantage is the need to map all the strings into some canonical form for adding
to databases or knowledge graphs. Current methods focus heavily on relations ex-
pressed with verbs, and so will miss many relations that are expressed nominally.
Evaluation of Relation Extraction
Supervised relation extraction systems are evaluated by using test sets with human-
annotated, gold-standard relations and computing precision, recall, and F-measure.
Labeled precision and recall require the system to classify the relation correctly,
whereas unlabeled methods simply measure a system’s ability to detect entities that
are related.
Semi-supervised and unsupervised methods are much more difﬁcult to evalu-
ate, since they extract totally new relations from the web or a large text. Because
these methods use very large amounts of text, it is generally not possible to run them
solely on a small labeled test set, and as a result it’s not possible to pre-annotate a
gold set of correct instances of relations.
For these methods it’s possible to approximate (only) precision by drawing a
random sample of relations from the output, and having a human check the accuracy
of each of these relations. Usually this approach focuses on the tuples to be extracted
from a body of text rather than on the relation mentions; systems need not detect
every mention of a relation to be scored correctly. Instead, the evaluation is based
on the set of tuples occupying the database when the system is ﬁnished. That is,
we want to know if the system can discover that Ryanair has a hub at Charleroi; we
don’t really care how many times it discovers it. The estimated precision ˆP is then
ˆP = # of correctly extracted relation tuples in the sample
total # of extracted relation tuples in the sample.
Another approach that gives us a little bit of information about recall is to com-
pute precision at different levels of recall. Assuming that our system is able to
rank the relations it produces (by probability, or conﬁdence) we can separately com-
pute precision for the top  new relations, the top , new relations, the top
,, and so on. In each case we take a random sample of that set. This will
show us how the precision curve behaves as we extract more and more tuples. But
there is no way to directly evaluate recall.
Extracting Events
The task of event extraction is to identify mentions of events in texts. For the
event
extraction
purposes of this task, an event mention is any expression denoting an event or state
that can be assigned to a particular point, or interval, in time. The following markup
of the sample text on page  shows all the events in this text.

REPRESENTING TIME
[EVENT Citing] high fuel prices, United Airlines [EVENT said] Fri-
day it has [EVENT increased] fares by $ per round trip on ﬂights to
some cities also served by lower-cost carriers. American Airlines, a unit
of AMR Corp., immediately [EVENT matched] [EVENT the move],
spokesman Tim Wagner [EVENT said]. United, a unit of UAL Corp.,
[EVENT said] [EVENT the increase] took effect Thursday and [EVENT
applies] to most routes where it [EVENT competes] against discount
carriers, such as Chicago to Dallas and Denver to San Francisco.
In English, most event mentions correspond to verbs, and most verbs introduce
events. However, as we can see from our example, this is not always the case. Events
can be introduced by noun phrases, as in the move and the increase, and some verbs
fail to introduce events, as in the phrasal verb took effect, which refers to when the
event began rather than to the event itself. Similarly, light verbs such as make, take,
light verbs
and have often fail to denote events. A light verb is a verb that has very little meaning
itself, and the associated event is instead expressed by its direct object noun. In light
verb examples like took a ﬂight, it’s the word ﬂight that deﬁnes the event; these light
verbs just provide a syntactic structure for the noun’s arguments.
Various versions of the event extraction task exist, depending on the goal. For
example in the TempEval shared tasks (Verhagen et al. ) the goal is to extract
events and aspects like their aspectual and temporal properties. Events are to be
classiﬁed as actions, states, reporting events (say, report, tell, explain), perception
reporting
events
events, and so on. The aspect, tense, and modality of each event also needs to be
extracted. Thus for example the various said events in the sample text would be
annotated as (class=REPORTING, tense=PAST, aspect=PERFECTIVE).
Event extraction is generally modeled via supervised learning, detecting events
via IOB sequence models and assigning event classes and attributes with multi-class
classiﬁers. The input can be neural models starting from encoders; or classic feature-
based models using features like those in Fig. ..
Feature
Explanation
Character afﬁxes
Character-level preﬁxes and sufﬁxes of target word
Nominalization sufﬁx
Character-level sufﬁxes for nominalizations (e.g., -tion)
Part of speech
Part of speech of the target word
Light verb
Binary feature indicating that the target is governed by a light verb
Subject syntactic category Syntactic category of the subject of the sentence
Morphological stem
Stemmed version of the target word
Verb root
Root form of the verb basis for a nominalization
WordNet hypernyms
Hypernym set for the target
Figure .
Features commonly used in classic feature-based approaches to event detection.
Representing Time
Let’s begin by introducing the basics of temporal logic and how human languages
temporal logic
convey temporal information. The most straightforward theory of time holds that it
ﬂows inexorably forward and that events are associated with either points or inter-
vals in time, as on a timeline. We can order distinct events by situating them on the
timeline; one event precedes another if the ﬂow of time leads from the ﬁrst event

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
to the second. Accompanying these notions in most theories is the idea of the cur-
rent moment in time. Combining this notion with the idea of a temporal ordering
relationship yields the familiar notions of past, present, and future.
Various kinds of temporal representation systems can be used to talk about tem-
poral ordering relationship. One of the most commonly used in computational mod-
eling is the interval algebra of Allen (). Allen models all events and time
interval algebra
expressions as intervals there is no representation for points (although intervals can
be very short). In order to deal with intervals without points, he identiﬁes  primi-
tive relations that can hold between these temporal intervals. Fig. . shows these
Allen relations.
Allen relations
A  before B
B after  A
A overlaps B
B overlaps' A
A equals B
(B equals A)
A meets B
B meets' A
A starts B
B starts' A
A finishes B
B finishes' A
A during B
B during' A
Time
Figure .
The  temporal relations from Allen ().
Reichenbach’s reference point
The relation between simple verb tenses and points in time is by no means straight-
forward. The present tense can be used to refer to a future event, as in this example:
(.) Ok, we ﬂy from San Francisco to Boston at .
Or consider the following examples:
(.) Flight  arrived late.
(.) Flight  had arrived late.
Although both refer to events in the past, representing them in the same way seems
wrong. The second example seems to have another unnamed event lurking in the
background (e.g., Flight  had already arrived late when something else hap-
pened).

REPRESENTING TIME
To account for this phenomena, Reichenbach () introduced the notion of
a reference point. In our simple temporal scheme, the current moment in time is
reference point
equated with the time of the utterance and is used as a reference point for when
the event occurred (before, at, or after). In Reichenbach’s approach, the notion of
the reference point is separated from the utterance time and the event time. The
following examples illustrate the basics of this approach:
(.) When Mary’s ﬂight departed, I ate lunch.
(.) When Mary’s ﬂight departed, I had eaten lunch.
In both of these examples, the eating event has happened in the past, that is, prior
to the utterance. However, the verb tense in the ﬁrst example indicates that the eating
event began when the ﬂight departed, while the second example indicates that the
eating was accomplished prior to the ﬂight’s departure. Therefore, in Reichenbach’s
terms the departure event speciﬁes the reference point. These facts can be accom-
modated by additional constraints relating the eating and departure events. In the
ﬁrst example, the reference point precedes the eating event, and in the second exam-
ple, the eating precedes the reference point. Figure . illustrates Reichenbach’s
approach with the primary English tenses. Exercise . asks you to represent these
examples in FOL.
Past Perfect
Simple Past
Present Perfect
R,E
R,U
Simple Future
Future Perfect
Present
U,R,E
U,R
Figure .
Reichenbach’s approach applied to various English tenses. In these diagrams,
time ﬂows from left to right, E denotes the time of the event, R denotes the reference time,
and U denotes the time of the utterance.
Languages have many other ways to convey temporal information besides tense.
Most useful for our purposes will be temporal expressions like in the morning or
: or afterwards.
(.) I’d like to go at : in the morning.
(.) Somewhere around noon, please.
(.) I want to take the train back afterwards.
Incidentally, temporal expressions display a fascinating metaphorical conceptual
organization. Temporal expressions in English are frequently expressed in spatial
terms, as is illustrated by the various uses of at, in, somewhere, and near in these
examples (Lakoff and Johnson , Jackendoff ). Metaphorical organizations
such as these, in which one domain is systematically expressed in terms of another,
are very common in languages of the world.

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
Representing Aspect
A related notion to time is aspect, which is what we call the way events can be
aspect
categorized by their internal temporal structure or temporal contour. By this we
mean questions like whether events are ongoing or have ended, or whether they are
conceptualized as happening at a point in time or over some interval. Such notions
of temporal contour have been used to divide event expressions into classes since
Aristotle, although the set of four classes we’ll introduce here is due to Vendler
() (you may also see the German term aktionsart used to refer to these classes).
aktionsart
The most basic aspectual distinction is between events (which involve change)
events
and states (which do not involve change). Stative expressions represent the notion
states
stative
of an event participant being in a state, or having a particular property, at a given
point in time. Stative expressions capture aspects of the world at a single point in
time, and conceptualize the participant as unchanging and continuous. Consider the
following ATIS examples.
(.) I like express trains.
(.) I need the cheapest fare.
(.) I want to go ﬁrst class.
In examples like these, the event participant denoted by the subject can be seen as
experiencing something at a speciﬁc point in time, and don’t involve any kind of
internal change over time (the liking or needing is conceptualized as continuous and
unchanging).
Non-states (which we’ll refer to as events) are divided into subclasses; we’ll
introduce three here. Activity expressions describe events undertaken by a partic-
activity
ipant that occur over a span of time (rather than being conceptualized as a single
point in time like stative expressions), and have no particular end point. Of course
in practice all things end, but the meaning of the expression doesn’t represent this
fact. Consider the following examples:
(.) She drove a Mazda.
(.) I live in Brooklyn.
These examples both specify that the subject is engaged in, or has engaged in, the
activity speciﬁed by the verb for some period of time, but doesn’t specify when the
driving or living might have stopped.
Two more classes of expressions, achievement expressions and accomplish-
ment expressions, describe events that take place over time, but also conceptualize
the event as having a particular kind of endpoint or goal. The Greek word telos
means ‘end’ or ’goal’ and so the events described by these kinds of expressions are
often called telic events.
telic
Accomplishment expressions describe events that have a natural end point and
accomplishment
expressions
result in a particular state. Consider the following examples:
(.) He booked me a reservation.
(.) The : train got me to New York City.
In these examples, an event is seen as occurring over some period of time that ends
when the intended state is accomplished (i.e., the state of me having a reservation,
or me being in New York City).
The ﬁnal aspectual class, achievement expressions, is only subtly different than
achievement
expressions
accomplishments. Consider the following:

TEMPORALLY ANNOTATED DATASETS: TIMEBANK
(.) She found her gate.
(.) I reached New York.
Like accomplishment expressions, achievement expressions result in a state. But
unlike accomplishments, achievement events are ‘punctual’: they are thought of as
happening in an instant and the verb doesn’t conceptualize the process or activ-
ity leading up the state. Thus the events in these examples may in fact have been
preceded by extended searching or traveling events, but the verb doesn’t conceptu-
alize these preceding processes, but rather conceptualizes the events corresponding
to ﬁnding and reaching as points, not intervals.
In summary, a standard way of categorizing event expressions by their temporal
contours is via these four general classes:
Stative: I know my departure gate.
Activity: John is ﬂying.
Accomplishment: Sally booked her ﬂight.
Achievement: She found her gate.
Before moving on, note that event expressions can easily be shifted from one
class to another. Consider the following examples:
(.) I ﬂew.
(.) I ﬂew to New York.
The ﬁrst example is a simple activity; it has no natural end point. The second ex-
ample is clearly an accomplishment event since it has an end point, and results in a
particular state. Clearly, the classiﬁcation of an event is not solely governed by the
verb, but by the semantics of the entire expression in context.
Temporally Annotated Datasets: TimeBank
The TimeBank corpus consists of American English text annotated with temporal
TimeBank
information (Pustejovsky et al., ). The annotations use TimeML (Saur´ı et al.,
), a markup language for time based on Allen’s interval algebra discussed above
(Allen, ). There are three types of TimeML objects: an EVENT represent events
and states, a TIME represents time expressions like dates, and a LINK represents
various relationships between events and times (event-event, event-time, and time-
time). The links include temporal links (TLINK) for the  Allen relations, aspec-
tual links (ALINK) for aspectual relationships between events and subevents, and
SLINKS which mark factuality.
Consider the following sample sentence and its corresponding markup shown in
Fig. ., selected from one of the TimeBank documents.
(.) Delta Air Lines earnings soared % to a record in the ﬁscal ﬁrst quarter,
bucking the industry trend toward declining proﬁts.
This text has three events and two temporal expressions (including the creation
time of the article, which serves as the document time), and four temporal links that
capture the using the Allen relations:
Soaringe is included in the ﬁscal ﬁrst quartert
Soaringe is before --t
Soaringe is simultaneous with the buckinge
CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
<TIMEX tid="t" type="DATE" value="--"
functionInDocument="CREATION_TIME">
</TIMEX>
Delta Air Lines earnings <EVENT eid="e" class="OCCURRENCE"> soared </EVENT> % to a
record in
<TIMEX tid="t" type="DATE" value="-Q" anchorTimeID="t"> the
fiscal first quarter </TIMEX>, <EVENT eid="e"
class="OCCURRENCE">bucking</EVENT>
the industry trend toward <EVENT eid="e" class="OCCURRENCE">declining</EVENT>
profits.
Figure .
Example from the TimeBank corpus.
Declininge includes soaringe
We can also visualize the links as a graph. The TimeBank snippet in Eq. .
would be represented with a graph like Fig. ..
(.) [DCT://]: Paciﬁc First Financial Corp. said shareholders
approved its acquisition by Royal Trustco Ltd. of Toronto for $ a share,
or $ million. The thrift holding company said it expects to obtain
regulatory approval and complete the transaction by year-end.
BEFORE
BEFORE
AFTER
EVIDENTIAL
MODAL
SIMULTANEOUS
EVIDENTIAL
MODAL
FACTIVE
MODAL
ENDS
BEFORE
CULMINATES
Figure .
A graph of the text in Eq. ., adapted from (Ocal et al., ). TLINKS
are shown in blue, ALINKS in red, and SLINKS in green.
Automatic Temporal Analysis
Here we introduce the three common steps used in analyzing time in text:
. Extracting temporal expressions
. Normalizing these expressions, by converting them to a standard format.
. Linking events to times and extracting time graphs and timelines
Extracting Temporal Expressions
Temporal expressions are phrases that refer to absolute points in time, relative times,
durations, and sets of these. Absolute temporal expressions are those that can be
absolute
mapped directly to calendar dates, times of day, or both. Relative temporal expres-
relative
sions map to particular times through some other reference point (as in a week from
last Tuesday). Finally, durations denote spans of time at varying levels of granular-
duration
ity (seconds, minutes, days, weeks, centuries, etc.). Figure . lists some sample
temporal expressions in each of these categories.
Temporal expressions are grammatical constructions that often have temporal
lexical triggers as their heads, making them easy to ﬁnd. Lexical triggers might
lexical triggers
be nouns, proper nouns, adjectives, and adverbs; full temporal expressions consist

AUTOMATIC TEMPORAL ANALYSIS
Absolute
Relative
Durations
April ,
yesterday
four hours
The summer of ’
next semester
three weeks
: AM
two weeks from yesterday
six days
The rd quarter of
last quarter
the last three quarters
Figure .
Examples of absolute, relational and durational temporal expressions.
of their phrasal projections: noun phrases, adjective phrases, and adverbial phrases
(Figure .).
Category
Examples
Noun
morning, noon, night, winter, dusk, dawn
Proper Noun January, Monday, Ides, Easter, Rosh Hashana, Ramadan, Tet
Adjective
recent, past, annual, former
Adverb
hourly, daily, monthly, yearly
Figure .
Examples of temporal lexical triggers.
The task is to detect temporal expressions in running text, like this examples,
shown with TIMEX tags (Pustejovsky et al. , Ferro et al. ).
A fare increase initiated <TIMEX>last week</TIMEX> by UAL
Corp’s United Airlines was matched by competitors over <TIMEX>the
weekend</TIMEX>, marking the second successful fare increase in
<TIMEX>two weeks</TIMEX>.
Rule-based approaches use cascades of regular expressions to recognize larger
and larger chunks from previous stages, based on patterns containing parts of speech,
trigger words (e.g., February) or classes (e.g., MONTH) (Chang and Manning, ;
Str¨otgen and Gertz, ; Chambers, ). Here’s a rule from SUTime (Chang and
Manning, ) for detecting expressions like  years old:
/(\d+)[-\s]($TEUnits)(s)?([-\s]old)?/
Sequence-labeling approaches use the standard IOB scheme, marking words
that are either (I)nside, (O)utside or at the (B)eginning of a temporal expression:
fare
increase
initiated
last
week
by
UAL
Corp’s...
A statistical sequence labeler is trained, using either embeddings or a ﬁne-tuned
encoder, or classic features extracted from the token and context including words,
lexical triggers, and POS.
Temporal expression recognizers are evaluated with the usual recall, precision,
and F-measures. A major difﬁculty for all of these very lexicalized approaches is
avoiding expressions that trigger false positives:
(.)  tells the story of Winston Smith...
(.) ...U’s classic Sunday Bloody Sunday
Temporal Normalization
Temporal normalization is the task of mapping a temporal expression to a point
temporal
normalization
in time or to a duration. Points in time correspond to calendar dates, to times of
day, or both. Durations primarily consist of lengths of time. Normalized times
are represented via the ISO  standard for encoding temporal values (ISO,
). Fig. . reproduces our earlier example with these value attributes.

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
<TIMEX id =” t ’ ’
type =”DATE”
value =”−−”
functionInDocument=”CREATION TIME”>
July
,  </TIMEX> A f a r e
i n c r e a s e
i n i t i a t e d <TIMEX id =” t ”
type =”DATE”
value =”−W” anchorTimeID=” t ”>l a s t
week</TIMEX> by United
A i r l i n e s
was
matched by
c o m p e t i t o r s
over <TIMEX id =” t ”
type =”DURATION”
value =”PWE”
anchorTimeID=” t ”> the
weekend </TIMEX>, marking
the
second
s u c c e s s f u l
f a r e
i n c r e a s e
in <TIMEX id =” t ”
type =”DURATION”
value =”PW” anchorTimeID=” t ”> two
weeks </TIMEX>.
Figure .
TimeML markup including normalized values for temporal expressions.
The dateline, or document date, for this text was July , . The ISO repre-
sentation for this kind of expression is YYYY-MM-DD, or in this case, --.
The encodings for the temporal expressions in our sample text all follow from this
date, and are shown here as values for the VALUE attribute.
The ﬁrst temporal expression in the text proper refers to a particular week of the
year. In the ISO standard, weeks are numbered from  to , with the ﬁrst week
of the year being the one that has the ﬁrst Thursday of the year. These weeks are
represented with the template YYYY-Wnn. The ISO week for our document date is
week ; thus the value for last week is represented as “-W”.
The next temporal expression is the weekend. ISO weeks begin on Monday;
thus, weekends occur at the end of a week and are fully contained within a single
week. Weekends are treated as durations, so the value of the VALUE attribute has
to be a length. Durations are represented according to the pattern Pnx, where n is
an integer denoting the length and x represents the unit, as in PY for three years
or PD for two days. In this example, one weekend is captured as PWE. In this
case, there is also sufﬁcient information to anchor this particular weekend as part of
a particular week. Such information is encoded in the ANCHORTIMEID attribute.
Finally, the phrase two weeks also denotes a duration captured as PW. Figure .
give some more examples, but there is a lot more to the various temporal annotation
standards; consult ISO (), Ferro et al. (), and Pustejovsky et al. ()
for more details.
Unit
Pattern
Sample Value
Fully speciﬁed dates
YYYY-MM-DD
Weeks
YYYY-Wnn
-W
Weekends
PnWE
PWE
-hour clock times
HH:MM:SS
Dates and times
YYYY-MM-DDTHH:MM:SS
--T::
Financial quarters
Qn
-Q
Figure .
Sample ISO patterns for representing various times and durations.
Most current approaches to temporal normalization are rule-based (Chang and
Manning , Str¨otgen and Gertz ). Patterns that match temporal expressions
are associated with semantic analysis procedures. For example, the pattern above for
recognizing phrases like  years old can be associated with the predicate Duration
that takes two arguments, the length and the unit of time:
pattern: /(\d+)[-\s]($TEUnits)(s)?([-\s]old)?/
result: Duration($, $)
The task is difﬁcult because fully qualiﬁed temporal expressions are fairly rare
in real texts. Most temporal expressions in news articles are incomplete and are only
implicitly anchored, often with respect to the dateline of the article, which we refer
to as the document’s temporal anchor. The values of temporal expressions such
temporal
anchor
as today, yesterday, or tomorrow can all be computed with respect to this temporal

AUTOMATIC TEMPORAL ANALYSIS
anchor. The semantic procedure for today simply assigns the anchor, and the attach-
ments for tomorrow and yesterday add a day and subtract a day from the anchor,
respectively. Of course, given the cyclic nature of our representations for months,
weeks, days, and times of day, our temporal arithmetic procedures must use modulo
arithmetic appropriate to the time unit being used.
Unfortunately, even simple expressions such as the weekend or Wednesday in-
troduce a fair amount of complexity. In our current example, the weekend clearly
refers to the weekend of the week that immediately precedes the document date. But
this won’t always be the case, as is illustrated in the following example.
(.) Random security checks that began yesterday at Sky Harbor will continue
at least through the weekend.
In this case, the expression the weekend refers to the weekend of the week that the
anchoring date is part of (i.e., the coming weekend). The information that signals
this meaning comes from the tense of continue, the verb governing the weekend.
Relative temporal expressions are handled with temporal arithmetic similar to
that used for today and yesterday. The document date indicates that our example
article is ISO week , so the expression last week normalizes to the current week
minus . To resolve ambiguous next and last expressions we consider the distance
from the anchoring date to the nearest unit. Next Friday can refer either to the
immediately next Friday or to the Friday following that, but the closer the document
date is to a Friday, the more likely it is that the phrase will skip the nearest one. Such
ambiguities are handled by encoding language and domain-speciﬁc heuristics into
the temporal attachments.
Temporal Ordering of Events
The goal of temporal analysis, is to link times to events and then ﬁt all these events
into a complete timeline. This ambitious task is the subject of considerable current
research but solving it with a high level of accuracy is beyond the capabilities of
current systems. A somewhat simpler, but still useful, task is to impose a partial or-
dering on the events and temporal expressions mentioned in a text. Such an ordering
can provide many of the same beneﬁts as a true timeline. An example of such a par-
tial ordering is the determination that the fare increase by American Airlines came
after the fare increase by United in our sample text. Determining such an ordering
can be viewed as a binary relation detection and classiﬁcation task.
Even this partial ordering task assumes that in addition to the detecting and nor-
malizing time expressions steps described above, we have already detected all the
events in the text. Indeed, many temporal expressions are anchored to events men-
tioned in a text and not directly to other temporal expressions. Consider the follow-
ing example:
(.) One week after the storm, JetBlue issued its customer bill of rights.
To determine when JetBlue issued its customer bill of rights we need to determine
the time of the storm event, and then we need to modify that time by the temporal
expression one week after.
Thus once the events and times have been detected, our goal next is to assert links
between all the times and events: i.e. creating event-event, event-time, time-time,
DCT-event, and DCT-time TimeML TLINKS. This can be done by training time
relation classiﬁers to predict the correct T:INK between each pair of times/events,
supervised by the gold labels in the TimeBank corpus with features like words/em-
beddings, parse paths, tense and aspect The sieve-based architecture using precision-

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
ranked sets of classiﬁers, which we’ll introduce in Chapter , is also commonly
used.
Systems that perform all  tasks (time extraction creation and normalization,
event extraction, and time/event linking) include TARSQI (Verhagen et al., )
CLEARTK (Bethard, ), CAEVO (Chambers et al., ), and CATENA (Mirza
and Tonelli, ).
Template Filling
Many texts contain reports of events, and possibly sequences of events, that often
correspond to fairly common, stereotypical situations in the world. These abstract
situations or stories, related to what have been called scripts (Schank and Abel-
scripts
son, ), consist of prototypical sequences of sub-events, participants, and their
roles. The strong expectations provided by these scripts can facilitate the proper
classiﬁcation of entities, the assignment of entities into roles and relations, and most
critically, the drawing of inferences that ﬁll in things that have been left unsaid. In
their simplest form, such scripts can be represented as templates consisting of ﬁxed
templates
sets of slots that take as values slot-ﬁllers belonging to particular classes. The task
of template ﬁlling is to ﬁnd documents that invoke particular scripts and then ﬁll the
template ﬁlling
slots in the associated templates with ﬁllers extracted from the text. These slot-ﬁllers
may consist of text segments extracted directly from the text, or they may consist of
concepts that have been inferred from text elements through some additional pro-
cessing.
A ﬁlled template from our original airline story might look like the following.
FARE-RAISE ATTEMPT:
LEAD AIRLINE:
UNITED AIRLINES
AMOUNT:
EFFECTIVE DATE:
FOLLOWER:
AMERICAN AIRLINES
This template has four slots (LEAD AIRLINE, AMOUNT, EFFECTIVE DATE, FOL-
LOWER). The next section describes a standard sequence-labeling approach to ﬁlling
slots. Section .. then describes an older system based on the use of cascades of
ﬁnite-state transducers and designed to address a more complex template-ﬁlling task
that current learning-based systems don’t yet address.
Machine Learning Approaches to Template Filling
In the standard paradigm for template ﬁlling, we are given training documents with
text spans annotated with predeﬁned templates and their slot ﬁllers. Our goal is to
create one template for each event in the input, ﬁlling in the slots with text spans.
The task is generally modeled by training two separate supervised systems. The
ﬁrst system decides whether the template is present in a particular sentence. This
task is called template recognition or sometimes, in a perhaps confusing bit of
template
recognition
terminology, event recognition. Template recognition can be treated as a text classi-
ﬁcation task, with features extracted from every sequence of words that was labeled
in training documents as ﬁlling any slot from the template being detected. The usual
set of features can be used: tokens, embeddings, word shapes, part-of-speech tags,
syntactic chunk tags, and named entity tags.

TEMPLATE FILLING
The second system has the job of role-ﬁller extraction. A separate classiﬁer is
role-ﬁller
extraction
trained to detect each role (LEAD-AIRLINE, AMOUNT, and so on). This can be a
binary classiﬁer that is run on every noun-phrase in the parsed input sentence, or a
sequence model run over sequences of words. Each role classiﬁer is trained on the
labeled data in the training set. Again, the usual set of features can be used, but now
trained only on an individual noun phrase or the ﬁllers of a single slot.
Multiple non-identical text segments might be labeled with the same slot la-
bel. For example in our sample text, the strings United or United Airlines might be
labeled as the LEAD AIRLINE. These are not incompatible choices and the corefer-
ence resolution techniques introduced in Chapter  can provide a path to a solution.
A variety of annotated collections have been used to evaluate this style of ap-
proach to template ﬁlling, including sets of job announcements, conference calls for
papers, restaurant guides, and biological texts. A key open question is extracting
templates in cases where there is no training data or even predeﬁned templates, by
inducing templates as sets of linked events (Chambers and Jurafsky, ).
Earlier Finite-State Template-Filling Systems
The templates above are relatively simple. But consider the task of producing a
template that contained all the information in a text like this one (Grishman and
Sundheim, ):
Bridgestone Sports Co. said Friday it has set up a joint venture in Taiwan
with a local concern and a Japanese trading house to produce golf clubs to be
shipped to Japan. The joint venture, Bridgestone Sports Taiwan Co., capital-
ized at  million new Taiwan dollars, will start production in January
with production of , iron and “metal wood” clubs a month.
The MUC- ‘joint venture’ task (the Message Understanding Conferences were
a series of U.S. government-organized information-extraction evaluations) was to
produce hierarchically linked templates describing joint ventures.
Figure .
shows a structure produced by the FASTUS system (Hobbs et al., ). Note how
the ﬁller of the ACTIVITY slot of the TIE-UP template is itself a template with slots.
Tie-up-
Activity-:
RELATIONSHIP
tie-up
COMPANY
Bridgestone Sports Taiwan Co.
ENTITIES
Bridgestone Sports Co.
PRODUCT
iron and “metal wood” clubs
a local concern
START DATE DURING: January
a Japanese trading house
JOINT VENTURE Bridgestone Sports Taiwan Co.
ACTIVITY
Activity-
AMOUNT
NT$
Figure .
The templates produced by FASTUS given the input text on page .
Early systems for dealing with these complex templates were based on cascades
of transducers based on handwritten rules, as sketched in Fig. ..
The ﬁrst four stages use handwritten regular expression and grammar rules to
do basic tokenization, chunking, and parsing. Stage  then recognizes entities and
events with a recognizer based on ﬁnite-state transducers (FSTs), and inserts the rec-
ognized objects into the appropriate slots in templates. This FST recognizer is based
on hand-built regular expressions like the following (NG indicates Noun-Group and
VG Verb-Group), which matches the ﬁrst sentence of the news story above.

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
No.
Step
Description
Tokens
Tokenize input stream of characters
Complex Words
Multiword phrases, numbers, and proper names.
Basic phrases
Segment sentences into noun and verb groups
Complex phrases
Identify complex noun groups and verb groups
Semantic Patterns
Identify entities and events, insert into templates.
Merging
Merge references to the same entity or event
Figure .
Levels of processing in FASTUS (Hobbs et al., ). Each level extracts a
speciﬁc type of information which is then passed on to the next higher level.
NG(Company/ies) VG(Set-up) NG(Joint-Venture) with NG(Company/ies)
VG(Produce) NG(Product)
The result of processing these two sentences is the ﬁve draft templates (Fig. .)
that must then be merged into the single hierarchical structure shown in Fig. ..
The merging algorithm, after performing coreference resolution, merges two activi-
ties that are likely to be describing the same events.
# Template/Slot
Value
RELATIONSHIP:
TIE-UP
ENTITIES:
Bridgestone Co., a local concern, a Japanese trading house
ACTIVITY:
PRODUCTION
PRODUCT:
“golf clubs”
RELATIONSHIP:
TIE-UP
JOINT VENTURE: “Bridgestone Sports Taiwan Co.”
AMOUNT:
NT$
ACTIVITY:
PRODUCTION
COMPANY:
“Bridgestone Sports Taiwan Co.”
STARTDATE:
DURING: January
ACTIVITY:
PRODUCTION
PRODUCT:
“iron and “metal wood” clubs”
Figure .
The ﬁve partial templates produced by stage  of FASTUS. These templates
are merged in stage  to produce the ﬁnal template shown in Fig. . on page .
Summary
This chapter has explored techniques for extracting limited forms of semantic con-
tent from texts.
Relations among entities can be extracted by pattern-based approaches, su-
pervised learning methods when annotated training data is available, lightly
supervised bootstrapping methods when small numbers of seed tuples or
seed patterns are available, distant supervision when a database of relations
is available, and unsupervised or Open IE methods.
Reasoning about time can be facilitated by detection and normalization of
temporal expressions.
Events can be ordered in time using sequence models and classiﬁers trained
on temporally- and event-labeled data like the TimeBank corpus.

BIBLIOGRAPHICAL AND HISTORICAL NOTES
Template-ﬁlling applications can recognize stereotypical situations in texts
and assign elements from the text to roles represented as ﬁxed sets of slots.
Bibliographical and Historical Notes
The earliest work on information extraction addressed the template-ﬁlling task in the
context of the Frump system (DeJong, ). Later work was stimulated by the U.S.
government-sponsored MUC conferences (Sundheim , Sundheim , Sund-
heim , Sundheim ). Early MUC systems like CIRCUS system (Lehnert
et al., ) and SCISOR (Jacobs and Rau, ) were quite inﬂuential and inspired
later systems like FASTUS (Hobbs et al., ). Chinchor et al. () describe the
MUC evaluation techniques.
Due to the difﬁculty of porting systems from one domain to another, attention
shifted to machine learning approaches. Early supervised learning approaches to
IE (Cardie , Cardie , Riloff , Soderland et al. , Huffman )
focused on automating the knowledge acquisition process, mainly for ﬁnite-state
rule-based systems. Their success, and the earlier success of HMM-based speech
recognition, led to the use of sequence labeling (HMMs: Bikel et al. ; MEMMs
McCallum et al. ; CRFs: Lafferty et al. ), and a wide exploration of fea-
tures (Zhou et al., ). Neural approaches followed from the pioneering results of
Collobert et al. (), who applied a CRF on top of a convolutional net.
Progress in this area continues to be stimulated by formal evaluations with shared
benchmark datasets, including the Automatic Content Extraction (ACE) evaluations
of - on named entity recognition, relation extraction, and temporal ex-
pressions, the KBP (Knowledge Base Population) evaluations (Ji et al. , Sur-
KBP
deanu ) of relation extraction tasks like slot ﬁlling (extracting attributes (‘slots’)
slot ﬁlling
like age, birthplace, and spouse for a given entity) and a series of SemEval work-
shops (Hendrickx et al., ).
Semisupervised relation extraction was ﬁrst proposed by Hearst (b), and
extended by systems like AutoSlog-TS (Riloff, ), DIPRE (Brin, ), SNOW-
BALL (Agichtein and Gravano, ), and Jones et al. (). The distant super-
vision algorithm we describe was drawn from Mintz et al. (), who ﬁrst used
the term ‘distant supervision’ (which was suggested to them by Chris Manning)
but similar ideas had occurred in earlier systems like Craven and Kumlien ()
and Morgan et al. () under the name weakly labeled data, as well as in Snow
et al. () and Wu and Weld (). Among the many extensions are Wu and
Weld (), Riedel et al. (), and Ritter et al. (). Open IE systems include
KNOWITALL Etzioni et al. (), TextRunner (Banko et al., ), and REVERB
(Fader et al., ). See Riedel et al. () for a universal schema that combines
the advantages of distant supervision and Open IE.
Exercises
. Acronym expansion, the process of associating a phrase with an acronym, can
www.nist.gov/speech/tests/ace/

CHAPTER
INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME
be accomplished by a simple form of relational analysis. Develop a system
based on the relation analysis approaches described in this chapter to populate
a database of acronym expansions. If you focus on English Three Letter
Acronyms (TLAs) you can evaluate your system’s performance by comparing
it to Wikipedia’s TLA page.
. Acquire the CMU seminar corpus and develop a template-ﬁlling system by
using any of the techniques mentioned in Section .. Analyze how well
your system performs as compared with state-of-the-art results on this corpus.
. A useful functionality in newer email and calendar applications is the ability
to associate temporal expressions connected with events in email (doctor’s
appointments, meeting planning, party invitations, etc.) with speciﬁc calendar
entries. Collect a corpus of email containing temporal expressions related to
event planning. How do these expressions compare to the kinds of expressions
commonly found in news text that we’ve been discussing in this chapter?
. For the following sentences, give FOL translations that capture the temporal
relationships between the events.
. When Mary’s ﬂight departed, I ate lunch.
. When Mary’s ﬂight departed, I had eaten lunch.

Semantic Role Labeling
CHAPTER
“Who, What, Where, When, With what, Why, How”
The seven circumstances, associated with Hermagoras and Aristotle (Sloan, )
Sometime between the th and th centuries BCE, the Indian grammarian P¯an.ini
wrote a famous treatise on Sanskrit grammar, the As.t.¯adhy¯ay¯ı (‘ books’), a treatise
that has been called “one of the greatest monuments of hu-
man intelligence” (Bloomﬁeld, , ). The work de-
scribes the linguistics of the Sanskrit language in the form
of  sutras, each very efﬁciently (since it had to be
memorized!) expressing part of a formal rule system that
brilliantly preﬁgured modern mechanisms of formal lan-
guage theory (Penn and Kiparsky, ). One set of rules
describes the k¯arakas, semantic relationships between a
verb and noun arguments, roles like agent, instrument, or
destination. P¯an.ini’s work was the earliest we know of
that modeled the linguistic realization of events and their
participants. This task of understanding how participants relate to events—being
able to answer the question “Who did what to whom” (and perhaps also “when and
where”)—is a central question of natural language processing.
Let’s move forward . millennia to the present and consider the very mundane
goal of understanding text about a purchase of stock by XYZ Corporation. This
purchasing event and its participants can be described by a wide variety of surface
forms. The event can be described by a verb (sold, bought) or a noun (purchase),
and XYZ Corp can be the syntactic subject (of bought), the indirect object (of sold),
or in a genitive or noun compound relation (with the noun purchase) despite having
notionally the same role in all of them:
XYZ corporation bought the stock.
They sold the stock to XYZ corporation.
The stock was bought by XYZ corporation.
The purchase of the stock by XYZ corporation...
The stock purchase by XYZ corporation...
In this chapter we introduce a level of representation that captures the common-
ality between these sentences: there was a purchase event, the participants were
XYZ Corp and some stock, and XYZ Corp was the buyer. These shallow semantic
representations , semantic roles, express the role that arguments of a predicate take
in the event, codiﬁed in databases like PropBank and FrameNet. We’ll introduce
semantic role labeling, the task of assigning roles to spans in sentences, and selec-
tional restrictions, the preferences that predicates express about their arguments,
such as the fact that the theme of eat is generally something edible.
Figure shows a birch bark manuscript from Kashmir of the Rupavatra, a grammatical textbook based
on the Sanskrit grammar of Panini. Image from the Wellcome Collection.

CHAPTER
SEMANTIC ROLE LABELING
Semantic Roles
Consider the meanings of the arguments Sasha, Pat, the window, and the door in
these two sentences.
(.) Sasha broke the window.
(.) Pat opened the door.
The subjects Sasha and Pat, what we might calll the breaker of the window-
breaking event and the opener of the door-opening event have something in com-
mon. They are both volitional actors, often animate, and they have direct causal
responsibility for their events.
Thematic roles are a way to capture this semantic commonality between break-
thematic roles
ers and openers. We say that the subjects of both these verbs are agents. Thus,
agents
AGENT is the thematic role that represents an abstract idea such as volitional causa-
tion. Similarly, the direct objects of both these verbs, the BrokenThing and OpenedThing,
are both prototypically inanimate objects that are affected in some way by the action.
The semantic role for these participants is theme.
theme
Thematic Role
Deﬁnition
AGENT
The volitional causer of an event
EXPERIENCER
The experiencer of an event
FORCE
The non-volitional causer of the event
THEME
The participant most directly affected by an event
RESULT
The end product of an event
CONTENT
The proposition or content of a propositional event
INSTRUMENT
An instrument used in an event
BENEFICIARY
The beneﬁciary of an event
SOURCE
The origin of the object of a transfer event
GOAL
The destination of an object of a transfer event
Figure .
Some commonly used thematic roles with their deﬁnitions.
Although thematic roles are one of the oldest linguistic models, as we saw above,
their modern formulation is due to Fillmore () and Gruber (). Although
there is no universally agreed-upon set of roles, Figs. . and . list some the-
matic roles that have been used in various computational papers, together with rough
deﬁnitions and examples. Most thematic role sets have about a dozen roles, but we’ll
see sets with smaller numbers of roles with even more abstract meanings, and sets
with very large numbers of roles that are speciﬁc to situations. We’ll use the general
term semantic roles for all sets of roles, whether small or large.
semantic roles
Diathesis Alternations
The main reason computational systems use semantic roles is to act as a shallow
meaning representation that can let us make simple inferences that aren’t possible
from the pure surface string of words, or even from the parse tree. To extend the
earlier examples, if a document says that Company A acquired Company B, we’d
like to know that this answers the query Was Company B acquired? despite the fact
that the two sentences have very different surface syntax. Similarly, this shallow
semantics might act as a useful intermediate language in machine translation.

DIATHESIS ALTERNATIONS
Thematic Role
Example
AGENT
The waiter spilled the soup.
EXPERIENCER
John has a headache.
FORCE
The wind blows debris from the mall into our yards.
THEME
Only after Benjamin Franklin broke the ice...
RESULT
The city built a regulation-size baseball diamond...
CONTENT
Mona asked “You met Mary Ann at a supermarket?”
INSTRUMENT
He poached catﬁsh, stunning them with a shocking device...
BENEFICIARY
Whenever Ann Callahan makes hotel reservations for her boss...
SOURCE
I ﬂew in from Boston.
GOAL
I drove to Portland.
Figure .
Some prototypical examples of various thematic roles.
Semantic roles thus help generalize over different surface realizations of pred-
icate arguments. For example, while the AGENT is often realized as the subject of
the sentence, in other cases the THEME can be the subject. Consider these possible
realizations of the thematic arguments of the verb break:
(.) John
AGENT
broke the window.
THEME
(.) John
AGENT
broke the window
THEME
with a rock.
INSTRUMENT
(.) The rock
INSTRUMENT
broke the window.
THEME
(.) The window
THEME
broke.
(.) The window
THEME
was broken by John.
AGENT
These examples suggest that break has (at least) the possible arguments AGENT,
THEME, and INSTRUMENT. The set of thematic role arguments taken by a verb is
often called the thematic grid, θ-grid, or case frame. We can see that there are
thematic grid
case frame
(among others) the following possibilities for the realization of these arguments of
break:
AGENT/Subject, THEME/Object
AGENT/Subject,
THEME/Object,
INSTRUMENT/PPwith
INSTRUMENT/Subject,
THEME/Object
THEME/Subject
It turns out that many verbs allow their thematic roles to be realized in various
syntactic positions. For example, verbs like give can realize the THEME and GOAL
arguments in two different ways:
a. Doris
AGENT
gave the book
THEME
to Cary.
GOAL
b. Doris
AGENT
gave Cary
GOAL
the book.
THEME
These multiple argument structure realizations (the fact that break can take AGENT,
INSTRUMENT, or THEME as subject, and give can realize its THEME and GOAL in
either order) are called verb alternations or diathesis alternations. The alternation
verb
alternation
we showed above for give, the dative alternation, seems to occur with particular se-
dative
alternation
mantic classes of verbs, including “verbs of future having” (advance, allocate, offer,

CHAPTER
SEMANTIC ROLE LABELING
owe), “send verbs” (forward, hand, mail), “verbs of throwing” (kick, pass, throw),
and so on. Levin () lists for  English verbs the semantic classes to which
they belong ( high-level classes, divided into  more speciﬁc classes) and the
various alternations in which they participate. These lists of verb classes have been
incorporated into the online resource VerbNet (Kipper et al., ), which links each
verb to both WordNet and FrameNet entries.
Semantic Roles: Problems with Thematic Roles
Representing meaning at the thematic role level seems like it should be useful in
dealing with complications like diathesis alternations. Yet it has proved quite difﬁ-
cult to come up with a standard set of roles, and equally difﬁcult to produce a formal
deﬁnition of roles like AGENT, THEME, or INSTRUMENT.
For example, researchers attempting to deﬁne role sets often ﬁnd they need to
fragment a role like AGENT or THEME into many speciﬁc roles. Levin and Rappa-
port Hovav () summarize a number of such cases, such as the fact there seem
to be at least two kinds of INSTRUMENTS, intermediary instruments that can appear
as subjects and enabling instruments that cannot:
a. The cook opened the jar with the new gadget.
b. The new gadget opened the jar.
a. Shelly ate the sliced banana with a fork.
b. *The fork ate the sliced banana.
In addition to the fragmentation problem, there are cases in which we’d like to
reason about and generalize across semantic roles, but the ﬁnite discrete lists of roles
don’t let us do this.
Finally, it has proved difﬁcult to formally deﬁne the thematic roles. Consider the
AGENT role; most cases of AGENTS are animate, volitional, sentient, causal, but any
individual noun phrase might not exhibit all of these properties.
These problems have led to alternative semantic role models that use either
semantic role
many fewer or many more roles.
The ﬁrst of these options is to deﬁne generalized semantic roles that abstract
over the speciﬁc thematic roles. For example, PROTO-AGENT and PROTO-PATIENT
proto-agent
proto-patient
are generalized roles that express roughly agent-like and roughly patient-like mean-
ings. These roles are deﬁned, not by necessary and sufﬁcient conditions, but rather
by a set of heuristic features that accompany more agent-like or more patient-like
meanings. Thus, the more an argument displays agent-like properties (being voli-
tionally involved in the event, causing an event or a change of state in another par-
ticipant, being sentient or intentionally involved, moving) the greater the likelihood
that the argument can be labeled a PROTO-AGENT. The more patient-like the proper-
ties (undergoing change of state, causally affected by another participant, stationary
relative to other participants, etc.), the greater the likelihood that the argument can
be labeled a PROTO-PATIENT.
The second direction is instead to deﬁne semantic roles that are speciﬁc to a
particular verb or a particular group of semantically related verbs or nouns.
In the next two sections we describe two commonly used lexical resources that
make use of these alternative versions of semantic roles. PropBank uses both proto-
roles and verb-speciﬁc semantic roles. FrameNet uses semantic roles that are spe-
ciﬁc to a general semantic idea called a frame.

THE PROPOSITION BANK
The Proposition Bank
The Proposition Bank, generally referred to as PropBank, is a resource of sen-
PropBank
tences annotated with semantic roles. The English PropBank labels all the sentences
in the Penn TreeBank; the Chinese PropBank labels sentences in the Penn Chinese
TreeBank. Because of the difﬁculty of deﬁning a universal set of thematic roles,
the semantic roles in PropBank are deﬁned with respect to an individual verb sense.
Each sense of each verb thus has a speciﬁc set of roles, which are given only numbers
rather than names: Arg, Arg, Arg, and so on. In general, Arg represents the
PROTO-AGENT, and Arg, the PROTO-PATIENT. The semantics of the other roles
are less consistent, often being deﬁned speciﬁcally for each verb. Nonetheless there
are some generalization; the Arg is often the benefactive, instrument, attribute, or
end state, the Arg the start point, benefactive, instrument, or attribute, and the Arg
the end point.
Here are some slightly simpliﬁed PropBank entries for one sense each of the
verbs agree and fall. Such PropBank entries are called frame ﬁles; note that the
deﬁnitions in the frame ﬁle for each role (“Other entity agreeing”, “Extent, amount
fallen”) are informal glosses intended to be read by humans, rather than being formal
deﬁnitions.
(.) agree.
Arg: Agreer
Arg: Proposition
Arg: Other entity agreeing
Ex:
[Arg The group] agreed [Arg it wouldn’t make an offer].
Ex:
[ArgM-TMP Usually] [Arg John] agrees [Arg with Mary]
[Arg on everything].
(.) fall.
Arg: Logical subject, patient, thing falling
Arg: Extent, amount fallen
Arg: start point
Arg: end point, end state of arg
Ex:
[Arg Sales] fell [Arg to $ million] [Arg from $ million].
Ex:
[Arg The average junk bond] fell [Arg by .%].
Note that there is no Arg role for fall, because the normal subject of fall is a
PROTO-PATIENT.
The PropBank semantic roles can be useful in recovering shallow semantic in-
formation about verbal arguments. Consider the verb increase:
(.) increase. “go up incrementally”
Arg: causer of increase
Arg: thing increasing
Arg: amount increased by, EXT, or MNR
Arg: start point
Arg: end point
A PropBank semantic role labeling would allow us to infer the commonality in
the event structures of the following three examples, that is, that in each case Big
Fruit Co. is the AGENT and the price of bananas is the THEME, despite the differing
surface forms.

CHAPTER
SEMANTIC ROLE LABELING
(.) [Arg Big Fruit Co. ] increased [Arg the price of bananas].
(.) [Arg The price of bananas] was increased again [Arg by Big Fruit Co. ]
(.) [Arg The price of bananas] increased [Arg %].
PropBank also has a number of non-numbered arguments called ArgMs, (ArgM-
TMP, ArgM-LOC, etc.) which represent modiﬁcation or adjunct meanings. These
are relatively stable across predicates, so aren’t listed with each frame ﬁle. Data
labeled with these modiﬁers can be helpful in training systems to detect temporal,
location, or directional modiﬁcation across predicates. Some of the ArgM’s include:
TMP
when?
yesterday evening, now
LOC
where?
at the museum, in San Francisco
DIR
where to/from?
down, to Bangkok
MNR
how?
clearly, with much enthusiasm
PRP/CAU why?
because ... , in response to the ruling
REC
themselves, each other
ADV
miscellaneous
PRD
secondary predication
...ate the meat raw
While PropBank focuses on verbs, a related project, NomBank (Meyers et al.,
NomBank
) adds annotations to noun predicates. For example the noun agreement in
Apple’s agreement with IBM would be labeled with Apple as the Arg and IBM as
the Arg. This allows semantic role labelers to assign labels to arguments of both
verbal and nominal predicates.
FrameNet
While making inferences about the semantic commonalities across different sen-
tences with increase is useful, it would be even more useful if we could make such
inferences in many more situations, across different verbs, and also between verbs
and nouns. For example, we’d like to extract the similarity among these three sen-
tences:
(.) [Arg The price of bananas] increased [Arg %].
(.) [Arg The price of bananas] rose [Arg %].
(.) There has been a [Arg %] rise [Arg in the price of bananas].
Note that the second example uses the different verb rise, and the third example
uses the noun rather than the verb rise. We’d like a system to recognize that the
price of bananas is what went up, and that % is the amount it went up, no matter
whether the % appears as the object of the verb increased or as a nominal modiﬁer
of the noun rise.
The FrameNet project is another semantic-role-labeling project that attempts
FrameNet
to address just these kinds of problems (Baker et al. , Fillmore et al. ,
Fillmore and Baker , Ruppenhofer et al. ). Whereas roles in the PropBank
project are speciﬁc to an individual verb, roles in the FrameNet project are speciﬁc
to a frame.
What is a frame? Consider the following set of words:
reservation, ﬂight, travel, buy, price, cost, fare, rates, meal, plane
There are many individual lexical relations of hyponymy, synonymy, and so on
between many of the words in this list. The resulting set of relations does not,

FRAMENET
however, add up to a complete account of how these words are related. They are
clearly all deﬁned with respect to a coherent chunk of common-sense background
information concerning air travel.
We call the holistic background knowledge that unites these words a frame (Fill-
frame
more, ). The idea that groups of words are deﬁned with respect to some back-
ground information is widespread in artiﬁcial intelligence and cognitive science,
where besides frame we see related works like a model (Johnson-Laird, ), or
model
even script (Schank and Abelson, ).
script
A frame in FrameNet is a background knowledge structure that deﬁnes a set of
frame-speciﬁc semantic roles, called frame elements, and includes a set of predi-
frame elements
cates that use these roles. Each word evokes a frame and proﬁles some aspect of the
frame and its elements. The FrameNet dataset includes a set of frames and frame
elements, the lexical units associated with each frame, and a set of labeled exam-
ple sentences. For example, the change position on a scale frame is deﬁned as
follows:
This frame consists of words that indicate the change of an Item’s posi-
tion on a scale (the Attribute) from a starting point (Initial value) to an
end point (Final value).
Some of the semantic roles (frame elements) in the frame are deﬁned as in
Fig. .. Note that these are separated into core roles, which are frame speciﬁc, and
core roles
non-core roles, which are more like the Arg-M arguments in PropBank, expressing
non-core roles
more general properties of time, location, and so on.
Core Roles
ATTRIBUTE
The ATTRIBUTE is a scalar property that the ITEM possesses.
DIFFERENCE
The distance by which an ITEM changes its position on the scale.
FINAL STATE
A description that presents the ITEM’s state after the change in the ATTRIBUTE’s
value as an independent predication.
FINAL VALUE
The position on the scale where the ITEM ends up.
INITIAL STATE
A description that presents the ITEM’s state before the change in the AT-
TRIBUTE’s value as an independent predication.
INITIAL VALUE The initial position on the scale from which the ITEM moves away.
ITEM
The entity that has a position on the scale.
VALUE RANGE
A portion of the scale, typically identiﬁed by its end points, along which the
values of the ATTRIBUTE ﬂuctuate.
Some Non-Core Roles
DURATION
The length of time over which the change takes place.
SPEED
The rate of change of the VALUE.
GROUP
The GROUP in which an ITEM changes the value of an
ATTRIBUTE in a speciﬁed way.
Figure .
The frame elements in the change position on a scale frame from the FrameNet Labelers
Guide (Ruppenhofer et al., ).
Here are some example sentences:
(.) [ITEM Oil] rose [ATTRIBUTE in price] [DIFFERENCE by %].
(.) [ITEM It] has increased [FINAL STATE to having them  day a month].
(.) [ITEM Microsoft shares] fell [FINAL VALUE to  /].
(.) [ITEM Colon cancer incidence] fell [DIFFERENCE by %] [GROUP among
men].

CHAPTER
SEMANTIC ROLE LABELING
(.) a steady increase [INITIAL VALUE from .] [FINAL VALUE to .] [ITEM
in dividends]
(.) a [DIFFERENCE %] [ITEM dividend] increase...
Note from these example sentences that the frame includes target words like rise,
fall, and increase. In fact, the complete frame consists of the following words:
VERBS: dwindle
move
soar
escalation
shift
advance
edge
mushroom swell
explosion
tumble
climb
explode
plummet
swing
fall
decline
fall
reach
triple
ﬂuctuation ADVERBS:
decrease
ﬂuctuate rise
tumble
gain
increasingly
diminish
gain
rocket
growth
dip
grow
shift
NOUNS: hike
double
increase
skyrocket
decline
increase
drop
jump
slide
decrease
rise
FrameNet also codes relationships between frames, allowing frames to inherit
from each other, or representing relations between frames like causation (and gen-
eralizations among frame elements in different frames can be represented by inheri-
tance as well). Thus, there is a Cause change of position on a scale frame that is
linked to the Change of position on a scale frame by the cause relation, but that
adds an AGENT role and is used for causative examples such as the following:
(.) [AGENT They] raised [ITEM the price of their soda] [DIFFERENCE by %].
Together, these two frames would allow an understanding system to extract the
common event semantics of all the verbal and nominal causative and non-causative
usages.
FrameNets have also been developed for many other languages including Span-
ish, German, Japanese, Portuguese, Italian, and Chinese.
Semantic Role Labeling
Semantic role labeling (sometimes shortened as SRL) is the task of automatically
semantic role
labeling
ﬁnding the semantic roles of each argument of each predicate in a sentence. Cur-
rent approaches to semantic role labeling are based on supervised machine learning,
often using the FrameNet and PropBank resources to specify what counts as a pred-
icate, deﬁne the set of roles used in the task, and provide training and test sets.
Recall that the difference between these two models of semantic roles is that
FrameNet (.) employs many frame-speciﬁc frame elements as roles, while Prop-
Bank (.) uses a smaller number of numbered argument labels that can be inter-
preted as verb-speciﬁc labels, along with the more general ARGM labels. Some
examples:
[You]
can’t [blame]
[the program] [for being unable to identify it]
COGNIZER
TARGET
EVALUEE
REASON
[The San Francisco Examiner] issued
[a special edition] [yesterday]
ARG
TARGET
ARG
ARGM-TMP
A Feature-based Algorithm for Semantic Role Labeling
A simpliﬁed feature-based semantic role labeling algorithm is sketched in Fig. ..
Feature-based algorithms—from the very earliest systems like (Simmons, )—
begin by parsing, using broad-coverage parsers to assign a parse to the input string.

SEMANTIC ROLE LABELING
Figure . shows a parse of (.) above. The parse is then traversed to ﬁnd all
words that are predicates.
For each of these predicates, the algorithm examines each node in the parse
tree and uses supervised classiﬁcation to decide the semantic role (if any) it plays
for this predicate. Given a labeled training set such as PropBank or FrameNet, a
feature vector is extracted for each node, using feature templates described in the
next subsection. A -of-N classiﬁer is then trained to predict a semantic role for
each constituent given these features, where N is the number of potential semantic
roles plus an extra NONE role for non-role constituents. Any standard classiﬁcation
algorithms can be used. Finally, for each test sentence to be labeled, the classiﬁer is
run on each relevant constituent.
function SEMANTICROLELABEL(words) returns labeled tree
parse←PARSE(words)
for each predicate in parse do
for each node in parse do
featurevector←EXTRACTFEATURES(node, predicate, parse)
CLASSIFYNODE(node, featurevector, parse)
Figure .
A generic semantic-role-labeling algorithm. CLASSIFYNODE is a -of-N clas-
siﬁer that assigns a semantic role (or NONE for non-role constituents), trained on labeled data
such as FrameNet or PropBank.
NP-SBJ = ARG
VP
DT
NNP
NNP
NNP
The
San
Francisco
Examiner
VBD = TARGET
NP = ARG
PP-TMP = ARGM-TMP
issued
DT
JJ
NN
IN
NP
special
edition
around
NN
NP-TMP
noon
yesterday
Figure .
Parse tree for a PropBank sentence, showing the PropBank argument labels. The dotted line
shows the path feature NP↑S↓VP↓VBD for ARG, the NP-SBJ constituent The San Francisco Examiner.
Instead of training a single-stage classiﬁer as in Fig. ., the node-level classi-
ﬁcation task can be broken down into multiple steps:
. Pruning: Since only a small number of the constituents in a sentence are
arguments of any given predicate, many systems use simple heuristics to prune
unlikely constituents.
. Identiﬁcation: a binary classiﬁcation of each node as an argument to be la-
beled or a NONE.
. Classiﬁcation: a -of-N classiﬁcation of all the constituents that were labeled
as arguments by the previous stage

CHAPTER
SEMANTIC ROLE LABELING
The separation of identiﬁcation and classiﬁcation may lead to better use of fea-
tures (different features may be useful for the two tasks) or to computational efﬁ-
ciency.
Global Optimization
The classiﬁcation algorithm of Fig. . classiﬁes each argument separately (‘lo-
cally’), making the simplifying assumption that each argument of a predicate can be
labeled independently. This assumption is false; there are interactions between argu-
ments that require a more ‘global’ assignment of labels to constituents. For example,
constituents in FrameNet and PropBank are required to be non-overlapping. More
signiﬁcantly, the semantic roles of constituents are not independent. For example
PropBank does not allow multiple identical arguments; two constituents of the same
verb cannot both be labeled ARG .
Role labeling systems thus often add a fourth step to deal with global consistency
across the labels in a sentence. For example, the local classiﬁers can return a list of
possible labels associated with probabilities for each constituent, and a second-pass
Viterbi decoding or re-ranking approach can be used to choose the best consensus
label. Integer linear programming (ILP) is another common way to choose a solution
that conforms best to multiple constraints.
Features for Semantic Role Labeling
Most systems use some generalization of the core set of features introduced by
Gildea and Jurafsky (). Common basic features templates (demonstrated on
the NP-SBJ constituent The San Francisco Examiner in Fig. .) include:
The governing predicate, in this case the verb issued. The predicate is a cru-
cial feature since labels are deﬁned only with respect to a particular predicate.
The phrase type of the constituent, in this case, NP (or NP-SBJ). Some se-
mantic roles tend to appear as NPs, others as S or PP, and so on.
The headword of the constituent, Examiner. The headword of a constituent
can be computed with standard head rules, such as those given in Appendix D
in Fig. .. Certain headwords (e.g., pronouns) place strong constraints on
the possible semantic roles they are likely to ﬁll.
The headword part of speech of the constituent, NNP.
The path in the parse tree from the constituent to the predicate. This path is
marked by the dotted line in Fig. .. Following Gildea and Jurafsky (),
we can use a simple linear representation of the path, NP↑S↓VP↓VBD. ↑ and
↓ represent upward and downward movement in the tree, respectively. The
path is very useful as a compact representation of many kinds of grammatical
function relationships between the constituent and the predicate.
The voice of the clause in which the constituent appears, in this case, active
(as contrasted with passive). Passive sentences tend to have strongly different
linkings of semantic roles to surface form than do active ones.
The binary linear position of the constituent with respect to the predicate,
either before or after.
The subcategorization of the predicate, the set of expected arguments that
appear in the verb phrase. We can extract this information by using the phrase-
structure rule that expands the immediate parent of the predicate; VP → VBD
NP PP for the predicate in Fig. ..
The named entity type of the constituent.

SEMANTIC ROLE LABELING
The ﬁrst words and the last word of the constituent.
The following feature vector thus represents the ﬁrst NP in our example (recall
that most observations will have the value NONE rather than, for example, ARG,
since most constituents in the parse tree will not bear a semantic role):
ARG: [issued, NP, Examiner, NNP, NP↑S↓VP↓VBD, active, before, VP → NP PP,
ORG, The, Examiner]
Other features are often used in addition, such as sets of n-grams inside the
constituent, or more complex versions of the path features (the upward or downward
halves, or whether particular nodes occur in the path).
It’s also possible to use dependency parses instead of constituency parses as the
basis of features, for example using dependency parse paths instead of constituency
paths.
A Neural Algorithm for Semantic Role Labeling
A simple neural approach to SRL is to treat it as a sequence labeling task like named-
entity recognition, using the BIO approach. Let’s assume that we are given the
predicate and the task is just detecting and labeling spans. Recall that with BIO
tagging, we have a begin and end tag for each possible role (B-ARG, I-ARG; B-
ARG, I-ARG, and so on), plus an outside tag O.
B-ARG
I-ARG B-PRED
B-ARG
Softmax
FFN
FFN
FFN
FFN
FFN
concatenate
with predicate
ENCODER
[CLS]
the
cats
love
hats
[SEP]
love
[SEP]
Figure .
A simple neural approach to semantic role labeling. The input sentence is
followed by [SEP] and an extra input for the predicate, in this case love. The encoder outputs
are concatenated to an indicator variable which is  for the predicate and  for all other words
After He et al. () and Shi and Lin ().
As with all the taggers, the goal is to compute the highest probability tag se-
quence ˆy, given the input sequence of words w:
ˆy = argmax
y∈T
P(y|w)
Fig. . shows a sketch of a standard algorithm from He et al. (). Here each
input word is mapped to pretrained embeddings, and then each token is concatenated
with the predicate embedding and then passed through a feedforward network with
a softmax which outputs a distribution over each SRL label. For decoding, a CRF
layer can be used instead of the MLP layer on top of the biLSTM output to do global
inference, but in practice this doesn’t seem to provide much beneﬁt.

CHAPTER
SEMANTIC ROLE LABELING
Evaluation of Semantic Role Labeling
The standard evaluation for semantic role labeling is to require that each argument
label must be assigned to the exactly correct word sequence or parse constituent, and
then compute precision, recall, and F-measure. Identiﬁcation and classiﬁcation can
also be evaluated separately. Two common datasets used for evaluation are CoNLL-
(Carreras and M`arquez, ) and CoNLL- (Pradhan et al., ).
Selectional Restrictions
We turn in this section to another way to represent facts about the relationship be-
tween predicates and arguments. A selectional restriction is a semantic type con-
selectional
restriction
straint that a verb imposes on the kind of concepts that are allowed to ﬁll its argument
roles. Consider the two meanings associated with the following example:
(.) I want to eat someplace nearby.
There are two possible parses and semantic interpretations for this sentence. In
the sensible interpretation, eat is intransitive and the phrase someplace nearby is
an adjunct that gives the location of the eating event. In the nonsensical speaker-as-
Godzilla interpretation, eat is transitive and the phrase someplace nearby is the direct
object and the THEME of the eating, like the NP Malaysian food in the following
sentences:
I want to eat Malaysian food.
How do we know that someplace nearby isn’t the direct object in this sentence?
One useful cue is the semantic fact that the THEME of EATING events tends to be
something that is edible. This restriction placed by the verb eat on the ﬁller of its
THEME argument is a selectional restriction.
Selectional restrictions are associated with senses, not entire lexemes. We can
see this in the following examples of the lexeme serve:
The restaurant serves green-lipped mussels.
Which airlines serve Denver?
Example (.) illustrates the offering-food sense of serve, which ordinarily re-
stricts its THEME to be some kind of food Example (.) illustrates the provides a
commercial service to sense of serve, which constrains its THEME to be some type
of appropriate location.
Selectional restrictions vary widely in their speciﬁcity. The verb imagine, for
example, imposes strict requirements on its AGENT role (restricting it to humans
and other animate entities) but places very few semantic requirements on its THEME
role. A verb like diagonalize, on the other hand, places a very speciﬁc constraint
on the ﬁller of its THEME role: it has to be a matrix, while the arguments of the
adjective odorless are restricted to concepts that could possess an odor:
(.) In rehearsal, I often ask the musicians to imagine a tennis game.
(.) Radon is an odorless gas that can’t be detected by human senses.
(.) To diagonalize a matrix is to ﬁnd its eigenvalues.
These examples illustrate that the set of concepts we need to represent selectional
restrictions (being a matrix, being able to possess an odor, etc) is quite open ended.
This distinguishes selectional restrictions from other features for representing lexical
knowledge, like parts-of-speech, which are quite limited in number.

SELECTIONAL RESTRICTIONS
Representing Selectional Restrictions
One way to capture the semantics of selectional restrictions is to use and extend the
event representation of Chapter . Recall that the neo-Davidsonian representation
of an event consists of a single variable that stands for the event, a predicate denoting
the kind of event, and variables and relations for the event roles. Ignoring the issue of
the λ-structures and using thematic roles rather than deep event roles, the semantic
contribution of a verb like eat might look like the following:
∃e,x,y Eating(e)∧Agent(e,x)∧Theme(e,y)
With this representation, all we know about y, the ﬁller of the THEME role, is that
it is associated with an Eating event through the Theme relation. To stipulate the
selectional restriction that y must be something edible, we simply add a new term to
that effect:
∃e,x,y Eating(e)∧Agent(e,x)∧Theme(e,y)∧EdibleThing(y)
When a phrase like ate a hamburger is encountered, a semantic analyzer can form
the following kind of representation:
∃e,x,y Eating(e)∧Eater(e,x)∧Theme(e,y)∧EdibleThing(y)∧Hamburger(y)
This representation is perfectly reasonable since the membership of y in the category
Hamburger is consistent with its membership in the category EdibleThing, assuming
a reasonable set of facts in the knowledge base. Correspondingly, the representation
for a phrase such as ate a takeoff would be ill-formed because membership in an
event-like category such as Takeoff would be inconsistent with membership in the
category EdibleThing.
While this approach adequately captures the semantics of selectional restrictions,
there are two problems with its direct use. First, using FOL to perform the simple
task of enforcing selectional restrictions is overkill. Other, far simpler, formalisms
can do the job with far less computational cost. The second problem is that this
approach presupposes a large, logical knowledge base of facts about the concepts
that make up selectional restrictions. Unfortunately, although such common-sense
knowledge bases are being developed, none currently have the kind of coverage
necessary to the task.
A more practical approach is to state selectional restrictions in terms of WordNet
synsets rather than as logical concepts. Each predicate simply speciﬁes a WordNet
synset as the selectional restriction on each of its arguments. A meaning representa-
tion is well-formed if the role ﬁller word is a hyponym (subordinate) of this synset.
For our ate a hamburger example, for instance, we could set the selectional
restriction on the THEME role of the verb eat to the synset {food, nutrient}, glossed
as any substance that can be metabolized by an animal to give energy and build
tissue. Luckily, the chain of hypernyms for hamburger shown in Fig. . reveals
that hamburgers are indeed food. Again, the ﬁller of a role need not match the
restriction synset exactly; it just needs to have the synset as one of its superordinates.
We can apply this approach to the THEME roles of the verbs imagine, lift, and di-
agonalize, discussed earlier. Let us restrict imagine’s THEME to the synset {entity},
lift’s THEME to {physical entity}, and diagonalize to {matrix}. This arrangement
correctly permits imagine a hamburger and lift a hamburger, while also correctly
ruling out diagonalize a hamburger.

CHAPTER
SEMANTIC ROLE LABELING
Sense
hamburger, beefburger --
(a fried cake of minced beef served on a bun)
=> sandwich
=> snack food
=> dish
=> nutriment, nourishment, nutrition...
=> food, nutrient
=> substance
=> matter
=> physical entity
=> entity
Figure .
Evidence from WordNet that hamburgers are edible.
Selectional Preferences
In the earliest implementations, selectional restrictions were considered strict con-
straints on the kind of arguments a predicate could take (Katz and Fodor ,
Hirst ). For example, the verb eat might require that its THEME argument be
[+FOOD]. Early word sense disambiguation systems used this idea to rule out senses
that violated the selectional restrictions of their governing predicates.
Very quickly, however, it became clear that these selectional restrictions were
better represented as preferences rather than strict constraints (Wilks b, Wilks
a). For example, selectional restriction violations (like inedible arguments of
eat) often occur in well-formed sentences, for example because they are negated
(.), or because selectional restrictions are overstated (.):
(.) But it fell apart in , perhaps because people realized you can’t eat
gold for lunch if you’re hungry.
(.) In his two championship trials, Mr. Kulkarni ate glass on an empty
stomach, accompanied only by water and tea.
Modern systems for selectional preferences therefore specify the relation be-
tween a predicate and its possible arguments with soft constraints of some kind.
Selectional Association
One of the most inﬂuential has been the selectional association model of Resnik
(). Resnik deﬁnes the idea of selectional preference strength as the general
selectional
preference
strength
amount of information that a predicate tells us about the semantic class of its argu-
ments. For example, the verb eat tells us a lot about the semantic class of its direct
objects, since they tend to be edible. The verb be, by contrast, tells us less about
its direct objects. The selectional preference strength can be deﬁned by the differ-
ence in information between two distributions: the distribution of expected semantic
classes P(c) (how likely is it that a direct object will fall into class c) and the dis-
tribution of expected semantic classes for the particular verb P(c|v) (how likely is
it that the direct object of the speciﬁc verb v will fall into semantic class c). The
greater the difference between these distributions, the more information the verb
is giving us about possible objects. The difference between these two distributions
can be quantiﬁed by relative entropy, or the Kullback-Leibler divergence (Kullback
relative entropy
and Leibler, ). The Kullback-Leibler or KL divergence D(P||Q) expresses the
KL divergence

SELECTIONAL RESTRICTIONS
difference between two probability distributions P and Q
Q(x)
P(x)log P(x)
D(P||Q) =
The selectional preference SR(v) uses the KL divergence to express how much in-
formation, in bits, the verb v expresses about the possible semantic class of its argu-
ment.
SR(v) = D(P(c|v)||P(c))
P(c)
P(c|v)log P(c|v)
Resnik then deﬁnes the selectional association of a particular class and verb as the
selectional
association
relative contribution of that class to the general selectional preference of the verb:
AR(v,c) =
P(c)
SR(v)P(c|v)log P(c|v)
The selectional association is thus a probabilistic measure of the strength of asso-
ciation between a predicate and a class dominating the argument to the predicate.
Resnik estimates the probabilities for these associations by parsing a corpus, count-
ing all the times each predicate occurs with each argument word, and assuming
that each word is a partial observation of all the WordNet concepts containing the
word. The following table from Resnik () shows some sample high and low
selectional associations for verbs and some WordNet semantic classes of their direct
objects.
Direct Object
Direct Object
Verb
Semantic Class Assoc
Semantic Class Assoc
read
WRITING
ACTIVITY
write
WRITING
COMMERCE
see
ENTITY
METHOD
Selectional Preference via Conditional Probability
An alternative to using selectional association between a verb and the WordNet class
of its arguments is to use the conditional probability of an argument word given a
predicate verb, directly modeling the strength of association of one verb (predicate)
with one noun (argument).
The conditional probability model can be computed by parsing a very large cor-
pus (billions of words), and computing co-occurrence counts: how often a given
verb occurs with a given noun in a given relation. The conditional probability of an
argument noun given a verb for a particular relation P(n|v,r) can then be used as a
selectional preference metric for that pair of words (Brockmann and Lapata ,
Keller and Lapata ):
P(n|v,r) =
C(n,v,r)
C(v,r)
if C(n,v,r) >
otherwise
The inverse probability P(v|n,r) was found to have better performance in some cases
(Brockmann and Lapata, ):
P(v|n,r) =
C(n,v,r)
C(n,r)
if C(n,v,r) >
otherwise

CHAPTER
SEMANTIC ROLE LABELING
An even simpler approach is to use the simple log co-occurrence frequency of
the predicate with the argument logcount(v,n,r) instead of conditional probability;
this seems to do better for extracting preferences for syntactic subjects rather than
objects (Brockmann and Lapata, ).
Evaluating Selectional Preferences
One way to evaluate models of selectional preferences is to use pseudowords (Gale
pseudowords
et al. b, Sch¨utze a). A pseudoword is an artiﬁcial word created by concate-
nating a test word in some context (say banana) with a confounder word (say door)
to create banana-door). The task of the system is to identify which of the two words
is the original word. To evaluate a selectional preference model (for example on the
relationship between a verb and a direct object) we take a test corpus and select all
verb tokens. For each verb token (say drive) we select the direct object (e.g., car),
concatenated with a confounder word that is its nearest neighbor, the noun with the
frequency closest to the original (say house), to make car/house). We then use the
selectional preference model to choose which of car and house are more preferred
objects of drive, and compute how often the model chooses the correct original ob-
ject (e.g., car) (Chambers and Jurafsky, ).
Another evaluation metric is to get human preferences for a test set of verb-
argument pairs, and have them rate their degree of plausibility. This is usually done
by using magnitude estimation, a technique from psychophysics, in which subjects
rate the plausibility of an argument proportional to a modulus item. A selectional
preference model can then be evaluated by its correlation with the human prefer-
ences (Keller and Lapata, ).
Primitive Decomposition of Predicates
One way of thinking about the semantic roles we have discussed through the chapter
is that they help us deﬁne the roles that arguments play in a decompositional way,
based on ﬁnite lists of thematic roles (agent, patient, instrument, proto-agent, proto-
patient, etc.). This idea of decomposing meaning into sets of primitive semantic
elements or features, called primitive decomposition or componential analysis,
componential
analysis
has been taken even further, and focused particularly on predicates.
Consider these examples of the verb kill:
(.) Jim killed his philodendron.
(.) Jim did something to cause his philodendron to become not alive.
There is a truth-conditional (‘propositional semantics’) perspective from which these
two sentences have the same meaning. Assuming this equivalence, we could repre-
sent the meaning of kill as:
(.) KILL(x,y) ⇔ CAUSE(x, BECOME(NOT(ALIVE(y))))
thus using semantic primitives like do, cause, become not, and alive.
Indeed, one such set of potential semantic primitives has been used to account
for some of the verbal alternations discussed in Section . (Lakoff , Dowty
). Consider the following examples.
(.) John opened the door. ⇒ CAUSE(John, BECOME(OPEN(door)))
(.) The door opened. ⇒ BECOME(OPEN(door))

SUMMARY
(.) The door is open. ⇒ OPEN(door)
The decompositional approach asserts that a single state-like predicate associ-
ated with open underlies all of these examples. The differences among the meanings
of these examples arises from the combination of this single predicate with the prim-
itives CAUSE and BECOME.
While this approach to primitive decomposition can explain the similarity be-
tween states and actions or causative and non-causative predicates, it still relies on
having a large number of predicates like open. More radical approaches choose to
break down these predicates as well. One such approach to verbal predicate decom-
position that played a role in early natural language systems is conceptual depen-
dency (CD), a set of ten primitive predicates, shown in Fig. ..
conceptual
dependency
Primitive
Deﬁnition
ATRANS
The abstract transfer of possession or control from one entity to
another
PTRANS
The physical transfer of an object from one location to another
MTRANS
The transfer of mental concepts between entities or within an
entity
MBUILD
The creation of new information within an entity
PROPEL
The application of physical force to move an object
MOVE
The integral movement of a body part by an animal
INGEST
The taking in of a substance by an animal
EXPEL
The expulsion of something from an animal
SPEAK
The action of producing a sound
ATTEND
The action of focusing a sense organ
Figure .
A set of conceptual dependency primitives.
Below is an example sentence along with its CD representation. The verb brought
is translated into the two primitives ATRANS and PTRANS to indicate that the waiter
both physically conveyed the check to Mary and passed control of it to her. Note
that CD also associates a ﬁxed set of thematic roles with each primitive to represent
the various participants in the action.
(.) The waiter brought Mary the check.
∃x,y Atrans(x)∧Actor(x,Waiter)∧Object(x,Check)∧To(x,Mary)
∧Ptrans(y)∧Actor(y,Waiter)∧Object(y,Check)∧To(y,Mary)
Summary
Semantic roles are abstract models of the role an argument plays in the event
described by the predicate.
Thematic roles are a model of semantic roles based on a single ﬁnite list of
roles. Other semantic role models include per-verb semantic role lists and
proto-agent/proto-patient, both of which are implemented in PropBank,
and per-frame role lists, implemented in FrameNet.

CHAPTER
SEMANTIC ROLE LABELING
Semantic role labeling is the task of assigning semantic role labels to the
constituents of a sentence. The task is generally treated as a supervised ma-
chine learning task, with models trained on PropBank or FrameNet. Algo-
rithms generally start by parsing a sentence and then automatically tag each
parse tree node with a semantic role. Neural models map straight from words
end-to-end.
Semantic selectional restrictions allow words (particularly predicates) to post
constraints on the semantic properties of their argument words. Selectional
preference models (like selectional association or simple conditional proba-
bility) allow a weight or probability to be assigned to the association between
a predicate and an argument word or class.
Bibliographical and Historical Notes
Although the idea of semantic roles dates back to P¯an.ini, they were re-introduced
into modern linguistics by Gruber (), Fillmore () and Fillmore (). Fill-
more had become interested in argument structure by studying Lucien Tesni`ere’s
groundbreaking ´El´ements de Syntaxe Structurale (Tesni`ere, ) in which the term
‘dependency’ was introduced and the foundations were laid for dependency gram-
mar. Following Tesni`ere’s terminology, Fillmore ﬁrst referred to argument roles as
actants (Fillmore, ) but quickly switched to the term case, (see Fillmore ())
and proposed a universal list of semantic roles or cases (Agent, Patient, Instrument,
etc.), that could be taken on by the arguments of predicates. Verbs would be listed in
the lexicon with their case frame, the list of obligatory (or optional) case arguments.
The idea that semantic roles could provide an intermediate level of semantic
representation that could help map from syntactic parse structures to deeper, more
fully-speciﬁed representations of meaning was quickly adopted in natural language
processing, and systems for extracting case frames were created for machine transla-
tion (Wilks, ), question-answering (Hendrix et al., ), spoken-language pro-
cessing (Nash-Webber, ), and dialogue systems (Bobrow et al., ). General-
purpose semantic role labelers were developed. The earliest ones (Simmons, )
ﬁrst parsed a sentence by means of an ATN (Augmented Transition Network) parser.
Each verb then had a set of rules specifying how the parse should be mapped to se-
mantic roles. These rules mainly made reference to grammatical functions (subject,
object, complement of speciﬁc prepositions) but also checked constituent internal
features such as the animacy of head nouns. Later systems assigned roles from pre-
built parse trees, again by using dictionaries with verb-speciﬁc case frames (Levin
, Marcus ).
By  case representation was widely used and taught in AI and NLP courses,
and was described as a standard of natural language processing in the ﬁrst edition of
Winston’s  textbook Artiﬁcial Intelligence.
In the s Fillmore proposed his model of frame semantics, later describing
the intuition as follows:
“The idea behind frame semantics is that speakers are aware of possi-
bly quite complex situation types, packages of connected expectations,
that go by various names—frames, schemas, scenarios, scripts, cultural
narratives, memes—and the words in our language are understood with
such frames as their presupposed background.” (Fillmore, , p. )

BIBLIOGRAPHICAL AND HISTORICAL NOTES
The word frame seemed to be in the air for a suite of related notions proposed at
about the same time by Minsky (), Hymes (), and Goffman (), as
well as related notions with other names like scripts (Schank and Abelson, )
and schemata (Bobrow and Norman, ) (see Tannen () for a comparison).
Fillmore was also inﬂuenced by the semantic ﬁeld theorists and by a visit to the Yale
AI lab where he took notice of the lists of slots and ﬁllers used by early information
extraction systems like DeJong () and Schank and Abelson (). In the s
Fillmore drew on these insights to begin the FrameNet corpus annotation project.
At the same time, Beth Levin drew on her early case frame dictionaries (Levin,
) to develop her book which summarized sets of verb classes deﬁned by shared
argument realizations (Levin, ). The VerbNet project built on this work (Kipper
et al., ), leading soon afterwards to the PropBank semantic-role-labeled corpus
created by Martha Palmer and colleagues (Palmer et al., ).
The combination of rich linguistic annotation and corpus-based approach in-
stantiated in FrameNet and PropBank led to a revival of automatic approaches to
semantic role labeling, ﬁrst on FrameNet (Gildea and Jurafsky, ) and then on
PropBank data (Gildea and Palmer, , inter alia). The problem ﬁrst addressed in
the s by handwritten rules was thus now generally recast as one of supervised
machine learning enabled by large and consistent databases. Many popular features
used for role labeling are deﬁned in Gildea and Jurafsky (), Surdeanu et al.
(), Xue and Palmer (), Pradhan et al. (), Che et al. (), and Zhao
et al. (). The use of dependency rather than constituency parses was introduced
in the CoNLL- shared task (Surdeanu et al., ). For surveys see Palmer
et al. () and M`arquez et al. ().
The use of neural approaches to semantic role labeling was pioneered by Col-
lobert et al. (), who applied a CRF on top of a convolutional net. Early work
like Foland, Jr. and Martin () focused on using dependency features. Later work
eschewed syntactic features altogether; Zhou and Xu (b) introduced the use of
a stacked (- layer) biLSTM architecture, and (He et al., ) showed how to
augment the biLSTM architecture with highway networks and also replace the CRF
with A* decoding that make it possible to apply a wide variety of global constraints
in SRL decoding.
Most semantic role labeling schemes only work within a single sentence, fo-
cusing on the object of the verbal (or nominal, in the case of NomBank) predicate.
However, in many cases, a verbal or nominal predicate may have an implicit argu-
ment: one that appears only in a contextual sentence, or perhaps not at all and must
implicit
argument
be inferred. In the two sentences This house has a new owner. The sale was ﬁnalized
days ago. the sale in the second sentence has no ARG, but a reasonable reader
would infer that the Arg should be the house mentioned in the prior sentence. Find-
ing these arguments, implicit argument detection (sometimes shortened as iSRL)
iSRL
was introduced by Gerber and Chai () and Ruppenhofer et al. (). See Do
et al. () for more recent neural models.
To avoid the need for huge labeled training sets, unsupervised approaches for
semantic role labeling attempt to induce the set of semantic roles by clustering over
arguments. The task was pioneered by Riloff and Schmelzenbach () and Swier
and Stevenson (); see Grenager and Manning (), Titov and Klementiev
(), Lang and Lapata (), Woodsend and Lapata (), and Titov and Khod-
dam ().
Recent innovations in frame labeling include connotation frames, which mark
richer information about the argument of predicates. Connotation frames mark the

CHAPTER
SEMANTIC ROLE LABELING
sentiment of the writer or reader toward the arguments (for example using the verb
survive in he survived a bombing expresses the writer’s sympathy toward the subject
he and negative sentiment toward the bombing. See Chapter  for more details.
Selectional preference has been widely studied beyond the selectional associa-
tion models of Resnik () and Resnik (). Methods have included clustering
(Rooth et al., ), discriminative learning (Bergsma et al., a), and topic mod-
els (S´eaghdha , Ritter et al. b), and constraints can be expressed at the level
of words or classes (Agirre and Martinez, ). Selectional preferences have also
been successfully integrated into semantic role labeling (Erk , Zapirain et al.
, Do et al. ).
Exercises

Lexicons for Sentiment, Affect,
and Connotation
CHAPTER
Some day we’ll be able to measure the power of words
Maya Angelou
In this chapter we turn to tools for interpreting affective meaning, extending our
affective
study of sentiment analysis in Chapter . We use the word ‘affective’, following the
tradition in affective computing (Picard, ) to mean emotion, sentiment, per-
sonality, mood, and attitudes. Affective meaning is closely related to subjectivity,
subjectivity
the study of a speaker or writer’s evaluations, opinions, emotions, and speculations
(Wiebe et al., ).
How should affective meaning be deﬁned? One inﬂuential typology of affec-
tive states comes from Scherer (), who deﬁnes each class of affective states by
factors like its cognitive realization and time course (Fig. .).
Emotion: Relatively brief episode of response to the evaluation of an external
or internal event as being of major signiﬁcance.
(angry, sad, joyful, fearful, ashamed, proud, elated, desperate)
Mood: Diffuse affect state, most pronounced as change in subjective feeling, of
low intensity but relatively long duration, often without apparent cause.
(cheerful, gloomy, irritable, listless, depressed, buoyant)
Interpersonal stance: Affective stance taken toward another person in a spe-
ciﬁc interaction, coloring the interpersonal exchange in that situation.
(distant, cold, warm, supportive, contemptuous, friendly)
Attitude: Relatively enduring, affectively colored beliefs, preferences, and pre-
dispositions towards objects or persons.
(liking, loving, hating, valuing, desiring)
Personality traits: Emotionally laden, stable personality dispositions and be-
havior tendencies, typical for a person.
(nervous, anxious, reckless, morose, hostile, jealous)
Figure .
The Scherer typology of affective states (Scherer, ).
We can design extractors for each of these kinds of affective states. Chapter
already introduced sentiment analysis, the task of extracting the positive or negative
orientation that a writer expresses in a text. This corresponds in Scherer’s typology
to the extraction of attitudes: ﬁguring out what people like or dislike, from affect-
rich texts like consumer reviews of books or movies, newspaper editorials, or public
sentiment in blogs or tweets.
Detecting emotion and moods is useful for detecting whether a student is con-
fused, engaged, or certain when interacting with a tutorial system, whether a caller
to a help line is frustrated, whether someone’s blog posts or tweets indicated depres-
sion. Detecting emotions like fear in novels, for example, could help us trace what
groups or situations are feared and how that changes over time.

CHAPTER
LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
Detecting different interpersonal stances can be useful when extracting infor-
mation from human-human conversations. The goal here is to detect stances like
friendliness or awkwardness in interviews or friendly conversations, for example for
summarizing meetings or ﬁnding parts of a conversation where people are especially
excited or engaged, conversational hot spots that can help in meeting summariza-
tion. Detecting the personality of a user—such as whether the user is an extrovert
or the extent to which they are open to experience— can help improve conversa-
tional agents, which seem to work better if they match users’ personality expecta-
tions (Mairesse and Walker, ). And affect is important for generation as well
as recognition; synthesizing affect is important for conversational agents in various
domains, including literacy tutors such as children’s storybooks, or computer games.
In Chapter  we introduced the use of naive Bayes classiﬁcation to classify a
document’s sentiment. Various classiﬁers have been successfully applied to many of
these tasks, using all the words in the training set as input to a classiﬁer which then
determines the affect status of the text.
In this chapter we focus on an alternative model, in which instead of using every
word as a feature, we focus only on certain words, ones that carry particularly strong
cues to affect or sentiment. We call these lists of words affective lexicons or senti-
ment lexicons. These lexicons presuppose a fact about semantics: that words have
affective meanings or connotations. The word connotation has different meanings
connotations
in different ﬁelds, but here we use it to mean the aspects of a word’s meaning that
are related to a writer or reader’s emotions, sentiment, opinions, or evaluations. In
addition to their ability to help determine the affective status of a text, connotation
lexicons can be useful features for other kinds of affective tasks, and for computa-
tional social science analysis.
In the next sections we introduce basic theories of emotion, show how sentiment
lexicons are a special case of emotion lexicons, and mention some useful lexicons.
We then survey three ways for building lexicons: human labeling, semi-supervised,
and supervised. Finally, we talk about how to detect affect toward a particular entity,
and introduce connotation frames.
Deﬁning Emotion
One of the most important affective classes is emotion, which Scherer () deﬁnes
emotion
as a “relatively brief episode of response to the evaluation of an external or internal
event as being of major signiﬁcance”.
Detecting emotion has the potential to improve a number of language processing
tasks. Emotion recognition could help dialogue systems like tutoring systems detect
that a student was unhappy, bored, hesitant, conﬁdent, and so on. Automatically
detecting emotions in reviews or customer responses (anger, dissatisfaction, trust)
could help businesses recognize speciﬁc problem areas or ones that are going well.
Emotion can play a role in medical NLP tasks like helping diagnose depression or
suicidal intent. Detecting emotions expressed toward characters in novels might
play a role in understanding how different social groups were viewed by society at
different times.
Computational models of emotion in NLP have mainly been based on two fami-
lies of theories of emotion (out of the many studied in the ﬁeld of affective science).
In one of these families, emotions are viewed as ﬁxed atomic units, limited in num-
ber, and from which others are generated, often called basic emotions (Tomkins
basic emotions

DEFINING EMOTION
, Plutchik ), a model dating back to Darwin. Perhaps the most well-known
of this family of theories are the  emotions proposed by Ekman (e.g., Ekman )
to be universally present in all cultures: surprise, happiness, anger, fear, disgust,
sadness. Another atomic theory is the Plutchik () wheel of emotion, consisting
of  basic emotions in four opposing pairs: joy–sadness, anger–fear, trust–disgust,
and anticipation–surprise, together with the emotions derived from them, shown in
Fig. ..
Figure .
Plutchik wheel of emotion.
The second class of emotion theories widely used in NLP views emotion as a
space in  or  dimensions (Russell, ). Most models include the two dimensions
valence and arousal, and many add a third, dominance. These can be deﬁned as:
valence: the pleasantness of the stimulus
arousal: the level of alertness, activeness, or energy provoked by the stimulus
dominance: the degree of control or dominance exerted by the stimulus or the
emotion
Sentiment can be viewed as a special case of this second view of emotions as points
in space. In particular, the valence dimension, measuring how pleasant or unpleasant
a word is, is often used directly as a measure of sentiment.
In these lexicon-based models of affect, the affective meaning of a word is gen-
erally ﬁxed, irrespective of the linguistic context in which a word is used, or the
dialect or culture of the speaker. By contrast, other models in affective science repre-
sent emotions as much richer processes involving cognition (Barrett et al., ). In
appraisal theory, for example, emotions are complex processes, in which a person
considers how an event is congruent with their goals, taking into account variables
like the agency, certainty, urgency, novelty and control associated with the event
(Moors et al., ). Computational models in NLP taking into account these richer
theories of emotion will likely play an important role in future work.

CHAPTER
LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
Available Sentiment and Affect Lexicons
A wide variety of affect lexicons have been created and released. The most basic
lexicons label words along one dimension of semantic variability, generally called
“sentiment” or “valence”.
In the simplest lexicons this dimension is represented in a binary fashion, with
a wordlist for positive words and a wordlist for negative words. The oldest is the
General Inquirer (Stone et al., ), which drew on content analysis and on early
General
Inquirer
work in the cognitive psychology of word meaning (Osgood et al., ). The Gen-
eral Inquirer has a lexicon of  positive words and a lexicon of  negative
words (as well as other lexicons discussed below). The MPQA Subjectivity lexicon
(Wilson et al., ) has  positive and  negative words drawn from prior
lexicons plus a bootstrapped list of subjective words and phrases (Riloff and Wiebe,
). Each entry in the lexicon is hand-labeled for sentiment and also labeled for
reliability (strongly subjective or weakly subjective). The polarity lexicon of Hu
and Liu (b) gives  positive and  negative words, drawn from product
reviews, labeled using a bootstrapping method from WordNet.
Positive
admire, amazing, assure, celebration, charm, eager, enthusiastic, excellent, fancy, fan-
tastic, frolic, graceful, happy, joy, luck, majesty, mercy, nice, patience, perfect, proud,
rejoice, relief, respect, satisfactorily, sensational, super, terriﬁc, thank, vivid, wise, won-
derful, zest
Negative abominable, anger, anxious, bad, catastrophe, cheap, complaint, condescending, deceit,
defective, disappointment, embarrass, fake, fear, ﬁlthy, fool, guilt, hate, idiot, inﬂict, lazy,
miserable, mourn, nervous, objection, pest, plot, reject, scream, silly, terrible, unfriendly,
vile, wicked
Figure .
Some words with consistent sentiment across the General Inquirer (Stone et al., ), the
MPQA Subjectivity lexicon (Wilson et al., ), and the polarity lexicon of Hu and Liu (b).
Slightly more general than these sentiment lexicons are lexicons that assign each
word a value on all three affective dimensions. The NRC Valence, Arousal, and
Dominance (VAD) lexicon (Mohammad, a) assigns valence, arousal, and dom-
inance scores to , words. Some examples are shown in Fig. ..
Valence
Arousal
Dominance
vacation
enraged
powerful
delightful
party
authority
whistle
organized
saxophone
consolation
effortless
discouraged
torture
napping
weak
Figure .
Values of sample words on the emotional dimensions of Mohammad (a).
The NRC Word-Emotion Association Lexicon, also called EmoLex (Moham-
EmoLex
mad and Turney, ), uses the Plutchik ()  basic emotions deﬁned above.
The lexicon includes around , words including words from prior lexicons as
well as frequent nouns, verbs, adverbs and adjectives. Values from the lexicon for
some sample words:

CREATING AFFECT LEXICONS BY HUMAN LABELING
trust
anger
anticipation
disgust
fear
joy
sadness
surprise
negative
positive
Word
reward

worry

tenderness

sweetheart

suddenly

thirst

garbage

For a smaller set of , words, the NRC Emotion/Affect Intensity Lexicon
(Mohammad, b) contains real-valued scores of association for anger, fear, joy,
and sadness; Fig. . shows examples.
Anger
Fear
Joy
Sadness
outraged
horror
superb
sad
violence
anguish
cheered
guilt
coup
pestilence
rainbow
unkind
oust
stressed
gesture
difﬁculties
suspicious
failing
warms
beggar
nurture
conﬁdent
hardship
sing
Figure .
Sample emotional intensities for words for anger, fear, joy, and sadness from
Mohammad (b).
LIWC, Linguistic Inquiry and Word Count, is a widely used set of  lex-
LIWC
icons containing over  words (Pennebaker et al., ), designed to capture
aspects of lexical meaning relevant for social psychological tasks. In addition to
sentiment-related lexicons like ones for negative emotion (bad, weird, hate, prob-
lem, tough) and positive emotion (love, nice, sweet), LIWC includes lexicons for
categories like anger, sadness, cognitive mechanisms, perception, tentative, and in-
hibition, shown in Fig. ..
There are various other hand-built affective lexicons. The General Inquirer in-
cludes additional lexicons for dimensions like strong vs. weak, active vs. passive,
overstated vs. understated, as well as lexicons for categories like pleasure, pain,
virtue, vice, motivation, and cognitive orientation.
Another useful feature for various tasks is the distinction between concrete
concrete
words like banana or bathrobe and abstract words like belief and although. The
abstract
lexicon in Brysbaert et al. () used crowdsourcing to assign a rating from  to
of the concreteness of , words, thus assigning banana, bathrobe, and bagel ,
belief ., although ., and in between words like brisk a ..
Creating Affect Lexicons by Human Labeling
The earliest method used to build affect lexicons, and still in common use, is to have
humans label each word. This is now most commonly done via crowdsourcing:
crowdsourcing
breaking the task into small pieces and distributing them to a large number of anno-

CHAPTER
LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
Positive
Negative
Emotion
Emotion
Insight
Inhibition
Family
Negate
appreciat*
anger*
aware*
avoid*
brother*
aren’t
comfort*
bore*
believe
careful*
cousin*
cannot
great
cry
decid*
hesitat*
daughter*
didn’t
happy
despair*
feel
limit*
family
neither
interest
fail*
ﬁgur*
oppos*
father*
never
joy*
fear
know
prevent*
grandf*
no
perfect*
griev*
knew
reluctan*
grandm*
nobod*
please*
hate*
means
safe*
husband
none
safe*
panic*
notice*
stop
mom
nor
terriﬁc
suffers
recogni*
stubborn*
mother
nothing
value
terrify
sense
wait
niece*
nowhere
wow*
violent*
think
wary
wife
without
Figure .
Samples from  of the  lexical categories in LIWC (Pennebaker et al., ).
The * means the previous letters are a word preﬁx and all words with that preﬁx are included
in the category.
tators. Let’s take a look at some of the methodological choices for two crowdsourced
emotion lexicons.
The NRC Emotion Lexicon (EmoLex) (Mohammad and Turney, ), labeled
emotions in two steps. To ensure that the annotators were judging the correct sense
of the word, they ﬁrst answered a multiple-choice synonym question that primed
the correct sense of the word (without requiring the annotator to read a potentially
confusing sense deﬁnition). These were created automatically using the headwords
associated with the thesaurus category of the sense in question in the Macquarie
dictionary and the headwords of  random distractor categories. An example:
Which word is closest in meaning (most related) to startle?
automobile
shake
honesty
entertain
For each word (e.g. startle), the annotator was then asked to rate how associated
that word is with each of the  emotions (joy, fear, anger, etc.). The associations
were rated on a scale of not, weakly, moderately, and strongly associated. Outlier
ratings were removed, and then each term was assigned the class chosen by the ma-
jority of the annotators, with ties broken by choosing the stronger intensity, and then
the  levels were mapped into a binary label for each word (no and weak mapped to
, moderate and strong mapped to ).
The NRC VAD Lexicon (Mohammad, a) was built by selecting words and
emoticons from prior lexicons and annotating them with crowd-sourcing using best-
worst scaling (Louviere et al. , Kiritchenko and Mohammad ). In best-
best-worst
scaling
worst scaling, annotators are given N items (usually ) and are asked which item is
the best (highest) and which is the worst (lowest) in terms of some property. The
set of words used to describe the ends of the scales are taken from prior literature.
For valence, for example, the raters were asked:
Q. Which of the four words below is associated with the MOST happi-
ness / pleasure / positiveness / satisfaction / contentedness / hopefulness
OR LEAST unhappiness / annoyance / negativeness / dissatisfaction /

SEMI-SUPERVISED INDUCTION OF AFFECT LEXICONS
melancholy / despair? (Four words listed as options.)
Q. Which of the four words below is associated with the LEAST hap-
piness / pleasure / positiveness / satisfaction / contentedness / hopeful-
ness OR MOST unhappiness / annoyance / negativeness / dissatisfaction
/ melancholy / despair? (Four words listed as options.)
The score for each word in the lexicon is the proportion of times the item was chosen
as the best (highest V/A/D) minus the proportion of times the item was chosen as the
worst (lowest V/A/D). The agreement between annotations are evaluated by split-
half reliability: split the corpus in half and compute the correlations between the
split-half
reliability
annotations in the two halves.
Semi-supervised Induction of Affect Lexicons
Another common way to learn sentiment lexicons is to start from a set of seed words
that deﬁne two poles of a semantic axis (words like good or bad), and then ﬁnd ways
to label each word w by its similarity to the two seed sets. Here we summarize two
families of seed-based semi-supervised lexicon induction algorithms, axis-based and
graph-based.
Semantic Axis Methods
One of the most well-known lexicon induction methods, the Turney and Littman
() algorithm, is given seed words like good or bad, and then for each word w to
be labeled, measures both how similar it is to good and how different it is from bad.
Here we describe a slight extension of the algorithm due to An et al. (), which
is based on computing a semantic axis.
In the ﬁrst step, we choose seed words by hand. There are two methods for
dealing with the fact that the affect of a word is different in different contexts: ()
start with a single large seed lexicon and rely on the induction algorithm to ﬁne-tune
it to the domain, or () choose different seed words for different genres. Hellrich
et al. () suggests that for modeling affect across different historical time periods,
starting with a large modern affect dictionary is better than small seedsets tuned to be
stable across time. As an example of the second approach, Hamilton et al. (a)
deﬁne one set of seed words for general sentiment analysis, a different set for Twitter,
and yet another set for sentiment in ﬁnancial text:
Domain
Positive seeds
Negative seeds
General
good, lovely, excellent, fortunate, pleas-
ant, delightful, perfect, loved, love,
happy
bad, horrible, poor, unfortunate, un-
pleasant, disgusting, evil, hated, hate,
unhappy
Twitter
love,
loved,
loves,
awesome,
nice,
amazing, best, fantastic, correct, happy
hate, hated, hates, terrible, nasty, awful,
worst, horrible, wrong, sad
Finance
successful, excellent, proﬁt, beneﬁcial,
improving, improved, success, gains,
positive
negligent, loss, volatile, wrong, losses,
damages, bad, litigation, failure, down,
negative
In the second step, we compute embeddings for each of the pole words. These
embeddings can be off-the-shelf wordvec embeddings, or can be computed directly

CHAPTER
LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
on a speciﬁc corpus (for example using a ﬁnancial corpus if a ﬁnance lexicon is the
goal), or we can ﬁne-tune off-the-shelf embeddings to a corpus. Fine-tuning is espe-
cially important if we have a very speciﬁc genre of text but don’t have enough data
to train good embeddings. In ﬁne-tuning, we begin with off-the-shelf embeddings
like wordvec, and continue training them on the small target corpus.
Once we have embeddings for each pole word, we create an embedding that
represents each pole by taking the centroid of the embeddings of each of the seed
words; recall that the centroid is the multidimensional version of the mean. Given
a set of embeddings for the positive seed words S+ = {E(w+
),E(w+
),...,E(w+
n )},
and embeddings for the negative seed words S− = {E(w−
),E(w−
),...,E(w−
m)}, the
pole centroids are:
V+ =
E(w+
i )
V− =
E(w−
i )
The semantic axis deﬁned by the poles is computed just by subtracting the two vec-
tors:
Vaxis = V+ −V−
Vaxis, the semantic axis, is a vector in the direction of positive sentiment. Finally,
we compute (via cosine similarity) the angle between the vector in the direction of
positive sentiment and the direction of w’s embedding. A higher cosine means that
w is more aligned with S+ than S−.
score(w) = cos
E(w),Vaxis
E(w)Vaxis
∥E(w)∥∥Vaxis∥
If a dictionary of words with sentiment scores is sufﬁcient, we’re done! Or if we
need to group words into a positive and a negative lexicon, we can use a threshold
or other method to give us discrete lexicons.
Label Propagation
An alternative family of methods deﬁnes lexicons by propagating sentiment labels
on graphs, an idea suggested in early work by Hatzivassiloglou and McKeown
(). We’ll describe the simple SentProp (Sentiment Propagation) algorithm of
Hamilton et al. (a), which has four steps:
. Deﬁne a graph: Given word embeddings, build a weighted lexical graph by
connecting each word with its k nearest neighbors (according to cosine simi-
larity). The weights of the edge between words wi and w j are set as:
Ei, j = arccos

wi⊤wj

∥wi∥∥wj∥
. Deﬁne a seed set: Choose positive and negative seed words.
. Propagate polarities from the seed set: Now we perform a random walk on
this graph, starting at the seed set. In a random walk, we start at a node and

SEMI-SUPERVISED INDUCTION OF AFFECT LEXICONS
then choose a node to move to with probability proportional to the edge prob-
ability. A word’s polarity score for a seed set is proportional to the probability
of a random walk from the seed set landing on that word (Fig. .).
. Create word scores: We walk from both positive and negative seed sets,
resulting in positive (rawscore+(wi)) and negative (rawscore−(wi)) raw label
scores. We then combine these values into a positive-polarity score as:
score+(wi) =
rawscore+(wi)
rawscore+(wi)+rawscore−(wi)
It’s often helpful to standardize the scores to have zero mean and unit variance
within a corpus.
. Assign conﬁdence to each score: Because sentiment scores are inﬂuenced by
the seed set, we’d like to know how much the score of a word would change if
a different seed set is used. We can use bootstrap sampling to get conﬁdence
regions, by computing the propagation B times over random subsets of the
positive and negative seed sets (for example using B =  and choosing  of
the  seed words each time). The standard deviation of the bootstrap sampled
polarity scores gives a conﬁdence measure.
loathe
loathe
like
like
abhor
abhor
ﬁnd
ﬁnd
idolize
love
hate
idolize
love
hate
dislike
see
uncover
dislike
see
uncover
despise
despise
adore
adore
disapprove
disapprove
notice
notice
appreciate
appreciate
(a)
(b)
Figure .
Intuition of the SENTPROP algorithm. (a) Run random walks from the seed words. (b) Assign
polarity scores (shown here as colors green or red) based on the frequency of random walk visits.
Other Methods
The core of semisupervised algorithms is the metric for measuring similarity with
the seed words. The Turney and Littman () and Hamilton et al. (a) ap-
proaches above used embedding cosine as the distance metric: words were labeled
as positive basically if their embeddings had high cosines with positive seeds and
low cosines with negative seeds. Other methods have chosen other kinds of distance
metrics besides embedding cosine.
For example the Hatzivassiloglou and McKeown () algorithm uses syntactic
cues; two adjectives are considered similar if they were frequently conjoined by and
and rarely conjoined by but. This is based on the intuition that adjectives conjoined
by the words and tend to have the same polarity; positive adjectives are generally
coordinated with positive, negative with negative:
fair and legitimate, corrupt and brutal
but less often positive adjectives coordinated with negative:
*fair and brutal, *corrupt and legitimate
By contrast, adjectives conjoined by but are likely to be of opposite polarity:

CHAPTER
LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
fair but brutal
Another cue to opposite polarity comes from morphological negation (un-, im-,
-less). Adjectives with the same root but differing in a morphological negative (ad-
equate/inadequate, thoughtful/thoughtless) tend to be of opposite polarity.
Yet another method for ﬁnding words that have a similar polarity to seed words is
to make use of a thesaurus like WordNet (Kim and Hovy , Hu and Liu b).
A word’s synonyms presumably share its polarity while a word’s antonyms probably
have the opposite polarity. After a seed lexicon is built, each lexicon is updated as
follows, possibly iterated.
Lex+: Add synonyms of positive words (well) and antonyms (like ﬁne) of negative
words
Lex−: Add synonyms of negative words (awful) and antonyms (like evil) of positive
words
An extension of this algorithm assigns polarity to WordNet senses, called Senti-
WordNet (Baccianella et al., ). Fig. . shows some examples.
SentiWordNet
Synset
Pos
Neg
Obj
good#
‘agreeable or pleasing’
respectable# honorable# good# estimable#
‘deserving of esteem’
estimable# computable#
‘may be computed or estimated’
sting# burn# bite#
‘cause a sharp or stinging pain’
. .
acute#
‘of critical importance and consequence’
. . .
acute#
‘of an angle; less than  degrees’
acute#
‘having or experiencing a rapid onset and short but severe course’
Figure .
Examples from SentiWordNet . (Baccianella et al., ). Note the differences between senses
of homonymous words: estimable# is purely objective, while estimable# is positive; acute can be positive
(acute#), negative (acute#), or neutral (acute #).
In this algorithm, polarity is assigned to entire synsets rather than words. A
positive lexicon is built from all the synsets associated with  positive words, and a
negative lexicon from synsets associated with  negative words. A classiﬁer is then
trained from this data to take a WordNet gloss and decide if the sense being deﬁned
is positive, negative or neutral. A further step (involving a random-walk algorithm)
assigns a score to each WordNet synset for its degree of positivity, negativity, and
neutrality.
In summary, semisupervised algorithms use a human-deﬁned set of seed words
for the two poles of a dimension, and use similarity metrics like embedding cosine,
coordination, morphology, or thesaurus structure to score words by how similar they
are to the positive seeds and how dissimilar to the negative seeds.
Supervised Learning of Word Sentiment
Semi-supervised methods require only minimal human supervision (in the form of
seed sets). But sometimes a supervision signal exists in the world and can be made
use of. One such signal is the scores associated with online reviews.
The web contains an enormous number of online reviews for restaurants, movies,
books, or other products, each of which have the text of the review along with an

SUPERVISED LEARNING OF WORD SENTIMENT
Movie review excerpts (IMDb)
A great movie. This ﬁlm is just a wonderful experience. It’s surreal, zany, witty and slapstick
all at the same time. And terriﬁc performances too.
This was probably the worst movie I have ever seen. The story went nowhere even though they
could have done some interesting stuff with it.
Restaurant review excerpts (Yelp)
The service was impeccable. The food was cooked and seasoned perfectly... The watermelon
was perfectly square ... The grilled octopus was ... mouthwatering...
...it took a while to get our waters, we got our entree before our starter, and we never received
silverware or napkins until we requested them...
Book review excerpts (GoodReads)
I am going to try and stop being deceived by eye-catching titles. I so wanted to like this book
and was so disappointed by it.
This book is hilarious. I would recommend it to anyone looking for a satirical read with a
romantic twist and a narrator that keeps butting in
Product review excerpts (Amazon)
The lid on this blender though is probably what I like the best about it... enables you to pour
into something without even taking the lid off! ... the perfect pitcher! ... works fantastic.
I hate this blender... It is nearly impossible to get frozen fruit and ice to turn into a smoothie...
You have to add a TON of liquid. I also wish it had a spout ...
Figure .
Excerpts from some reviews from various review websites, all on a scale of  to  stars except
IMDb, which is on a scale of  to  stars.
associated review score: a value that may range from  star to  stars, or scoring
to . Fig. . shows samples extracted from restaurant, book, and movie reviews.
We can use this review score as supervision: positive words are more likely to
appear in -star reviews; negative words in -star reviews. And instead of just a
binary polarity, this kind of supervision allows us to assign a word a more complex
representation of its polarity: its distribution over stars (or other scores).
Thus in a ten-star system we could represent the sentiment of each word as a
-tuple, each number a score representing the word’s association with that polarity
level. This association can be a raw count, or a likelihood P(w|c), or some other
function of the count, for each class c from  to .
For example, we could compute the IMDb likelihood of a word like disap-
point(ed/ing) occurring in a  star review by dividing the number of times disap-
point(ed/ing) occurs in -star reviews in the IMDb dataset (,) by the total num-
ber of words occurring in -star reviews (,,), so the IMDb estimate of
P(disappointing|) is ..
A slight modiﬁcation of this weighting, the normalized likelihood, can be used
as an illuminating visualization (Potts, )
P(w|c) =
count(w,c)
w∈C count(w,c)
PottsScore(w) =
P(w|c)
c P(w|c)
Dividing the IMDb estimate P(disappointing|) of . by the sum of the likeli-
hood P(w|c) over all categories gives a Potts score of .. The word disappointing
thus is associated with the vector [., ., ., ., ., ., ., ., ., .]. The
Each element of the Potts score of a word w and category c can be shown to be a variant of the
pointwise mutual information pmi(w,c) without the log term; see Exercise ..

IMDB
Cat = .
Cat^ = -
CHAPTER
LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
Potts diagram (Potts, ) is a visualization of these word scores, representing the
Potts diagram
IMDB
Ca
Cat^
“Potts&diagrams”
Potts,&Christopher.& .&NSF&wor
restructuring&adjectives.
prior sentiment of a word as a distribution over the rating categories.
Fig. . shows the Potts diagrams for  positive and  negative scalar adjec-
tives. Note that the curve for strongly positive scalars have the shape of the letter
J, while strongly negative scalars look like a reverse J. By contrast, weakly posi-
tive and negative scalars have a hump-shape, with the maximum either below the
mean (weakly negative words like disappointing) or above the mean (weakly pos-
itive words like good). These shapes offer an illuminating typology of affective
meaning.
Positive scalars
Negative scalars
Emphatics
Atten
totally
som
good
disappointing

rating

rating
rating
absolutely
great
bad
IMDB

Ca
Cat
rating

rating
rating
utterly
excellent
terrible

rating

rating
rating
Figure .
Potts diagrams (Potts, ) for positive and negative scalar adjectives, show-
ing the J-shape and reverse J-shape for strongly positive and negative adjectives, and the
hump-shape for more weakly polarized adjectives.
Fig. . shows the Potts diagrams for emphasizing and attenuating adverbs.
Note that emphatics tend to have a J-shape (most likely to occur in the most posi-
tive reviews) or a U-shape (most likely to occur in the strongly positive and nega-
tive). Attenuators all have the hump-shape, emphasizing the middle of the scale and
downplaying both extremes. The diagrams can be used both as a typology of lexical
sentiment, and also play a role in modeling sentiment compositionality.
In addition to functions like posterior P(c|w), likelihood P(w|c), or normalized
likelihood (Eq. .) many other functions of the count of a word occurring with a
sentiment label have been used. We’ll introduce some of these on page , includ-
ing ideas like normalizing the counts per writer in Eq. ..
Log Odds Ratio Informative Dirichlet Prior
One thing we often want to do with word polarity is to distinguish between words
that are more likely to be used in one category of texts than in another. We may, for
example, want to know the words most associated with  star reviews versus those
associated with  star reviews. These differences may not be just related to senti-
ment. We might want to ﬁnd words used more often by Democratic than Republican
members of Congress, or words used more often in menus of expensive restaurants

Category
Category
Category
fairly/r
IMDB – , tokens
OpenTable – , tokens
Goodreads – ,
Cat = -. (p = .)
Cat = -. (p
Cat^ = -. (p < .)
Cat = . (p = .)
Cat^ = -. (p = .)
Cat^ = -. (p
SUPERVISED LEARNING OF WORD SENTIMENT
“Potts&diagrams”
Potts,&Christopher.& .&NSF&workshop&on&
restructuring&adjectives.
ve scalars
Negative scalars
Emphatics
Attenuators
totally
somewhat
good
disappointing
Category
Category
Category

rating
rating

rating
rating
fairly
absolutely
great
pretty/r
bad
IMDB – , tokens
OpenTable – , tokens
Goodreads – ,
Cat = -. (p = .)
Cat = -. (p

Cat = -. (p < .)
Cat^ = -. (p < .)
Cat^ = -. (p = .)
Cat^ = -. (p
rating
rating

rating

rating
pretty
utterly
xcellent
terrible

rating
rating
Category
Category
Category

rating
rating
Figure .
Potts diagrams (Potts, ) for emphatic and attenuating adverbs.
than cheap restaurants.
Given two classes of documents, to ﬁnd words more associated with one cate-
gory than another, we could measure the difference in frequencies (is a word w more
frequent in class A or class B?). Or instead of the difference in frequencies we could
compute the ratio of frequencies, or compute the log odds ratio (the log of the ratio
between the odds of the two words). We could then sort words by whichever associ-
ation measure we pick, ranging from words overrepresented in category A to words
overrepresented in category B.
The problem with simple log-likelihood or log odds methods is that they overem-
phasize differences in very rare words, and often also in very frequent words. Very
rare words will seem to occur very differently in the two corpora since with tiny
counts there may be statistical ﬂuctations, or even zero occurrences in one corpus
compared to non-zero occurrences in the other. Very frequent words will also seem
different since all counts are large.
In this section we walk through the details of one solution to this problem: the
“log odds ratio informative Dirichlet prior” method of Monroe et al. () that is a
particularly useful method for ﬁnding words that are statistically overrepresented in
one particular category of texts compared to another. It’s based on the idea of using
another large corpus to get a prior estimate of what we expect the frequency of each
word to be.
Let’s start with the goal: assume we want to know whether the word horrible
occurs more in corpus i or corpus j. We could compute the log likelihood ratio,
log likelihood
ratio
using f i(w) to mean the frequency of word w in corpus i, and ni to mean the total
number of words in corpus i:
llr(horrible) = log Pi(horrible)
Pj(horrible)
= logPi(horrible)−logPj(horrible)
= log fi(horrible)
nj
ni
−log fj(horrible)
Instead, let’s compute the log odds ratio: does horrible have higher odds in i or in
log odds ratio

CHAPTER
LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
j:

−log

Pj(horrible)

lor(horrible) = log

Pi(horrible)
−Pi(horrible)
−Pj(horrible)
fi(horrible)
f j(horrible)
ni
n j
= log
ni
nj
− fi(horrible)
− fj(horrible)
−log
= log

fi(horrible)

−log

f j(horrible)

ni −fi(horrible)
nj −fj(horrible)
The Dirichlet intuition is to use a large background corpus to get a prior estimate of
what we expect the frequency of each word w to be. We’ll do this very simply by
adding the counts from that corpus to the numerator and denominator, so that we’re
essentially shrinking the counts toward that prior. It’s like asking how large are the
differences between i and j given what we would expect given their frequencies in
a well-estimated large background corpus.
The method estimates the difference between the frequency of word w in two
corpora i and j via the prior-modiﬁed log odds ratio for w, δ (i−j)
, which is estimated
as:

f j
w +αw

−log
δ (i−j)
= log

f i
w +αw
ni +α −(f iw +αw)
nj +α −( f j
w +αw)
(where ni is the size of corpus i, nj is the size of corpus j, f i
w is the count of word
w in corpus i, f j
w is the count of word w in corpus j, α is the scaled size of the
background corpus, and αw is the scaled count of word w in the background corpus.)
In addition, Monroe et al. () make use of an estimate for the variance of the
log–odds–ratio:
f iw +αw
f j
w +αw
ˆδ (i− j)

The ﬁnal statistic for a word is then the z–score of its log–odds–ratio:
ˆδ (i−j)
ˆδ (i−j)

The Monroe et al. () method thus modiﬁes the commonly used log odds ratio
in two ways: it uses the z-scores of the log odds ratio, which controls for the amount
of variance in a word’s frequency, and it uses counts from a background corpus to
provide a prior count for words.
Fig. . shows the method applied to a dataset of restaurant reviews from
Yelp, comparing the words used in -star reviews to the words used in -star reviews
(Jurafsky et al., ). The largest difference is in obvious sentiment words, with the
-star reviews using negative sentiment words like worse, bad, awful and the -star
reviews using positive sentiment words like great, best, amazing. But there are other
illuminating differences. -star reviews use logical negation (no, not), while -star
reviews use emphatics and emphasize universality (very, highly, every, always). -
star reviews use ﬁrst person plurals (we, us, our) while  star reviews use the second
person. -star reviews talk about people (manager, waiter, customer) while -star
reviews talk about dessert and properties of expensive restaurants like courses and
atmosphere. See Jurafsky et al. () for more details.

USING LEXICONS FOR SENTIMENT RECOGNITION
Class
Words in -star reviews
Class
Words in -star reviews
Negative
worst, rude, terrible, horrible, bad,
awful, disgusting, bland, tasteless,
gross, mediocre, overpriced, worse,
poor
Positive
great, best, love(d), delicious, amazing,
favorite, perfect, excellent, awesome,
friendly, fantastic, fresh, wonderful, in-
credible, sweet, yum(my)
Negation
no, not
Emphatics/
universals
very, highly, perfectly, deﬁnitely, abso-
lutely, everything, every, always
Pl pro
we, us, our
pro
you
pro
she, he, her, him
Articles
a, the
Past verb
was, were, asked, told, said, did,
charged, waited, left, took
Advice
try, recommend
Sequencers after, then
Conjunct
also, as, well, with, and
Nouns
atmosphere, dessert, chocolate, wine,
course, menu
Nouns
manager, waitress, waiter, customer,
customers, attitude, waste, poisoning,
money, bill, minutes
Irrealis
modals
would, should
Auxiliaries
is/’s, can, ’ve, are
Comp
to, that
Prep, other
in, of, die, city, mouth
Figure .
The top  words associated with one–star and ﬁve-star restaurant reviews in a Yelp dataset of
, reviews, using the Monroe et al. () method (Jurafsky et al., ).
Using Lexicons for Sentiment Recognition
In Chapter  we introduced the naive Bayes algorithm for sentiment analysis. The
lexicons we have focused on throughout the chapter so far can be used in a number
of ways to improve sentiment detection.
In the simplest case, lexicons can be used when we don’t have sufﬁcient training
data to build a supervised sentiment analyzer; it can often be expensive to have a
human assign sentiment to each document to train the supervised classiﬁer.
In such situations, lexicons can be used in a rule-based algorithm for classiﬁca-
tion. The simplest version is just to use the ratio of positive to negative words: if a
document has more positive than negative words (using the lexicon to decide the po-
larity of each word in the document), it is classiﬁed as positive. Often a threshold λ
is used, in which a document is classiﬁed as positive only if the ratio is greater than
λ. If the sentiment lexicon includes positive and negative weights for each word,
θ +
w and θ −
w , these can be used as well. Here’s a simple such sentiment algorithm:
w s.t. w∈positivelexicon
θ +
w count(w)
f + =
w s.t. w∈negativelexicon
θ −
w count(w)
f − =
if f +
f − > λ
sentiment =
f + > λ
if f −

otherwise.

If supervised training data is available, these counts computed from sentiment lex-
icons, sometimes weighted or normalized in various ways, can also be used as fea-
tures in a classiﬁer along with other lexical or non-lexical features. We return to
such algorithms in Section ..

CHAPTER
LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
Using Lexicons for Affect Recognition
Detection of emotion (and the other kinds of affective meaning described by Scherer
()) can be done by generalizing the algorithms described above for detecting
sentiment.
The most common algorithms involve supervised classiﬁcation: a training set is
labeled for the affective meaning to be detected, and a classiﬁer is built using features
extracted from the training set. As with sentiment analysis, if the training set is large
enough, and the test set is sufﬁciently similar to the training set, simply using all
the words or all the bigrams as features in a powerful classiﬁer like SVM or logistic
regression, as described in Fig. . in Chapter , is an excellent algorithm whose
performance is hard to beat. Thus we can treat affective meaning classiﬁcation of a
text sample as simple document classiﬁcation.
Some modiﬁcations are nonetheless often necessary for very large datasets. For
example, the Schwartz et al. () study of personality, gender, and age using
million words of Facebook posts used only a subset of the n-grams of lengths -
. Only words and phrases used by at least % of the subjects were included as
features, and -grams and -grams were only kept if they had sufﬁciently high PMI
(PMI greater than ∗length, where length is the number of words):
pmi(phrase) = log
p(phrase)
w∈phrase
p(w)
Various weights can be used for the features, including the raw count in the training
set, or some normalized probability or log probability. Schwartz et al. (), for
example, turn feature counts into phrase likelihoods by normalizing them by each
subject’s total word use.
p(phrase|subject) =
freq(phrase,subject)
phrase′∈vocab(subject)
freq(phrase′,subject)
If the training data is sparser, or not as similar to the test set, any of the lexicons
we’ve discussed can play a helpful role, either alone or in combination with all the
words and n-grams.
Many possible values can be used for lexicon features. The simplest is just an
indicator function, in which the value of a feature fL takes the value  if a particular
text has any word from the relevant lexicon L. Using the notation of Chapter , in
which a feature value is deﬁned for a particular output class c and document x.
fL(c,x) =
if ∃w : w ∈ L & w ∈ x & class = c
otherwise
Alternatively the value of a feature fL for a particular lexicon L can be the total
number of word tokens in the document that occur in L:
w∈L
count(w)
fL =
For lexica in which each word is associated with a score or weight, the count can be
multiplied by a weight θ L
w:
w∈L
θ L
wcount(w)
fL =

LEXICON-BASED METHODS FOR ENTITY-CENTRIC AFFECT
Counts can alternatively be logged or normalized per writer as in Eq. ..
However they are deﬁned, these lexicon features are then used in a supervised
classiﬁer to predict the desired affective category for the text or document. Once
a classiﬁer is trained, we can examine which lexicon features are associated with
which classes. For a classiﬁer like logistic regression the feature weight gives an
indication of how associated the feature is with the class.
Lexicon-based methods for Entity-Centric Affect
What if we want to get an affect score not for an entire document, but for a particular
entity in the text? The entity-centric method of Field and Tsvetkov () combines
affect lexicons with contextual embeddings to assign an affect score to an entity in
text. In the context of affect about people, they relabel the Valence/Arousal/Domi-
nance dimension as Sentiment/Agency/Power. The algorithm ﬁrst trains classiﬁers
to map embeddings to scores:
. For each word w in the training corpus:
(a) Use off-the-shelf pretrained encoders (like BERT) to extract a contextual
embedding e for each instance of the word. No additional ﬁne-tuning is
done.
(b) Average over the e embeddings of each instance of w to obtain a single
embedding vector for one training point w.
(c) Use the NRC VAD Lexicon to get S, A, and P scores for w.
. Train (three) regression models on all words w to predict V, A, D scores from
a word’s average embedding.
Now given an entity mention m in a text, we assign affect scores as follows:
. Use the same pretrained LM to get contextual embeddings for m in context.
. Feed this embedding through the  regression models to get S, A, P scores for
the entity.
This results in a (S,A,P) tuple for a given entity mention; To get scores for the rep-
resentation of an entity in a complete document, we can run coreference resolution
and average the (S,A,P) scores for all the mentions. Fig. . shows the scores
from their algorithm for characters from the movie The Dark Knight when run on
Wikipedia plot summary texts with gold coreference.
Connotation Frames
The lexicons we’ve described so far deﬁne a word as a point in affective space. A
connotation frame, by contrast, is a lexicon that incorporates a richer kind of gram-
connotation
frame
matical structure, by combining affective lexicons with the frame semantic lexicons
of Chapter . The basic insight of connotation frame lexicons is that a predicate
like a verb expresses connotations about the verb’s arguments (Rashkin et al. ,
Rashkin et al. ).
Consider sentences like:
(.) Country A violated the sovereignty of Country B

CHAPTER
LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
weakly
Rachel
Dent
Gordan Batman
Joker powerfully
weakly
Rachel
Joker
Dent
Gordan Batm
Power Score
Power Score
negative Joker
Dent
Gordan Rachel Batman positive
negative Joker
Gordan Batman
Dent
Rach
Sentiment Score
Sentiment Score
dull
Rachel
Dent GordanBatman Joker
dull
Dent
Gordan Rachel Batman Joker
scary
Agency Score
Agency Score
Figure .
Power (dominance), sentiment (valence) and agency (arousal) for characters
in the movie The Dark Knight computed from embeddings trained on the NRC VAD Lexicon.
Note the protagonist (Batman) and the antagonist (the Joker) have high power and agency
scores but differ in sentiment, while the love interest Rachel has low power and agency but
high sentiment.
Figure : Power, sentiment, and agency sco
acters in The Dark Night as learned throug
ELMo embeddings. These scores reﬂect th
terns as the regression model with greater
between characters.
Figure : Power, sentiment, and agency scores for char-
acters in The Dark Night as learned through the regres-
sion model with ELMo embeddings. Scores generally
align with character archetypes, i.e. the antagonist has
the lowest sentiment score.
(.) the teenager ... survived the Boston Marathon bombing”
ment have resulted in his effective removal from
the industry.
While articles about the #MeToo
By using the verb violate in (.), the author is expressing their sympathies with
Country B, portraying Country B as a victim, and expressing antagonism toward
the agent Country A. By contrast, in using the verb survive, the author of (.) is
expressing that the bombing is a negative experience, and the subject of the sentence,
the teenager, is a sympathetic character. These aspects of connotation are inherent
in the meaning of the verbs violate and survive, as shown in Fig. ..
movement portray men like Weinstein as unpow-
erful, we can speculate that the corpora used to
train ELMo and BERT portray them as powerful.
Thus, in a corpus where traditional power roles
Connotation Frame for “Role violates Role”
Connotation Frame for “Role survives Role”
Writer
Writer
S(writer→role)
S(writer→role)
S(writer→role)
S(writer→role)
S(role→role)
S(role→role)
Role is a
sympathetic
Role is the
antagonist
Role
Role
Role is a
sympathetic
Role
Role
victim
victim
There is
some type
of hardship
vey Dent (ally to Batman who turns
Rachel Dawes (primary love interest).
itate extracting example sentences, we
instance of these entities in the narrative
and average across instances to obtain
score for the document. To maximiz
by capturing every mention of an entit
form co-reference resolution by hand.
ally, based on our results from Table
the use of Wikipedia data in training
model (Peters et al., ), we use ELM
dings for our analysis.
Figures  and  show results.
Reader
Reader
(a)
(b)
Figure .
Connotation frames for survive and violate. (a) For survive, the writer and reader have positive
sentiment toward Role, the subject, and negative sentiment toward Role, the direct object. (b) For violate, the
writer and reader have positive sentiment instead toward Role, the direct object.
The connotation frame lexicons of Rashkin et al. () and Rashkin et al.
ence, we show the entity scores as co
one polar opposite pair identiﬁed by
the regression model and ASP show s
terns. Batman has high power, while R
low power. Additionally, the Joker is
with the most negative sentiment, but
est agency.
Throughout the plot sum
have been inverted, the embeddings extracted
from ELMo and BERT perform worse than ran-
dom, as they are biased towards the power struc-
tures in the data they are trained on. Further ev-
idence of this exists in the performance of the
BERT-masked embeddings - whereas these em-
beddings generally capture power poorly as com-
pared to the unmasked embeddings (Table ),
they outperform the unmasked embeddings on this
task, and even outperform the frequency baseline
in one setting. Nevertheless, they do not outper-
form Field et al. (), likely because they do not
capture affect information as well as the unmasked
embeddings (Table ).
Qualitative Document-level Analysis
() also express other connotative aspects of the predicate toward each argu-
ment, including the effect (something bad happened to x) value: (x is valuable), and
mental state: (x is distressed by the event). Connotation frames can also mark the
power differential between the arguments (using the verb implore means that the
theme argument has greater power than the agent), and the agency of each argument
(waited is low agency). Fig. . shows a visualization from Sap et al. ().
Connotation frames can be built by hand (Sap et al., ), or they can be learned
by supervised learning (Rashkin et al., ), for example using hand-labeled train-
movie progresses by the Joker taking
sive action and the other characters r
We can see this dynamic reﬂected in t
proﬁle score, as a high-powered, hi
low-sentiment character, who is the pri
driver. In general, ASP shows a greater
between characters than the regression
hypothesize that this occurs because A
the dimensions of interest, while the reg
proach captures other confounds, such
When we used this averaging metric in othe
Finally, we qualitatively analyze how well our
method captures affect dimensions by analyzing
single documents in detail. We conduct this anal-
ysis in a domain where we expect entities to fulﬁll
traditional power roles and where entity portray-
als are known. Following Bamman et al. (),
we analyze the Wikipedia plot summary of the
movie The Dark Knight, focusing on Batman
(protagonist), the Joker (antagonist), Jim Gordan
(law enforcement ofﬁcer, ally to Batman), Har-
we found no signiﬁcant change in results Thus

SUMMARY
power(AG<TH)
power(AG>TH)
He implored the tribunal to show mercy.
AGENT
THEME
VERB
implore
power(AG < TH)
The princess waited for her prince.
AGENT
THEME
VERB
wait
agency(AG)=−
agency(AG)=+
agency(AG) = -
Figure .
The connotation frames of Sap et al. (), showing that the verb implore
implies the agent has lower power than the theme (in contrast, say, with a verb like demanded),
and showing the low level of agency of the subject of waited. Figure from Sap et al. ().
ing data to supervise classiﬁers for each of the individual relations, e.g., whether
S(writer → Role) is + or -, and then improving accuracy via global constraints
across all relations.
Figure : Sample verbs in the connotation frame
with high annotator agreement. Size is indicativ
of verb frequency in our corpus (bigger = mor
frequent), color differences are only for legibility
Figure : The formal notation of the connotation
frames of power and agency. The ﬁrst example
shows the relative power differential implied by
the verb “implored”, i.e., the agent (“he”) is in
a position of less power than the theme (“the tri-
bunal”). In contrast, “He demanded the tribunal
show mercy” implies that the agent has authority
over the theme. The second example shows the
low level of agency implied by the verb “waited”.
one another.
For example, if the agent “dom
Summary
Many kinds of affective states can be distinguished, including emotions, moods,
attitudes (which include sentiment), interpersonal stance, and personality.
interactive demo website of our ﬁndings (see Fig-
ure  in the appendix for a screenshot). Further-
more, as will be seen in Section ., connotation
frames offer new insights that complement and de-
viate from the well-known Bechdel test (Bechdel,
In particular, we ﬁnd that high-agency
Emotion can be represented by ﬁxed atomic units often called basic emo-
tions, or as points in space deﬁned by dimensions like valence and arousal.
inates” the theme (denoted as power(AG>TH)
then the agent is implied to have a level of contro
over the theme. Alternatively, if the agent “hon
ors” the theme (denoted as power(AG<TH)), th
writer implies that the theme is more important o
authoritative. We used AMT crowdsourcing to la
bel  transitive verbs for power differential
With three annotators per verb, the inter-annotato
agreement is . (Krippendorff’s ↵).
Words have connotational aspects related to these affective states, and this
connotational aspect of word meaning can be represented in lexicons.
Agency
The agency attributed to the agent of th
women through the lens of connotation frames are
rare in modern ﬁlms. It is, in part, because some
movies (e.g., Snow White) accidentally pass the
Bechdel test and also because even movies with
strong female characters are not entirely free from
the deeply ingrained biases in social norms.
Affective lexicons can be built by hand, using crowd sourcing to label the
affective content of each word.
Connotation Frames of Power and
Agency
Lexicons can be built with semi-supervised, bootstrapping from seed words
using similarity metrics like embedding cosine.
We create two new connotation relations, power
and agency (examples in Figure ), as an expan-
sion of the existing connotation frame lexicons.
Lexicons can be learned in a fully supervised manner, when a convenient
training signal can be found in the world, such as ratings assigned by users on
a review site.
verb denotes whether the action being describe
implies that the agent is powerful, decisive, an
capable of pushing forward their own storylin
For example, a person who is described as “ex
periencing” things does not seem as active and de
cisive as someone who is described as “determin
ing” things. AMT workers labeled  trans
tive verbs for implying high/moderate/low agenc
(inter-annotator agreement of .). We denot
high agency as agency(AG)=+, and low agenc
as agency(AG)=−.
Words can be assigned weights in a lexicon by using various functions of word
counts in training texts, and ratio metrics like log odds ratio informative
Dirichlet prior.
Pairwise agreements on a hard constraint ar
Three AMT crowdworkers annotated the verbs
with placeholders to avoid gender bias in the con-
text (e.g., X rescued Y; an example task is shown
in the appendix in Figure ). We deﬁne the anno-
tated constructs as follows:
Power Differentials
Many verbs imply the au-
thority levels of the agent and theme relative to
Affect can be detected, just like sentiment, by using standard supervised text
classiﬁcation techniques, using all the words or bigrams in a text as features.
Additional features can be drawn from counts of words in lexicons.
http://homes.cs.washington.edu/˜msap/
movie-bias/.
Lexicons can also be used to detect affect in a rule-based classiﬁer by picking
the simple majority sentiment based on counts of words in each lexicon.
The lexicons and a demo are available at http://
% and % for power and agency, respec
tively. Despite this, agreements reach % an
% when moderate labels are counted as agree
ing with either high or low labels, showing that an
notators rarely strongly disagree with one anothe
Some contributing factors in the lower KA score
include the subtlety of choosing between neutra
homes.cs.washington.edu/˜msap/movie-bias/.
Connotation frames express richer relations of affective meaning that a pred-
icate encodes about its arguments.

CHAPTER
LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
Bibliographical and Historical Notes
The idea of formally representing the subjective meaning of words began with Os-
good et al. (), the same pioneering study that ﬁrst proposed the vector space
model of meaning described in Chapter . Osgood et al. () had participants rate
words on various scales, and ran factor analysis on the ratings. The most signiﬁcant
factor they uncovered was the evaluative dimension, which distinguished between
pairs like good/bad, valuable/worthless, pleasant/unpleasant. This work inﬂuenced
the development of early dictionaries of sentiment and affective meaning in the ﬁeld
of content analysis (Stone et al., ).
Wiebe () began an inﬂuential line of work on detecting subjectivity in text,
subjectivity
beginning with the task of identifying subjective sentences and the subjective char-
acters who are described in the text as holding private states, beliefs or attitudes.
Learned sentiment lexicons such as the polarity lexicons of Hatzivassiloglou and
McKeown () were shown to be a useful feature in subjectivity detection (Hatzi-
vassiloglou and Wiebe , Wiebe ).
The term sentiment seems to have been introduced in  by Das and Chen
(), to describe the task of measuring market sentiment by looking at the words in
stock trading message boards. In the same paper Das and Chen () also proposed
the use of a sentiment lexicon. The list of words in the lexicon was created by
hand, but each word was assigned weights according to how much it discriminated
a particular class (say buy versus sell) by maximizing across-class variation and
minimizing within-class variation. The term sentiment, and the use of lexicons,
caught on quite quickly (e.g., inter alia, Turney ). Pang et al. () ﬁrst showed
the power of using all the words without a sentiment lexicon; see also Wang and
Manning ().
Most of the semi-supervised methods we describe for extending sentiment dic-
tionaries drew on the early idea that synonyms and antonyms tend to co-occur in the
same sentence (Miller and Charles , Justeson and Katz , Riloff and Shep-
herd ). Other semi-supervised methods for learning cues to affective mean-
ing rely on information extraction techniques, like the AutoSlog pattern extractors
(Riloff and Wiebe, ). Graph based algorithms for sentiment were ﬁrst sug-
gested by Hatzivassiloglou and McKeown (), and graph propagation became a
standard method (Zhu and Ghahramani , Zhu et al. , Zhou et al. a,
Velikovich et al. ). Crowdsourcing can also be used to improve precision by
ﬁltering the result of semi-supervised lexicon learning (Riloff and Shepherd ,
Fast et al. ).
Much recent work focuses on ways to learn embeddings that directly encode sen-
timent or other properties, such as the DENSIFIER algorithm of Rothe et al. ()
that learns to transform the embedding space to focus on sentiment (or other) infor-
mation.
Exercises
. Show that the relationship between a word w and a category c in the Potts
Score in Eq. . is a variant of the pointwise mutual information pmi(w,c)
without the log term.

Coreference
Resolution
and
Entity Linking
CHAPTER
and even Stigand, the patriotic archbishop of Canterbury, found it advisable–”’
‘Found WHAT?’ said the Duck.
‘Found IT,’ the Mouse replied rather crossly: ‘of course you know what “it”means.’
‘I know what “it”means well enough, when I ﬁnd a thing,’ said the Duck: ‘it’s gener-
ally a frog or a worm. The question is, what did the archbishop ﬁnd?’
Lewis Carroll, Alice in Wonderland
An important component of language processing is knowing who is being talked
about in a text. Consider the following passage:
(.) Victoria Chen, CFO of Megabucks Banking, saw her pay jump to $.
million, as the -year-old became the company’s president. It is widely
known that she came to Megabucks from rival Lotsabucks.
Each of the underlined phrases in this passage is used by the writer to refer to
a person named Victoria Chen. We call linguistic expressions like her or Victoria
Chen mentions or referring expressions, and the discourse entity that is referred
mention
to (Victoria Chen) the referent. (To distinguish between referring expressions and
referent
their referents, we italicize the former.) Two or more referring expressions that are
used to refer to the same discourse entity are said to corefer; thus, Victoria Chen
corefer
and she corefer in (.).
Coreference is an important component of natural language processing. A dia-
logue system that has just told the user “There is a pm ﬂight on United and a pm
one on Cathay Paciﬁc” must know which ﬂight the user means by “I’ll take the sec-
ond one”. A question answering system that uses Wikipedia to answer a question
about Marie Curie must know who she was in the sentence “She was born in War-
saw”. And a machine translation system translating from a language like Spanish, in
which pronouns can be dropped, must use coreference from the previous sentence to
decide whether the Spanish sentence ‘“Me encanta el conocimiento”, dice.’ should
be translated as ‘“I love knowledge”, he says’, or ‘“I love knowledge”, she says’.
Indeed, this example comes from an actual news article in El Pa´ıs about a female
professor and was mistranslated as “he” in machine translation because of inaccurate
coreference resolution (Schiebinger, ).
Natural language processing systems (and humans) interpret linguistic expres-
sions with respect to a discourse model (Karttunen, ). A discourse model
discourse
model
(Fig. .) is a mental model that the understander builds incrementally when in-
terpreting a text, containing representations of the entities referred to in the text,
as well as properties of the entities and relations among them. When a referent is
ﬁrst mentioned in a discourse, we say that a representation for it is evoked into the
evoked
model. Upon subsequent mention, this representation is accessed from the model.
accessed
As a convenient shorthand, we sometimes speak of a referring expression referring to a referent, e.g.,
saying that she refers to Victoria Chen. However, the reader should keep in mind that what we really
mean is that the speaker is performing the act of referring to Victoria Chen by uttering she.

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
Discourse Model
Lotsabucks
Megabucks
refer (access)
pay
refer (evoke)
“Victoria”
“she”
corefer
Figure .
How mentions evoke and access discourse entities in a discourse model.
Reference in a text to an entity that has been previously introduced into the
discourse is called anaphora, and the referring expression used is said to be an
anaphora
anaphor, or anaphoric. In passage (.), the pronouns she and her and the deﬁ-
anaphor
nite NP the -year-old are therefore anaphoric. The anaphor corefers with a prior
mention (in this case Victoria Chen) that is called the antecedent. Not every refer-
antecedent
ring expression is an antecedent. An entity that has only a single mention in a text
(like Lotsabucks in (.)) is called a singleton.
singleton
In this chapter we focus on the task of coreference resolution. Coreference
coreference
resolution
resolution is the task of determining whether two mentions corefer, by which we
mean they refer to the same entity in the discourse model (the same discourse entity).
The set of coreferring expressions is often called a coreference chain or a cluster.
coreference
chain
cluster
For example, in processing (.), a coreference resolution algorithm would need
to ﬁnd at least four coreference chains, corresponding to the four entities in the
discourse model in Fig. ..
. {Victoria Chen, her, the -year-old, She}
. {Megabucks Banking, the company, Megabucks}
. {her pay}
. {Lotsabucks}
Note that mentions can be nested; for example the mention her is syntactically
part of another mention, her pay, referring to a completely different discourse entity.
Coreference resolution thus comprises two tasks (although they are often per-
formed jointly): () identifying the mentions, and () clustering them into corefer-
ence chains/discourse entities.
We said that two mentions corefered if they are associated with the same dis-
course entity. But often we’d like to go further, deciding which real world entity is
associated with this discourse entity. For example, the mention Washington might
refer to the US state, or the capital city, or the person George Washington; the inter-
pretation of the sentence will of course be very different for each of these. The task
of entity linking (Ji and Grishman, ) or entity resolution is the task of mapping
entity linking
a discourse entity to some real-world individual. We usually operationalize entity
We will follow the common NLP usage of anaphor to mean any mention that has an antecedent, rather
than the more narrow usage to mean only mentions (like pronouns) whose interpretation depends on the
antecedent (under the narrower interpretation, repeated names are not anaphors).
Computational linguistics/NLP thus differs in its use of the term reference from the ﬁeld of formal
semantics, which uses the words reference and coreference to describe the relation between a mention
and a real-world entity. By contrast, we follow the functional linguistics tradition in which a mention
refers to a discourse entity (Webber, ) and the relation between a discourse entity and the real world
individual requires an additional step of linking.

linking or resolution by mapping to an ontology: a list of entities in the world, like
a gazeteer (Chapter ). Perhaps the most common ontology used for this task is
Wikipedia; each Wikipedia page acts as the unique id for a particular entity. Thus
the entity linking task of wikiﬁcation (Mihalcea and Csomai, ) is the task of de-
ciding which Wikipedia page corresponding to an individual is being referred to by
a mention. But entity linking can be done with any ontology; for example if we have
an ontology of genes, we can link mentions of genes in text to the disambiguated
gene name in the ontology.
In the next sections we introduce the task of coreference resolution in more de-
tail, and survey a variety of architectures for resolution. We also introduce two
architectures for the task of entity linking.
Before turning to algorithms, however, we mention some important tasks we
will only touch on brieﬂy at the end of this chapter. First are the famous Winograd
Schema problems (so-called because they were ﬁrst pointed out by Terry Winograd
in his dissertation). These entity coreference resolution problems are designed to be
too difﬁcult to be solved by the resolution methods we describe in this chapter, and
the kind of real-world knowledge they require has made them a kind of challenge
task for natural language processing. For example, consider the task of determining
the correct antecedent of the pronoun they in the following example:
(.) The city council denied the demonstrators a permit because
a. they feared violence.
b. they advocated violence.
Determining the correct antecedent for the pronoun they requires understanding
that the second clause is intended as an explanation of the ﬁrst clause, and also
that city councils are perhaps more likely than demonstrators to fear violence and
that demonstrators might be more likely to advocate violence. Solving Winograd
Schema problems requires ﬁnding way to represent or discover the necessary real
world knowledge.
A problem we won’t discuss in this chapter is the related task of event corefer-
ence, deciding whether two event mentions (such as the buy and the acquisition in
event
coreference
these two sentences from the ECB+ corpus) refer to the same event:
(.) AMD agreed to [buy] Markham, Ontario-based ATI for around $. billion
in cash and stock, the companies announced Monday.
(.) The [acquisition] would turn AMD into one of the world’s largest providers
of graphics chips.
Event mentions are much harder to detect than entity mentions, since they can be ver-
bal as well as nominal. Once detected, the same mention-pair and mention-ranking
models used for entities are often applied to events.
An even more complex kind of coreference is discourse deixis (Webber, ),
discourse deixis
in which an anaphor refers back to a discourse segment, which can be quite hard to
delimit or categorize, like the examples in (.) adapted from Webber ():
(.) According to Soleil, Beau just opened a restaurant
a. But that turned out to be a lie.
b. But that was false.
c. That struck me as a funny way to describe the situation.
The referent of that is a speech act (see Chapter ) in (.a), a proposition in
(.b), and a manner of description in (.c). We don’t give algorithms in this
chapter for these difﬁcult types of non-nominal antecedents, but see Kolhatkar
et al. () for a survey.

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
Coreference Phenomena: Linguistic Background
We now offer some linguistic background on reference phenomena. We introduce
the four types of referring expressions (deﬁnite and indeﬁnite NPs, pronouns, and
names), describe how these are used to evoke and access entities in the discourse
model, and talk about linguistic features of the anaphor/antecedent relation (like
number/gender agreement, or properties of verb semantics).
Types of Referring Expressions
Indeﬁnite Noun Phrases:
The most common form of indeﬁnite reference in En-
glish is marked with the determiner a (or an), but it can also be marked by a quan-
tiﬁer such as some or even the determiner this. Indeﬁnite reference generally intro-
duces into the discourse context entities that are new to the hearer.
(.) a. Mrs. Martin was so very kind as to send Mrs. Goddard a beautiful goose.
b. He had gone round one day to bring her some walnuts.
c. I saw this beautiful cauliﬂower today.
Deﬁnite Noun Phrases:
Deﬁnite reference, such as via NPs that use the English
article the, refers to an entity that is identiﬁable to the hearer. An entity can be
identiﬁable to the hearer because it has been mentioned previously in the text and
thus is already represented in the discourse model:
(.) It concerns a white stallion which I have sold to an ofﬁcer. But the pedigree
of the white stallion was not fully established.
Alternatively, an entity can be identiﬁable because it is contained in the hearer’s
set of beliefs about the world, or the uniqueness of the object is implied by the
description itself, in which case it evokes a representation of the referent into the
discourse model, as in (.):
(.) I read about it in the New York Times.
(.) Have you seen the car keys?
These last uses are quite common; more than half of deﬁnite NPs in newswire
texts are non-anaphoric, often because they are the ﬁrst time an entity is mentioned
(Poesio and Vieira , Bean and Riloff ).
Pronouns:
Another form of deﬁnite reference is pronominalization, used for enti-
ties that are extremely salient in the discourse, (as we discuss below):
(.) Emma smiled and chatted as cheerfully as she could,
Pronouns can also participate in cataphora, in which they are mentioned before
cataphora
their referents are, as in (.).
(.) Even before she saw it, Dorothy had been thinking about the Emerald City
every day.
Here, the pronouns she and it both occur before their referents are introduced.
Pronouns also appear in quantiﬁed contexts in which they are considered to be
bound, as in (.).
bound
(.) Every dancer brought her left arm forward.
Under the relevant reading, her does not refer to some woman in context, but instead
behaves like a variable bound to the quantiﬁed expression every dancer. We are not
concerned with the bound interpretation of pronouns in this chapter.

COREFERENCE PHENOMENA: LINGUISTIC BACKGROUND
In some languages, pronouns can appear as clitics attached to a word, like lo
(‘it’) in this Spanish example from AnCora (Recasens and Mart´ı, ):
(.) La intenci´on es reconocer el gran prestigio que tiene la marat´on y unirlo
con esta gran carrera.
‘The aim is to recognize the great prestige that the Marathon has and join|it
with this great race.”
Demonstrative Pronouns:
Demonstrative pronouns this and that can appear ei-
ther alone or as determiners, for instance, this ingredient, that spice:
(.) I just bought a copy of Thoreau’s Walden. I had bought one ﬁve years ago.
That one had been very tattered; this one was in much better condition.
Note that this NP is ambiguous; in colloquial spoken English, it can be indeﬁnite,
as in (.), or deﬁnite, as in (.).
Zero Anaphora:
Instead of using a pronoun, in some languages (including Chi-
nese, Japanese, and Italian) it is possible to have an anaphor that has no lexical
realization at all, called a zero anaphor or zero pronoun, as in the following Italian
zero anaphor
and Japanese examples from Poesio et al. ():
EN [John]i went to visit some friends. On the way [he]i bought some
wine.
IT [Giovanni]i and`o a far visita a degli amici. Per via φi compr`o del vino.
JA [John]i-wa yujin-o houmon-sita. Tochu-de φi wain-o ka-tta.
or this Chinese example:
(.) [我] 前一会精神上太紧张。[] 现在比较平静了
[I] was too nervous a while ago. ... [] am now calmer.
Zero anaphors complicate the task of mention detection in these languages.
Names:
Names (such as of people, locations, or organizations) can be used to refer
to both new and old entities in the discourse:
a. Miss Woodhouse certainly had not done him justice.
b. International Business Machines sought patent compensation
from Amazon; IBM had previously sued other companies.
Information Status
The way referring expressions are used to evoke new referents into the discourse
(introducing new information), or access old entities from the model (old informa-
tion), is called their information status or information structure. Entities can be
information
status
discourse-new or discourse-old, and indeed it is common to distinguish at least
discourse-new
discourse-old
three kinds of entities informationally (Prince, ):
new NPs:
brand new NPs: these introduce entities that are discourse-new and hearer-
new like a fruit or some walnuts.
unused NPs: these introduce entities that are discourse-new but hearer-old
(like Hong Kong, Marie Curie, or the New York Times.
old NPs: also called evoked NPs, these introduce entities that already in the dis-
course model, hence are both discourse-old and hearer-old, like it in “I went
to a new restaurant. It was...”.

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
inferrables: these introduce entities that are neither hearer-old nor discourse-old,
but the hearer can infer their existence by reasoning based on other entities
that are in the discourse. Consider the following examples:
(.) I went to a superb restaurant yesterday. The chef had just opened it.
(.) Mix ﬂour, butter and water. Knead the dough until shiny.
Neither the chef nor the dough were in the discourse model based on the ﬁrst
sentence of either example, but the reader can make a bridging inference
bridging
inference
that these entities should be added to the discourse model and associated with
the restaurant and the ingredients, based on world knowledge that restaurants
have chefs and dough is the result of mixing ﬂour and liquid (Haviland and
Clark , Webber and Baldwin , Nissim et al. , Hou et al. ).
The form of an NP gives strong clues to its information status. We often talk
about an entity’s position on the given-new dimension, the extent to which the refer-
given-new
ent is given (salient in the discourse, easier for the hearer to call to mind, predictable
by the hearer), versus new (non-salient in the discourse, unpredictable) (Chafe ,
Prince , Gundel et al. ). A referent that is very accessible (Ariel, )
accessible
i.e., very salient in the hearer’s mind or easy to call to mind, can be referred to with
less linguistic material. For example pronouns are used only when the referent has
a high degree of activation or salience in the discourse model. By contrast, less
salience
salient entities, like a new referent being introduced to the discourse, will need to be
introduced with a longer and more explicit referring expression to help the hearer
recover the referent.
Thus when an entity is ﬁrst introduced into a discourse its mentions are likely
to have full names, titles or roles, or appositive or restrictive relative clauses, as in
the introduction of our protagonist in (.): Victoria Chen, CFO of Megabucks
Banking. As an entity is discussed over a discourse, it becomes more salient to the
hearer and its mentions on average typically becomes shorter and less informative,
for example with a shortened name (for example Ms. Chen), a deﬁnite description
(the -year-old), or a pronoun (she or her) (Hawkins ). However, this change
in length is not monotonic, and is sensitive to discourse structure (Grosz b,
Reichman , Fox ).
Complications: Non-Referring Expressions
Many noun phrases or other nominals are not referring expressions, although they
may bear a confusing superﬁcial resemblance. For example in some of the earliest
computational work on reference resolution, Karttunen () pointed out that the
NP a car in the following example does not create a discourse referent:
(.) Janet doesn’t have a car.
and cannot be referred back to by anaphoric it or the car:
(.) *It is a Toyota.
(.) *The car is red.
We summarize here four common types of structures that are not counted as men-
tions in coreference tasks and hence complicate the task of mention-detection:
Pronouns also usually (but not always) refer to entities that were introduced no further than one or two
sentences back in the ongoing discourse, whereas deﬁnite noun phrases can often refer further back.

COREFERENCE PHENOMENA: LINGUISTIC BACKGROUND
Appositives:
An appositional structure is a noun phrase that appears next to a
head noun phrase, describing the head. In English they often appear in commas, like
“a unit of UAL” appearing in apposition to the NP United, or CFO of Megabucks
Banking in apposition to Victoria Chen.
(.) Victoria Chen, CFO of Megabucks Banking, saw ...
(.) United, a unit of UAL, matched the fares.
Appositional NPs are not referring expressions, instead functioning as a kind of
supplementary parenthetical description of the head NP. Nonetheless, sometimes it
is useful to link these phrases to an entity they describe, and so some datasets like
OntoNotes mark appositional relationships.
Predicative and Prenominal NPs:
Predicative or attributive NPs describe prop-
erties of the head noun. In United is a unit of UAL, the NP a unit of UAL describes
a property of United, rather than referring to a distinct entity. Thus they are not
marked as mentions in coreference tasks; in our example the NPs $. million and
the company’s president, are attributive, describing properties of her pay and the
-year-old; Example (.) shows a Chinese example in which the predicate NP
(中国最大的城市; China’s biggest city) is not a mention.
(.) her pay jumped to $. million
(.) the -year-old became the company’s president
(.) 上海是[中国最大的城市]
[Shanghai is China’s biggest city]
Expletives:
Many uses of pronouns like it in English and corresponding pronouns
in other languages are not referential. Such expletive or pleonastic cases include
expletive
it is raining, in idioms like hit it off, or in particular syntactic situations like clefts
clefts
(.a) or extraposition (.b):
a. It was Emma Goldman who founded Mother Earth
b. It surprised me that there was a herring hanging on her wall.
Generics:
Another kind of expression that does not refer back to an entity explic-
itly evoked in the text is generic reference. Consider (.).
(.) I love mangos. They are very tasty.
Here, they refers, not to a particular mango or set of mangos, but instead to the class
of mangos in general. The pronoun you can also be used generically:
(.) In July in San Francisco you have to wear a jacket.
Linguistic Properties of the Coreference Relation
Now that we have seen the linguistic properties of individual referring expressions
we turn to properties of the antecedent/anaphor pair. Understanding these properties
is helpful both in designing novel features and performing error analyses.
Number Agreement:
Referring expressions and their referents must generally
agree in number; English she/her/he/him/his/it are singular, we/us/they/them are plu-
ral, and you is unspeciﬁed for number. So a plural antecedent like the chefs cannot
generally corefer with a singular anaphor like she. However, algorithms cannot
enforce number agreement too strictly. First, semantically plural entities can be re-
ferred to by either it or they:
(.) IBM announced a new machine translation product yesterday. They have
been working on it for  years.

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
Second, singular they has become much more common, in which they is used to
singular they
describe singular individuals, often useful because they is gender neutral. Although
recently increasing, singular they is quite old, part of English for many centuries.
Person Agreement:
English distinguishes between ﬁrst, second, and third person,
and a pronoun’s antecedent must agree with the pronoun in person. Thus a third
person pronoun (he, she, they, him, her, them, his, her, their) must have a third person
antecedent (one of the above or any other noun phrase). However, phenomena like
quotation can cause exceptions; in this example I, my, and she are coreferent:
(.) “I voted for Nader because he was most aligned with my values,” she said.
Gender or Noun Class Agreement:
In many languages, all nouns have grammat-
ical gender or noun class and pronouns generally agree with the grammatical gender
of their antecedent. In English this occurs only with third-person singular pronouns,
which distinguish between male (he, him, his), female (she, her), and nonpersonal
(it) grammatical genders. Non-binary pronouns like ze or hir may also occur in more
recent texts. Knowing which gender to associate with a name in text can be complex,
and may require world knowledge about the individual. Some examples:
(.) Maryam has a theorem. She is exciting. (she=Maryam, not the theorem)
(.) Maryam has a theorem. It is exciting. (it=the theorem, not Maryam)
Binding Theory Constraints:
The binding theory is a name for syntactic con-
straints on the relations between a mention and an antecedent in the same sentence
(Chomsky, ). Oversimplifying a bit, reﬂexive pronouns like himself and her-
reﬂexive
self corefer with the subject of the most immediate clause that contains them (.),
whereas nonreﬂexives cannot corefer with this subject (.).
(.) Janet bought herself a bottle of ﬁsh sauce. [herself=Janet]
(.) Janet bought her a bottle of ﬁsh sauce. [her̸=Janet]
Recency:
Entities introduced in recent utterances tend to be more salient than
those introduced from utterances further back. Thus, in (.), the pronoun it is
more likely to refer to Jim’s map than the doctor’s map.
(.) The doctor found an old map in the captain’s chest. Jim found an even
older map hidden on the shelf. It described an island.
Grammatical Role:
Entities mentioned in subject position are more salient than
those in object position, which are in turn more salient than those mentioned in
oblique positions. Thus although the ﬁrst sentence in (.) and (.) expresses
roughly the same propositional content, the preferred referent for the pronoun he
varies with the subject—John in (.) and Bill in (.).
(.) Billy Bones went to the bar with Jim Hawkins. He called for a glass of
rum. [ he = Billy ]
(.) Jim Hawkins went to the bar with Billy Bones. He called for a glass of
rum. [ he = Jim ]
Here’s a bound pronoun example from Shakespeare’s Comedy of Errors: There’s not a man I meet but
doth salute me As if I were their well-acquainted friend
The word “gender” is generally only used for languages with  or  noun classes, like most Indo-
European languages; many languages, like the Bantu languages or Chinese, have a much larger number
of noun classes.

COREFERENCE TASKS AND DATASETS
Verb Semantics:
Some verbs semantically emphasize one of their arguments, bi-
asing the interpretation of subsequent pronouns. Compare (.) and (.).
(.) John telephoned Bill. He lost the laptop.
(.) John criticized Bill. He lost the laptop.
These examples differ only in the verb used in the ﬁrst sentence, yet “he” in (.)
is typically resolved to John, whereas “he” in (.) is resolved to Bill. This may
be partly due to the link between implicit causality and saliency: the implicit cause
of a “criticizing” event is its object, whereas the implicit cause of a “telephoning”
event is its subject. In such verbs, the entity which is the implicit cause may be more
salient.
Selectional Restrictions:
Many other kinds of semantic knowledge can play a role
in referent preference. For example, the selectional restrictions that a verb places on
its arguments (Chapter ) can help eliminate referents, as in (.).
(.) I ate the soup in my new bowl after cooking it for hours
There are two possible referents for it, the soup and the bowl. The verb eat, however,
requires that its direct object denote something edible, and this constraint can rule
out bowl as a possible referent.
Coreference Tasks and Datasets
We can formulate the task of coreference resolution as follows: Given a text T, ﬁnd
all entities and the coreference links between them. We evaluate our task by com-
paring the links our system creates with those in human-created gold coreference
annotations on T.
Let’s return to our coreference example, now using superscript numbers for each
coreference chain (cluster), and subscript letters for individual mentions in the clus-
ter:
(.) [Victoria Chen]
a, CFO of [Megabucks Banking]
a, saw [[her]
b pay]
a jump
to $. million, as [the -year-old]
c also became [[the company]
b’s
president. It is widely known that [she]
d came to [Megabucks]
c from rival
[Lotsabucks]
a.
Assuming example (.) was the entirety of the article, the chains for her pay and
Lotsabucks are singleton mentions:
. {Victoria Chen, her, the -year-old, She}
. {Megabucks Banking, the company, Megabucks}
. { her pay}
. { Lotsabucks}
For most coreference evaluation campaigns, the input to the system is the raw
text of articles, and systems must detect mentions and then link them into clusters.
Solving this task requires dealing with pronominal anaphora (ﬁguring out that her
refers to Victoria Chen), ﬁltering out non-referential pronouns like the pleonastic It
in It has been ten years), dealing with deﬁnite noun phrases to ﬁgure out that the
-year-old is coreferent with Victoria Chen, and that the company is the same as
Megabucks. And we need to deal with names, to realize that Megabucks is the same
as Megabucks Banking.

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
Exactly what counts as a mention and what links are annotated differs from task
to task and dataset to dataset. For example some coreference datasets do not label
singletons, making the task much simpler. Resolvers can achieve much higher scores
on corpora without singletons, since singletons constitute the majority of mentions in
running text, and they are often hard to distinguish from non-referential NPs. Some
tasks use gold mention-detection (i.e. the system is given human-labeled mention
boundaries and the task is just to cluster these gold mentions), which eliminates the
need to detect and segment mentions from running text.
Coreference is usually evaluated by the CoNLL F score, which combines three
metrics: MUC, B, and CEAFe; Section . gives the details.
Let’s mention a few characteristics of one popular coreference dataset, OntoNotes
(Pradhan et al. c, Pradhan et al. a), and the CoNLL  Shared Task
based on it (Pradhan et al., a). OntoNotes contains hand-annotated Chinese
and English coreference datasets of roughly one million words each, consisting of
newswire, magazine articles, broadcast news, broadcast conversations, web data and
conversational speech data, as well as about , words of annotated Arabic
newswire. The most important distinguishing characteristic of OntoNotes is that
it does not label singletons, simplifying the coreference task, since singletons rep-
resent %-% of all entities. In other ways, it is similar to other coreference
datasets. Referring expression NPs that are coreferent are marked as mentions, but
generics and pleonastic pronouns are not marked. Appositive clauses are not marked
as separate mentions, but they are included in the mention. Thus in the NP, “Richard
Godown, president of the Industrial Biotechnology Association” the mention is the
entire phrase. Prenominal modiﬁers are annotated as separate entities only if they
are proper nouns. Thus wheat is not an entity in wheat ﬁelds, but UN is an entity in
UN policy (but not adjectives like American in American policy).
A number of corpora mark richer discourse phenomena. The ISNotes corpus
annotates a portion of OntoNotes for information status, include bridging examples
(Hou et al., ). The LitBank coreference corpus (Bamman et al., ) contains
coreference annotations for , tokens from  different literary novels, in-
cluding singletons and quantiﬁed and negated noun phrases. The AnCora-CO coref-
erence corpus (Recasens and Mart´ı, ) contains , words each of Spanish
(AnCora-CO-Es) and Catalan (AnCora-CO-Ca) news data, and includes labels for
complex phenomena like discourse deixis in both languages. The ARRAU corpus
(Uryupina et al., ) contains , words of English marking all NPs, which
means singleton clusters are available. ARRAU includes diverse genres like dialog
(the TRAINS data) and ﬁction (the Pear Stories), and has labels for bridging refer-
ences, discourse deixis, generics, and ambiguous anaphoric relations.
Mention Detection
The ﬁrst stage of coreference is mention detection: ﬁnding the spans of text that
mention
detection
constitute each mention. Mention detection algorithms are usually very liberal in
proposing candidate mentions (i.e., emphasizing recall), and only ﬁltering later. For
example many systems run parsers and named entity taggers on the text and extract
every span that is either an NP, a possessive pronoun, or a named entity.
Doing so from our sample text repeated in (.):
(.) Victoria Chen, CFO of Megabucks Banking, saw her pay jump to $.
MENTION DETECTION
million, as the -year-old also became the company’s president. It is
widely known that she came to Megabucks from rival Lotsabucks.
might result in the following list of  potential mentions:
Victoria Chen
$. million
she
CFO of Megabucks Banking the -year-old
Megabucks
Megabucks Banking
the company
Lotsabucks
her
the company’s president
her pay
It
More recent mention detection systems are even more generous; the span-based
algorithm we will describe in Section . ﬁrst extracts literally all n-gram spans
of words up to N=. Of course recall from Section .. that many NPs—and
the overwhelming majority of random n-gram spans—are not referring expressions.
Therefore all such mention detection systems need to eventually ﬁlter out pleonas-
tic/expletive pronouns like It above, appositives like CFO of Megabucks Banking
Inc, or predicate nominals like the company’s president or $. million.
Some of this ﬁltering can be done by rules. Early rule-based systems designed
regular expressions to deal with pleonastic it, like the following rules from Lappin
and Leass () that use dictionaries of cognitive verbs (e.g., believe, know, antic-
ipate) to capture pleonastic it in “It is thought that ketchup...”, or modal adjectives
(e.g., necessary, possible, certain, important), for, e.g., “It is likely that I...”. Such
rules are sometimes used as part of modern systems:
It is Modaladjective that S
It is Modaladjective (for NP) to VP
It is Cogv-ed that S
It seems/appears/means/follows (that) S
Mention-detection rules are sometimes designed speciﬁcally for particular eval-
uation campaigns. For OntoNotes, for example, mentions are not embedded within
larger mentions, and while numeric quantities are annotated, they are rarely coref-
erential. Thus for OntoNotes tasks like CoNLL  (Pradhan et al., a), a
common ﬁrst pass rule-based mention detection algorithm (Lee et al., ) is:
. Take all NPs, possessive pronouns, and named entities.
. Remove numeric quantities ( dollars, %), mentions embedded in
larger mentions, adjectival forms of nations, and stop words (like there).
. Remove pleonastic it based on regular expression patterns.
Rule-based systems, however, are generally insufﬁcient to deal with mention-
detection, and so modern systems incorporate some sort of learned mention detec-
tion component, such as a referentiality classiﬁer, an anaphoricity classiﬁer—
detecting whether an NP is an anaphor—or a discourse-new classiﬁer— detecting
whether a mention is discourse-new and a potential antecedent for a future anaphor.
An anaphoricity detector, for example, can draw its positive training examples
anaphoricity
detector
from any span that is labeled as an anaphoric referring expression in hand-labeled
datasets like OntoNotes, ARRAU, or AnCora. Any other NP or named entity can be
marked as a negative training example. Anaphoricity classiﬁers use features of the
candidate mention such as its head word, surrounding words, deﬁniteness, animacy,
length, position in the sentence/discourse, many of which were ﬁrst proposed in
early work by Ng and Cardie (a); see Section . for more on features.

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
Referentiality or anaphoricity detectors can be run as ﬁlters, in which only men-
tions that are classiﬁed as anaphoric or referential are passed on to the coreference
system. The end result of such a ﬁltering mention detection system on our example
above might be the following ﬁltered set of  potential mentions:
Victoria Chen
her pay
she
Megabucks Bank the -year-old Megabucks
her
the company
Lotsabucks
It turns out, however, that hard ﬁltering of mentions based on an anaphoricity
or referentiality classiﬁer leads to poor performance. If the anaphoricity classiﬁer
threshold is set too high, too many mentions are ﬁltered out and recall suffers. If the
classiﬁer threshold is set too low, too many pleonastic or non-referential mentions
are included and precision suffers.
The modern approach is instead to perform mention detection, anaphoricity, and
coreference jointly in a single end-to-end model (Ng b, Denis and Baldridge
, Rahman and Ng ). For example mention detection in the Lee et al.
(b), system is based on a single end-to-end neural network that computes
a score for each mention being referential, a score for two mentions being corefer-
ence, and combines them to make a decision, training all these scores with a single
end-to-end loss. We’ll describe this method in detail in Section ..
Despite these advances, correctly detecting referential mentions seems to still be
an unsolved problem, since systems incorrectly marking pleonastic pronouns like
it and other non-referential NPs as coreferent is a large source of errors of modern
coreference resolution systems (Kummerfeld and Klein , Martschat and Strube
, Martschat and Strube , Wiseman et al. , Lee et al. a).
Mention, referentiality, or anaphoricity detection is thus an important open area
of investigation. Other sources of knowledge may turn out to be helpful, especially
in combination with unsupervised and semisupervised algorithms, which also mit-
igate the expense of labeled datasets. In early work, for example Bean and Riloff
() learned patterns for characterizing anaphoric or non-anaphoric NPs; (by ex-
tracting and generalizing over the ﬁrst NPs in a text, which are guaranteed to be
non-anaphoric). Chang et al. () look for head nouns that appear frequently in
the training data but never appear as gold mentions to help ﬁnd non-referential NPs.
Bergsma et al. (b) use web counts as a semisupervised way to augment standard
features for anaphoricity detection for English it, an important task because it is both
common and ambiguous; between a quarter and half it examples are non-anaphoric.
Consider the following two examples:
(.) You can make [it] in advance. [anaphoric]
(.) You can make [it] in Hollywood. [non-anaphoric]
The it in make it is non-anaphoric, part of the idiom make it. Bergsma et al. (b)
turn the context around each example into patterns, like “make * in advance” from
(.), and “make * in Hollywood” from (.). They then use Google n-grams to
enumerate all the words that can replace it in the patterns. Non-anaphoric contexts
tend to only have it in the wildcard positions, while anaphoric contexts occur with
many other NPs (for example make them in advance is just as frequent in their data
Some systems try to avoid mention detection or anaphoricity detection altogether. For datasets like
OntoNotes which don’t label singletons, an alternative to ﬁltering out non-referential mentions is to run
coreference resolution, and then simply delete any candidate mentions which were not corefered with
another mention. This likely doesn’t work as well as explicitly modeling referentiality, and cannot solve
the problem of detecting singletons, which is important for tasks like entity linking.

ARCHITECTURES FOR COREFERENCE ALGORITHMS
as make it in advance, but make them in Hollywood did not occur at all). These
n-gram contexts can be used as features in a supervised anaphoricity classiﬁer.
Architectures for Coreference Algorithms
Modern systems for coreference are based on supervised neural machine learning,
supervised from hand-labeled datasets like OntoNotes. In this section we overview
the various architecture of modern systems, using the categorization of Ng (),
which distinguishes algorithms based on whether they make each coreference deci-
sion in a way that is entity-based—representing each entity in the discourse model—
or only mention-based—considering each mention independently, and whether they
use ranking models to directly compare potential antecedents. Afterwards, we go
into more detail on one state-of-the-art algorithm in Section ..
The Mention-Pair Architecture
We begin with the mention-pair architecture, the simplest and most inﬂuential
mention-pair
coreference architecture, which introduces many of the features of more complex
algorithms, even though other architectures perform better. The mention-pair ar-
mention-pair
chitecture is based around a classiﬁer that— as its name suggests—is given a pair
of mentions, a candidate anaphor and a candidate antecedent, and makes a binary
classiﬁcation decision: coreferring or not.
Let’s consider the task of this classiﬁer for the pronoun she in our example, and
assume the slightly simpliﬁed set of potential antecedents in Fig. ..
p(coref|”Victoria Chen”,”she”)
Victoria Chen
Megabucks Banking
her
her pay
the -year-old
she
p(coref|”Megabucks Banking”,”she”)
Figure .
For each pair of a mention (like she), and a potential antecedent mention (like
Victoria Chen or her), the mention-pair classiﬁer assigns a probability of a coreference link.
For each prior mention (Victoria Chen, Megabucks Banking, her, etc.), the binary
classiﬁer computes a probability: whether or not the mention is the antecedent of
she. We want this probability to be high for actual antecedents (Victoria Chen, her,
the -year-old) and low for non-antecedents (Megabucks Banking, her pay).
Early classiﬁers used hand-built features (Section .); more recent classiﬁers
use neural representation learning (Section .)
For training, we need a heuristic for selecting training samples; since most pairs
of mentions in a document are not coreferent, selecting every pair would lead to
a massive overabundance of negative samples. The most common heuristic, from
(Soon et al., ), is to choose the closest antecedent as a positive example, and all
pairs in between as the negative examples. More formally, for each anaphor mention
mi we create
one positive instance (mi,m j) where m j is the closest antecedent to mi, and

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
a negative instance (mi,mk) for each mk between mj and mi
Thus for the anaphor she, we would choose (she, her) as the positive example
and no negative examples. Similarly, for the anaphor the company we would choose
(the company, Megabucks) as the positive example and (the company, she) (the com-
pany, the -year-old) (the company, her pay) and (the company, her) as negative
examples.
Once the classiﬁer is trained, it is applied to each test sentence in a clustering
step. For each mention i in a document, the classiﬁer considers each of the prior i−
mentions. In closest-ﬁrst clustering (Soon et al., ), the classiﬁer is run right to
left (from mention i− down to mention ) and the ﬁrst antecedent with probability
> . is linked to i. If no antecedent has probably > ., no antecedent is selected for
i. In best-ﬁrst clustering, the classiﬁer is run on all i −  antecedents and the most
probable preceding mention is chosen as the antecedent for i. The transitive closure
of the pairwise relation is taken as the cluster.
While the mention-pair model has the advantage of simplicity, it has two main
problems. First, the classiﬁer doesn’t directly compare candidate antecedents to
each other, so it’s not trained to decide, between two likely antecedents, which one
is in fact better. Second, it ignores the discourse model, looking only at mentions,
not entities. Each classiﬁer decision is made completely locally to the pair, without
being able to take into account other mentions of the same entity. The next two
models each address one of these two ﬂaws.
The Mention-Rank Architecture
The mention ranking model directly compares candidate antecedents to each other,
choosing the highest-scoring antecedent for each anaphor.
In early formulations, for mention i, the classiﬁer decides which of the {,...,i−
} prior mentions is the antecedent (Denis and Baldridge, ). But suppose i is
in fact not anaphoric, and none of the antecedents should be chosen? Such a model
would need to run a separate anaphoricity classiﬁer on i. Instead, it turns out to be
better to jointly learn anaphoricity detection and coreference together with a single
loss (Rahman and Ng, ).
So in modern mention-ranking systems, for the ith mention (anaphor), we have
an associated random variable yi ranging over the values Y(i) = {,...,i−,ϵ}. The
value ϵ is a special dummy mention meaning that i does not have an antecedent (i.e.,
is either discourse-new and starts a new coref chain, or is non-anaphoric).
p(”her”|she”) p(”the -year-old”|she”)
p(”Victoria Chen”|”she”)
One or more
of these
should be high
Victoria Chen
Megabucks Banking
her
her pay
the -year-old
she
All of these
should be low
p(”her pay”|she”)
p(ϵ|”she”)
p(”Megabucks Banking”|she”)
Figure .
For each candidate anaphoric mention (like she), the mention-ranking system assigns a proba-
bility distribution over all previous mentions plus the special dummy mention ϵ.
At test time, for a given mention i the model computes one softmax over all the
antecedents (plus ϵ) giving a probability for each candidate antecedent (or none).

CLASSIFIERS USING HAND-BUILT FEATURES
Fig. . shows an example of the computation for the single candidate anaphor
she.
Once the antecedent is classiﬁed for each anaphor, transitive closure can be run
over the pairwise decisions to get a complete clustering.
Training is trickier in the mention-ranking model than the mention-pair model,
because for each anaphor we don’t know which of all the possible gold antecedents
to use for training. Instead, the best antecedent for each mention is latent; that
is, for each mention we have a whole cluster of legal gold antecedents to choose
from. Early work used heuristics to choose an antecedent, for example choosing the
closest antecedent as the gold antecedent and all non-antecedents in a window of
two sentences as the negative examples (Denis and Baldridge, ). Various kinds
of ways to model latent antecedents exist (Fernandes et al. , Chang et al. ,
Durrett and Klein ). The simplest way is to give credit to any legal antecedent
by summing over all of them, with a loss function that optimizes the likelihood of
all correct antecedents from the gold clustering (Lee et al., b). We’ll see the
details in Section ..
Mention-ranking models can be implemented with hand-build features or with
neural representation learning (which might also incorporate some hand-built fea-
tures). we’ll explore both directions in Section . and Section ..
Entity-based Models
Both the mention-pair and mention-ranking models make their decisions about men-
tions. By contrast, entity-based models link each mention not to a previous mention
but to a previous discourse entity (cluster of mentions).
A mention-ranking model can be turned into an entity-ranking model simply
by having the classiﬁer make its decisions over clusters of mentions rather than
individual mentions (Rahman and Ng, ).
For traditional feature-based models, this can be done by extracting features over
clusters. The size of a cluster is a useful feature, as is its ‘shape’, which is the
list of types of the mentions in the cluster i.e., sequences of the tokens (P)roper,
(D)eﬁnite, (I)ndeﬁnite, (Pr)onoun, so that a cluster composed of {Victoria, her, the
-year-old} would have the shape P-Pr-D (Bj¨orkelund and Kuhn, ). An entity-
based model that includes a mention-pair classiﬁer can use as features aggregates of
mention-pair probabilities, for example computing the average probability of coref-
erence over all mention-pairs in the two clusters (Clark and Manning ).
Neural models can learn representations of clusters automatically, for example
by using an RNN over the sequence of cluster mentions to encode a state correspond-
ing to a cluster representation (Wiseman et al., ), or by learning distributed rep-
resentations for pairs of clusters by pooling over learned representations of mention
pairs (Clark and Manning, b).
However, although entity-based models are more expressive, the use of cluster-
level information in practice has not led to large gains in performance, so mention-
ranking models are still more commonly used.
Classiﬁers using hand-built features
Feature-based classiﬁers, use hand-designed features in logistic regression, SVM,
or random forest classiﬁers for coreference resolution. These classiﬁers don’t per-

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
form as well as neural ones. Nonetheless, they are still sometimes useful to build
lightweight systems when compute or data are sparse, and the features themselves
are useful for error analysis even in neural systems.
Given an anaphor mention and a potential antecedent mention, feature based
classiﬁers make use of three types of features: (i) features of the anaphor, (ii) features
of the candidate antecedent, and (iii) features of the relationship between the pair.
Entity-based models can make additional use of two additional classes: (iv) feature
of all mentions from the antecedent’s entity cluster, and (v) features of the relation
between the anaphor and the mentions in the antecedent entity cluster.
Features of the Anaphor or Antecedent Mention
First (last) word
Victoria/she
First or last word (or embedding) of antecedent/anaphor
Head word
Victoria/she
Head word (or head embedding) of antecedent/anaphor
Attributes
Sg-F-A--PER/
Sg-F-A--PER
The number, gender, animacy, person, named entity type
attributes of (antecedent/anaphor)
Length
length in words of (antecedent/anaphor)
Mention type
P/Pr
Type: (P)roper, (D)eﬁnite, (I)ndeﬁnite, (Pr)onoun) of an-
tecedent/anaphor
Features of the Antecedent Entity
Entity shape
P-Pr-D
The ‘shape’ or list of types of the mentions in the
antecedent entity (cluster), i.e., sequences of (P)roper,
(D)eﬁnite, (I)ndeﬁnite, (Pr)onoun.
Entity attributes
Sg-F-A--PER
The number, gender, animacy, person, named entity type
attributes of the antecedent entity
Ant. cluster size
Number of mentions in the antecedent cluster
Features of the Pair of Mentions
Sentence distance
The number of sentences between antecedent and anaphor
Mention distance
The number of mentions between antecedent and anaphor
i-within-i
Anaphor has i-within-i relation with antecedent
Cosine
Cosine between antecedent and anaphor embeddings
Features of the Pair of Entities
Exact String Match
True if the strings of any two mentions from the antecedent
and anaphor clusters are identical.
Head Word Match
True if any mentions from antecedent cluster has same
headword as any mention in anaphor cluster
Word Inclusion
All words in anaphor cluster included in antecedent cluster
Figure .
Feature-based coreference: sample feature values for anaphor “she” and potential antecedent
“Victoria Chen”.
Figure . shows a selection of commonly used features, and shows the value
that would be computed for the potential anaphor “she” and potential antecedent
“Victoria Chen” in our example sentence, repeated below:
(.) Victoria Chen, CFO of Megabucks Banking, saw her pay jump to $.
million, as the -year-old also became the company’s president. It is
widely known that she came to Megabucks from rival Lotsabucks.
Features that prior work has found to be particularly useful are exact string
match, entity headword agreement, mention distance, as well as (for pronouns) exact
attribute match and i-within-i, and (for nominals and proper names) word inclusion
and cosine. For lexical features (like head words) it is common to only use words
that appear enough times (> times).

A NEURAL MENTION-RANKING ALGORITHM
It is crucial in feature-based systems to use conjunctions of features; one exper-
iment suggested that moving from individual features in a classiﬁer to conjunctions
of multiple features increased F by  points (Lee et al., a). Speciﬁc conjunc-
tions can be designed by hand (Durrett and Klein, ), all pairs of features can be
conjoined (Bengtson and Roth, ), or feature conjunctions can be learned using
decision tree or random forest classiﬁers (Ng and Cardie a, Lee et al. a).
Features can also be used in neural models as well. Neural systems use contex-
tual word embeddings so don’t beneﬁt from shallow features like string match or or
mention types. However features like mention length, distance between mentions,
or genre can complement neural contextual embedding models.
A neural mention-ranking algorithm
In this section we describe the neural ee-coref algorithms of Lee et al. (b)
(simpliﬁed and extended a bit, drawing on Joshi et al. () and others). This is
a mention-ranking algorithm that considers all possible spans of text in the docu-
ment, assigns a mention-score to each span, prunes the mentions based on this score,
then assigns coreference links to the remaining mentions.
More formally, given a document D with T words, the model considers all of
the T(T+)
text spans in D (unigrams, bigrams, trigrams, -grams, etc; in practice
we only consider spans up a maximum length around ). The task is to assign
to each span i an antecedent yi, a random variable ranging over the values Y(i) =
{,...,i − ,ϵ}; each previous span and a special dummy token ϵ. Choosing the
dummy token means that i does not have an antecedent, either because i is discourse-
new and starts a new coreference chain, or because i is non-anaphoric.
For each pair of spans i and j, the system assigns a score s(i, j) for the coref-
erence link between span i and span j. The system then learns a distribution P(yi)
over the antecedents for span i:
P(yi) =
exp(s(i,yi))
y′∈Y(i) exp(s(i,y′))
This score s(i, j) includes three factors that we’ll deﬁne below: m(i); whether span
i is a mention; m(j); whether span j is a mention; and c(i, j); whether j is the
antecedent of i:
s(i, j) = m(i)+m( j)+c(i, j)
For the dummy antecedent ϵ, the score s(i,ϵ) is ﬁxed to . This way if any non-
dummy scores are positive, the model predicts the highest-scoring antecedent, but if
all the scores are negative it abstains.
Computing span representations
To compute the two functions m(i) and c(i, j) which score a span i or a pair of spans
(i, j), we’ll need a way to represent a span. The ee-coref family of algorithms
represents each span by trying to capture  words/tokens: the ﬁrst word, the last
word, and the most important word. We ﬁrst run each paragraph or subdocument
through an encoder (like BERT) to generate embeddings hi for each token i. The
span i is then represented by a vector gi that is a concatenation of the encoder output

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
embedding for the ﬁrst (start) token of the span, the encoder output for the last (end)
token of the span, and a third vector which is an attention-based representation:
gi = [hSTART(i),hEND(i),hATT(i)]
The goal of the attention vector is to represent which word/token is the likely
syntactic head-word of the span; we saw in the prior section that head-words are
a useful feature; a matching head-word is a good indicator of coreference. The
attention representation is computed as usual; the system learns a weight vector wα,
and computes its dot product with the hidden state ht transformed by a FFN:
αt = wα  FFNα(ht)
The attention score is normalized into a distribution via a softmax:
ai,t =
exp(αt)
PEND(i)
k=START(i) exp(αk)
And then the attention distribution is used to create a vector hATT(i) which is an
attention-weighted sum of the embeddings et of each of the words in span i:
hATT(i) =
t=START(i)
ai,t et
END(i)
Fig. . shows the computation of the span representation and the mention
score.
General Electric
Electric said the
the Postal Service
Service contacted the
the company
Mention score (m)
Span representation (g)
Span head (hATT)
Encodings (h)
Encoder
General
Electric
said
the
Postal
Service contacted
the
company
Figure .
Computation of the span representation g (and the mention score m) in a BERT version of the
ee-coref model (Lee et al. b, Joshi et al. ). The model considers all spans up to a maximum width of
say ; the ﬁgure shows a small subset of the bigram and trigram spans.
Computing the mention and antecedent scores m and c
Now that we know how to compute the vector gi for representing span i, we can
see the details of the two scoring functions m(i) and c(i, j). Both are computed by
feedforward networks:
m(i) = wm FFNm(gi)
c(i, j) = wc FFNc([gi,g j,gi ◦gj,])
At inference time, this mention score m is used as a ﬁlter to keep only the best few
mentions.

A NEURAL MENTION-RANKING ALGORITHM
We then compute the antecedent score for high-scoring mentions. The antecedent
score c(i, j) takes as input a representation of the spans i and j, but also the element-
wise similarity of the two spans to each other gi ◦ gj (here ◦ is element-wise mul-
tiplication). Fig. . shows the computation of the score s for the three possible
antecedents of the company in the example sentence from Fig. ..
Figure .
The computation of the score s for the three possible antecedents of the com-
pany in the example sentence from Fig. .. Figure after Lee et al. (b).
Given the set of mentions, the joint distribution of antecedents for each docu-
ment is computed in a forward pass, and we can then do transitive closure on the
antecedents to create a ﬁnal clustering for the document.
Fig. . shows example predictions from the model, showing the attention
weights, which Lee et al. (b) ﬁnd correlate with traditional semantic heads.
Note that the model gets the second example wrong, presumably because attendants
and pilot likely have nearby word embeddings.
Figure .
Sample predictions from the Lee et al. (b) model, with one cluster per
example, showing one correct example and one mistake. Bold, parenthesized spans are men-
tions in the predicted cluster. The amount of red color on a word indicates the head-ﬁnding
attention weight ai,t in (.). Figure adapted from Lee et al. (b).
Learning
For training, we don’t have a single gold antecedent for each mention; instead the
coreference labeling only gives us each entire cluster of coreferent mentions; so a
mention only has a latent antecedent. We therefore use a loss function that maxi-
mizes the sum of the coreference probability of any of the legal antecedents. For a
given mention i with possible antecedents Y(i), let GOLD(i) be the set of mentions
in the gold cluster containing i. Since the set of mentions occurring before i is Y(i),
the set of mentions in that gold cluster that also occur before i is Y(i)∩ GOLD(i). We

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
ˆy∈Y(i)∩GOLD(i)
P(ˆy)
therefore want to maximize:
If a mention i is not in a gold cluster GOLD(i) = ϵ.
To turn this probability into a loss function, we’ll use the cross-entropy loss
function we deﬁned in Eq. . in Chapter , by taking the −log of the probability.
If we then sum over all mentions, we get the ﬁnal loss function for training:
L =
ˆy∈Y(i)∩GOLD(i)
P(ˆy)
i=
−log
Entity Linking
Entity linking is the task of associating a mention in text with the representation of
entity linking
some real-world entity in an ontology or knowledge base (Ji and Grishman, ). It
is the natural follow-on to coreference resolution; coreference resolution is the task
of associating textual mentions that corefer to the same entity. Entity linking takes
the further step of identifying who that entity is. It is especially important for any
NLP task that links to a knowledge base.
While there are all sorts of potential knowledge-bases, we’ll focus in this section
on Wikipedia, since it’s widely used as an ontology for NLP tasks. In this usage,
each unique Wikipedia page acts as the unique id for a particular entity. This task of
deciding which Wikipedia page corresponding to an individual is being referred to
by a text mention has its own name: wikiﬁcation (Mihalcea and Csomai, ).
wikiﬁcation
Since the earliest systems (Mihalcea and Csomai , Cucerzan , Milne
and Witten ), entity linking is done in (roughly) two stages: mention detec-
tion and mention disambiguation. We’ll give two algorithms, one simple classic
baseline that uses anchor dictionaries and information from the Wikipedia graph
structure (Ferragina and Scaiella, ) and one modern neural algorithm (Li et al.,
). We’ll focus here mainly on the application of entity linking to questions,
since a lot of the literature has been in that context.
Linking based on Anchor Dictionaries and Web Graph
As a simple baseline we introduce the TAGME linker (Ferragina and Scaiella, )
for Wikipedia, which itself draws on earlier algorithms (Mihalcea and Csomai ,
Cucerzan , Milne and Witten ). Wikiﬁcation algorithms deﬁne the set of
entities as the set of Wikipedia pages, so we’ll refer to each Wikipedia page as a
unique entity e. TAGME ﬁrst creates a catalog of all entities (i.e. all Wikipedia
pages, removing some disambiguation and other meta-pages) and indexes them in a
standard IR engine like Lucene. For each page e, the algorithm computes an in-link
count in(e): the total number of in-links from other Wikipedia pages that point to e.
These counts can be derived from Wikipedia dumps.
Finally, the algorithm requires an anchor dictionary. An anchor dictionary
lists for each Wikipedia page, its anchor texts: the hyperlinked spans of text on
anchor texts
other pages that point to it. For example, the web page for Stanford University,
http://www.stanford.edu, might be pointed to from another page using anchor
texts like Stanford or Stanford University:

ENTITY LINKING
<a href="http://www.stanford.edu">Stanford University</a>
We compute a Wikipedia anchor dictionary by including, for each Wikipedia
page e, e’s title as well as all the anchor texts from all Wikipedia pages that point to e.
For each anchor string a we’ll also compute its total frequency freq(a) in Wikipedia
(including non-anchor uses), the number of times a occurs as a link (which we’ll call
link(a)), and its link probability linkprob(a) = link(a)/freq(a). Some cleanup of the
ﬁnal anchor dictionary is required, for example removing anchor strings composed
only of numbers or single characters, that are very rare, or that are very unlikely to
be useful entities because they have a very low linkprob.
Mention Detection
Given a question (or other text we are trying to link), TAGME
detects mentions by querying the anchor dictionary for each token sequence up to
words. This large set of sequences is pruned with some simple heuristics (for
example pruning substrings if they have small linkprobs). The question:
When was Ada Lovelace born?
might give rise to the anchor Ada Lovelace and possibly Ada, but substrings spans
like Lovelace might be pruned as having too low a linkprob, and but spans like born
have such a low linkprob that they would not be in the anchor dictionary at all.
Mention Disambiguation
If a mention span is unambiguous (points to only one
entity/Wikipedia page), we are done with entity linking! However, many spans are
ambiguous, matching anchors for multiple Wikipedia entities/pages. The TAGME
algorithm uses two factors for disambiguating ambiguous spans, which have been
referred to as prior probability and relatedness/coherence. The ﬁrst factor is p(e|a),
the probability with which the span refers to a particular entity. For each page e ∈
E(a), the probability p(e|a) that anchor a points to e, is the ratio of the number of
links into e with anchor text a to the total number of occurrences of a as an anchor:
prior(a → e) = p(e|a) = count(a → e)
link(a)
Let’s see how that factor works in linking entities in the following question:
What Chinese Dynasty came before the Yuan?
The most common association for the span Yuan in the anchor dictionary is the name
of the Chinese currency, i.e., the probability p(Yuan currency| yuan) is very high.
Rarer Wikipedia associations for Yuan include the common Chinese last name, a
language spoken in Thailand, and the correct entity in this case, the name of the
Chinese dynasty. So if we chose based only on p(e|a) , we would make the wrong
disambiguation and miss the correct link, Yuan dynasty.
To help in just this sort of case, TAGME uses a second factor, the relatedness of
this entity to other entities in the input question. In our example, the fact that the
question also contains the span Chinese Dynasty, which has a high probability link to
the page Dynasties in Chinese history, ought to help match Yuan dynasty.
Let’s see how this works. Given a question q, for each candidate anchors span
a detected in q, we assign a relatedness score to each possible entity e ∈ E(a) of a.
The relatedness score of the link a → e is the weighted average relatedness between
e and all other entities in q. Two entities are considered related to the extent their
Wikipedia pages share many in-links. More formally, the relatedness between two
entities A and B is computed as
rel(A,B) = log(max(|in(A)|,|in(B)|))−log(|in(A)∩in(B)|)
log(|W|)−log(min(|in(A)|,|in(B)|))

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
where in(x) is the set of Wikipedia pages pointing to x and W is the set of all Wiki-
pedia pages in the collection.
The vote given by anchor b to the candidate annotation a → X is the average,
over all the possible entities of b, of their relatedness to X, weighted by their prior
probability:
vote(b,X) =
|E(b)|
Y∈E(b)
rel(X,Y)p(Y|b)
The total relatedness score for a → X is the sum of the votes of all the other anchors
detected in q:
b∈Xq\a
vote(b,X)
relatedness(a → X) =
To score a → X, we combine relatedness and prior by choosing the entity X
that has the highest relatedness(a → X), ﬁnding other entities within a small ϵ of
this value, and from this set, choosing the entity with the highest prior P(X|a). The
result of this step is a single entity assigned to each span in q.
The TAGME algorithm has one further step of pruning spurious anchor/entity
pairs, assigning a score averaging link probability with the coherence.
coherence(a → X) =
|S|−
B∈S\X
rel(B,X)
score(a → X) = coherence(a → X)+linkprob(a)
Finally, pairs are pruned if score(a → X) < λ, where the threshold λ is set on a
held-out set.
Neural Graph-based linking
More recent entity linking models are based on bi-encoders, encoding a candidate
mention span, encoding an entity, and computing the dot product between the en-
codings. This allows embeddings for all the entities in the knowledge base to be
precomputed and cached (Wu et al., ). Let’s sketch the ELQ linking algorithm
of Li et al. (), which is given a question q and a set of candidate entities from
Wikipedia with associated Wikipedia text, and outputs tuples (e,ms,me) of entity id,
mention start, and mention end. As Fig. . shows, it does this by encoding each
Wikipedia entity using text from Wikipedia, encoding each mention span using text
from the question, and computing their similarity, as we describe below.
Entity Mention Detection
To get an h-dimensional embedding for each question
token, the algorithm runs the question through BERT in the normal way:
[q qn] = BERT([CLS]q qn[SEP])
It then computes the likelihood of each span [i, j] in q being an entity mention, in
a way similar to the span-based algorithm we saw for the reader above. First we
compute the score for i/j being the start/end of a mention:
sstart(i) = wstart qi,
send( j) = wend q j,

ENTITY LINKING
Figure .
A sketch of the inference process in the ELQ algorithm for entity linking in
questions (Li et al., ). Each candidate question mention span and candidate entity are
separately encoded, and then scored by the entity/span dot product.
where wstart and wend are vectors learned during training. Next, another trainable
embedding, wmention is used to compute a score for each token being part of a men-
tion:
smention(t) = wmention qt
Mention probabilities are then computed by combining these three scores:
p([i, j]) = σ
sstart(i)+send( j)+

t=i
smention(t)
Entity Linking
To link mentions to entities, we next compute embeddings for
each entity in the set E = e, ,ei, ,ew of all Wikipedia entities. For each en-
tity ei we’ll get text from the entity’s Wikipedia page, the title t(ei) and the ﬁrst
tokens of the Wikipedia page which we’ll call the description d(ei). This is
again run through BERT, taking the output of the CLS token BERT[CLS] as the entity
representation:
xei = BERT[CLS]([CLS]t(ei)[ENT]d(ei)[SEP])
Mention spans can be linked to entities by computing, for each entity e and span
[i, j], the dot product similarity between the span encoding (the average of the token
embeddings) and the entity encoding.
yi, j =
t=i
qt
( j −i+)
s(e,[i, j]) = x
eyi, j
Finally, we take a softmax to get a distribution over entities for each span:
p(e|[i, j]) =
exp(s(e,[i, j]))
e′∈E exp(s(e′,[i, j]))
Training
The ELQ mention detection and entity linking algorithm is fully super-
vised. This means, unlike the anchor dictionary algorithms from Section ..,

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
it requires datasets with entity boundaries marked and linked. Two such labeled
datasets are WebQuestionsSP (Yih et al., ), an extension of the WebQuestions
(Berant et al., ) dataset derived from Google search questions, and GraphQues-
tions (Su et al., ). Both have had entity spans in the questions marked and
linked (Sorokin and Gurevych , Li et al. ) resulting in entity-labeled ver-
sions WebQSPEL and GraphQEL (Li et al., ).
Given a training set, the ELQ mention detection and entity linking phases are
trained jointly, optimizing the sum of their losses. The mention detection loss is
a binary cross-entropy loss, with L the length of the passage and N the number of
candidates:
LMD = −
≤i≤j≤min(i+L−,n)
y[i, j] log p([i, j])+(−y[i, j])log(− p([i, j]))
with y[i, j] =  if [i, j] is a gold mention span, else . The entity linking loss is:
LED = −logp(eg|[i, j])
where eg is the gold entity for mention [i, j].
Evaluation of Coreference Resolution
We evaluate coreference algorithms model-theoretically, comparing a set of hypoth-
esis chains or clusters H produced by the system against a set of gold or reference
chains or clusters R from a human labeling, and reporting precision and recall.
However, there are a wide variety of methods for doing this comparison. In fact,
there are  common metrics used to evaluate coreference algorithms: the link based
MUC (Vilain et al., ) and BLANC (Recasens and Hovy , Luo et al. )
metrics, the mention based B metric (Bagga and Baldwin, ), the entity based
CEAF metric (Luo, ), and the link based entity aware LEA metric (Moosavi and
Strube, ).
Let’s just explore two of the metrics. The MUC F-measure (Vilain et al., )
MUC
F-measure
is based on the number of coreference links (pairs of mentions) common to H and
R. Precision is the number of common links divided by the number of links in H.
Recall is the number of common links divided by the number of links in R; This
makes MUC biased toward systems that produce large chains (and fewer entities),
and it ignores singletons, since they don’t involve links.
B is mention-based rather than link-based. For each mention in the reference
chain, we compute a precision and recall, and then we take a weighted sum over all
N mentions in the document to compute a precision and recall for the entire task. For
a given mention i, let R be the reference chain that includes i, and H the hypothesis
chain that has i. The set of correct mentions in H is H ∩R. Precision for mention i
is thus |H∩R|
|H| , and recall for mention i thus |H∩R|
|R| . The total precision is the weighted
sum of the precision for mention i, weighted by a weight wi. The total recall is the
weighted sum of the recall for mention i, weighted by a weight wi. Equivalently:
Precision =
# of mentions in hypothesis chain containing entityi
i=
wi
# of correct mentions in hypothesis chain containing entityi
Recall =
# of mentions in reference chain containing entityi
i=
wi
# of correct mentions in hypothesis chain containing entityi

WINOGRAD SCHEMA PROBLEMS
The weight wi for each entity can be set to different values to produce different
versions of the algorithm.
Following a proposal from Denis and Baldridge (), the CoNLL coreference
competitions were scored based on the average of MUC, CEAF-e, and B (Pradhan
et al. , Pradhan et al. b), and so it is common in many evaluation campaigns
to report an average of these  metrics. See Luo and Pradhan () for a detailed
description of the entire set of metrics; reference implementations of these should
be used rather than attempting to reimplement from scratch (Pradhan et al., ).
Alternative metrics have been proposed that deal with particular coreference do-
mains or tasks. For example, consider the task of resolving mentions to named
entities (persons, organizations, geopolitical entities), which might be useful for in-
formation extraction or knowledge base completion. A hypothesis chain that cor-
rectly contains all the pronouns referring to an entity, but has no version of the name
itself, or is linked with a wrong name, is not useful for this task. We might instead
want a metric that weights each mention by how informative it is (with names being
most informative) (Chen and Ng, ) or a metric that considers a hypothesis to
match a gold chain only if it contains at least one variant of a name (the NEC F
metric of Agarwal et al. ()).
Winograd Schema problems
From early on in the ﬁeld, researchers have noted that some cases of coreference
are quite difﬁcult, seeming to require world knowledge or sophisticated reasoning
to solve. The problem was most famously pointed out by Winograd () with the
following example:
(.) The city council denied the demonstrators a permit because
a. they feared violence.
b. they advocated violence.
Winograd noticed that the antecedent that most readers preferred for the pro-
noun they in continuation (a) was the city council, but in (b) was the demonstrators.
He suggested that this requires understanding that the second clause is intended
as an explanation of the ﬁrst clause, and also that our cultural frames suggest that
city councils are perhaps more likely than demonstrators to fear violence and that
demonstrators might be more likely to advocate violence.
In an attempt to get the ﬁeld of NLP to focus more on methods involving world
knowledge and common-sense reasoning, Levesque () proposed a challenge
task called the Winograd Schema Challenge. The problems in the challenge task
Winograd
schema
are coreference problems designed to be easily disambiguated by the human reader,
but hopefully not solvable by simple techniques such as selectional restrictions, or
other basic word association methods.
The problems are framed as a pair of statements that differ in a single word or
phrase, and a coreference question:
(.) The trophy didn’t ﬁt into the suitcase because it was too large.
Question: What was too large? Answer: The trophy
Levesque’s call was quickly followed up by Levesque et al. () and Rahman and Ng (), a
competition at the IJCAI conference (Davis et al., ), and a natural language inference version of the
problem called WNLI (Wang et al., a).

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
(.) The trophy didn’t ﬁt into the suitcase because it was too small.
Question: What was too small? Answer: The suitcase
The problems have the following characteristics:
. The problems each have two parties
. A pronoun preferentially refers to one of the parties, but could grammatically
also refer to the other
. A question asks which party the pronoun refers to
. If one word in the question is changed, the human-preferred answer changes
to the other party
The kind of world knowledge that might be needed to solve the problems can
vary. In the trophy/suitcase example, it is knowledge about the physical world; that
a bigger object cannot ﬁt into a smaller object. In the original Winograd sentence,
it is stereotypes about social actors like politicians and protesters. In examples like
the following, it is knowledge about human actions like turn-taking or thanking.
(.) Bill passed the gameboy to John because his turn was [over/next]. Whose
turn was [over/next]? Answers: Bill/John
(.) Joan made sure to thank Susan for all the help she had [given/received].
Who had [given/received] help? Answers: Susan/Joan.
Although the Winograd Schema was designed to require common-sense rea-
soning, a large percentage of the original set of problem can be solved by pre-
trained language models, ﬁne-tuned on Winograd Schema sentences (Kocijan et al.,
). Large pretrained language models encode an enormous amount of world or
common-sense knowledge! The current trend is therefore to propose new datasets
with increasingly difﬁcult Winograd-like coreference resolution problems like KNOWREF
(Emami et al., ), with examples like:
(.) Marcus is undoubtedly faster than Jarrett right now but in [his] prime the
gap wasn’t all that big.
In the end, it seems likely that some combination of language modeling and knowl-
edge will prove fruitful; indeed, it seems that knowledge-based models overﬁt less
to lexical idiosyncracies in Winograd Schema training sets (Trichelair et al., ),
Gender Bias in Coreference
As with other aspects of language processing, coreference models exhibit gender and
other biases (Zhao et al. a, Rudinger et al. , Webster et al. ). For exam-
ple the WinoBias dataset (Zhao et al., a) uses a variant of the Winograd Schema
paradigm to test the extent to which coreference algorithms are biased toward link-
ing gendered pronouns with antecedents consistent with cultural stereotypes. As we
summarized in Chapter , embeddings replicate societal biases in their training test,
such as associating men with historically sterotypical male occupations like doctors,
and women with stereotypical female occupations like secretaries (Caliskan et al.
, Garg et al. ).
A WinoBias sentence contain two mentions corresponding to stereotypically-
male and stereotypically-female occupations and a gendered pronoun that must be
linked to one of them. The sentence cannot be disambiguated by the gender of the
pronoun, but a biased model might be distracted by this cue. Here is an example
sentence:

SUMMARY
(.) The secretary called the physiciani and told himi about a new patient
[pro-stereotypical]
(.) The secretary called the physiciani and told heri about a new patient
[anti-stereotypical]
Zhao et al. (a) consider a coreference system to be biased if it is more accu-
rate at linking pronouns consistent with gender stereotypical occupations (e.g., him
with physician in (.)) than linking pronouns inconsistent with gender-stereotypical
occupations (e.g., her with physician in (.)). They show that coreference sys-
tems of all architectures (rule-based, feature-based machine learned, and end-to-
end-neural) all show signiﬁcant bias, performing on average  F points worse in
the anti-stereotypical cases.
One possible source of this bias is that female entities are signiﬁcantly un-
derrepresented in the OntoNotes dataset, used to train most coreference systems.
Zhao et al. (a) propose a way to overcome this bias: they generate a second
gender-swapped dataset in which all male entities in OntoNotes are replaced with
female ones and vice versa, and retrain coreference systems on the combined orig-
inal and swapped OntoNotes data, also using debiased GloVE embeddings (Boluk-
basi et al., ). The resulting coreference systems no longer exhibit bias on the
WinoBias dataset, without signiﬁcantly impacting OntoNotes coreference accuracy.
In a follow-up paper, Zhao et al. () show that the same biases exist in ELMo
contextualized word vector representations and coref systems that use them. They
showed that retraining ELMo with data augmentation again reduces or removes bias
in coreference systems on WinoBias.
Webster et al. () introduces another dataset, GAP, and the task of Gendered
Pronoun Resolution as a tool for developing improved coreference algorithms for
gendered pronouns. GAP is a gender-balanced labeled corpus of , sentences
with gendered ambiguous pronouns (by contrast, only % of the gendered pro-
nouns in the English OntoNotes training data are feminine). The examples were
created by drawing on naturally occurring sentences from Wikipedia pages to create
hard to resolve cases with two named entities of the same gender and an ambiguous
pronoun that may refer to either person (or neither), like the following:
(.) In May, Fujisawa joined Mari Motohashi’s rink as the team’s skip, moving
back from Karuizawa to Kitami where she had spent her junior days.
Webster et al. () show that modern coreference algorithms perform signif-
icantly worse on resolving feminine pronouns than masculine pronouns in GAP.
Kurita et al. () shows that a system based on BERT contextualized word repre-
sentations shows similar bias.
Summary
This chapter introduced the task of coreference resolution.
This is the task of linking together mentions in text which corefer, i.e. refer
to the same discourse entity in the discourse model, resulting in a set of
coreference chains (also called clusters or entities).
Mentions can be deﬁnite NPs or indeﬁnite NPs, pronouns (including zero
pronouns) or names.

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
The surface form of an entity mention is linked to its information status
(new, old, or inferrable), and how accessible or salient the entity is.
Some NPs are not referring expressions, such as pleonastic it in It is raining.
Many corpora have human-labeled coreference annotations that can be used
for supervised learning, including OntoNotes for English, Chinese, and Ara-
bic, ARRAU for English, and AnCora for Spanish and Catalan.
Mention detection can start with all nouns and named entities and then use
anaphoricity classiﬁers or referentiality classiﬁers to ﬁlter out non-mentions.
Three common architectures for coreference are mention-pair, mention-rank,
and entity-based, each of which can make use of feature-based or neural clas-
siﬁers.
Modern coreference systems tend to be end-to-end, performing mention de-
tection and coreference in a single end-to-end architecture.
Algorithms learn representations for text spans and heads, and learn to com-
pare anaphor spans with candidate antecedent spans.
Entity linking is the task of associating a mention in text with the representa-
tion of some real-world entity in an ontology .
Coreference systems are evaluated by comparing with gold entity labels using
precision/recall metrics like MUC, B, CEAF, BLANC, or LEA.
The Winograd Schema Challenge problems are difﬁcult coreference prob-
lems that seem to require world knowledge or sophisticated reasoning to solve.
Coreference systems exhibit gender bias which can be evaluated using datasets
like Winobias and GAP.
Bibliographical and Historical Notes
Coreference has been part of natural language processing since the s (Woods
et al. , Winograd ). The discourse model and the entity-centric foundation
of coreference was formulated by Karttunen () (at the rd COLING confer-
ence), playing a role also in linguistic semantics (Heim , Kamp ). But
it was Bonnie Webber’s  dissertation and following work (Webber ) that
explored the model’s computational aspects, providing fundamental insights into
how entities are represented in the discourse model and the ways in which they can
license subsequent reference. Many of the examples she provided continue to chal-
lenge theories of reference to this day.
The Hobbs algorithm is a tree-search algorithm that was the ﬁrst in a long
Hobbs
algorithm
series of syntax-based methods for identifying reference robustly in naturally occur-
ring text. The input to the Hobbs algorithm is a pronoun to be resolved, together
with a syntactic (constituency) parse of the sentences up to and including the cur-
rent sentence. The details of the algorithm depend on the grammar used, but can be
understood from a simpliﬁed version due to Kehler et al. () that just searches
through the list of NPs in the current and prior sentences. This simpliﬁed Hobbs
algorithm searches NPs in the following order: “(i) in the current sentence from
right-to-left, starting with the ﬁrst NP to the left of the pronoun, (ii) in the previous
sentence from left-to-right, (iii) in two sentences prior from left-to-right, and (iv) in
The simpler of two algorithms presented originally in Hobbs ().

BIBLIOGRAPHICAL AND HISTORICAL NOTES
the current sentence from left-to-right, starting with the ﬁrst noun group to the right
of the pronoun (for cataphora). The ﬁrst noun group that agrees with the pronoun
with respect to number, gender, and person is chosen as the antecedent” (Kehler
et al., ).
Lappin and Leass () was an inﬂuential entity-based system that used weights
to combine syntactic and other features, extended soon after by Kennedy and Bogu-
raev () whose system avoids the need for full syntactic parses.
Approximately contemporaneously centering (Grosz et al., ) was applied
to pronominal anaphora resolution by Brennan et al. (), and a wide variety of
work followed focused on centering’s use in coreference (Kameyama , Di Eu-
genio , Walker et al. , Di Eugenio , Strube and Hahn , Kehler
a, Tetreault , Iida et al. ). Kehler and Rohde () show how center-
ing can be integrated with coherence-driven theories of pronoun interpretation. See
Chapter  for the use of centering in measuring discourse coherence.
Coreference competitions as part of the US DARPA-sponsored MUC confer-
ences provided early labeled coreference datasets (the  MUC- and  MUC-
corpora), and set the tone for much later work, choosing to focus exclusively
on the simplest cases of identity coreference (ignoring difﬁcult cases like bridging,
metonymy, and part-whole) and drawing the community toward supervised machine
learning and metrics like the MUC metric (Vilain et al., ). The later ACE eval-
uations produced labeled coreference corpora in English, Chinese, and Arabic that
were widely used for model training and evaluation.
This DARPA work inﬂuenced the community toward supervised learning begin-
ning in the mid-s (Connolly et al. , Aone and Bennett , McCarthy and
Lehnert ). Soon et al. () laid out a set of basic features, extended by Ng and
Cardie (b), and a series of machine learning models followed over the next
years. These often focused separately on pronominal anaphora resolution (Kehler
et al. , Bergsma and Lin ), full NP coreference (Cardie and Wagstaff ,
Ng and Cardie b, Ng a) and deﬁnite NP reference (Poesio and Vieira ,
Vieira and Poesio ), as well as separate anaphoricity detection (Bean and Riloff
, Bean and Riloff , Ng and Cardie a, Ng ), or singleton detection
(de Marneffe et al., ).
The move from mention-pair to mention-ranking approaches was pioneered by
Yang et al. () and Iida et al. () who proposed pairwise ranking methods,
then extended by Denis and Baldridge () who proposed to do ranking via a soft-
max over all prior mentions. The idea of doing mention detection, anaphoricity, and
coreference jointly in a single end-to-end model grew out of the early proposal of Ng
(b) to use a dummy antecedent for mention-ranking, allowing ‘non-referential’
to be a choice for coreference classiﬁers, Denis and Baldridge’s  joint system
combining anaphoricity classiﬁer probabilities with coreference probabilities, the
Denis and Baldridge () ranking model, and the Rahman and Ng () pro-
posal to train the two models jointly with a single objective.
Simple rule-based systems for coreference returned to prominence in the s,
partly because of their ability to encode entity-based features in a high-precision way
(Zhou et al. b, Haghighi and Klein , Raghunathan et al. , Lee et al.
, Lee et al. , Hajishirzi et al. ) but in the end they suffered from an
inability to deal with the semantics necessary to correctly handle cases of common
noun coreference.
A return to supervised learning led to a number of advances in mention-ranking
models which were also extended into neural architectures, for example using re-

CHAPTER
COREFERENCE RESOLUTION AND ENTITY LINKING
inforcement learning to directly optimize coreference evaluation models Clark and
Manning (a), doing end-to-end coreference all the way from span extraction
(Lee et al. b, Zhang et al. ). Neural models also were designed to take
advantage of global entity-level information (Clark and Manning b, Wiseman
et al. , Lee et al. ).
Coreference is also related to the task of entity linking discussed in Chapter .
Coreference can help entity linking by giving more possible surface forms to help
link to the right Wikipedia page, and conversely entity linking can help improve
coreference resolution. Consider this example from Hajishirzi et al. ():
(.) [Michael Eisner] and [Donald Tsang] announced the grand opening of
[[Hong Kong] Disneyland] yesterday. [Eisner] thanked [the President]
and welcomed [fans] to [the park].
Integrating entity linking into coreference can help draw encyclopedic knowl-
edge (like the fact that Donald Tsang is a president) to help disambiguate the men-
tion the President. Ponzetto and Strube ()  and Ratinov and Roth ()
showed that such attributes extracted from Wikipedia pages could be used to build
richer models of entity mentions in coreference. More recent research shows how to
do linking and coreference jointly (Hajishirzi et al. , Zheng et al. ) or even
jointly with named entity tagging as well (Durrett and Klein ).
The coreference task as we introduced it involves a simplifying assumption that
the relationship between an anaphor and its antecedent is one of identity: the two
coreferring mentions refer to the identical discourse referent. In real texts, the rela-
tionship can be more complex, where different aspects of a discourse referent can
be neutralized or refocused. For example (.) (Recasens et al., ) shows an
example of metonymy, in which the capital city Washington is used metonymically
metonymy
to refer to the US. (.-.) show other examples (Recasens et al., ):
(.) a strict interpretation of a policy requires The U.S. to notify foreign
dictators of certain coup plots ... Washington rejected the bid ...
(.) I once crossed that border into Ashgh-Abad on Nowruz, the Persian New
Year. In the South, everyone was celebrating New Year; to the North, it
was a regular day.
(.) In France, the president is elected for a term of seven years, while in the
United States he is elected for a term of four years.
For further linguistic discussions of these complications of coreference see Puste-
jovsky (), van Deemter and Kibble (), Poesio et al. (), Fauconnier and
Turner (), Versley (), and Barker ().
Ng () offers a useful compact history of machine learning models in coref-
erence resolution. There are three excellent book-length surveys of anaphora/coref-
erence resolution, covering different time periods: Hirst () (early work until
about ), Mitkov () (-), and Poesio et al. () (-).
Andy Kehler wrote the Discourse chapter for the  ﬁrst edition of this text-
book, which we used as the starting point for the second-edition chapter, and there
are some remnants of Andy’s lovely prose still in this third-edition coreference chap-
ter.
Exercises

Discourse Coherence
CHAPTER
And even in our wildest and most wandering reveries, nay in our very dreams,
we shall ﬁnd, if we reﬂect, that the imagination ran not altogether at adven-
tures, but that there was still a connection upheld among the different ideas,
which succeeded each other. Were the loosest and freest conversation to be
transcribed, there would immediately be transcribed, there would immediately
be observed something which connected it in all its transitions.
David Hume, An enquiry concerning human understanding,
Orson Welles’ movie Citizen Kane was groundbreaking in many ways, perhaps most
notably in its structure. The story of the life of ﬁctional media magnate Charles
Foster Kane, the movie does not proceed in chronological order through Kane’s
life. Instead, the ﬁlm begins with Kane’s death (famously murmuring “Rosebud”)
and is structured around ﬂashbacks to his life inserted among scenes of a reporter
investigating his death. The novel idea that the structure of a movie does not have
to linearly follow the structure of the real timeline made apparent for th century
cinematography the inﬁnite possibilities and impact of different kinds of coherent
narrative structures.
But coherent structure is not just a fact about movies or works of art. Like
movies, language does not normally consist of isolated, unrelated sentences, but
instead of collocated, structured, coherent groups of sentences. We refer to such
a coherent structured group of sentences as a discourse, and we use the word co-
discourse
herence to refer to the relationship between sentences that makes real discourses
coherence
different than just random assemblages of sentences. The chapter you are now read-
ing is an example of a discourse, as is a news article, a conversation, a thread on
social media, a Wikipedia page, and your favorite novel.
What makes a discourse coherent? If you created a text by taking random sen-
tences each from many different sources and pasted them together, would that be a
coherent discourse? Almost certainly not. Real discourses exhibit both local coher-
local
ence and global coherence. Let’s consider three ways in which real discourses are
global
locally coherent;
First, sentences or clauses in real discourses are related to nearby sentences in
systematic ways. Consider this example from Hobbs ():
(.) John took a train from Paris to Istanbul. He likes spinach.
This sequence is incoherent because it is unclear to a reader why the second
sentence follows the ﬁrst; what does liking spinach have to do with train trips? In
fact, a reader might go to some effort to try to ﬁgure out how the discourse could be
coherent; perhaps there is a French spinach shortage? The very fact that hearers try
to identify such connections suggests that human discourse comprehension involves
the need to establish this kind of coherence.
By contrast, in the following coherent example:
(.) Jane took a train from Paris to Istanbul. She had to attend a conference.

CHAPTER
DISCOURSE COHERENCE
the second sentence gives a REASON for Jane’s action in the ﬁrst sentence. Struc-
tured relationships like REASON that hold between text units are called coherence
relations, and coherent discourses are structured by many such coherence relations.
coherence
relations
Coherence relations are introduced in Section ..
A second way a discourse can be locally coherent is by virtue of being “about”
someone or something. In a coherent discourse some entities are salient, and the
discourse focuses on them and doesn’t go back and forth between multiple entities.
This is called entity-based coherence. Consider the following incoherent passage,
in which the salient entity seems to wildly swing from John to Jenny to the piano
store to the living room, back to Jenny, then the piano again:
(.) John wanted to buy a piano for his living room.
Jenny also wanted to buy a piano.
He went to the piano store.
It was nearby.
The living room was on the second ﬂoor.
She didn’t ﬁnd anything she liked.
The piano he bought was hard to get up to that ﬂoor.
Entity-based coherence models measure this kind of coherence by tracking salient
entities across a discourse. For example Centering Theory (Grosz et al., ), the
Centering
Theory
most inﬂuential theory of entity-based coherence, keeps track of which entities in
the discourse model are salient at any point (salient entities are more likely to be
pronominalized or to appear in prominent syntactic positions like subject or object).
In Centering Theory, transitions between sentences that maintain the same salient
entity are considered more coherent than ones that repeatedly shift between entities.
The entity grid model of coherence (Barzilay and Lapata, ) is a commonly
entity grid
used model that realizes some of the intuitions of the Centering Theory framework.
Entity-based coherence is introduced in Section ..
Finally, discourses can be locally coherent by being topically coherent: nearby
topically
coherent
sentences are generally about the same topic and use the same or similar vocab-
ulary to discuss these topics. Because topically coherent discourses draw from a
single semantic ﬁeld or topic, they tend to exhibit the surface property known as
lexical cohesion (Halliday and Hasan, ): the sharing of identical or semanti-
lexical cohesion
cally related words in nearby sentences. For example, the fact that the words house,
chimney, garret, closet, and window— all of which belong to the same semantic
ﬁeld— appear in the two sentences in (.), or that they share the identical word
shingled, is a cue that the two are tied together as a discourse:
Before winter I built a chimney, and shingled the sides of my house...
I have thus a tight shingled and plastered house... with a garret and a
closet, a large window on each side....
In addition to the local coherence between adjacent or nearby sentences, dis-
courses also exhibit global coherence. Many genres of text are associated with
particular conventional discourse structures. Academic articles might have sections
describing the Methodology or Results. Stories might follow conventional plotlines
or motifs. Persuasive essays have a particular claim they are trying to argue for,
and an essay might express this claim together with a structured set of premises that
support the argument and demolish potential counterarguments. We’ll introduce
versions of each of these kinds of global coherence.
Why do we care about the local or global coherence of a discourse? Since co-
herence is a property of a well-written text, coherence detection plays a part in any

COHERENCE RELATIONS
task that requires measuring the quality of a text. For example coherence can help
in pedagogical tasks like essay grading or essay quality measurement that are trying
to grade how well-written a human essay is (Somasundaran et al. , Feng et al.
, Lai and Tetreault ). Coherence can also help for summarization; knowing
the coherence relationship between sentences can help know how to select informa-
tion from them. Finally, detecting incoherent text may even play a role in mental
health tasks like measuring symptoms of schizophrenia or other kinds of disordered
language (Ditman and Kuperberg , Elvev˚ag et al. , Bedi et al. , Iter
et al. ).
Coherence Relations
Recall from the introduction the difference between passages (.) and (.).
(.) Jane took a train from Paris to Istanbul. She likes spinach.
(.) Jane took a train from Paris to Istanbul. She had to attend a conference.
The reason (.) is more coherent is that the reader can form a connection be-
tween the two sentences, in which the second sentence provides a potential REASON
for the ﬁrst sentences. This link is harder to form for (.). These connections
between text spans in a discourse can be speciﬁed as a set of coherence relations.
coherence
relation
The next two sections describe two commonly used models of coherence relations
and associated corpora: Rhetorical Structure Theory (RST), and the Penn Discourse
TreeBank (PDTB).
Rhetorical Structure Theory
The most commonly used model of discourse organization is Rhetorical Structure
Theory (RST) (Mann and Thompson, ). In RST relations are deﬁned between
RST
two spans of text, generally a nucleus and a satellite. The nucleus is the unit that
nucleus
satellite
is more central to the writer’s purpose and that is interpretable independently; the
satellite is less central and generally is only interpretable with respect to the nucleus.
Some symmetric relations, however, hold between two nuclei.
Below are a few examples of RST coherence relations, with deﬁnitions adapted
from the RST Treebank Manual (Carlson and Marcu, ).
Reason: The nucleus is an action carried out by an animate agent and the satellite
is the reason for the nucleus.
(.) [NUC Jane took a train from Paris to Istanbul.] [SAT She had to attend a
conference.]
Elaboration: The satellite gives additional information or detail about the situation
presented in the nucleus.
(.) [NUC Dorothy was from Kansas.] [SAT She lived in the midst of the great
Kansas prairies.]
Evidence: The satellite gives additional information or detail about the situation
presented in the nucleus. The information is presented with the goal of convince the
reader to accept the information presented in the nucleus.
(.) [NUC Kevin must be here.] [SAT His car is parked outside.]

CHAPTER
DISCOURSE COHERENCE
Attribution: The satellite gives the source of attribution for an instance of reported
speech in the nucleus.
(.) [SAT Analysts estimated] [NUC that sales at U.S. stores declined in the
quarter, too]
List: In this multinuclear relation, a series of nuclei is given, without contrast or
explicit comparison:
(.) [NUC Billy Bones was the mate; ] [NUC Long John, he was quartermaster]
RST relations are traditionally represented graphically; the asymmetric Nucleus-
Satellite relation is represented with an arrow from the satellite to the nucleus:
evidence
Kevin must be here.
His car is parked outside
We can also talk about the coherence of a larger text by considering the hierar-
chical structure between coherence relations. Figure . shows the rhetorical struc-
ture of a paragraph from Marcu (a) for the text in (.) from the Scientiﬁc
American magazine.
(.) With its distant orbit– percent farther from the sun than Earth–and slim
atmospheric blanket, Mars experiences frigid weather conditions. Surface
temperatures typically average about - degrees Celsius (- degrees
Fahrenheit) at the equator and can dip to - degrees C near the poles. Only
the midday sun at tropical latitudes is warm enough to thaw ice on occasion,
but any liquid water formed in this way would evaporate almost instantly
because of the low atmospheric pressure.
evidence
Title
Mars
background
elaboration-additional
Contrast
List
Mars
experiences
frigid weather
conditions.
explanation-argumentative
purpose
and can dip
to -
degrees C
near the
poles.
WIth its
distant orbit
<p> --
percent
farther from
the sun than
Earth -- </p>
and slim
atmospheric
blanket,
to thaw ice
on occasion,
Surface
temperatures
typically average
about -
degrees Celsius
<p> (- degrees
Fahrenheit)</p>
at the equator
Only the
midday sun at
tropical latitudes
is warm enough
but any liquid water
formed in this way
would evaporate
almost instantly
because of
the low
atmospheric
pressure.
Figure .
A discourse tree for the Scientiﬁc American text in (.), from Marcu (a). Note that
asymmetric relations are represented with a curved arrow from the satellite to the nucleus.
The leaves in the Fig. . tree correspond to text spans of a sentence, clause or
phrase that are called elementary discourse units or EDUs in RST; these units can
EDU
also be referred to as discourse segments. Because these units may correspond to
arbitrary spans of text, determining the boundaries of an EDU is an important task
for extracting coherence relations. Roughly speaking, one can think of discourse

COHERENCE RELATIONS
segments as being analogous to constituents in sentence syntax, and indeed as we’ll
see in Section . we generally draw on parsing algorithms to infer discourse struc-
ture.
There are corpora for many discourse coherence models; the RST Discourse
TreeBank (Carlson et al., ) is the largest available discourse corpus. It con-
sists of  English language documents selected from the Penn Treebank, with full
RST parses for each one, using a large set of  distinct relations, grouped into
classes. RST treebanks exist also for Spanish, German, Basque, Dutch and Brazilian
Portuguese (Braud et al., ).
Now that we’ve seen examples of coherence, we can see more clearly how a
coherence relation can play a role in summarization or information extraction. For
example, the nuclei of a text presumably express more important information than
the satellites, which might be dropped in a summary.
Penn Discourse TreeBank (PDTB)
The Penn Discourse TreeBank (PDTB) is a second commonly used dataset that
PDTB
embodies another model of coherence relations (Miltsakaki et al. , Prasad et al.
, Prasad et al. ). PDTB labeling is lexically grounded. Instead of asking
annotators to directly tag the coherence relation between text spans, they were given
a list of discourse connectives, words that signal discourse relations, like because,
discourse
connectives
although, when, since, or as a result. In a part of a text where these words marked a
coherence relation between two text spans, the connective and the spans were then
annotated, as in Fig. ., where the phrase as a result signals a causal relationship
between what PDTB calls Arg (the ﬁrst two sentences, here in italics) and Arg
(the third sentence, here in bold).
(.) Jewelry displays in department stores were often cluttered and uninspired.
And the merchandise was, well, fake. As a result, marketers of faux gems
steadily lost space in department stores to more fashionable
rivals—cosmetics makers.
(.) In July, the Environmental Protection Agency imposed a gradual ban on
virtually all uses of asbestos. (implicit=as a result) By , almost all
remaining uses of cancer-causing asbestos will be outlawed.
Not all coherence relations are marked by an explicit discourse connective, and
so the PDTB also annotates pairs of neighboring sentences with no explicit signal,
like (.). The annotator ﬁrst chooses the word or phrase that could have been its
signal (in this case as a result), and then labels its sense. For example for the am-
biguous discourse connective since annotators marked whether it is using a CAUSAL
or a TEMPORAL sense.
The ﬁnal dataset contains roughly , explicit relations and , implicit
relations. Fig. . shows examples from each of the  major semantic classes, while
Fig. . shows the full tagset.
Unlike the RST Discourse Treebank, which integrates these pairwise coherence
relations into a global tree structure spanning an entire discourse, the PDTB does not
annotate anything above the span-pair level, making no commitment with respect to
higher-level discourse structure.
There are also treebanks using similar methods for other languages; (.)
shows an example from the Chinese Discourse TreeBank (Zhou and Xue, ).
Because Chinese has a smaller percentage of explicit discourse connectives than
English (only % of all discourse relations are marked with explicit connectives,

CHAPTER
DISCOURSE COHERENCE
Class
Type
Example
TEMPORAL
SYNCHRONOUS The parishioners of St. Michael and All Angels stop to chat at
the church door, as members here always have. (Implicit while)
In the tower, ﬁve men and women pull rhythmically on ropes
attached to the same ﬁve bells that ﬁrst sounded here in .
CONTINGENCY
REASON
Also unlike Mr. Ruder, Mr. Breeden appears to be in a position
to get somewhere with his agenda. (implicit=because) As a for-
mer White House aide who worked closely with Congress,
he is savvy in the ways of Washington.
COMPARISON
CONTRAST
The U.S. wants the removal of what it perceives as barriers to
investment; Japan denies there are real barriers.
EXPANSION
CONJUNCTION
Not only do the actors stand outside their characters and make
it clear they are at odds with them, but they often literally stand
on their heads.
Figure .
The four high-level semantic distinctions in the PDTB sense hierarchy
Temporal
Comparison
Asynchronous
Contrast (Juxtaposition, Opposition)
Synchronous (Precedence, Succession)
Pragmatic Contrast (Juxtaposition, Opposition)
Concession (Expectation, Contra-expectation)
Pragmatic Concession
Contingency
Expansion
Cause (Reason, Result)
Exception
Pragmatic Cause (Justiﬁcation)
Instantiation
Restatement (Speciﬁcation, Equivalence, Generalization)
Condition (Hypothetical, General, Unreal
Present/Past, Factual Present/Past)
Pragmatic Condition (Relevance, Implicit As-
sertion)
Alternative (Conjunction, Disjunction, Chosen Alterna-
tive)
List
Figure .
The PDTB sense hierarchy. There are four top-level c¯lasses,  types, and  subtypes (not all
types have subtypes).  of the  types are commonly used for implicit argument classiﬁcation; the  types in
italics are too rare in implicit labeling to be used.
compared to % in English), annotators labeled this corpus by directly mapping
pairs of sentences to  sense tags, without starting with a lexical discourse connec-
tor.
(.) [Conn 为] [Arg 推动图们江地区开发] ，[Arg 韩国捐款一百万美元
设立了图们江发展基金]
“[In order to] [Arg promote the development of the Tumen River region],
[Arg South Korea donated one million dollars to establish the Tumen
River Development Fund].”
These discourse treebanks have been used for shared tasks on multilingual dis-
course parsing (Xue et al., ).
Discourse Structure Parsing
Given a sequence of sentences, how can we automatically determine the coherence
relations between them? This task is often called discourse parsing (even though
discourse
parsing
for PDTB we are only assigning labels to leaf spans and not building a full parse

DISCOURSE STRUCTURE PARSING
tree as we do for RST).
EDU segmentation for RST parsing
RST parsing is generally done in two stages. The ﬁrst stage, EDU segmentation,
extracts the start and end of each EDU. The output of this stage would be a labeling
like the following:
(.) [Mr. Rambo says]e [that a .-acre property]e [overlooking the San
Fernando Valley]e [is priced at $ million]e [because the late actor Erroll
Flynn once lived there.]e
Since EDUs roughly correspond to clauses, early models of EDU segmentation
ﬁrst ran a syntactic parser, and then post-processed the output. Modern systems
generally use neural sequence models supervised by the gold EDU segmentation in
datasets like the RST Discourse Treebank. Fig. . shows an example architecture
simpliﬁed from the algorithm of Lukasik et al. () that predicts for each token
whether or not it is a break. Here the input sentence is passed through an encoder
and then passed through a linear layer and a softmax to produce a sequence of s
and , where  indicates the start of an EDU.
EDU break
softmax
linear layer
ENCODER
Mr.
Rambo
says
that
Figure .
Predicting EDU segment beginnings from encoded text.
RST parsing
Tools for building RST coherence structure for a discourse have long been based on
syntactic parsing algorithms like shift-reduce parsing (Marcu, ). Many modern
RST parsers since Ji and Eisenstein () draw on the neural syntactic parsers we
saw in Chapter , using representation learning to build representations for each
span, and training a parser to choose the correct shift and reduce actions based on
the gold parses in the training set.
We’ll describe the shift-reduce parser of Yu et al. (). The parser state con-
sists of a stack and a queue, and produces this structure by taking a series of actions
on the states. Actions include:
shift: pushes the ﬁrst EDU in the queue onto the stack creating a single-node
subtree.
reduce(l,d): merges the top two subtrees on the stack, where l is the coherence
relation label, and d is the nuclearity direction, d ∈ {NN,NS,SN}.
As well as the pop root operation, to remove the ﬁnal tree from the stack.
Fig. . shows the actions the parser takes to build the structure in Fig. ..

CHAPTER
DISCOURSE COHERENCE
attr
elab
elab
e: American Telephone & Telegraph Co. said it
e: will lay off  to  technicians here , effective Nov. .
e: The workers install , maintain and repair its private branch exchanges,
e: which are large intracompany telephone networks.
Figure .
Example RST discourse tree, showing four EDUs. Figure from Yu et al. ().
Figure : An example of RST discourse tree, where {e, e, e, e} are EDUs, attr and elab are
discourse relation labels, and arrows indicate the nuclearities of discourse relations.
Step
Stack
Queue
Action
Relation
e, e, e, e
SH
e, e, e
SH
RST discourse parsing. Other studies still adopt discrete syntax features proposed by statistical models,
feeding them into neural network models (Braud et al., ; Braud et al., ).
e, e
e, e
RD(attr,SN)
The above approaches model syntax trees in an explicit way, requiring discrete syntax parsing outputs
e:
e, e
SH
ee
e: , e
SH
ee
e: , e, e
RD(elab,NS)
ee
e: , e:
RD(elab,SN)
ee, d
ee
e:
PR
ee, d
ee, \
e:e:
Table : An example of the transition-based system for RST discourse parsing.
Figure .
Parsing the example of Fig. . using a shift-reduce parser. Figure from Yu
et al. ().
as inputs for RST parsing. These approaches may suffer from the error propagation problem. Syntax trees
produced by a supervised syntax parsing model could have errors, which may propagate into discourse
parsing models. The problem could be extremely serious when inputs of discourse parsing have different
distributions with the training data of the supervised syntax parser. Recently, Zhang et al. () suggest
an alternative method, which extracts syntax features from a Bi-Afﬁne dependency parser (Dozat and
Manning, ), and the method gives competitive performances on relation extraction. It actually
represents syntax trees implicitly, thus it can reduce the error propagation problem.
In this work, we investigate the implicit syntax feature extraction approach for RST parsing. In ad-
The initial state is an empty state, and the ﬁnal state represents a full result. There are three kinds of
actions in our transition system:
Shift (SH), which removes the ﬁrst EDU in the queue onto the stack, forming a single-node subtree.
The Yu et al. () uses an encoder-decoder architecture, where the encoder
represents the input span of words and EDUs using a hierarchical biLSTM. The
ﬁrst biLSTM layer represents the words inside an EDU, and the second represents
the EDU sequence. Given an input sentence w,w,...,wm, the words can be repre-
sented as usual (by static embeddings, combinations with character embeddings or
tags, or contextual embeddings) resulting in an input word representation sequence
xw
,xw
,...,xw
m. The result of the word-level biLSTM is then a sequence of hw values:
Reduce (RD) (l,d), which merges the top two subtrees on the stack, where l is a discourse relation
label, and d  {NN, NS, SN} indicates the relation nuclearity (nuclear (N) or satellite (S)).
hw
,hw
,...,hw
m = biLSTM(xw
,xw
,...,xw
m)
Pop Root (PR), which pops out the top tree on the stack, marking the decoding being completed,
when the stack holds only one subtree and the queue is empty.
An EDU of span ws,ws+,...,wt then has biLSTM output representation hw
s ,hw
s+,...,hw
t ,
and is represented by average pooling:
dition, we propose a transition-based neural model for this task, which is able to incorporate various
features ﬂexibly. We exploit hierarchical bi-directional LSTMs (Bi-LSTMs) to encode texts, and further
enhance the transition-based model with dynamic oracle. Based on the proposed model, we study the
effectiveness of our proposed implicit syntax features. We conduct experiments on a standard RST dis-
course TreeBank (Carlson et al., ). First, we evaluate the performance of our proposed transition-
based baseline, ﬁnding that the model is able to achieve strong performances after applying dynamic
oracle. Then we evaluate the effectiveness of implicit syntax features extracted from a Bi-Afﬁne depen-
dency parser. Results show that the implicit syntax features are effective, giving better performances than
explicit Tree-LSTM (Li et al., b). Our codes will be released for public under the Apache License
. at https://github.com/yunannlp/NNDisParser.
In summary, we mainly make the following two contributions in this work: () we propose a transition-
xe =
Given the RST tree as shown in Figure , it can be generated by the following action sequence: {SH,
k=s
hw
t −s+
tX
SH, RD(attr,SN), SH, SH, RD(elab,NS), RD(elab,SN), PR}. Table  shows the decoding
process in detail. By this way, we naturally convert RST discourse parsing into predicting a sequence of
transition actions, where each line includes a state and next step action referring to the tree.
The second layer uses this input to compute a ﬁnal representation of the sequence of
EDU representations he:
based neural RST discourse parsing model with dynamic oracle, () we compare three different syntactic
integration approaches proposed by us. The rest of the paper is organized as follows. Section  describes
our proposed models including the transition-based neural model, the dynamic oracle strategy and the
implicit syntax feature extraction approach. Section  presents the experiments to evaluate our models.
Section  shows the related work. Finally, section  draws conclusions.
he
,he
,...,he
n = biLSTM(xe
,xe
,...,xe
n)
Encoder-Decoder
Transition-based Discourse Parsing
The decoder is then a feedforward network W that outputs an action o based on a
concatenation of the top three subtrees on the stack (so,s,s) plus the ﬁrst EDU in
the queue (q):
o = W(ht
s,ht
s,ht
s,he
q)
, he
, ..., he
Previous transition-based RST discourse parsing studies exploit statistical models, using manually-
designed discrete features (Sagae, ; Heilman and Sagae, ; Wang et al., ). In this work, we
propose a transition-based neural model for RST discourse parsing, which follows an encoder-decoder
framework. Given an input sequence of EDUs {e, e, ..., en}, the encoder computes the input represen-
tations {he
n}, and the decoder predicts next step actions conditioned on the encoder outputs.
Encoder
where the representation of the EDU on the queue he
q comes directly from the
encoder, and the three hidden vectors representing partial trees are computed by
average pooling over the encoder output for the EDUs in those trees:
We follow Ji and Eisenstein (), exploiting a transition-based framework for RST discourse parsing.
The framework is conceptually simple and ﬂexible to support arbitrary features, which has been widely
used in a number of NLP tasks (Zhu et al., ; Dyer et al., ; Zhang et al., ). In addition, a
transition-based model formalizes a certain task into predicting a sequence of actions, which is essential
similar to sequence-to-sequence models proposed recently (Bahdanau et al., ). In the following,
we ﬁrst describe the transition system for RST discourse parsing, and then introduce our neural network
model by its encoder and decoder parts, respectively. Thirdly, we present our proposed dynamic oracle
strategy aiming to enhance the transition-based model. Then we introduce the integration method of
implicit syntax features. Finally we describe the training method of our neural network models.
hts =
k=i
he
j −i+
The Transition-based System
, xw
, ..., xw
We follow Li et al. (), using hierarchical Bi-LSTMs to encode the source EDU inputs, where the
ﬁrst-layer is used to represent sequencial words inside of EDUs, and the second layer is used to represent
sequencial EDUs. Given an input sentence {w, w, ..., wm}, ﬁrst we represent each word by its form
(e.g., wi) and POS tag (e.g. ti), concatenating their neural embeddings. By this way, the input vectors
of the ﬁrst-layer Bi-LSTM are {xw
m}, where xw
i = emb(wi) ⊕ emb(ti), and then we apply
Bi-LSTM directly, obtaining:
The transition-based framework converts a structural learning problem into a sequence of action predic-
tions, whose key point is a transition system. A transition system consists of two parts: states and actions.
The states are used to store partially-parsed results and the actions are used to control state transitions.
{hw hw
hw }
Bi LSTM({xw xw
xw })

DISCOURSE STRUCTURE PARSING
Training ﬁrst maps each RST gold parse tree into a sequence of oracle actions, and
then uses the standard cross-entropy loss (with l regularization) to train the system
to take such actions. Give a state S and oracle action a, we ﬁrst compute the decoder
output using Eq. ., apply a softmax to get probabilities:
pa =
exp(oa)
a′∈A exp(oa′)
and then computing the cross-entropy loss:
LCE() = −log(pa)+ λ
||Θ||
RST discourse parsers are evaluated on the test section of the RST Discourse Tree-
bank, either with gold EDUs or end-to-end, using the RST-Pareval metrics (Marcu,
b). It is standard to ﬁrst transform the gold RST trees into right-branching bi-
nary trees, and to report four metrics: trees with no labels (S for Span), labeled
with nuclei (N), with relations (R), or both (F for Full), for each metric computing
micro-averaged F over all spans from all documents (Marcu b, Morey et al.
PDTB discourse parsing
PDTB discourse parsing, the task of detecting PDTB coherence relations between
spans, is sometimes called shallow discourse parsing because the task just involves
shallow
discourse
parsing
ﬂat relationships between text spans, rather than the full trees of RST parsing.
The set of four subtasks for PDTB discourse parsing was laid out by Lin et al.
() in the ﬁrst complete system, with separate tasks for explicit (tasks -) and
implicit (task ) connectives:
. Find the discourse connectives (disambiguating them from non-discourse uses)
. Find the two spans for each connective
. Label the relationship between these spans
. Assign a relation between every adjacent pair of sentences
Many systems have been proposed for Task : taking a pair of adjacent sentences
as input and assign a coherence relation sense label as output. The setup often fol-
lows Lin et al. () in assuming gold sentence span boundaries and assigning each
adjacent span one of the  second-level PDTB tags or none (removing the  very
rare tags of the  shown in italics in Fig. .).
A simple but very strong algorithm for Task  is to represent each of the two
spans by BERT embeddings and take the last layer hidden state corresponding to
the position of the [CLS] token, pass this through a single layer tanh feedforward
network and then a softmax for sense classiﬁcation (Nie et al., ).
Each of the other tasks also have been addressed. Task  is to disambiguat-
ing discourse connectives from their non-discourse use. For example as Pitler and
Nenkova () point out, the word and is a discourse connective linking the two
clauses by an elaboration/expansion relation in (.) while it’s a non-discourse
NP conjunction in (.):
(.) Selling picked up as previous buyers bailed out of their positions and
aggressive short sellers—anticipating further declines—moved in.
(.) My favorite colors are blue and green.

CHAPTER
DISCOURSE COHERENCE
Similarly, once is a discourse connective indicating a temporal relation in (.),
but simply a non-discourse adverb meaning ‘formerly’ and modifying used in (.):
(.) The asbestos ﬁber, crocidolite, is unusually resilient once it enters the
lungs, with even brief exposures to it causing symptoms that show up
decades later, researchers said.
(.) A form of asbestos once used to make Kent cigarette ﬁlters has caused a
high percentage of cancer deaths among a group of workers exposed to it
more than  years ago, researchers reported.
Determining whether a word is a discourse connective is thus a special case
of word sense disambiguation. Early work on disambiguation showed that the
PDTB high-level sense classes could be disambiguated with high (%) accuracy
used syntactic features from gold parse trees (Pitler and Nenkova, ). Recent
work performs the task end-to-end from word inputs using a biLSTM-CRF with
BIO outputs (B-CONN, I-CONN, O) (Yu et al., ).
For task , PDTB spans can be identiﬁed with the same sequence models used to
ﬁnd RST EDUs: a biLSTM sequence model with pretrained contextual embedding
(BERT) inputs (Muller et al., ). Simple heuristics also do pretty well as a base-
line at ﬁnding spans, since % of relations are either completely within a single
sentence or span two adjacent sentences, with one argument in each sentence (Biran
and McKeown, ).
Centering and Entity-Based Coherence
A second way a discourse can be coherent is by virtue of being “about” some entity.
This idea that at each point in the discourse some entity is salient, and a discourse
is coherent by continuing to discuss the same entity, appears early in functional lin-
guistics and the psychology of discourse (Chafe , Kintsch and Van Dijk ),
and soon made its way to computational models. In this section we introduce two
models of this kind of entity-based coherence: Centering Theory (Grosz et al.,
entity-based
), and the entity grid model of Barzilay and Lapata ().
Centering
Centering Theory (Grosz et al., ) is a theory of both discourse salience and
Centering
Theory
discourse coherence. As a model of discourse salience, Centering proposes that at
any given point in the discourse one of the entities in the discourse model is salient:
it is being “centered” on. As a model of discourse coherence, Centering proposes
that discourses in which adjacent sentences CONTINUE to maintain the same salient
entity are more coherent than those which SHIFT back and forth between multiple
entities (we will see that CONTINUE and SHIFT are technical terms in the theory).
The following two texts from Grosz et al. () which have exactly the same
propositional content but different saliences, can help in understanding the main
Centering intuition.
a. John went to his favorite music store to buy a piano.
b. He had frequented the store for many years.
c. He was excited that he could ﬁnally buy a piano.
d. He arrived just as the store was closing for the day.

CENTERING AND ENTITY-BASED COHERENCE
a. John went to his favorite music store to buy a piano.
b. It was a store John had frequented for many years.
c. He was excited that he could ﬁnally buy a piano.
d. It was closing just as John arrived.
While these two texts differ only in how the two entities (John and the store) are
realized in the sentences, the discourse in (.) is intuitively more coherent than
the one in (.). As Grosz et al. () point out, this is because the discourse
in (.) is clearly about one individual, John, describing his actions and feelings.
The discourse in (.), by contrast, focuses ﬁrst on John, then the store, then back
to John, then to the store again. It lacks the “aboutness” of the ﬁrst discourse.
Centering Theory realizes this intuition by maintaining two representations for
each utterance Un. The backward-looking center of Un, denoted as Cb(Un), rep-
backward-
looking
center
resents the current salient entity, the one being focused on in the discourse after Un
is interpreted. The forward-looking centers of Un, denoted as Cf (Un), are a set
forward-looking
center
of potential future salient entities, the discourse entities evoked by Un any of which
could serve as Cb (the salient entity) of the following utterance, i.e. Cb(Un+).
The set of forward-looking centers Cf (Un) are ranked according to factors like
discourse salience and grammatical role (for example subjects are higher ranked
than objects, which are higher ranked than all other grammatical roles). We call the
highest-ranked forward-looking center Cp (for “preferred center”). Cp is a kind of
prediction about what entity will be talked about next. Sometimes the next utterance
indeed talks about this entity, but sometimes another entity becomes salient instead.
We’ll use here the algorithm for centering presented in Brennan et al. (),
which deﬁnes four intersentential relationships between a pair of utterances Un and
Un+ that depend on the relationship between Cb(Un+), Cb(Un), and Cp(Un+);
these are shown in Fig. ..
Cb(Un+) = Cb(Un)
Cb(Un+) ̸= Cb(Un)
or undeﬁned Cb(Un)
Cb(Un+) = Cp(Un+)
Continue
Smooth-Shift
Cb(Un+) ̸= Cp(Un+)
Retain
Rough-Shift
Figure .
Centering Transitions for Rule  from Brennan et al. ().
The following rules are used by the algorithm:
Rule : If any element of Cf (Un) is realized by a pronoun in utterance
Un+, then Cb(Un+) must be realized as a pronoun also.
Rule : Transition states are ordered. Continue is preferred to Retain is
preferred to Smooth-Shift is preferred to Rough-Shift.
Rule  captures the intuition that pronominalization (including zero-anaphora)
is a common way to mark discourse salience. If there are multiple pronouns in an
utterance realizing entities from the previous utterance, one of these pronouns must
realize the backward center Cb; if there is only one pronoun, it must be Cb.
Rule  captures the intuition that discourses that continue to center the same en-
tity are more coherent than ones that repeatedly shift to other centers. The transition
table is based on two factors: whether the backward-looking center Cb is the same
from Un to Un+ and whether this discourse entity is the one that is preferred (Cp)
in the new utterance Un+. If both of these hold, a CONTINUE relation, the speaker
has been talking about the same entity and is going to continue talking about that

CHAPTER
DISCOURSE COHERENCE
entity. In a RETAIN relation, the speaker intends to SHIFT to a new entity in a future
utterance and meanwhile places the current entity in a lower rank Cf . In a SHIFT
relation, the speaker is shifting to a new salient entity.
Let’s walk though the start of (.) again, repeated as (.), showing the
representations after each utterance is processed.
John went to his favorite music store to buy a piano. (U)
He was excited that he could ﬁnally buy a piano. (U)
He arrived just as the store was closing for the day. (U)
It was closing just as John arrived (U)
Using the grammatical role hierarchy to order the Cf , for sentence U we get:
Cf (U): {John, music store, piano}
Cp(U): John
Cb(U): undeﬁned
and then for sentence U:
Cf (U): {John, piano}
Cp(U): John
Cb(U): John
Result: Continue
(Cp(U)=Cb(U); Cb(U) undeﬁned)
The transition from U to U is thus a CONTINUE. Completing this example is left
as exercise () for the reader
Entity Grid model
Centering embodies a particular theory of how entity mentioning leads to coher-
ence: that salient entities appear in subject position or are pronominalized, and that
discourses are salient by means of continuing to mention the same entity in such
ways.
The entity grid model of Barzilay and Lapata () is an alternative way to
entity grid
capture entity-based coherence: instead of having a top-down theory, the entity-grid
model using machine learning to induce the patterns of entity mentioning that make
a discourse more coherent.
The model is based around an entity grid, a two-dimensional array that repre-
sents the distribution of entity mentions across sentences. The rows represent sen-
tences, and the columns represent discourse entities (most versions of the entity grid
model focus just on nominal mentions). Each cell represents the possible appearance
of an entity in a sentence, and the values represent whether the entity appears and its
grammatical role. Grammatical roles are subject (S), object (O), neither (X), or ab-
sent (–); in the implementation of Barzilay and Lapata (), subjects of passives
are represented with O, leading to a representation with some of the characteristics
of thematic roles.
Fig. . from Barzilay and Lapata () shows a grid for the text shown in
Fig. .. There is one row for each of the six sentences. The second column, for
the entity ‘trial’, is O – – – X, showing that the trial appears in the ﬁrst sentence as
direct object, in the last sentence as an oblique, and does not appear in the middle
sentences. The third column, for the entity Microsoft, shows that it appears as sub-
ject in sentence  (it also appears as the object of the preposition against, but entities
that appear multiple times are recorded with their highest-ranked grammatical func-
tion). Computing the entity grids requires extracting entities and doing coreference

present in sentences  and  (as O and X, respectively) but is absent from the rest of the
sentences. Also note that the grid in Table  takes coreference resolution into account.
Even though the same entity appears in different linguistic forms, for example, Microsoft
Corp., Microsoft, and the company, it is mapped to a single entry in the grid (see the
column introduced by Microsoft in Table ).
Computational Linguistics
Volume , Number
CENTERING AND ENTITY-BASED COHERENCE
a feature space with transitions of length two is illustrated in Table . The second row
(introduced by d) is the feature vector representation of the grid in Table .
Table
A fragment of the entity grid. Noun phrases are represented by their head nouns. Grid cells
correspond to grammatical roles: subjects (S), objects (O), or neither (X).
. Grid Construction: Linguistic Dimensions
Department
Trial
Microsoft
Evidence
Competitors
Markets
Products
Brands
Case
Netscape
Software
Tactics
Government
Suit
Earnings
O S X
O – – – – – – – – – –
– – O – –
X S O – – – – – – –
– –
S O – – – –
O O – – – –
– –
S – – – – – – – – S – – –
– – – – – – – – – – – – S O –
One of the central research issues in developing entity-based models of coherence is
determining what sources of linguistic knowledge are essential for accurate prediction,
and how to encode them succinctly in a discourse representation. Previous approaches
tend to agree on the features of entity distribution related to local coherence—the
disagreement lies in the way these features are modeled.
Barzilay and Lapata
Modeling Local Coherence
X S – – – – – – – – – – –
Our study of alternative encodings is not a mere duplication of previous ef-
Figure .
Part of the entity grid for the text in Fig. .. Entities are listed by their head
noun; each cell represents whether an entity appears as subject (S), object (O), neither (X), or
is absent (–). Figure from Barzilay and Lapata ().
Table
Summary augmented with syntactic annotations for grid computation.
[The Justice Department]S is conducting an [anti-trust trial]O against [Microsoft Corp.]X
with [evidence]X that [the company]S is increasingly attempting to crush [competitors]O.
[Microsoft]O is accused of trying to forcefully buy into [markets]X where [its own
products]S are not competitive enough to unseat [established brands]O.
[The case]S revolves around [evidence]O of [Microsoft]S aggressively pressuring
[Netscape]O into merging [browser software]O.
[Microsoft]S claims [its tactics]S are commonplace and good economically.
[The government]S may ﬁle [a civil suit]O ruling that [conspiracy]S to curb [competition]O
through [collusion]X is [a violation of the Sherman Act]O.
forts (Poesio et al. ) that focus on linguistic aspects of parameterization. Because we
are interested in an automatically constructed model, we have to take into account com-
putational and learning issues when considering alternative representations. Therefore,
our exploration of the parameter space is guided by three considerations: the linguistic
importance of a parameter, the accuracy of its automatic computation, and the size of the
resulting feature space. From the linguistic side, we focus on properties of entity distri-
bution that are tightly linked to local coherence, and at the same time allow for multiple
interpretations during the encoding process. Computational considerations prevent us
from considering discourse representations that cannot be computed reliably by exist-
ing tools. For instance, we could not experiment with the granularity of an utterance—
sentence versus clause—because available clause separators introduce substantial noise
into a grid construction. Finally, we exclude representations that will explode the size of
the feature space, thereby increasing the amount of data required for training the model.
[Microsoft]S continues to show [increased earnings]O despite [the trial]X.
Figure .
A discourse with the entities marked and annotated with grammatical func-
tions. Figure from Barzilay and Lapata ().
When a noun is attested more than once with a different grammatical role in the
Entity Extraction. The accurate computation of entity classes is key to computing mean-
ingful entity grids. In previous implementations of entity-based models, classes of coref-
erent nouns have been extracted manually (Miltsakaki and Kukich ; Karamanis
et al. ; Poesio et al. ), but this is not an option for our model. An obvious
solution for identifying entity classes is to employ an automatic coreference resolution
tool that determines which noun phrases refer to the same entity in a document.
same sentence, we default to the role with the highest grammatical ranking: subjects are
ranked higher than objects, which in turn are ranked higher than the rest. For example,
the entity Microsoft is mentioned twice in Sentence  with the grammatical roles x (for
Microsoft Corp.) and s (for the company), but is represented only by s in the grid (see
Tables  and ).
Current approaches recast coreference resolution as a classiﬁcation task. A pair
. Entity Grids as Feature Vectors
of NPs is classiﬁed as coreferring or not based on constraints that are learned from
an annotated corpus. A separate clustering mechanism then coordinates the possibly
contradictory pairwise classiﬁcations and constructs a partition on the set of NPs. In
our experiments, we employ Ng and Cardie’s () coreference resolution system.
The system decides whether two NPs are coreferent by exploiting a wealth of lexical,
grammatical, semantic, and positional features. It is trained on the MUC (–) data sets
and yields state-of-the-art performance (. F-measure on MUC- and . on MUC-).
resolution to cluster them into discourse entities (Chapter ) as well as parsing the
sentences to get grammatical roles.
In the resulting grid, columns that are dense (like the column for Microsoft) in-
dicate entities that are mentioned often in the texts; sparse columns (like the column
for earnings) indicate entities that are mentioned rarely.
In the entity grid model, coherence is measured by patterns of local entity tran-
sition. For example, Department is a subject in sentence , and then not men-
tioned in sentence ; this is the transition [S –]. The transitions are thus sequences
{S,O X, –}n which can be extracted as continuous cells from each column. Each
transition has a probability; the probability of [S –] in the grid from Fig. . is .
(it occurs  times out of the  total transitions of length two). Fig. . shows the
distribution over transitions of length  for the text of Fig. . (shown as the ﬁrst
row d), and  other documents.
A fundamental assumption underlying our approach is that the distribution of entities
in coherent texts exhibits certain regularities reﬂected in grid topology. Some of these
regularities are formalized in Centering Theory as constraints on transitions of the
local focus in adjacent sentences. Grids of coherent texts are likely to have some dense
columns (i.e., columns with just a few gaps, such as Microsoft in Table ) and many
sparse columns which will consist mostly of gaps (see markets and earnings in Table ).
One would further expect that entities corresponding to dense columns are more often
subjects or objects. These characteristics will be less pronounced in low-coherence texts.
Table
Example of a feature-vector document representation using all transitions of length two given
syntactic categories S, O, X, and –.
Inspired by Centering Theory, our analysis revolves around patterns of local entity
S S
S O
S X
S –
O S
O O
O X
O –
X S
X O
X X
X –
– S
– O
– X
– –
transitions. A local entity transition is a sequence {S, O, X, –}n that represents entity
occurrences and their syntactic roles in n adjacent sentences. Local transitions can be
easily obtained from a grid as continuous subsequences of each column. Each transition
will have a certain probability in a given grid. For instance, the probability of the
transition [S –] in the grid from Table  is . (computed as a ratio of its frequency
[i.e., six] divided by the total number of transitions of length two [i.e., ]). Each text
can thus be viewed as a distribution deﬁned over transition types.
Figure .
A feature vector for representing documents using all transitions of length .
Document d is the text in Fig. .. Figure from Barzilay and Lapata ().
We can now go one step further and represent each text by a ﬁxed set of transition
sequences using a standard feature vector notation. Each grid rendering j of a document
di corresponds to a feature vector Φ(xij) = (p(xij), p(xij), . . . , pm(xij)), where m is the
number of all predeﬁned entity transitions, and pt(xij) the probability of transition t
in grid xij. This feature vector representation is usefully amenable to machine learning
algorithms (see our experiments in Sections –). Furthermore, it allows the consid-
eration of large numbers of transitions which could potentially uncover novel entity
distribution patterns relevant for coherence assessment or other coherence-related tasks.
The transitions and their probabilities can then be used as features for a machine
learning model. This model can be a text classiﬁer trained to produce human-labeled
coherence scores (for example from humans labeling each text as coherent or inco-
herent). But such data is expensive to gather. Barzilay and Lapata () introduced
a simplifying innovation: coherence models can be trained by self-supervision:
trained to distinguish the natural original order of sentences in a discourse from
Note that considerable latitude is available when specifying the transition types to
be included in a feature vector. These can be all transitions of a given length (e.g., two
or three) or the most frequent transitions within a document collection. An example of
CHAPTER
DISCOURSE COHERENCE
a modiﬁed order (such as a randomized order). We turn to these evaluations in the
next section.
Evaluating Neural and Entity-based coherence
Entity-based coherence models, as well as the neural models we introduce in the
next section, are generally evaluated in one of two ways.
First, we can have humans rate the coherence of a document and train a classiﬁer
to predict these human ratings, which can be categorial (high/low, or high/mid/low)
or continuous. This is the best evaluation to use if we have some end task in mind,
like essay grading, where human raters are the correct deﬁnition of the ﬁnal label.
Alternatively, since it’s very expensive to get human labels, and we might not
yet have an end-task in mind, we can use natural texts to do self-supervision. In
self-supervision we pair up a natural discourse with a pseudo-document created by
changing the ordering. Since naturally-ordered discourses are more coherent than
random permutation (Lin et al., ), a successful coherence algorithm should pre-
fer the original ordering.
Self-supervision has been implemented in  ways. In the sentence order dis-
crimination task (Barzilay and Lapata, ), we compare a document to a random
permutation of its sentence. A model is considered correct for an (original, per-
muted) test pair if it ranks the original document higher. Given k documents, we can
compute n permutations, resulting in kn pairs each with one original document and
one permutation, to use in training and testing.
In the sentence insertion task (Chen et al., ) we take a document, remove
one of the n sentences s, and create n− copies of the document with s inserted into
each position. The task is to decide which of the n documents is the one with the
original ordering, distinguishing the original position for s from all other positions.
Insertion is harder than discrimination since we are comparing documents that differ
by only one sentence.
Finally, in the sentence order reconstruction task (Lapata, ), we take a
document, randomize the sentences, and train the model to put them back in the
correct order. Again given k documents, we can compute n permutations, resulting
in kn pairs each with one original document and one permutation, to use in training
and testing. Reordering is of course a much harder task than simple classiﬁcation.
Representation learning models for local coherence
The third kind of local coherence is topical or semantic ﬁeld coherence. Discourses
cohere by talking about the same topics and subtopics, and drawing on the same
semantic ﬁelds in doing so.
The ﬁeld was pioneered by a series of unsupervised models in the s of this
kind of coherence that made use of lexical cohesion (Halliday and Hasan, ):
lexical cohesion
the sharing of identical or semantically related words in nearby sentences. Morris
and Hirst () computed lexical chains of words (like pine, bush trees, trunk) that
occurred through a discourse and that were related in Roget’s Thesaurus (by being in
the same category, or linked categories). They showed that the number and density
of chain correlated with the topic structure. The TextTiling algorithm of Hearst
TextTiling
() computed the cosine between neighboring text spans (the normalized dot
product of vectors of raw word counts), again showing that sentences or paragraph in

REPRESENTATION LEARNING MODELS FOR LOCAL COHERENCE
a subtopic have high cosine with each other, but not with sentences in a neighboring
subtopic.
A third early model, the LSA Coherence method of Foltz et al. () was the
ﬁrst to use embeddings, modeling the coherence between two sentences as the co-
sine between their LSA sentence embedding vectors, computing embeddings for a
sentence s by summing the embeddings of its words w:
sim(s,t) = cos(s,t)
w∈t
w)
= cos(
w∈s
w,
and deﬁning the overall coherence of a text as the average similarity over all pairs of
adjacent sentences si and si+:
coherence(T) =
i=
cos(si,si+)
n−
n−
Modern neural representation-learning coherence models, beginning with Li et al.
(), draw on the intuitions of these early unsupervised models for learning sen-
tence representations and measuring how they change between neighboring sen-
tences. But the new models also draw on the idea pioneered by Barzilay and Lapata
() of self-supervision. That is, unlike say coherence relation models, which
train on hand-labeled representations for RST or PDTB, these models are trained to
distinguish natural discourses from unnatural discourses formed by scrambling the
order of sentences, thus using representation learning to discover the features that
matter for at least the ordering aspect of coherence.
Here we present one such model, the local coherence discriminator (LCD) (Xu
et al., ). Like early models, LCD computes the coherence of a text as the av-
erage of coherence scores between consecutive pairs of sentences. But unlike the
early unsupervised models, LCD is a self-supervised model trained to discriminate
consecutive sentence pairs (si,si+) in the training documents (assumed to be coher-
ent) from (constructed) incoherent pairs (si,s′). All consecutive pairs are positive
examples, and the negative (incoherent) partner for a sentence si is another sentence
uniformly sampled from the same document as si.
Fig. . describes the architecture of the model fθ, which takes a sentence
pair and returns a score, higher scores for more coherent pairs. Given an input
sentence pair s and t, the model computes sentence embeddings s and t (using any
sentence embeddings algorithm), and then concatenates four features of the pair: ()
the concatenation of the two vectors () their difference s−t; () the absolute value
of their difference |s − t|; () their element-wise product s ⊙ t. These are passed
through a one-layer feedforward network to output the coherence score.
The model is trained to make this coherence score higher for real pairs than for
negative pairs. More formally, the training objective for a corpus C of documents d,
each of which consists of a list of sentences si, is:
d∈C
si∈d
p(s′|si)
[L( fθ(si,si+), fθ(si,s′))]
Lθ =
Ep(s′|si) is the expectation with respect to the negative sampling distribution con-
ditioned on si: given a sentence si the algorithms samples a negative sentence s′
See Chapter  for more on LSA embeddings; they are computed by applying SVD to the term-
document matrix (each cell weighted by log frequency and normalized by entropy), and then the ﬁrst
dimensions are used as the embedding.

CHAPTER
DISCOURSE COHERENCE
tion:
The role of the loss function is
ge f+ = f✓(si, si+) to be high while
i, s) to be low. Common losses such as
og loss can all be used. Through exper-
lidation, we found that margin loss to
r for this problem. Speciﬁcally, L takes
m: L(f+, f−) = max(, ⌘ − f+ + f−)
the margin hyperparameter.
samples:
Technically, we are free to
Figure : Generic architecture for our proposed model.
Figure .
The architecture of the LCD model of document coherence, showing the
computation of the score for a pair of sentences s and t. Figure from Xu et al. ().
y sentence s to form a negative pair
However, because of potential differ-
enre, topic and writing style, such neg-
ht cause the discriminative model to
unrelated to coherence. Therefore, we
sentences from the same document to
Pre-trained Generative Model as the
Sentence Encoder
uniformly over the other sentences in the same document. L is a loss function that
takes two scores, one for a positive pair and one for a negative pair, with the goal of
encouraging f + = fθ(si,si+) to be high and f − = fθ(si,s′)) to be low. Fig. .
use the margin loss l( f +, f −) = max(,η − f + + f −) where η is the margin hyper-
parameter.
negative pairs. Speciﬁcally, suppose si
m document dk with length nk, then
a uniform distribution over the nk −
{sj}j = i from dk. For a document with
es, there are n− positive pairs, and
−)/ negative pairs. It turns out that
tic number of negatives provides a rich
rning signal, while at the same time, is
ohibitively large to be effectively cov-
sampling procedure.
In practice, we
new set of negatives each time we see
t, hence after many epochs, we can ef-
over the space for even very long doc-
ection . discusses further details on
Our model can work with any pre-trained sen-
tence encoder, ranging from the most simplistic
average GloVe (Pennington et al., ) embed-
dings to more sophisticated supervised or unsu-
pervised pre-trained sentence encoders (Conneau
et al., ). As mentioned in the introduction,
since generative models can often be turned into
sentence encoder, generative coherence model can
be leveraged by our model to beneﬁt from the
advantages of both generative and discriminative
training, similar to (Kiros et al., ; Peters et al.,
). After initialization, we freeze the genera-
tive model parameters to avoid overﬁtting.
Xu et al. () also give a useful baseline algorithm that itself has quite high
performance in measuring perplexity: train an RNN language model on the data,
and compute the log likelihood of sentence si in two ways, once given the preceding
context (conditional log likelihood) and once with no context (marginal log likeli-
hood). The difference between these values tells us how much the preceding context
improved the predictability of si, a predictability measure of coherence.
Training models to predict longer contexts than just consecutive pairs of sen-
tences can result in even stronger discourse representations. For example a Trans-
former language model trained with a contrastive sentence objective to predict text
up to a distance of ± sentences improves performance on various discourse coher-
ence tasks (Iter et al., ).
Language-model style models are generally evaluated by the methods of Sec-
tion .., although they can also be evaluated on the RST and PDTB coherence
relation tasks.
In Section , we will experimentally show that
el Architecture
Global Coherence
while we do beneﬁt from strong pre-trained en-
coders, the fact that our local discriminative model
improves over previous methods is independent of
the choice of sentence encoder.
Experiments
Evaluation Tasks
A discourse must also cohere globally rather than just at the level of pairs of sen-
tences. Consider stories, for example. The narrative structure of stories is one of
the oldest kinds of global coherence to be studied. In his inﬂuential Morphology of
the Folktale, Propp () models the discourse structure of Russian folktales via
a kind of plot grammar. His model includes a set of character categories he called
dramatis personae, like Hero, Villain, Donor, or Helper, and a set of events he
called functions (like “Villain commits kidnapping”, “Donor tests Hero”, or “Hero
is pursued”) that have to occur in particular order, along with other components.
Propp shows that the plots of each of the fairy tales he studies can be represented as
c neural architecture that we use for f✓
ed in Figure . We assume the use of
rained sentence encoder, which is dis-
he next section.
n input sentence pair, the sentence en-
s the sentences to real-valued vectors S
then compute the concatenation of the
features: () concatenation of the two
T); () element-wise difference S −T;
t-wise product S ⇤T; () absolute value
-wise difference |S − T|. The concate-
ure representation is then fed to a one-
Following Nguyen and Joty () and other pre-
vious work, we evaluate our models on the dis-
crimination and insertion tasks. Additionally, we
evaluate on the paragraph reconstruction task in
open-domain settings, in a similar manner to Li
and Jurafsky ().
In the discrimination task, a document is com-
to output the coherence score.
ice, we make our overall coherence
rectional, by training a forward model
pared to a random permutation of its sentences,

GLOBAL COHERENCE
a sequence of these functions, different tales choosing different subsets of functions,
but always in the same order. Indeed Lakoff () showed that Propp’s model
amounted to a discourse grammar of stories, and in recent computational work Fin-
layson () demonstrates that some of these Proppian functions could be induced
from corpora of folktale texts by detecting events that have similar actions across
stories. Bamman et al. () showed that generalizations over dramatis personae
could be induced from movie plot summaries on Wikipedia. Their model induced
latent personae from features like the actions the character takes (e.g., Villains stran-
gle), the actions done to them (e.g., Villains are foiled and arrested) or the descriptive
words used of them (Villains are evil).
In this section we introduce two kinds of such global discourse structure that
have been widely studied computationally. The ﬁrst is the structure of arguments:
the way people attempt to convince each other in persuasive essays by offering
claims and supporting premises. The second is somewhat related: the structure of
scientiﬁc papers, and the way authors present their goals, results, and relationship to
prior work in their papers.
Argumentation Structure
The ﬁrst type of global discourse structure is the structure of arguments. Analyzing
people’s argumentation computationally is often called argumentation mining.
argumentation
mining
The study of arguments dates back to Aristotle, who in his Rhetorics described
three components of a good argument: pathos (appealing to the emotions of the
pathos
listener), ethos (appealing to the speaker’s personal character), and logos (the logical
ethos
logos
structure of the argument).
Most of the discourse structure studies of argumentation have focused on logos,
particularly via building and training on annotated datasets of persuasive essays or
other arguments (Reed et al. , Stab and Gurevych a, Peldszus and Stede
, Habernal and Gurevych , Musi et al. ). Such corpora, for exam-
ple, often include annotations of argumentative components like claims (the central
claims
component of the argument that is controversial and needs support) and premises
premises
(the reasons given by the author to persuade the reader by supporting or attacking
the claim or other premises), as well as the argumentative relations between them
argumentative
relations
like SUPPORT and ATTACK.
Consider the following example of a persuasive essay from Stab and Gurevych
(b). The ﬁrst sentence () presents a claim (in bold). () and () present two
premises supporting the claim. () gives a premise supporting premise ().
“() Museums and art galleries provide a better understanding
about arts than Internet. () In most museums and art galleries, de-
tailed descriptions in terms of the background, history and author are
provided. () Seeing an artwork online is not the same as watching it
with our own eyes, as () the picture online does not show the texture
or three-dimensional structure of the art, which is important to study.”
Thus this example has three argumentative relations: SUPPORT(,), SUPPORT(,)
and SUPPORT(,). Fig. . shows the structure of a much more complex argu-
ment.
While argumentation mining is clearly related to rhetorical structure and other
kinds of coherence relations, arguments tend to be much less local; often a persua-
sive essay will have only a single main claim, with premises spread throughout the
text, without the local coherence we see in coherence relations.

military purposes]Claim, I strongly believe that [this technology is beneﬁcial to
humanity]MajorClaim. It is likely that [this technology bears some important cures which
will significantly improve life conditions]Claim.
The conclusion of the essay starts with an attacking claim followed by the restatement of
the major claim. The last sentence includes another claim that summarizes the most im-
portant points of the author’s argumentation. Figure  shows the entire argumentation
structure of the example essay.
CHAPTER
DISCOURSE COHERENCE
Figure .
Argumentation structure of a persuasive essay. Arrows indicate argumentation relations, ei-
ther of SUPPORT (with arrowheads) or ATTACK (with circleheads); P denotes premises. Figure from Stab and
Gurevych ().
Figure
Argumentation structure of the example essay. Arrows indicate argumentative relations.
Arrowheads denote argumentative support relations and circleheads attack relations. Dashed
lines indicate relations that are encoded in the stance attributes of claims. “P” denotes premises.
Algorithms for detecting argumentation structure often include classiﬁers for
distinguishing claims, premises, or non-argumentation, together with relation clas-
siﬁers for deciding if two spans have the SUPPORT, ATTACK, or neither relation
(Peldszus and Stede, ). While these are the main focus of much computational
work, there is also preliminary efforts on annotating and detecting richer semantic
relationships (Park and Cardie , Hidey et al. ) such as detecting argumen-
tation schemes, larger-scale structures for argument like argument from example,
argumentation
schemes
or argument from cause to effect, or argument from consequences (Feng and
Hirst, ).
Another important line of research is studying how these argument structure (or
other features) are associated with the success or persuasiveness of an argument
(Habernal and Gurevych , Tan et al. , Hidey et al. . Indeed, while it
is Aristotle’s logos that is most related to discourse structure, Aristotle’s ethos and
pathos techniques are particularly relevant in the detection of mechanisms of this
sort of persuasion. For example scholars have investigated the linguistic realization
persuasion
of features studied by social scientists like reciprocity (people return favors), social
proof (people follow others’ choices), authority (people are inﬂuenced by those
with power), and scarcity (people value things that are scarce), all of which can
be brought up in a persuasive argument (Cialdini, ). Rosenthal and McKeown
() showed that these features could be combined with argumentation structure
to predict who inﬂuences whom on social media, Althoff et al. () found that
linguistic models of reciprocity and authority predicted success in online requests,
while the semisupervised model of Yang et al. () detected mentions of scarcity,
commitment, and social identity to predict the success of peer-to-peer lending plat-
forms.
See Stede and Schneider () for a comprehensive survey of argument mining.
The structure of scientiﬁc discourse
Scientiﬁc papers have a very speciﬁc global structure: somewhere in the course of
the paper the authors must indicate a scientiﬁc goal, develop a method for a solu-
tion, provide evidence for the solution, and compare to prior work. One popular

SUMMARY
annotation scheme for modeling these rhetorical goals is the argumentative zon-
ing model of Teufel et al. () and Teufel et al. (), which is informed by the
argumentative
zoning
idea that each scientiﬁc paper tries to make a knowledge claim about a new piece
of knowledge being added to the repository of the ﬁeld (Myers, ). Sentences
in a scientiﬁc paper can be assigned one of  tags; Fig. . shows  (shortened)
examples of labeled sentences.
Category
Description
Example
AIM
Statement of speciﬁc research goal, or
hypothesis of current paper
“The aim of this process is to examine the role that
training plays in the tagging process”
OWN METHOD New Knowledge claim,
own work:
methods
“In order for it to be useful for our purposes, the
following extensions must be made:”
OWN RESULTS Measurable/objective outcome of own
work
“All the curves have a generally upward trend but
always lie far below backoff (% error rate)”
USE
Other work is used in own work
“We use the framework for the allocation and
transfer of control of Whittaker....”
GAP WEAK
Lack of solution in ﬁeld, problem with
other solutions
“Here, we will produce experimental evidence
suggesting that this simple model leads to serious
overestimates”
SUPPORT
Other work supports current work or is
supported by current work
“Work similar to that described here has been car-
ried out by Merialdo (), with broadly similar
conclusions.”
“This result challenges the claims of...”
ANTISUPPORT
Clash with other’s results or theory; su-
periority of own work
Figure .
Examples for  of the  labels from the Argumentative Zoning labelset (Teufel et al., ).
Teufel et al. () and Teufel et al. () develop labeled corpora of scientiﬁc
articles from computational linguistics and chemistry, which can be used as supervi-
sion for training standard sentence-classiﬁcation architecture to assign the  labels.
Summary
In this chapter we introduced local and global models for discourse coherence.
Discourses are not arbitrary collections of sentences; they must be coherent.
Among the factors that make a discourse coherent are coherence relations
between the sentences, entity-based coherence, and topical coherence.
Various sets of coherence relations and rhetorical relations have been pro-
posed.
The relations in Rhetorical Structure Theory (RST) hold between
spans of text and are structured into a tree. Because of this, shift-reduce
and other parsing algorithms are generally used to assign these structures.
The Penn Discourse Treebank (PDTB) labels only relations between pairs of
spans, and the labels are generally assigned by sequence models.
Entity-based coherence captures the intuition that discourses are about an
entity, and continue mentioning the entity from sentence to sentence. Cen-
tering Theory is a family of models describing how salience is modeled for
discourse entities, and hence how coherence is achieved by virtue of keeping
the same discourse entities salient over the discourse. The entity grid model
gives a more bottom-up way to compute which entity realization transitions
lead to coherence.

CHAPTER
DISCOURSE COHERENCE
Many different genres have different types of global coherence. Persuasive
essays have claims and premises that are extracted in the ﬁeld of argument
mining, scientiﬁc articles have structure related to aims, methods, results, and
comparisons.
Bibliographical and Historical Notes
Coherence relations arose from the independent development of a number of schol-
ars, including Hobbs () idea that coherence relations play an inferential role for
the hearer, and the investigations by Mann and Thompson () of the discourse
structure of large texts. Other approaches to coherence relations and their extrac-
tion include Segmented Discourse Representation Theory (SDRT) (Asher and Las-
SDRT
carides , Baldridge et al. ) and the Linguistic Discourse Model (Polanyi
, Scha and Polanyi , Polanyi et al. ). Wolf and Gibson () argue
that coherence structure includes crossed bracketings, which make it impossible to
represent as a tree, and propose a graph representation instead. A compendium of
over  relations that have been proposed in the literature can be found in Hovy
RST parsing was ﬁrst proposed by Marcu (), and early work was rule-based,
focused on discourse markers (Marcu, a). The creation of the RST Discourse
TreeBank (Carlson et al. , Carlson and Marcu ) enabled a wide variety
of machine learning algorithms, beginning with the shift-reduce parser of Marcu
() that used decision trees to choose actions, and continuing with a wide variety
of machine learned parsing methods (Soricut and Marcu , Sagae , Hernault
et al. , Feng and Hirst , Surdeanu et al. , Joty et al. ) and chunkers
(Sporleder and Lapata, ). Subba and Di Eugenio () integrated sophisticated
semantic information into RST parsing. Ji and Eisenstein () ﬁrst applied neural
models to RST parsing neural models, leading to the modern set of neural RST
models (Li et al. , Li et al. b, Braud et al. , Yu et al. , inter alia)
as well as neural segmenters (Wang et al. b). and neural PDTB parsing models
(Ji and Eisenstein , Qin et al. , Qin et al. ).
Barzilay and Lapata () pioneered the idea of self-supervision for coher-
ence: training a coherence model to distinguish true orderings of sentences from
random permutations. Li et al. () ﬁrst applied this paradigm to neural sentence-
representation, and many neural self-supervised models followed (Li and Jurafsky
, Logeswaran et al. , Lai and Tetreault , Xu et al. , Iter et al.
Another aspect of global coherence is the global topic structure of a text, the way
the topics shift over the course of the document. Barzilay and Lee () introduced
an HMM model for capturing topics for coherence, and later work expanded this
intuition (Soricut and Marcu , Elsner et al. , Louis and Nenkova , Li
and Jurafsky ).
The relationship between explicit and implicit discourse connectives has been
a fruitful one for research. Marcu and Echihabi () ﬁrst proposed to use sen-
tences with explicit relations to help provide training data for implicit relations, by
removing the explicit relations and trying to re-predict them as a way of improv-
ing performance on implicit connectives; this idea was reﬁned by Sporleder and
Lascarides (), (Pitler et al., ), and Rutherford and Xue (). This rela-

BIBLIOGRAPHICAL AND HISTORICAL NOTES
tionship can also be used as a way to create discourse-aware representations. The
DisSent algorithm (Nie et al., ) creates the task of predicting explicit discourse
markers between two sentences. They show that representations learned to be good
at this task also function as powerful sentence representations for other discourse
tasks.
The idea of entity-based coherence seems to have arisen in multiple ﬁelds in the
mid-s, in functional linguistics (Chafe, ), in the psychology of discourse
processing (Kintsch and Van Dijk, ), and in the roughly contemporaneous work
of Grosz, Sidner, Joshi, and their colleagues. Grosz (a) addressed the focus
of attention that conversational participants maintain as the discourse unfolds. She
deﬁned two levels of focus; entities relevant to the entire discourse were said to
be in global focus, whereas entities that are locally in focus (i.e., most central to
a particular utterance) were said to be in immediate focus. Sidner ;  de-
scribed a method for tracking (immediate) discourse foci and their use in resolving
pronouns and demonstrative noun phrases. She made a distinction between the cur-
rent discourse focus and potential foci, which are the predecessors to the backward-
and forward-looking centers of Centering theory, respectively. The name and further
roots of the centering approach lie in papers by Joshi and Kuhn () and Joshi and
Weinstein (), who addressed the relationship between immediate focus and the
inferences required to integrate the current utterance into the discourse model. Grosz
et al. () integrated this work with the prior work of Sidner and Grosz. This led
to a manuscript on centering which, while widely circulated since , remained
unpublished until Grosz et al. (). A collection of centering papers appears in
Walker et al. (b). See Karamanis et al. () and Poesio et al. () for a
deeper exploration of centering and its parameterizations, and the History section of
Chapter  for more on the use of centering on coreference.
The grid model of entity-based coherence was ﬁrst proposed by Barzilay and
Lapata () drawing on earlier work by Lapata () and Barzilay, and then
extended by them Barzilay and Lapata () and others with additional features
(Elsner and Charniak , , Feng et al. , Lin et al. ) a model that
projects entities into a global graph for the discourse (Guinaudeau and Strube ,
Mesgar and Strube ), and a convolutional model to capture longer-range entity
dependencies (Nguyen and Joty, ).
Theories of discourse coherence have also been used in algorithms for interpret-
ing discourse-level linguistic phenomena, including verb phrase ellipsis and gap-
ping (Asher , Kehler ), and tense interpretation (Lascarides and Asher
, Kehler , Kehler ). An extensive investigation into the relationship
between coherence relations and discourse connectives can be found in Knott and
Dale ().
Useful surveys of discourse processing and structure include Stede () and
Webber et al. ().
Andy Kehler wrote the Discourse chapter for the  ﬁrst edition of this text-
book, which we used as the starting point for the second-edition chapter, and there
are some remnants of Andy’s lovely prose still in this third-edition coherence chap-
ter.

CHAPTER
DISCOURSE COHERENCE
Exercises
. Finish the Centering Theory processing of the last two utterances of (.),
and show how (.) would be processed. Does the algorithm indeed mark
(.) as less coherent?
. Select an editorial column from your favorite newspaper, and determine the
discourse structure for a – sentence portion. What problems did you
encounter? Were you helped by superﬁcial cues the speaker included (e.g.,
discourse connectives) in any places?